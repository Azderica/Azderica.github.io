{"hash":"dffc58dc3840349261c8b8f2b24f6d6644d2fe0c","data":{"post":{"title":"[Review] Clean Code 내용정리 - 3","path":"/03-clean-code/","date":"6. November 2020","timeToRead":11,"tags":[{"id":"Review","title":"Review","path":"/tag/Review/"},{"id":"Book","title":"Book","path":"/tag/Book/"},{"id":"CleanCode","title":"CleanCode","path":"/tag/CleanCode/"},{"id":"Clean-code","title":"Clean-code","path":"/tag/Clean-code/"},{"id":"Java","title":"Java","path":"/tag/Java/"}],"description":" Clean code 책 정리 3편입니다. ","content":"<h1 id=\"clean-code-내용-정리---3\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 3</h1>\n<h2 id=\"7장-오류-처리\"><a href=\"#7%EC%9E%A5-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7장. 오류 처리</h2>\n<p>깨끗한 코드와 오류 처리는 연관성이 존재한다.</p>\n<h3 id=\"오류-코드보다-예외를-사용하기\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>오류 코드보다 예외를 사용하기</h3>\n<p>오류가 발생 시 예외를 던지는 방법이 논리와 오류 처리 코드가 뒤섞이지 않아 코드가 더 깔끔해진다.</p>\n<h3 id=\"try-catch-finally-문부터-작성하기\"><a href=\"#try-catch-finally-%EB%AC%B8%EB%B6%80%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Try-Catch-Finally 문부터 작성하기</h3>\n<p>예외가 발생할 코드를 짤 경우에는 try-catch-finally 문으로 시작하는 것이 좋다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecordedGrip</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">retrieveSection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sectionName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">FileInputStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>sectionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StorageException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"retrieval error\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecordedGrip</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"미확인unchecked-예외를-사용하기\"><a href=\"#%EB%AF%B8%ED%99%95%EC%9D%B8unchecked-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>미확인(unchecked) 예외를 사용하기</h3>\n<p>확인된 예외는 몇 가지 장점을 제공하지만, 반드시 필요하지는 않다.</p>\n<ul>\n<li>확인된 오류가 치르는 비용에 대해서 잘 생각해보아야 한다.</li>\n<li>확인된 예외는 OCP(Open Closed Principle)를 위반한다.</li>\n<li>Ex) 확인된 예외를 던졌으나, catch가 세 단계 위에 있다면 모든 선언부에 예외가 필요하다. 대규모 시스템에서는 힘들다.</li>\n</ul>\n<h3 id=\"예외에-의미를-제공하기\"><a href=\"#%EC%98%88%EC%99%B8%EC%97%90-%EC%9D%98%EB%AF%B8%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외에 의미를 제공하기</h3>\n<ul>\n<li>예외를 던질 때 전후 상황을 충분히 덧붙일 때, 오류가 발생한 원인과 위치를 찾을 수 있다.</li>\n<li>\n<p>오류 메시지에 정보(실패한 연산 이름, 실패 유형)등을 함께 던진다.</p>\n<ul>\n<li>로깅 기능을 통해 충분한 정보를 제공하자.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"호출자를-고려해-예외-클래스를-정의하기\"><a href=\"#%ED%98%B8%EC%B6%9C%EC%9E%90%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%B4-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>호출자를 고려해 예외 클래스를 정의하기</h3>\n<p>오류를 잡아내는 다양한 방법이 존재한다.</p>\n<ul>\n<li>외부 API를 사용할 때는 감싸기 기법을 사용하는 것은 좋은 방법이다.</li>\n<li>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalPort</span> port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  port<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PortDeviceFailure</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reportError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li>예외 클래스가 하나만 있어도 되는 경우가 많다.</li>\n<li>더 나아가, 한 예외는 잡아내고 다른 예외는 무시해도 되는 경우에는 여러 예외 케이스를 사용하는 것도 방법이다.</li>\n</ul>\n<h3 id=\"정상-흐름을-정의하기\"><a href=\"#%EC%A0%95%EC%83%81-%ED%9D%90%EB%A6%84%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정상 흐름을 정의하기</h3>\n<p>특수 사례 패턴을 사용하기</p>\n<ul>\n<li>클래스나 객체로 예외적인 상황을 캡슐화하여 처리할 수 있음</li>\n</ul>\n<h3 id=\"null을-반환하지-말기\"><a href=\"#null%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EC%A7%80-%EB%A7%90%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null을 반환하지 말기</h3>\n<p>null에 대한 과한 확인은 문제가 될 수 있다. 즉, 예외나 <strong>특수 사례 패턴</strong>이 더 좋은 경우가 많다.</p>\n<h3 id=\"null을-전달하지-말기\"><a href=\"#null%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EC%A7%80-%EB%A7%90%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null을 전달하지 말기</h3>\n<p>인수에 null이 넘어가지 않는 정책이 있다면, 많은 실수를 줄일 수 있다.</p>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h3>\n<ul>\n<li>깨끗한 코드는 읽기도 좋아야 하지만, <strong>안정성</strong>도 높아야 한다.</li>\n<li>오류 처리를 프로그램 논리와 분리해 독자적인 사안으로 고려하면 튼튼하고 깨끗한 코드 작성이 가능</li>\n</ul>\n<h2 id=\"8장-경계\"><a href=\"#8%EC%9E%A5-%EA%B2%BD%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8장. 경계</h2>\n<p>시스템에 들어가는 모든 소프트웨어를 직접 개발하는 경우는 드물다.</p>\n<h3 id=\"외부-코드-사용하기\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>외부 코드 사용하기</h3>\n<p>인터페이스 제공자와 사용자 사이에는 이해관계가 들어간다. 제공자는 최대한 적용성을 늘리기를 원하지만, 사용자는 자신의 요구에 집중하는 인터페이스를 희망한다.</p>\n<p>즉, <code class=\"language-text\">Map</code>과 같은 <code class=\"language-text\">경계 인터페이스를</code> 사용할 때는 이용하는 클래스나 계열 밖으로 노출되지 않도록 주의해야 한다.(캡슐화도 한 방법)</p>\n<h3 id=\"경계를-살피고-익히기\"><a href=\"#%EA%B2%BD%EA%B3%84%EB%A5%BC-%EC%82%B4%ED%94%BC%EA%B3%A0-%EC%9D%B5%ED%9E%88%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>경계를 살피고 익히기</h3>\n<ul>\n<li>외부 코드를 사용하면 적은 시간에 많은 기능을 넣을 수 있는 장점이 존재.</li>\n<li>\n<p>그러나, 테스트를 해서 진행하는 방법이 바람직하다.</p>\n<ul>\n<li>이러한 간단한 테스트 케이스를 사용해 익히는 방법을 <strong>학습 테스트라고</strong> 부른다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"log4j-익히기\"><a href=\"#log4j-%EC%9D%B5%ED%9E%88%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>log4j 익히기</h3>\n<p>로깅을 직접 구현하기보다는 아파치의 log4j 패키지를 사용하자.</p>\n<p>간단한 예시 코드는 다음과 같다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Logger</span> logger<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Before</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">removeAllApenders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRootLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAllAppenders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">basicLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">BasicConfigurator</span><span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"basicLogger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addAppenderWithStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleAppender</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternLayout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p %t %m%n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">ConsoleAppender</span><span class=\"token punctuation\">.</span>SYSTEM_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addAppenderWithStream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addAppenderWithoutSteam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleAppender</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternLayout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p %t %m%n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addAppenderWithoutStream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"학습-테스트는-공짜-이상\"><a href=\"#%ED%95%99%EC%8A%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EA%B3%B5%EC%A7%9C-%EC%9D%B4%EC%83%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>학습 테스트는 공짜 이상</h3>\n<ul>\n<li>학습 테스트에 드는 비용은 없으며, 필요한 지식만 확보하는 손쉬운 방법</li>\n<li>투자하는 노력보다 얻는 성과가 더 크다</li>\n<li>패키지가 새 버전이 나오면 학습 테스트를 돌려 예상대로 나오는지 체크한다.</li>\n</ul>\n<h3 id=\"아직-존재하지-않는-코드를-사용하기\"><a href=\"#%EC%95%84%EC%A7%81-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>아직 존재하지 않는 코드를 사용하기</h3>\n<ul>\n<li>아는 코드와 모르는 코드(미완성 코드)를 분리하기</li>\n<li>바라는 인터페이스를 구현하면 우리가 인터페이스를 전적으로 통제할 수 있다는 장점을 얻을 수 있음.</li>\n<li>이러한 설계는 테스트에서도 편하다.</li>\n</ul>\n<h3 id=\"깨끗한-경계\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%EA%B2%BD%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨끗한 경계</h3>\n<p>경계에서는 다양한 문제가 발생할 수 있다.</p>\n<p>따라서.</p>\n<ul>\n<li>통제 못하는 코드를 사용하는 경우에는 비용이 적게 구성해야 한다.</li>\n<li>경계에 위치한 코드는 깔끔하게 분리한다.</li>\n<li>외부 패키지에 의존하는 대신, 통제 가능한 우리 코드에 의존한다</li>\n<li>외부 패키지 호출 코드를 가능한 줄여서 경계를 관리한다</li>\n</ul>\n<h2 id=\"9장-단위-테스트\"><a href=\"#9%EC%9E%A5-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9장. 단위 테스트</h2>\n<p>제대로 된 테스트가 필요하다.</p>\n<h3 id=\"tdd-법칙-세가지\"><a href=\"#tdd-%EB%B2%95%EC%B9%99-%EC%84%B8%EA%B0%80%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TDD 법칙 세가지</h3>\n<ol>\n<li>실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않다.</li>\n<li>컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li>\n<li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li>\n</ol>\n<p>위 규칙을 잘 지키면, 테스트 코드와 실제 코드가 같이 나온다.</p>\n<h3 id=\"깨끗한-테스트-코드-유지하기\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨끗한 테스트 코드 유지하기</h3>\n<p>코드가 망가지기 시작하면 망가진다. 따라서, 테스트 코드는 실제 코드 못지않게 중요하게 짜야한다.</p>\n<h4 id=\"테스트는-유연성-유지보수성-재사용성을-제공한다\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9C%A0%EC%97%B0%EC%84%B1-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트는 유연성, 유지보수성, 재사용성을 제공한다.</h4>\n<ul>\n<li>단위 테스트는 코드에 유연성, 유지보수성, 재사용성을 제공하는 기둥이 된다.</li>\n<li>테스트 케이스가 있다면 많은 공포를 해결할 수 있다.</li>\n<li>테스트 코드가 지저분해질수록 실제 코드도 지저분해진다.</li>\n</ul>\n<h3 id=\"깨끗한-테스트-코드\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨끗한 테스트 코드</h3>\n<ul>\n<li>가독성 : 명료성, 단순성, 풍부한 표현력</li>\n</ul>\n<h4 id=\"도메인에-특화된-테스트-언어\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%ED%8A%B9%ED%99%94%EB%90%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>도메인에 특화된 테스트 언어</h4>\n<ul>\n<li>도메인에 특화된 언어(DSL)도 좋은 방법이다.</li>\n</ul>\n<h4 id=\"이중-표준\"><a href=\"#%EC%9D%B4%EC%A4%91-%ED%91%9C%EC%A4%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이중 표준</h4>\n<ul>\n<li>단순, 간결, 표현력이 풍부, 그러나 꼭 효율적인 필요는 없다.</li>\n</ul>\n<h3 id=\"테스트-당-assert-하나\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8B%B9-assert-%ED%95%98%EB%82%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 당 assert 하나</h3>\n<ul>\n<li>Assert 문은 하나가 좋지만, 때로는 여러 개를 써도 된다. (단, 최대한 줄여야 한다.)</li>\n</ul>\n<blockquote>\n<p>Tip) Assert문.</p>\n<p>정해진 조건에 맞지 않을 때 프로그램을 중단. ex) assert(표현식)</p>\n</blockquote>\n<ul>\n<li><strong>테스트 함수마다 한 개념만 테스트</strong></li>\n</ul>\n<h3 id=\"first\"><a href=\"#first\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>F.I.R.S.T</h3>\n<ul>\n<li>Fast(빠르게) : 테스트는 빠르게 돌아야 한다.</li>\n<li>Independent(독립적으로) : 각 테스트는 서로 의존하면 안 된다.</li>\n<li>Repeatable(반복 가능하게) : 테스트는 어떤 환경에서도 반복 가능해야 한다.</li>\n<li>Self-Validating(자가 검증하는) : 테스트는 부울(bool) 값으로 결과를 내야 한다.</li>\n<li>Timely(적시에) : 테스트는 적시에 작성해야 한다.</li>\n</ul>\n<h3 id=\"결론-1\"><a href=\"#%EA%B2%B0%EB%A1%A0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<ul>\n<li>테스트 코드는 실제 코드의 유연성, 유지보수성, 재사용성을 보존하고 강화해야 한다.</li>\n<li>도메인 특화 언어(DSL, Domain Specific Language)를 구성하면 테스트 코드가 짜기 쉬워진다.</li>\n</ul>\n<h2 id=\"10장-클래스\"><a href=\"#10%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>10장. 클래스</h2>\n<h3 id=\"클래스-체계\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B2%B4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스 체계</h3>\n<p>추상화 단계는 순차적으로 내려간다.</p>\n<ul>\n<li>public, private, 비공개 인스턴스 변수 순으로 진행된다.</li>\n</ul>\n<h4 id=\"캡슐화\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>캡슐화</h4>\n<p>꼭 유지해야 하는 것은 아니나, 캡슐화를 푸는 방법은 최후의 수단입니다.</p>\n<h3 id=\"클래스는-작아야-한다\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EC%9E%91%EC%95%84%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스는 작아야 한다.</h3>\n<p>하나의 클래스는 적은 책임을 얻어야 한다.</p>\n<p>즉, 클래스 설명은 if, and, or, but 등의 단어를 제외하고 25 단어 내외로 가능해야 한다.</p>\n<h4 id=\"단일-책임-원칙srp-single-responsibility-principle\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99srp-single-responsibility-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단일 책임 원칙(SRP, Single Responsibility Principle)</h4>\n<ul>\n<li>클래스나 모듈을 변경할 이유가 하나뿐이어야 한다는 원칙.</li>\n<li>객체 지향 설계에서 더우 중요한 개념이다.</li>\n</ul>\n<h4 id=\"응집도\"><a href=\"#%EC%9D%91%EC%A7%91%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>응집도</h4>\n<ul>\n<li>클래스는 인스턴스 변수 수가 적어야 한다.</li>\n<li>각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 한다.</li>\n<li>'함수를 작게, 매개변수 목록을 짧게'라는 전략으로 진행하고, 응집도가 높아지도록 새로운 클래스로 분리한다.</li>\n</ul>\n<h4 id=\"응집도를-유지하면-작은-클래스-여럿으로-구성된다\"><a href=\"#%EC%9D%91%EC%A7%91%EB%8F%84%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EB%A9%B4-%EC%9E%91%EC%9D%80-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%97%AC%EB%9F%BF%EC%9C%BC%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>응집도를 유지하면 작은 클래스 여럿으로 구성된다.</h4>\n<ul>\n<li>클래스가 응집력을 잃으면 쪼개야 한다.</li>\n<li>\n<p>3가지 룰을 사용한다.</p>\n<ol>\n<li>리팩터링한 프로그램은 좀 더 길고 서술적인 변수 이름을 사용</li>\n<li>리팩터링한 프로그램은 코드에 주석을 추가하는 수단으로 함수 선언과 클래스 선언을 활용</li>\n<li>가독성을 높이기 위해 공백을 추가하고 형식을 맞춤</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"변경하기-쉬운-클래스\"><a href=\"#%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변경하기 쉬운 클래스</h3>\n<p>대표적으로 수정하기 어려운 코드가 SQL 클래스이다. 잠재적으로 수정되는 여지를 남기는 것이 좋다.</p>\n<h4 id=\"변경으로부터-격리\"><a href=\"#%EB%B3%80%EA%B2%BD%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0-%EA%B2%A9%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변경으로부터 격리</h4>\n<ul>\n<li>구체적인 클래스와 추상 클래스의 사용이 중요하다. 즉, 인터페이스와 추상 클래스가 중요하다.</li>\n<li>시스템의 결합도를 낮추면 유연성과 재사용성이 높아지고 각 요소를 이해하기 쉬워진다.</li>\n<li>\n<p>이는 클래스 설계 원칙(DIP, Dependency Inversion Principle)을 따르는 클래스를 지킬 수 있다.</p>\n<ul>\n<li>DIP : 상세한 구현이 아니라 추상화에 의존한다는 원칙</li>\n</ul>\n</li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/CleancodeBook.07cc2b7.7222e95f3717f77d5f3ed287711f1d64.jpg","size":{"width":860,"height":1021},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/CleancodeBook.a67b0b2.7222e95f3717f77d5f3ed287711f1d64.jpg 480w","/assets/static/CleancodeBook.07cc2b7.7222e95f3717f77d5f3ed287711f1d64.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 1021' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2da16ebb829634911838dadcc8b5c487'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2da16ebb829634911838dadcc8b5c487)' width='860' height='1021' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABMAEADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAABAUCAwYAAQj/xAAxEAACAQMDAQUGBgMAAAAAAAABAgMABBESITFBBRMzUWEGFCIycZEVFkKhwfBigdH/xAAXAQEBAQEAAAAAAAAAAAAAAAAAAQID/8QAGREBAQEBAQEAAAAAAAAAAAAAAAERAhIx/9oADAMBAAIRAxEAPwD6pql7qGN9MkiISwUamAyT0HnV1Y3tiCS59tOzkjkChAJCp2yFck9M8Cg15lUSBCy6z0zUs45BoK57v3kh2YEqMHoDvjNeESKpMc4YBR%2brJ/vO9Y9NYO1L517zS3XdBA2nVnG2K8jllaTS8enrkZqzpMM66s1e%2b01lZSrG8szMXKHRGTpx1OenTIrRQsWiVjya0idJrm3mk7Zs54XjWOGR%2b9VlGp1ZMAA488HGRTms9f3fc%2b03ZdqIo3Ny8xLMCSoRAdug%2bYc5/mgZ3LYuWHdhgUGojkDf7VVKIWViupWIGAw2/vFM8A8gb1XJDGynKgEjGQOlc7xrUpYyR7aJ9OOdiOagQ%2b%2bi6Ugf5f8AaOa1i0BdJwPWqJLSI9D96eaaDlE2j41jkXyIDU7tvAT6UpazQHZmA8qbW3gJWuZZ9SrKzPaXdfm7sQsjNMDchCGwACi6tsb9Oo/3xWmpPN2Wl327Z9oNLIr2JlCovyv3igHP0xWkOKHdLklyJYwNtI0fzmiKqnnjiAEjYJ4GM0tz6ArRL1Wb3uRGGTgDy%2bwq9%2btS71HKhWB1DUPUVF%2btBS1G23gJQbUZbeAlBZQ8Dr7xMmRqJzj0q55EQfEwFILm%2bEPtDYBQzrOZI9mxjjcjrx%2b9BoaDkdYb12lOkMgCk/vRlBz6p7kw6yqKuo45JrPSwJO3DQIUzExA68jeqGPwEB8xlxjDNgbefJo5nlhCRHEkrE6STjb1qk3LvhI0USfFqBOwxWMaBYdotRL6ljUjc85NP7bwFpElzIsUaqNRCgnIJJyaeWvgJWuMTpXdWwlU4ODQdvZyJJHqEOEYkl1y31U9Ka11bZdkeYoaeJjL3sEgV8aTkZBFE11SzSXABtG0oVdhKpJ14znPO1RNhsulnDDOWBALZ5pjXVPMXaW/hgwoyQAMfNyPWmEKlI1U7kVKuqySfEf/2Q==' /%3e%3c/svg%3e"}}},"context":{}}