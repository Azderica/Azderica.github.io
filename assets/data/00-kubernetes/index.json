{"hash":"6eab5397a2d6c11ddf021b778b38f6e8e79b2231","data":{"post":{"title":"[Kubernetes] Kubernetes란?","path":"/00-kubernetes/","date":"10. November 2020","timeToRead":13,"tags":[{"id":"Kubernetes","title":"Kubernetes","path":"/tag/Kubernetes/"},{"id":"Cloud","title":"Cloud","path":"/tag/Cloud/"},{"id":"Infra","title":"Infra","path":"/tag/Infra/"},{"id":"Backend","title":"Backend","path":"/tag/Backend/"}],"description":" 쿠버네티스에 대한 기본 내용을 정리한 글입니다. ","content":"<h1 id=\"kubernetes란\"><a href=\"#kubernetes%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes란.</h1>\n<p>쿠버네티스는 컨테이너화된 워크로드와 서비스를 관리하기 위한 오픈소스 플랫폼이이며 <strong>이식성, 확장가능성</strong>의 특징을 가집니다. 이 플랫폼은 컨테이너화된 애플리케이션을 배포하고 확장하는데 수동 프로세스가 필요하지 않습니다.</p>\n<p>이를 통해서 컨테이너를 실행하는 host 그룹을 함께 클러스팅이 가능하며, 클러스토를 쉽고 효율적으로 관리할 수 있다.</p>\n<blockquote>\n<p>용어에 대한 간단한 정리.</p>\n<ul>\n<li>컨테이너 : 호스트 OS상에 논리적인 구획(컨테이너)를 만들고, 어플리케이션을 작동시키기 위해 필요한 라이브러리나 어플리케이션 등을 하나로 모아서 마치 별도의 서버인 것처럼 사용할 수 있게 만든 것.</li>\n<li>클러스터 : 여러 대의 컴퓨터를 네트워크를 통해 하나의 단일 컴퓨터처럼 동작하도록 제작한 컴퓨터</li>\n</ul>\n<p>나중에 docker에 대해서도 추가적으로 설명하면서 더 자세하게 설명하겠습니다.</p>\n</blockquote>\n<p>쿠버네티스는 클라우드 전체로 호스트를 확장할 수 있고, 이러한 기능이 Apache Kafka 스트리밍과 같이 신속한 확장을 요구하는 클라우드 환경에서 큰 장점을 가집니다.</p>\n<br/>\n<h2 id=\"쿠버네티스의-기본-용어\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9A%A9%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿠버네티스의 기본 용어</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/99147045-cffd6a80-26c0-11eb-846e-dee35301857c.png\" alt=\"image\"></p>\n<ul>\n<li>마스터(Master) : 노드를 제어하고 전체 클러스터를 관리해주는 컨트롤러, 전체적인 제어/관리를 하기 위한 관리 서버</li>\n<li>노드(Nod) : 컨테이너가 배포될 물리 서버 또는 가상 머신이며 워커 노드(Worker Node)라고 불린다.</li>\n<li>파드(Pod) : 단일 노드에 배포된 하나 이상의 컨테이너 그룹이며, Pod라는 단위로 여러개의 컨테이너를 묶어서 파드 단위로 관리가 가능하다.</li>\n</ul>\n<br/>\n<h2 id=\"쿠버네티스의-특징\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿠버네티스의 특징</h2>\n<h3 id=\"1-여러회사들의-참여로-인한-큰-스케일과-커뮤니티-생태계\"><a href=\"#1-%EC%97%AC%EB%9F%AC%ED%9A%8C%EC%82%AC%EB%93%A4%EC%9D%98-%EC%B0%B8%EC%97%AC%EB%A1%9C-%EC%9D%B8%ED%95%9C-%ED%81%B0-%EC%8A%A4%EC%BC%80%EC%9D%BC%EA%B3%BC-%EC%BB%A4%EB%AE%A4%EB%8B%88%ED%8B%B0-%EC%83%9D%ED%83%9C%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 여러회사들의 참여로 인한 큰 스케일과 커뮤니티, 생태계</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/99147075-1fdc3180-26c1-11eb-88af-4702b0d1236e.png\" alt=\"image\"></p>\n<blockquote>\n<p>우리가 아는 많은 회사가 보인다.</p>\n</blockquote>\n<p>여러 회사의 노하우와 경험이 녹아있어서 다양한 커뮤니티와 좋은 생태계가 구성되어 있습니다. 대부분의 문제점이나 원하는 서비스를 만들려고 찾아보면 있는 것을 확인할 수 있습니다. CI(Continuous Integration), 컨테이너 서버리스, 머신러닝 등이 쿠버네티스 환경에서 잘 돌아갑니다.</p>\n<blockquote>\n<p>Kubernetes Community : <a href=\"https://kubernetes.io/ko/community/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kubernetes.io/ko/community/</a></p>\n</blockquote>\n<h3 id=\"2-다양한-배포-방식-지원\"><a href=\"#2-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B0%B0%ED%8F%AC-%EB%B0%A9%EC%8B%9D-%EC%A7%80%EC%9B%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 다양한 배포 방식 지원</h3>\n<p>쿠버네티스는 다양한 배포 방식을 지원합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/98945299-ae23ac80-2535-11eb-9fb2-f48b09e63f2c.png\" alt=\"image\"></p>\n<p>다음과 같이 Daemon Set, Deployment, stateful sets, Job등이 있으며, 각기 다른 특징을 가집니다.</p>\n<ul>\n<li><code class=\"language-text\">Daemont Set</code> : 디플로이먼트와 유사하게 파드를 생성하고 관리합니다. 디플로이먼트는 롤링 업데이트나 배포 일시 중지, 재개 등 배포 작업을 좀 더 세분화하여 조작하였다면, 데몬셋은 특정 노드 또는 모든 노드에 항상 실행되어야 할 특정 파드를 관리합니다.</li>\n<li><code class=\"language-text\">ReplicaSet</code> : 실행되는 파드 개수에 대한 가용성을 보증 하며 지정한 파드 개수만큼 항상 실행될 수 있도록 관리합니다.</li>\n<li><code class=\"language-text\">Deployment</code> : 레플리카셋의 상위 개념으로 볼 수도 있습니다. 레플리카셋을 생성하는 디플로이먼트를 정의할 수 있고, 배포 작업을 좀 더 세분화(롤링 업데이트 등) 하여 조작할 수 있는 기능을 제공합니다.</li>\n<li><code class=\"language-text\">Stateful Set</code> : 디플로이먼트와 유사하며 동일한 컨테이너 스펙을 기반으로 둔 파드들을 관리한다. 다만, 스테이트풀셋은 각 파드의 독자성을 유지하는 지속적인 식별자를 가집니다. (교체 불가)</li>\n<li><code class=\"language-text\">CronJob</code> : 크론잡은 지정한 일정에 특정 파드를 실행하는 잡을 실행할 수 있습니다.</li>\n<li><code class=\"language-text\">Job</code> : 잡은 하나 이상의 파드를 지정하고 지정된 수의 파드를 성공적으로 실행하도록 하는 설정, 노드의 H/W 장애나 재부팅 등으로 인해 파드가 정상 실행이 되지 않았을 경우 job은 새로운 파드를 시작하도록 할 수 있습니다.</li>\n<li><code class=\"language-text\">Replication Controller</code> : 레플리케이션컨트롤러 는 언제든지 지정된 수의 파드 레플리카가 실행 중임을 보장합니다. 즉, 레플리케이션 컨트롤러는 파드 또는 동일 종류의 파드의 셋이 항상 기동되고 사용 가능한지 확인할 수 있습니다.</li>\n</ul>\n<blockquote>\n<p>상세 설명은 해당 <a href=\"https://kubernetes.io/ko/docs/concepts/workloads/controllers/statefulset/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a> 에서...</p>\n</blockquote>\n<h3 id=\"3-ingress-기능-제공\"><a href=\"#3-ingress-%EA%B8%B0%EB%8A%A5-%EC%A0%9C%EA%B3%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Ingress 기능 제공</h3>\n<p><strong>인그레스</strong>는 클러스터 외부에서 클러스터 내부 서비스로 HTTP와 HTTPS 경로를 노출합니다. 트래픽 라우팅은 인그레스 리소스에 정의된 규칙에 의해 컨트롤이 가능합니다.</p>\n<p>다음은 인스레스가 모든 트래픽을 하나의 서비스로 보내는 간단한 예시입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/99082398-738a4480-2607-11eb-9741-c038299efc71.png\" alt=\"image\"></p>\n<p>인그레스는 외부에서 서비스로 접속이 가능한 URL, 로드 밸런스 트래픽, SSL / TLS 종료 그리고 이름-기반의 가상 호스팅을 제공하도록 구성할 수 있습니다. <strong>인그레스 컨트롤러</strong>는 일반적으로 로드 밸런서를 사용해서 인그레스를 수행할 책임이 있으며, 트래픽을 처리하는데 도움이 되도록 에지 라우터 또는 추가 프런트 엔드를 구성할 수도 있습니다.</p>\n<h3 id=\"4-클라우드-지원-기능\"><a href=\"#4-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%A7%80%EC%9B%90-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 클라우드 지원 기능</h3>\n<p>쿠버네티스는 부하에 따라 자동으로 서버를 늘리는 기능인 AutoScaling이 있고, IP를 할당받아 로드밸런서로 사용할 수 있습니다.</p>\n<p>쿠버네티스는 Cloud Controller를 이용하여 클라우드 연동을 손쉽게 확장할 수 있습니다. 그 덕분에 AWS, Google Cloud, MS Azure 등을 쉽게 사용할 수 있습니다.</p>\n<h3 id=\"5-namespcae--label을-통한-구분\"><a href=\"#5-namespcae--label%EC%9D%84-%ED%86%B5%ED%95%9C-%EA%B5%AC%EB%B6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Namespcae &#x26; Label을 통한 구분</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/99147381-ed800380-26c3-11eb-8353-23f58c65b722.png\" alt=\"image\"></p>\n<p>하나의 클러스터를 논리적으로 구분해서 사용할 수 있습니다. 하나의 클러스터에 다양한 프레임워크와 애플리케이션을 설치하기 때문에 기본 (system, default)외에 여러 개의 네임스페이스를 사용하는 것이 일반적입니다.</p>\n<h3 id=\"6-rbacrole-based-access-control\"><a href=\"#6-rbacrole-based-access-control\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. RBAC(Role-based access control)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/99147431-3fc12480-26c4-11eb-9e76-50b1b9d780c6.png\" alt=\"image\"></p>\n<p>RBAC는 접근 권한 시스텝입니다. 각각의 리소스에 대해 유저별로 CRUD스러운 권한을 손쉽게 지정할 수 있으며, 클러스터 전체에 적용하거나 특정 네임스페이스에 적용할 수 있습니다.</p>\n<h3 id=\"7-crdcustom-resource-definitation\"><a href=\"#7-crdcustom-resource-definitation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7. CRD(Custom Resource Definitation)</h3>\n<p>쿠버네티스가 제공하지 않는 기능을 기본 기능과 동일한 빙식으로 적용하고 사용할 수 있는 기능입니다.</p>\n<ul>\n<li>Ex) Knative 등등</li>\n</ul>\n<h3 id=\"8-auto-scaling\"><a href=\"#8-auto-scaling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8. Auto Scaling</h3>\n<p>CPU, memory 사용량, 접속자 수 등을 조절할 수 있습니다. 다음과 같은 종류가 있습니다.</p>\n<ul>\n<li>HPA(Horizontal Pod Autoscaler) : 컨테이너 개수 조정</li>\n<li>VPA(Vertical Pod Autoscaler) : 컨테이너 리소스 할당량 조절</li>\n<li>CA(Cluster Autoscaler) : 서버 개수 조정</li>\n</ul>\n<h3 id=\"9-federation-multi-cluster\"><a href=\"#9-federation-multi-cluster\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. Federation, Multi Cluster</h3>\n<p>클라우드에 설치된 쿠버네티스 클러스와 자체 서버에 설치한 쿠버네티스를 묶어서 하나로 사용할 수 있습니다. 구글에서 발표한 Anthos를 사용하면 한 곳에서 여러 클라우드의 클러스터를 관리할 수 있습니다.</p>\n<h3 id=\"10-it-보안\"><a href=\"#10-it-%EB%B3%B4%EC%95%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>10. IT 보안</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/99147877-a98efd80-26c7-11eb-973f-58fae551a5d6.png\" alt=\"image\"></p>\n<p>컨테이너 보안은 멀티레이어 구조이므로 이는 복잡합니다. 쿠버네티스는 워크로드를 위해 규모에 맞는 컨테이너를 배포하는데 필요한 자원 및 관리 기능을 제공합니다. 이를 통해서 애플리케이션 서비스를 구축하고, 일정을 계획하고, 컨테이너를 확장해서 컨테이너 상태를 지속적으로 관리할 수 있습니다.</p>\n <br/>\n<h2 id=\"쿠버네티스의-개념\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿠버네티스의 개념</h2>\n<h3 id=\"desired-state\"><a href=\"#desired-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Desired State</h3>\n<p>쿠버네티스 공식 홈페이지의 document에서 등장하는 용어는 <strong>desired state</strong>이다. 이는 쿠버네티스를 이해하는데 가장 핵심적인 개념이다. 이는 쉽게 <strong>원하는 상태</strong>(ex. 웹서버의 갯수, 포트)를 의미합니다.</p>\n<p>쿠버네티스는 <strong>현재 상태(current state)</strong>를 지속적으로 모니터링하며, current state와 desired state 사이에 다른 부분이 있으면 이를 동일하게 만듭니다.</p>\n<p>이러한 로직으로 인해, 관리자가 서버를 배포할 때는 직접적인 명령을 하지 않고, 상태를 선언하는 방식을 사용합니다. 이 상태(desired state)를 선언하므로서, 현재 상태(current state)에서 이동합니다.</p>\n<blockquote>\n<p>핵심은 명령(imprative)이 아닌 선언(declarative)입니다.</p>\n</blockquote>\n<h3 id=\"kubernetes-object\"><a href=\"#kubernetes-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes Object</h3>\n<p>쿠버네티스는 상태를 관리하기 위한 대상을 오브젝트로 정의합니다. 쿠버네티스는 여러가지의 오브젝트를 제공하고, 새로운 오브젝트를 추가하기 쉽기 때문에 확장성이 좋습니다.</p>\n<ul>\n<li>\n<p>Pod</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/99166472-4e055400-2749-11eb-9ef3-05891a4762ff.png\" alt=\"image\"></li>\n<li>쿠버네티스에서 배포할 수 있는 가장 작은 단위</li>\n<li>하나 이상의 컨테이너, 스토리지, 네트워크 속성을 가짐</li>\n<li>하나의 Pod 안에 있는 컨테이너는 스토리지, 네트워크를 공유합니다.</li>\n</ul>\n</li>\n<li>\n<p>ReplicaSet</p>\n<ul>\n<li>Pod을 여러개 복제하여 관리하는 오브젝트</li>\n<li>Pod을 생성하고 개수를 유지하기 위해서 반드시 사용합니다.</li>\n<li>YAML에서 replicas의 갯수를 지정하여 Pod의 개수를 몇개 유지할 지 결정할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Service</p>\n<ul>\n<li>네트워크와 관련된 오브젝트</li>\n<li>Pod을 외부 네트워크에 연결해주며, 여러 개의 Pod을 바라보는 내부 로드 밸런서를 생성할 때 사용</li>\n<li>서비스 디스커버리 역활도 수행합니다. (내부 DNS에 서비스 이름을 도메인으로 등록합니다.)</li>\n</ul>\n</li>\n<li>\n<p>Volume</p>\n<ul>\n<li>저장소와 관련된 오브젝트</li>\n<li>대부분으 저장 방식을 지원합니다.</li>\n</ul>\n</li>\n<li>\n<p>Object Spec - YAML</p>\n<ul>\n<li>오브젝트외 종류와 원하는 상태로 입력합니다.</li>\n<li>해당 명세는 생성, 조회, 삭제로 관리할 수 있어서 REST API로 쉽게 노출이 가능합니다.</li>\n<li>접근 권한 설정도 같은 개념을 적용하여 어떤 오브젝트에 어떤 요청을 할 수 있는지 정의할 수 있습니다.</li>\n<li>아래는 예시 YAML파일입니다.</li>\n<li>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>deployment\n<span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.7.9\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"쿠버네티스-배포-양식\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%B0%ED%8F%AC-%EC%96%91%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿠버네티스 배포 양식</h3>\n<p>이전에 이야기 했듯이 쿠버네티스는 애플리케이션을 배포하기 위해 원하는 상태(desired state)를 다양한 오브젝트(object)에 라벨(label)을 붙여서 정의하고 API 서버에 전달하는 방식을 사용합니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>쿠버네티스에 대한 개념을 찾기 위해서, 많은 글을 읽으면서 정리했습니다. 이후에 좀 더 공부해서 부족한 내용을 좀 더 추가하겠습니다. 그리고 설치 등을 해보면서 이후에 좀 더 글을 작성하겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://kubernetes.io/ko/docs/concepts/overview/what-is-kubernetes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kubernetes.io/ko/docs/concepts/overview/what-is-kubernetes/</a></li>\n<li><a href=\"https://subicura.com/2019/05/19/kubernetes-basic-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://subicura.com/2019/05/19/kubernetes-basic-1.html</a></li>\n<li><a href=\"https://www.redhat.com/ko/topics/containers/what-is-kubernetes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.redhat.com/ko/topics/containers/what-is-kubernetes</a></li>\n<li><a href=\"https://nirsa.tistory.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nirsa.tistory.com/</a></li>\n<li><a href=\"https://nirsa.tistory.com/129?category=871751\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nirsa.tistory.com/129?category=871751</a></li>\n<li><a href=\"https://arisu1000.tistory.com/27862\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://arisu1000.tistory.com/27862</a></li>\n<li><a href=\"https://suhwan.dev/2019/04/22/understanding-kubernetes-design/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://suhwan.dev/2019/04/22/understanding-kubernetes-design/</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/KubernetesLogo.126e9dc.3bb138d09ccb8ea1989865a5c256a3e9.png","size":{"width":442,"height":114},"sizes":"(max-width: 442px) 100vw, 442px","srcset":["/assets/static/KubernetesLogo.126e9dc.3bb138d09ccb8ea1989865a5c256a3e9.png 442w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 442 114' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5c1a7dab3cf762f43be33a2f2673fc7b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5c1a7dab3cf762f43be33a2f2673fc7b)' width='442' height='114' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAARCAIAAADi2T3bAAAACXBIWXMAAAsSAAALEgHS3X78AAAFNklEQVRIx81W/VMUZRy/v6PJanqV3kxLnWbU%2biHMnMZMpcYUFNGTEAFDUBEsBBTfENSUeIcZQMVwfH/NJCGl1EwxDBDxbu9u9/bljt29t73dpc/eg8ehDdWYMzyzs/Ps7vd5nu/n%2b/l8v981DQwfuj6gakMT3Ef5MEW6rj1w1%2bPX/Yo%2b%2bHJ0wzCFvSdeCpJWdUaKzqLn5TPH2j1hGKMWgwGABJ4W1L3Hxeh1jheXWAFgSrrjlaXUnDzm4CVZ9GoERuQIqjoR26MDhoqqPz7mfxM4E/H%2bQIv8ToptTKzl9URqTKx10wF30h7u2ThLlJl6eqHlgyzH1S5/GOroY0AbiM5yTFtt/3IP92E23XRJ7rYpHX3K3mPitAzHmkph7FIqtZQjlmEY5afFmnMSJkrQeCQZTz55A/raagE7hIgaXAIDXMQgPA%2b/V7VhZuTRF9BxRS6JNCPJaQDotiuT0mxvr7R9e1zEeWuqhKqzUl6jq%2bykKPu0zEohahk1O5dRgkNpjbFoB5tRIRAt6RGkG4kkam8mUVc6/QSzPlxdfzuPXE7uEGFCMfvDDR/xfiQGTl/1Qiq4yk%2bJP93y1f8o3bgbaO3wNV6UL3f611ULLydYJ6fZumwKcYiEJHE3t/2Q%2b2ZvABOKVddWCeCt5aav8IBL9GjvZ9pnb2TmFzrbbhseXLjh%2b3wzs2Qn20sH%2bz3aV2U8qMZBx9s98wqYT/MYaBhmvY4gVDC3gDl73QunZ2Q7pmfR25rcOHT30f5ZuUxegwu4b90LJOxk5%2bQ7r9zxGwAKD7qfj7eOS6Kw7Istzo6%2bAPzotCjYFCc1tMhPLbCABOAMBUMnDKz6jo/Z5MTZ37fKIGdCsq39jr/uvDTrGxq8TU6zQ2PZtcJHOTTjUt9dZd91pN9cwsZtZ3vswbFmqvqcZOfVlXv52G1s6QnxrRU2yavBrWUlHCyxm5VT5%2bTR4P/mvUBzm2dSqu3wz55xScZ9Q52AjG37w89LmgEAccIzwFlZFQycuebtY4IIxqFWz%2b37CtYDRpTZmlsvDAIIMbC%2bVnjVTM3Ipt2yhmqLbPntbqC5VV6w1QlXpqTb/7Qqv/cGpqbbEZeJKfZVZXzqPj6n1oUN38t0UJyRHKmlPMLndKt4A%2bOZOfTCrWxWjQAYt/qUT3LpU6Go5Te4IIGNDS6gRViBfFkxi1hf6/abwFRMAQMAUDkiARUBNDoAYCzcxiLqeERPeCnBin0jGVi8g11XI2RU8B9/TUO109c7kBJppRyMAeCNRGrnYfeSIhbR4fpVEAI2cDa87A4xgBhhk/giw12AeW05dZ8JmnexWH7ksudouwdfASB%2bBwsZo5Qj9qAXqgZa%2bH3iF4OTzEreYOB6T2BCMoWqPz7Z1nBRRnzz97vrL8goJggPwozOMHMDzYlqZG2uPW8omAi6x24Ee/kubmkx23hRQiXYfNC9uMiZXs6DSRgjE/AppsB58lcveiXyihONMFSfkZrbZHCYXSPgPUK7uoL/bBNT2OTGV7gOhDl1LtQJ1JX5W5xIa9gAxtx8Jr1c6LIFTSTBISx0AAjdXMLtb5ErTkv7TojYGpwCABSMxHi0D%2bgD/9xo/lMXf8gy/KiP3AdU1TAoanY/E2dBGkHNmKCpoYygE78QbwVfRrkc7j4pRzgjGCqUD5Xw8Jws0rSH%2b8CwTUgbiSjwg/X%2bwSpioOlD3Sa8mylc2lV1IGUf/9wiy/gVtokpxgUdw3vUL1LsH/e/4En/zGFIPg3tE2pBocWFCYqpoo7qX2rTCBJ8opH7v8ZfErdmFND/FasAAAAASUVORK5CYII=' /%3e%3c/svg%3e"}}},"context":{}}