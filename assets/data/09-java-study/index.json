{"hash":"c7c6273426a1f1c25b484e341518249aeec696cd","data":{"post":{"title":"[Java] Java Exception","path":"/09-java-study/","date":"15. January 2021","timeToRead":7,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Exception","title":"Exception","path":"/tag/Exception/"}],"description":"자바의 예외에 대해 정리합니다.","content":"<h1 id=\"java-exception\"><a href=\"#java-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Exception</h1>\n<p>백기선님의 자바 스터디 9주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>자바가 제공하는 예외 계층 구조</li>\n<li>자바에서 예외 처리 방법 (try, catch, throw, throws, finally)</li>\n<li>Exception과 Error의 차이는?</li>\n<li>RuntimeException과 RE가 아닌 것의 차이는?</li>\n<li>커스텀한 예외 만드는 방법</li>\n</ul>\n<br/>\n<h2 id=\"자바가-제공하는-예외-계층-구조\"><a href=\"#%EC%9E%90%EB%B0%94%EA%B0%80-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%98%88%EC%99%B8-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바가 제공하는 예외 계층 구조</h2>\n<p>자바에서는 예외를 이야기 할 때는 <code class=\"language-text\">오류(Error)</code> 와 <code class=\"language-text\">예외(Exception)</code> 의 개념이 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104693052-58919900-574c-11eb-8a77-cd7568ed23e7.png\" alt=\"java-error-exception\"></p>\n<p>자바의 예외 클래스의 구조는 다음과 같이 구성되어 있습니다.</p>\n<h3 id=\"오류error\"><a href=\"#%EC%98%A4%EB%A5%98error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>오류(Error)</h3>\n<p>시스템의 비정상적인 상황이 생겼을 때 발생하는 것을 <code class=\"language-text\">오류</code> 라고 합니다. 이는 시스템 레벨에서 발생하므로 시스템 자체에 영향을 줄 수도 있기 때문에 심각한 오류로 볼 수 있습니다. 다만 개발자는 이를 예측하여 처리하는 것은 어렵기 때문에 크게 신경을 쓰지 않아도 됩니다.</p>\n<p>아래와 같은 예시가 있습니다.</p>\n<ul>\n<li>VirtualMachineError</li>\n<li>OutOfMemoryError</li>\n<li>StackOverflowError</li>\n</ul>\n<h3 id=\"예외exception\"><a href=\"#%EC%98%88%EC%99%B8exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외(Exception)</h3>\n<p>개발자의 잘못된 코딩으로 인해 구현한 로직에서 발생합니다. 따라서 이는 미리 예측하여 처리할 수 있고, 일반적으로 try-catch 문을 사용하여 해결합니다.</p>\n<br/>\n<h2 id=\"자바에서-예외-처리-방법-try-catch-throw-thorws-finally\"><a href=\"#%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-try-catch-throw-thorws-finally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바에서 예외 처리 방법 (try, catch, throw, thorws, finally)</h2>\n<h3 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>try-catch-finally</h3>\n<p>예외 처리를 위해 try-catch-finally 문을 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 예외가 발생할 수 있는 가능성이 있는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception1</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Exception1이 발생시, 이를 처리하는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception2</span> e2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략 가능</span>\n        <span class=\"token comment\">// 만약 Exception1에서 에러 발생시, 해당 로직에는 작동을 하지 않음</span>\n        <span class=\"token comment\">// Exception2이 발생시, 이를 처리하는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략 가능</span>\n        <span class=\"token comment\">// 예외가 발생해도 마지막에 실행됩니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>try 블럭에는 여러 catch 블록이 올 수 있으며, 이 중에서 발생한 에외의 종류와 일치하는 단 한 개의 catch 블록만 수행됩니다.</p>\n<h3 id=\"multi-catch\"><a href=\"#multi-catch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>multi catch</h3>\n<p>다음과 같이, 자바 7이후 여러 catch 블럭을 '|' 기호를 통해 나의 catch 블럭으로 합칠 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionA</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ExceptionB</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"try-with-resources\"><a href=\"#try-with-resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>try-with-resources</h3>\n<ul>\n<li>회수를 해야하는 자원을 다룰 때, 도움이 됩니다.</li>\n<li>코드를 더 간결하고 예외정보도 유리하게 사용할 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstLineInFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> defaultVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> defaultVal<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"throw\"><a href=\"#throw\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>throw</h3>\n<p>throw 키워드를 통해서 고의로 예외를 발생할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exceptionThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Exception</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"고의로 발생한 예외\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"throws\"><a href=\"#throws\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>throws</h3>\n<p>메서드 선언부에서 throws 키워드를 통해서 해당 메서드를 호출한 메서드로 예외를 던집니다. 예외를 선언함으로서 메서드를 사용할 때 발생할 수 잇는 에러를 명시적으로 알 수 있습니다. 이 때 예외는 해당 메서드를 호출하는 곳에서 한 번은 <code class=\"language-text\">try-catch</code> 로 처리해주어야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CustomException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">CustomException</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"내가 만든 예외\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custome Exception\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>좀 더 Clean Code로 짜는 방법</p>\n</blockquote>\n<ul>\n<li>try 블럭에서 무슨 일이 생기든지 catch 블록은 프로그램 상태를 일관성있게 유지합니다.</li>\n<li>\n<p>예외에 의미를 제공합니다.</p>\n<ul>\n<li>오류가 발생한 윈언과 위치를 찾기 쉽도록 오류메세지에 정보를 담고, 실패한 연산 이름과 실패 유형을 언급합니다.</li>\n</ul>\n</li>\n<li>\n<p>호출자를 고려해서 예외 클래스를 구성합니다.</p>\n<ul>\n<li>아래는 그 예시입니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ACMEPort</span> port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ACMEPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n     port<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeviceResponseException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Device response exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ATM1212UnlockedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unlock exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">GMXError</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Device response exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>정상 흐름을 정의합니다.</li>\n<li>null을 반환하거나 전달하는 습관은 좋지 않습니다.</li>\n</ul>\n<br/>\n<h2 id=\"runtimeexception과-re가-아닌-것의-차이는\"><a href=\"#runtimeexception%EA%B3%BC-re%EA%B0%80-%EC%95%84%EB%8B%8C-%EA%B2%83%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RuntimeException과 RE가 아닌 것의 차이는?</h2>\n<p>자바의 <code class=\"language-text\">RuntimeException</code>은 <strong>Unchecked Exception</strong>으로 <code class=\"language-text\">RuntimeExcption이 아닌 것</code>은 <strong>Checked Exception</strong>으로 분류됩니다.</p>\n<p>둘의 차이는 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>Check Exception</th>\n<th>Unckecked Exception</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>처리여부</strong></td>\n<td>반드시 필요</td>\n<td>강제성이 없음</td>\n</tr>\n<tr>\n<td>확인시점</td>\n<td>컴파일 시점</td>\n<td>실행 시점</td>\n</tr>\n<tr>\n<td><strong>예외 발생시 트랜잭션</strong></td>\n<td>Roll-back X</td>\n<td>Roll-back</td>\n</tr>\n<tr>\n<td>대표적인 예시</td>\n<td>- IO Exception</td>\n<td>- NullPointerException</td>\n</tr>\n<tr>\n<td></td>\n<td>- SQL Exception</td>\n<td>- IllegalArgumentException</td>\n</tr>\n<tr>\n<td></td>\n<td>- ...</td>\n<td>- IndexOutOfBoundException...</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"커스텀한-예외-만드는-방법\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-%EC%98%88%EC%99%B8-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀한 예외 만드는 방법</h2>\n<p>Custom한 예외 클래스를 만드는 조건은 다음과 같습니다. 해당 조건 중 하나가 필요하다면 예외 클래스를 적용합니다.</p>\n<ol>\n<li>Java 플랫폼에 없는 예외 유형이 필요합니까?</li>\n<li>다른 벤더가 작성한 클래스에서 제공한 예외 사항과 차별화할 수 있다면 어떻겠습니까?</li>\n<li>코드가 하나 이상의 관련 예외를 발생합니까?</li>\n<li>다른 사용자의 예외를 사용할 경우 해당 예외에 대한 액세스 권한이 사용자에게 부여됩니까?</li>\n</ol>\n<h3 id=\"custom-checked-exception\"><a href=\"#custom-checked-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Checked Exception</h3>\n<p>FileNotFoundException 의 경우는 정확한 예외 원인을 정확하게 알지 못합니다. 파일 이름이 없을 수도 있고 파일이 존재하지 않을 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncorrectFileNameException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isCorrectFileName</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"filename is incorrect : \"</span> <span class=\"token operator\">+</span> fileName <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 커스텀 예외를 사용하여 정확한 원인을 확인할 수 있습니다.</p>\n<h3 id=\"custom-unchecked-exception\"><a href=\"#custom-unchecked-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Unchecked Exception</h3>\n<p>확장자가 없는 경우, 런타임 시 문제가 발생하는데 이를 커스텀 예외로 확인할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncorrectFileExtensionException</span>\n  <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileExtensionException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isCorrectFileName</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"filename is incorrect : \"</span> <span class=\"token operator\">+</span> fileName <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IncorrectFileExtensionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">containsExtension</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileExtensionException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"Filename does not contain extension : \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 구성할 수 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://velog.io/@youngerjesus/%EC%9E%90%EB%B0%94-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@youngerjesus/%EC%9E%90%EB%B0%94-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC</a></li>\n<li><a href=\"https://i-am-clap.tistory.com/12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://i-am-clap.tistory.com/12</a></li>\n<li><a href=\"https://rebeccacho.gitbooks.io/java-study-group/content/chapter8.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rebeccacho.gitbooks.io/java-study-group/content/chapter8.html</a></li>\n<li><a href=\"https://sujl95.tistory.com/62\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/62</a></li>\n<li><a href=\"https://wisdom-and-record.tistory.com/46\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wisdom-and-record.tistory.com/46</a></li>\n<li><a href=\"https://www.notion.so/3565a9689f714638af34125cbb8abbe8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/3565a9689f714638af34125cbb8abbe8</a></li>\n<li><a href=\"https://github.com/kongduboo/whiteship-java-study/blob/main/week9.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/kongduboo/whiteship-java-study/blob/main/week9.md</a></li>\n<li><a href=\"http://amazingguni.github.io/blog/2016/05/Clean-Code-7-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://amazingguni.github.io/blog/2016/05/Clean-Code-7-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg","size":{"width":680,"height":440},"sizes":"(max-width: 680px) 100vw, 680px","srcset":["/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg 680w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 680 440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9716c389a175768fda62e76437e55968'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9716c389a175768fda62e76437e55968)' width='680' height='440' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAApAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAwECBAUGAAj/xAAtEAACAAQFAgUDBQAAAAAAAAABAgADBBEFEiExQRMiBhRRYXEyQpEVM2Jygf/EABkBAQEBAQEBAAAAAAAAAAAAAAEAAgQDBf/EABsRAAMBAAMBAAAAAAAAAAAAAAABAhESITET/9oADAMBAAIRAxEAPwDz/l944JcQUS2Jh4ljmPonK6IwGsO2iW0pSgNokYPhL4pXrTJOlyVyPMebM2RFUsxtybA2A3OkRKtK3eFycCLfxTh6YZj9XQy1dPLN0WVxYhlFjf1N9bjTXS41NaBaBE3gLLYe8JvBspbYQ3psvEIaSkXK59CIay2a0WEuUqrYgEneE8ujMAbj4hOf6dkS2lo1XgvBfOIzVdGehNu0mrQtmRlNivYbgEHkcRR9FU%2b2/vGywqi8PfoNJUYrMCVYlzn6ciYVnTe/s1GnBFj63grwZvX0Vfi%2bjmSqiu69LNmiYZSy6yaG0yi3aW1NwAuvA/2Ml5fL/KNzj9D4flYZVDDcRmVNVLnIsnO7967OxU6AHcRl1kD7iTEvCqmmV1rcWhyS7/V%2bIsukliMoiOZRRrkacGEy66LHy6e/5gq0qKuYrrxrABuIPM2jOmlKDSqdDqUFoWbKCaoLLyBCDYQjfSfiDT04LBGRXHcLxHmU5GqG49IUbR0JjjoFVJbLbWJExQFAG20Bb94f1jpuw%2bYmSnEf/9k=' /%3e%3c/svg%3e"}}},"context":{}}