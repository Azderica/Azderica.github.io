{"hash":"4d08d5d9909bc52ba8ae53ab8b5e8ea790bc2d53","data":{"post":{"title":"[Spring] Spring Data JPA와 QueryDSL","path":"/01-spring-jpa/","date":"23. September 2021","timeToRead":4,"tags":[{"id":"Spring","title":"Spring","path":"/tag/Spring/"},{"id":"SpringBoot","title":"SpringBoot","path":"/tag/SpringBoot/"},{"id":"JPA","title":"JPA","path":"/tag/JPA/"},{"id":"Spring Data","title":"Spring Data","path":"/tag/Spring%20Data/"},{"id":"QueryDSL","title":"QueryDSL","path":"/tag/QueryDSL/"},{"id":"Backend","title":"Backend","path":"/tag/Backend/"}],"description":"Spring JAP와 QueryDSL에 대해 정리합니다.","content":"<h1 id=\"spring-jpa와-querydsl에-대해\"><a href=\"#spring-jpa%EC%99%80-querydsl%EC%97%90-%EB%8C%80%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring JPA와 QueryDSL에 대해</h1>\n<p>지난 시간에는 이번에 정리할 Spring JPA와 QueryDSL을 위해 ORM과 JPA에 대해 정리했습니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-db-orm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a></li>\n<li><a href=\"https://azderica.github.io/00-java-jpa/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA</a></li>\n</ul>\n<p>오늘은 이를 바탕으로 Spring JPA을 더 자세하게 정리합니다.</p>\n<h2 id=\"spring-data-jpa\"><a href=\"#spring-data-jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Data JPA</h2>\n<ul>\n<li>CRUD 문제를 인터페이스 선언만으로 작성합니다.</li>\n<li>스프링 데이터 JPA가 구현 객체를 동적으로 생성해서 주입합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-jpa-적용-전\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-jpa-%EC%A0%81%EC%9A%A9-%EC%A0%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 JPA 적용 전</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// before JPA</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-jpa-적용-후\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-jpa-%EC%A0%81%EC%9A%A9-%ED%9B%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 JPA 적용 후</h3>\n<ul>\n<li>스프링 데이터 JPA에서는 JpaRepository 인터페이스를 제공합니다.</li>\n<li>인터페이스가 인터페이스를 상속받을 때는 extends를 사용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// after JPA</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-데이터-jpa-적용-후-클래스-다이어그램\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa-%EC%A0%81%EC%9A%A9-%ED%9B%84-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 데이터 JPA 적용 후 클래스 다이어그램</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/134428743-a9727ffa-3cf1-47ad-bc6d-55e42338ca1d.png\" alt=\"image\"></p>\n<ul>\n<li>기본적으로 CRUD를 구현하지 않아도 되며, 인터페이스를 호출해서 쓸 수 있습니다.</li>\n<li>스프링 로딩 시점에 UserRepository의 구현체를 만듭니다.</li>\n</ul>\n<h3 id=\"공통-인터페이스\"><a href=\"#%EA%B3%B5%ED%86%B5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>공통 인터페이스</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/134432747-fdf6a1a2-ab04-4190-971e-25dfee64a4d4.png\" alt=\"image\"></p>\n<ul>\n<li>JpaRepository 인터페이스는 공통 CRUD을 제공합니다.</li>\n<li>제네릭은 &#x3C;Entity, 식별자>로 설정합니다.</li>\n<li>스프링에 스프링 데이터 프로젝트와 스프링 데이터 JPA 프로젝트가 따로 존재합니다.</li>\n<li>스프링 데이터에서 공통적인 기능을 가지고 있고, JPA 기능은 스프링 데이터 JPA 프로젝트에서 가지고 있습니다.</li>\n</ul>\n<h3 id=\"쿼리-메서드\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿼리 메서드</h3>\n<ul>\n<li>메서드 이름으로 쿼리를 생성합니다. <code class=\"language-text\">@Query</code> 어노테이션으로 쿼리를 직접 정의할 수도 있습니다.</li>\n<li>메서드 이름만으로 JPQL 쿼리를 생성합니다.</li>\n<li>선언된 메서드에 대해서는 로딩 시점에 쿼리를 만들기 때문에 에러를 미리 잡을 수 있습니다.</li>\n</ul>\n<h3 id=\"예시\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예시</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>이름으로 검색</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></code></pre>\n<ul>\n<li>이름으로 검색 및 정렬</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sort</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// sort is order by age.</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> AGE <span class=\"token keyword\">DESC</span></code></pre>\n<ul>\n<li>이름으로 검색, 정렬, 페이징</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Pageable</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span>\n    <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> ROW_<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ROWNUM ROWNUM_\n      <span class=\"token keyword\">FROM</span>\n          <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> M<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n            <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n            OEDER <span class=\"token keyword\">BY</span> M<span class=\"token punctuation\">.</span>NAME\n          <span class=\"token punctuation\">)</span> ROW_\n     <span class=\"token keyword\">WHERE</span> ROWNUM <span class=\"token operator\">&lt;=</span> ?\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WHERE</span> ROWNUM_<span class=\"token operator\">></span>?</code></pre>\n<h3 id=\"query-jpql-정의\"><a href=\"#query-jpql-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Query</code>, JPQL 정의</h3>\n<ul>\n<li><code class=\"language-text\">@Query</code> 어노테이션을 사용해서 직접 JPQL을 지정할 수 있습니다.</li>\n<li>이도 로딩 시점에 파싱을 함으로 런타임 에러를 내지 않을 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select u from User u where m.name = ?1\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"web-페이징과-정렬-기능\"><a href=\"#web-%ED%8E%98%EC%9D%B4%EC%A7%95%EA%B3%BC-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web 페이징과 정렬 기능</h3>\n<ul>\n<li>컨트롤러에서 페이징 처리 객체를 바로 인젝션 받을 수도 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>page</td>\n<td>현재 페이지</td>\n</tr>\n<tr>\n<td>size</td>\n<td>한 페이지에 노출할 데이터 건수</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>정렬 조건</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>ex) <code class=\"language-text\">/user?page=0&amp;size=20&amp;sort=name,dsec</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"querydsl\"><a href=\"#querydsl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL</h2>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/SpringLogo.214a68b.be0c3d9590430504675b948223711f21.png","size":{"width":820,"height":442},"sizes":"(max-width: 820px) 100vw, 820px","srcset":["/assets/static/SpringLogo.a67b0b2.be0c3d9590430504675b948223711f21.png 480w","/assets/static/SpringLogo.214a68b.be0c3d9590430504675b948223711f21.png 820w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 820 442' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-29f2605aef896f90944d207b9d4e9d4c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-29f2605aef896f90944d207b9d4e9d4c)' width='820' height='442' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAiAEADASIAAhEBAxEB/8QAGwABAAMBAAMAAAAAAAAAAAAAAAQFBgMCBwj/xAAqEAABAwQBAgUEAwAAAAAAAAABAgMEAAURIRIGMRNBUWGBFBUiMgdxof/EABgBAQADAQAAAAAAAAAAAAAAAAACAwQB/8QAIxEAAgICAgIBBQAAAAAAAAAAAAECEQMhEjEEQVEiYZGx4f/aAAwDAQACEQMRAD8A%2bnaUpQCs51b1SxYEobS348xwckt5wEj1Ua0dYx2BBX/IEt%2b9lrwRGQ7HD5AQcYB76OPT3rN5U5xglj026v4Ksrkl9Psr7H17OnXFqO5bUPpcVjEbPJPvvR/yvYDKy42FKTxVsFOc4I0RUWNLiuZFrZQhgDLkkN8G0pHocDkf60PWu8RYdbU6j9HFqWj3STo/Pf5rnjKcVU58hiUlpys7UpStRaKgXi5t2xplS21uuPuBpptBAKlEZ7kgDt51PqtvsF6fFS019ItPLK2pTXNCx8HII9RUMnLi%2bPZGV1oiOdRcJLMUWueZjrRdSxxSDpWDk5wB557VW3i%2b225Qm4cmBOedfWtox2xxdQ4jB4nfuDntquMKx3W3XmMIbyCW4jmVuNqUz%2bTmfCG8gAdt51VjbunXo90jXCRKQ7IDjzr5CMBSlpCQE%2bgAFYrz5Fxa%2bzuutfn2UXkkqKCNHs0e4JaMS7T5AeW0mO66Fp5oSFdsgY3561WjR1RHcaaSxDluTXHVsiGEgOJUj9snOABkbrxidPusX77gZCCj6h57gEnOFpSAPjFV1ytUy1z/ALjBDj0lUp50eGyXEhtYT%2bK0gg%2bXcVGMcuFNxVK/hda3%2bziU4LSNDaLu3c3pbSWH2HYqkpcS8ACCRnGjVlWd6Rjzg9c51yQpDkt1JSlaOBwlOM8cnA9Ad6rRVtwSlKCcu/7ovxtuNsUpSrSYpSlAKUpQClKUB//Z' /%3e%3c/svg%3e"}}},"context":{}}