{"hash":"4d08d5d9909bc52ba8ae53ab8b5e8ea790bc2d53","data":{"post":{"title":"[Java] 자바 클래스","path":"/05-java-study/","date":"12. January 2021","timeToRead":8,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Class","title":"Class","path":"/tag/Class/"},{"id":"Object","title":"Object","path":"/tag/Object/"},{"id":"Method","title":"Method","path":"/tag/Method/"}],"description":"자바의 클래스에 대해 정리합니다.","content":"<h1 id=\"java-operatore\"><a href=\"#java-operatore\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Operatore</h1>\n<p>백기선님의 자바 스터디 5주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>클래스 정의하는 방법</li>\n<li>객체 만드는 방법 (new 키워드 이해하기)</li>\n<li>메소드 정의하는 방법</li>\n<li>생성자 정의하는 방법</li>\n<li>this 키워드 이해하기</li>\n</ul>\n<p>과제</p>\n<ul>\n<li>int 값을 가지고 있는 이진 트리를 나타내는 Node 라는 클래스를 정의하세요.</li>\n<li>int value, Node left, right를 가지고 있어야 합니다.</li>\n<li>BinrayTree라는 클래스를 정의하고 주어진 노드를 기준으로 출력하는 bfs(Node node)와 dfs(Node node) 메소드를 구현하세요.</li>\n<li>DFS는 왼쪽, 루트, 오른쪽 순으로 순회하세요.</li>\n</ul>\n<br/>\n<h2 id=\"객체-지향이란\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 지향이란.</h2>\n<p>먼저 자바의 클래스 개념에 대해 알기 전에 <strong>객체지향 프로그램</strong>에 대해서 정확하게 인지를 하고 넘어가야합니다.</p>\n<p>객체지향 프로그래밍이란 실제 세계에 존재하는 모든 것을 <strong>객체</strong>로 취급하여 프로그래밍 하는 방법입니다. 이러한 객체 지향은 실제 세계의 모습을 표현하기 위해 나온 것이며 아래의 특징을 가집니다.</p>\n<ul>\n<li>\n<p><strong>캡슐화(Encapsulation)</strong></p>\n<ul>\n<li>데이터(속성)와 데이터를 처리하는 함수를 하나로 묶는 것</li>\n<li>캡슐화된 객체의 세부 내용이 외부에 은폐(정보 은닉)되어, 변경이 발생할 때 오류의 파급효과가 적고 재사용에 편리합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>정보은닉(Information Hiding)</strong></p>\n<ul>\n<li>다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통하여 접근을 허용하는 것입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>추상화(Abstarction)</strong></p>\n<ul>\n<li>불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화하는 것, 즉 모델화 하는 것입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>상속성(Inheritance)</strong></p>\n<ul>\n<li>이미 정의된 상위 클래스(부모 클래스)의 모든 속성솨 연산을 하위 클래스가 물려받는 것</li>\n<li>상속성을 이용하면 하위 클래스는 상위 클래스의 모든 속성과 연산을 자신의 클래스 내에서 다시 정의하지 않고서도 즉시 자신의 속성으로 사용할 수 있습니다.</li>\n<li>ex) <code class=\"language-text\">extends</code></li>\n</ul>\n</li>\n<li>\n<p><strong>다형성(Polymorphism)</strong></p>\n<ul>\n<li>메시지에 의해 개체(클래스)가 연산을 수행하게 될 때 하나의 메시지에 대해 각 객체(클래스)가 가지고 있는 고유한 방법(특성)으로 응답할 수 있는 능력</li>\n<li>객체(클래스)들은 동일한 메소드명을 사용하며 같은 의미의 응답을 합니다.</li>\n<li>ex) <code class=\"language-text\">1+2=3 / A+B=AB</code></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"클래스\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스.</h2>\n<p>클래스란 객체를 생성하기 위해 <strong>상태(state)와 행동(behavior)을 정의하는 일종의 설계도</strong>라고 볼 수 있습니다.</p>\n<p>이를 표현하는 용어로 일반적으로 붕어빵 틀로 묘사하고는 합니다. 붕어빵은 일종의 객체로서 여러 개를 만들 수 있고, 붕어빵 틀은 이러한 객체를 만들 수 있는 클래스입니다.</p>\n<p>클래스는 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// attribute</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// method</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"객체-만들기\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 만들기</h2>\n<p>객체는 클래스를 인스턴스화 시킨 것으로 표현할 수 있습니다. 일반적으로 <code class=\"language-text\">new</code> 키워드를 통해서 생성할 수 있으며, 이러한 <code class=\"language-text\">new</code> 키워드는 객체에 메모리를 할당하는 과정으로 볼 수 있습니다.</p>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassTest</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 객체 1</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ClassTest</span> object1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// object 1</span>\n        <span class=\"token class-name\">ClassTest</span> object2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// object 2</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음처럼 <code class=\"language-text\">new</code> 키워드를 통해 여러개의 객체를 선언할 수 있습니다.</p>\n<h3 id=\"new-연산자\"><a href=\"#new-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>new 연산자</h3>\n<p>new 연산자는 클래스 타입의 인스턴스를 생성해주는 역할을 하는 연산자이며, 메모리(Heap 영역)에 공간을 할당 받고 그 공간의 참조값을 객체에게 반환해주는 역할을 합니다.</p>\n<br/>\n<h2 id=\"메서드-정의\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메서드 정의</h2>\n<p>메서드는 다음과 같은 형태로 구성됩니다. 일반적으로 어떠한 기능을 수행한다고 이해하면 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104312556-1e40b580-551a-11eb-820c-4a6d4041d314.png\" alt=\"method\"></p>\n<p>메서드의 접근 제어자는 여러 게시물에서 소개했지만, 한번 더 정리하자면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104312777-6e1f7c80-551a-11eb-9892-329bd9312921.png\" alt=\"image\"></p>\n<p>이는 일종의 범위로 이해하면 됩니다.</p>\n<br/>\n<h2 id=\"생성자-정의\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성자 정의</h2>\n<p>생성자는 객체가 생성된 직후에 클래스의 객체를 초기화하는데 사용됩니다. 생성자를 명시하지 않으면 컴파일러가 자동으로 기본 생성자를 생성합니다. 하지만 다른 생성자를 명시했다면 기본 생성자는 컴파일 시 생성되지 않습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 기본 생성자</span>\n\n<span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"this-키워드-이해하기\"><a href=\"#this-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>this 키워드 이해하기</h2>\n<p><code class=\"language-text\">this</code> 키워드는 인스턴스의 자기 자신을 의미합니다. <code class=\"language-text\">this</code> 키워드를 사용해서 지역변수와 구별도 가능합니다. 다만, 클래스 메서드에서는 인스턴스가 생성되지 않을 수도 있기 때문에 <code class=\"language-text\">this</code>를 사용할 수 없습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 2</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1 &lt;- 2</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1 &lt;- 2</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"과제\"><a href=\"#%EA%B3%BC%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>과제.</h2>\n<p>다음의 요구사항을 가지는 클래스를 만듭니다.</p>\n<ul>\n<li>int 값을 가지고 있는 이진 트리를 나타내는 Node 라는 클래스를 정의하세요.</li>\n<li>int value, Node left, right를 가지고 있어야 합니다.</li>\n<li>BinrayTree라는 클래스를 정의하고 주어진 노드를 기준으로 출력하는 bfs(Node node)와 dfs(Node node) 메소드를 구현하세요.</li>\n<li>DFS는 왼쪽, 루트, 오른쪽 순으로 순회하세요.</li>\n</ul>\n<h3 id=\"node-class\"><a href=\"#node-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Node Class</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addLeftNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addRightNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"binary-tree-class\"><a href=\"#binary-tree-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Binary Tree Class</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> bfsList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> dfsList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Node</span> n <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bfsList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        dfsList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>좀 더 상세한 코드는 아래에 적어놓았습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-Java-With-WhiteShip/tree/master/src/main/java/week5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 예제</a></li>\n</ul>\n<p>이상입니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://blog.naver.com/swoh1227/222174170682\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/swoh1227/222174170682</a></li>\n<li><a href=\"https://jeeneee.dev/java-live-study/week5-class/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jeeneee.dev/java-live-study/week5-class/</a></li>\n<li><a href=\"https://leemoono.tistory.com/17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leemoono.tistory.com/17</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg","size":{"width":680,"height":440},"sizes":"(max-width: 680px) 100vw, 680px","srcset":["/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg 680w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 680 440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9716c389a175768fda62e76437e55968'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9716c389a175768fda62e76437e55968)' width='680' height='440' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAApAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAwECBAUGAAj/xAAtEAACAAQFAgUDBQAAAAAAAAABAgADBBEFEiExQRMiBhRRYXEyQpEVM2Jygf/EABkBAQEBAQEBAAAAAAAAAAAAAAEAAgQDBf/EABsRAAMBAAMBAAAAAAAAAAAAAAABAhESITET/9oADAMBAAIRAxEAPwDz/l944JcQUS2Jh4ljmPonK6IwGsO2iW0pSgNokYPhL4pXrTJOlyVyPMebM2RFUsxtybA2A3OkRKtK3eFycCLfxTh6YZj9XQy1dPLN0WVxYhlFjf1N9bjTXS41NaBaBE3gLLYe8JvBspbYQ3psvEIaSkXK59CIay2a0WEuUqrYgEneE8ujMAbj4hOf6dkS2lo1XgvBfOIzVdGehNu0mrQtmRlNivYbgEHkcRR9FU%2b2/vGywqi8PfoNJUYrMCVYlzn6ciYVnTe/s1GnBFj63grwZvX0Vfi%2bjmSqiu69LNmiYZSy6yaG0yi3aW1NwAuvA/2Ml5fL/KNzj9D4flYZVDDcRmVNVLnIsnO7967OxU6AHcRl1kD7iTEvCqmmV1rcWhyS7/V%2bIsukliMoiOZRRrkacGEy66LHy6e/5gq0qKuYrrxrABuIPM2jOmlKDSqdDqUFoWbKCaoLLyBCDYQjfSfiDT04LBGRXHcLxHmU5GqG49IUbR0JjjoFVJbLbWJExQFAG20Bb94f1jpuw%2bYmSnEf/9k=' /%3e%3c/svg%3e"}}},"context":{}}