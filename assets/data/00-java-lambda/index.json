{"hash":"c252e7650a6691103be74bcadb51dd243a8d98c2","data":{"post":{"title":"[Java] Java Lambda","path":"/00-java-lambda/","date":"15. December 2020","timeToRead":4,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Java8","title":"Java8","path":"/tag/Java8/"},{"id":"Lambda","title":"Lambda","path":"/tag/Lambda/"},{"id":"Backend","title":"Backend","path":"/tag/Backend/"}],"description":"Java Lambda 대해 정리합니다.","content":"<h1 id=\"java-lambda\"><a href=\"#java-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h1>\n<p>Java8의 핵심 기능 중 하나는 Lambda입니다. 이 Lambda에 대해서 정리해보고 왜 쓰는지, 장점은 어떤 부분이 있는지를 정리합니다.</p>\n<br/>\n<h2 id=\"java-lambda-정의\"><a href=\"#java-lambda-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 정의</h2>\n<p>자바의 <code class=\"language-text\">Lambda</code>는 <strong>메소드를 하나의 식(Expression)으로 표현한 것</strong>입니다. 익명메소드(함수) 생성 문법이라고도 이야기 할 수 있습니다.</p>\n<p>다만 주의해야하는 부분 중 하나는 <strong>자바의 메소드는 메소드 자체로 혼자 선언하여 선언하여 쓰일 수 없습니다.</strong> 반드시 클래스 구성 멤버로 선언되어 있어야합니다. 즉, 람다식을 통해서 생성되는 것은 메소드가 아닌 해당 메소드를 가지는 객체입니다. <strong>람다식은 일반적인 객체가 아닌 인터페이스를 구현한 익명구현객체</strong>입니다.</p>\n<p>함수적 프로그래밍을 지원하기 위해서 자바 8부터 람다식을 지원하게 되었는데, 이를 통해서 기존의 코드 패턴이 많이 달라지기도 하며, 문법이 간결한 만큼 가독성면에서 큰 장점을 가집니다.</p>\n<p>조금 다른 이야기로 안드로이드 개발에서 요즘은 함수형 프로그래밍인 Kotlin이 각광을 받는데, 자바에서도 람다식을 통해 이러한 함수형 프로그래밍을 지원하는 느낌을 받을 수 있습니다.</p>\n<p>람다식의 사용법은 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>매개변수<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> 실행문 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">(매개변수, ...)</code> 는 오른쪽 중괄호 <code class=\"language-text\">{ 실행문 ... }</code> 을 실행하기 위해 필요한 값을 제공하는 역할을 합니다. 매개 변수의 이름은 자유롭게 지정이 되어 있으며 인자타입을 따로 명시하지 않아도 됩니다. <code class=\"language-text\">-&gt;</code> 기호는 매개 변수를 이용해서 해당 실행문을 실행한다고 이해하면 됩니다.</p>\n<br/>\n<h2 id=\"java-lambda-예제\"><a href=\"#java-lambda-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 예제</h2>\n<h3 id=\"함수형-인터페이스functional-interface\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4functional-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>함수형 인터페이스(functional interface)</h3>\n<p>람다 표현식을 사용할 때는 람다 표현식을 저장하기 위한 참조 변수의 타입을 결정해야합니다.</p>\n<p>일반적으로 다음과 같은 어노테이션을 사용해서 함수형 인터페이스를 명시할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span></code></pre>\n<p>이를 사용한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">// 함수형 인터페이스 선언</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 추상 메소드</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 추상 메소드</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Calc</span> minNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 추상 메소드 구현</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minNum<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// output : 3</span>\n\n                <span class=\"token class-name\">Calc</span> calcNum <span class=\"token operator\">=</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calcNum<span class=\"token punctuation\">.</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// output : 4</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 예시에서 로직이 한줄이기 때문에 구현 로직에서 <code class=\"language-text\">{ x &lt; y ? x : y }</code> 대신에 <code class=\"language-text\">x &lt; y ? x : y</code> 로 {}를 뺄수도 있고 return도 없앨 수 있습니다.</p>\n<p>추가적으로 매개변수가 하나 일때는 () 또한 삭제가 가능합니다.</p>\n<br/>\n<h2 id=\"java-lambda-장단점\"><a href=\"#java-lambda-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 장단점</h2>\n<h3 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점</h3>\n<ul>\n<li>코드를 간결하게 만들 수 있습니다.</li>\n<li>가독성이 좋아집니다.</li>\n<li>함수를 만드는 과정 없이 한번에 처리할 수 있으므로 코딩하는 시간이 줄어듭니다.</li>\n<li>병렬 프로그래밍에 유리합니다.</li>\n</ul>\n<h3 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점</h3>\n<ul>\n<li>재사용이 불가능합니다.</li>\n<li>일부 디버깅이 까다롭습니다.</li>\n<li>너무 남발하면 코드가 지저분해집니다.</li>\n<li>재귀로 만드는 경우에는 성능적 이슈가 있을 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 간단하게 Lambda에 대해 정리해보았습니다. 다음에는 자바의 stream에 대해서 알아보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://coding-factory.tistory.com/265\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://coding-factory.tistory.com/265</a></li>\n<li><a href=\"http://www.tcpschool.com/java/java_lambda_concept\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_lambda_concept</a></li>\n<li><a href=\"https://sehun-kim.github.io/sehun/java-lambda-stream/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sehun-kim.github.io/sehun/java-lambda-stream/</a></li>\n<li><a href=\"https://medium.com/@logishudson0218/understanding-for-java-1-8-lambda-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-43bcc491519a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@logishudson0218/understanding-for-java-1-8-lambda-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-43bcc491519a</a></li>\n</ul>\n","cover_image":null}},"context":{}}