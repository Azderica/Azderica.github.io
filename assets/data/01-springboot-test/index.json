{"hash":"314c4422387ef2cae421ff768d6b6746d38a40d1","data":{"post":{"title":"[SpringBoot] SpringBoot 테스트 코드 작성하기","path":"/01-springboot-test/","date":"26. October 2020","timeToRead":7,"tags":[{"id":"Spring","title":"Spring","path":"/tag/Spring/"},{"id":"SpringBoot","title":"SpringBoot","path":"/tag/SpringBoot/"},{"id":"SpringBoot API","title":"SpringBoot API","path":"/tag/SpringBoot%20API/"},{"id":"Test","title":"Test","path":"/tag/Test/"},{"id":"JUnit","title":"JUnit","path":"/tag/JUnit/"},{"id":"Backend","title":"Backend","path":"/tag/Backend/"}],"description":" SpringBoot Test에 대한 코드입니다. ","content":"<h1 id=\"springboot-테스트-코드\"><a href=\"#springboot-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpringBoot 테스트 코드</h1>\n<p>대학교 시절, 프론트 위주 개발을 하다가 스프링 개발을 하다보니 가장 어려웠던 점은 테스트 코드를 작성하는 부분이였다.</p>\n<p>테스트 코드를 작성할 때, 여러 어노테이션이 등장하고 이 부분에 대한 개념도 없다는 것을 느끼고 있다. (다음 게시물은 아마 스프링 어노테이션에 대해서 작성할 예정이다.)</p>\n<p>간략하게라도 글을 통해 정리하고, 이후 점차 추가해가는 방향으로 진행해야겠다.</p>\n<br/>\n<h2 id=\"junit\"><a href=\"#junit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit</h2>\n<h3 id=\"junit의-특징\"><a href=\"#junit%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Junit의 특징.</h3>\n<ul>\n<li>JUnit은 자바용 단위 테스트 작성을 위한 표준 프레임워크다.</li>\n<li>xUnit이라는 단위 테스트 프레임워크의 자바 구현물이다.</li>\n<li>테스트 도구이며 외부 테스트 프로그램을 작성해 할 필요 없이 이를 관리해줄 수 있따.</li>\n<li>하나의 jar파일로 되어 있으며 사용법 또한 간단하다</li>\n<li>테스트 결과를 확인하는 것 뿐만 아니라 최적화된 코드를 유추하는 기능도 있어서 성능향상을 기대할 수 있따.</li>\n<li>Test 클래스를 통해 다른 개발자에게 테스트 방법과 클래스 히스토리를 알려줄 수 있다.</li>\n</ul>\n<h3 id=\"junit에서-테스트를-지원하는-어노테이션annotation\"><a href=\"#junit%EC%97%90%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit에서 테스트를 지원하는 어노테이션(Annotation)</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">@Test</code></p>\n<ul>\n<li>@Test 가 선언된 메서드는 테스트를 수행하는 메소드가 된다.</li>\n<li>JUnit은 각각의 테스트가 서로 영향을 주지 않고, 독립적으로 실행됨을 원칙으로 하며, @Test마다 객체를 생성한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Ignore</code></p>\n<ul>\n<li>@Ignore가 선언된 메서드는 테스트를 실행하지 않는다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Before</code></p>\n<ul>\n<li>@Before가 선언된 메서드는 @Test 메서드가 실행되기 전에 반드시 실행된다.</li>\n<li>@Test메서드에서 공통으로 사용하는 코드를 @Before 메서드에 선언하여 사용하면 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@After</code></p>\n<ul>\n<li>@After가 선언된 메서드는 @Test 메서드가 실행된 후 실행된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@BeforeClass</code></p>\n<ul>\n<li>@BeforeClass 어노테이션은 @Test 메서드보다 먼저 한번만 수행되어야 할 경우에 사용된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@AfterClass</code></p>\n<ul>\n<li>@AfterClass 어노테이션은 @Test 메서드보다 나중에 한번만 수행되어야 할 경우에 사용된다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>JUnit4와 Junit5는 테스트 어노테이션이 서로 다르다.</p>\n<p>: 해당글 참고 예정 : <a href=\"https://pureainu.tistory.com/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pureainu.tistory.com/190</a></p>\n</blockquote>\n<h3 id=\"자주-사용하는-junit-메서드\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-junit-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자주 사용하는 JUnit 메서드</h3>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>assertEquals(a,b)</strong></td>\n<td>객체 a, b의 값이 일치하는 지 확인</td>\n</tr>\n<tr>\n<td>assertArrayEquals(a,b)</td>\n<td>배열 a, b의 값이 일치하는 지 확인</td>\n</tr>\n<tr>\n<td>assertSame(a,b)</td>\n<td>객체 a, b가 같은 객체인지를 확인 <br/> 두 객체의 레퍼런스가 동일한지 확인</td>\n</tr>\n<tr>\n<td>assertTrue(a)</td>\n<td>조건 a가 참인가를 확인</td>\n</tr>\n<tr>\n<td><strong>assertNotNull(a)</strong></td>\n<td>객체 a가 null이 아님을 확인</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"springt-test-어노테이션\"><a href=\"#springt-test-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springt-Test 어노테이션</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">@RunWith(SpringJUnit4ClassRunner.class)</code></p>\n<ul>\n<li>@RunWith 어노테이션을 사용함으로써, JUnit에 내장된 러너를 사용하는 대신 어노테이션에 정의된 러너 클래스를 사용</li>\n<li>JUnit 프레임워크의 테스트 실행방법을 확장할 때 사용하는 어노테이션이다.</li>\n<li>@RunWith를 사용하기 위해선 JUnit 실행에 필요한 SpringJUnit4ClassRunner 클래스를 상속받은 @RunWith(SpringRunner.class)를 꼭 붙여서 사용해야 한다.</li>\n<li>@RunWith 어노테이션은 각각의 테스트 별로 객체가 생성되더라도 싱글톤(Singletone)의 ApplicationContext를 보장한다.</li>\n<li>@RunWith 어노테이션은 JUnit4에서 주로 사용하는 것으로 알고 있고, JUnit5의 경우에는 @ExtendWith를 사용한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@ContextConfiguration</code></p>\n<ul>\n<li>스프링 빈(Bean) 설정 파일의 위치를 지정할 때 사용하는 어노테이션이다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Autowired</code></p>\n<ul>\n<li>스프링 DI에서 사용하는 어노테이션이다.</li>\n<li>해당 변수에 자동으로 빈(Bean)을 매핑해준다.</li>\n<li>스프링 빈(Bean) 설정 파일을 읽기 위해 GenericXmlApplicatoinContext를 사용할 필요가 없다</li>\n<li>변수, setter 메서드, 생성자, 일반 메서드에 적용 가능하다.</li>\n<li>의존하는 객체를 주입할 때는 주로 Type을 사용한다.</li>\n<li><property>, <constructer-arg> 태그와 동일한 역할을 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@SpringBootTest</code></p>\n<ul>\n<li>통합 테스트를 제공하는 기본적인 스프링 부트 테스트 어노테이션이다.</li>\n<li>여러 단위의 테스트를 하나의 통합된 테스트로 수행할 때 적합한 어노테이션이다.</li>\n<li>만능 테스트 어노테이션으로 하고 싶은 모든 테스트를 수행할 수 있다.</li>\n<li>애플리케이션에 설정된 빈을 모두 로드하기 때문에 규모가 클 수록 느려지는 단점이 있다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@WebMvcTest</code></p>\n<ul>\n<li>MVC를 위한 테스트 어노테이션이다.</li>\n<li>웹에서 테스트하기 힘든 Controller를 테스트하는 데 적합하고 웹 상의 요청 또는 응답에 대해 테스트할 수 있다.</li>\n<li>@WebMvcTest를 사용하면 MVC 관련 설정인 어노테이션만 불러오기 때문에 @SpringBootTest보다 가벼운 테스트가 가능</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@DataJpaTest</code></p>\n<ul>\n<li>JPA 관련 테스트 설정만 로드하는 어노테이션이다.</li>\n<li>데이터 소스의 설정이 정상적인지 JPA를 사용하여 데이터를 제대로 CRUD 하는지 테스트가 가능하다.</li>\n<li>@Entity 어노테이션을 스캔하여 Spring Data JPA 저장소를 구성한다.</li>\n<li>실제 데이터 베이스 공간을 사용하지 않고, 내장형 데이터 베이스 공간을 사용하여 테스트하기 때문에 JPA 테스트 이후 실제 데이터 베이스가 변경 되었는지 걱정할 필요가 없다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@RestClientTest</code></p>\n<ul>\n<li>REST 관련 테스트를 도와주는 어노테이션이다.</li>\n<li>REST 통신의 데이터 형식으로 주로 사용되는 JSON 형식에 대해서 제대로 응답을 반환하는지 등을 테스트 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Json Test</code></p>\n<ul>\n<li>JSON 테스트를 지원하는 어노테이션이다.</li>\n<li>@JsonTest 어노테이션은 JSON의 직렬화와 역직렬화를 수행하는 라이브러리인 Gson과 Jackson API 테스트를 제공한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>다음과 같이 스프링 테스트에서 사용하는 어노테이션에 대해서 간단하게 정리하였다.</p>\n<p>이후에는 mock과 mockito에 대해서 작성해보아야 겠다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://donghun.dev/Spring-Boot-Test-Keywrod-one\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://donghun.dev/Spring-Boot-Test-Keywrod-one</a></li>\n<li><a href=\"https://epthffh.tistory.com/entry/Junit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84%ED%85%8C%EC%8A%A4%ED%8A%B8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://epthffh.tistory.com/entry/Junit을-이용한-단위테스트</a></li>\n<li><a href=\"https://shlee0882.tistory.com/202\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shlee0882.tistory.com/202</a></li>\n<li><a href=\"https://pureainu.tistory.com/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pureainu.tistory.com/190</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/SpringLogo.214a68b.be0c3d9590430504675b948223711f21.png","size":{"width":820,"height":442},"sizes":"(max-width: 820px) 100vw, 820px","srcset":["/assets/static/SpringLogo.a67b0b2.be0c3d9590430504675b948223711f21.png 480w","/assets/static/SpringLogo.214a68b.be0c3d9590430504675b948223711f21.png 820w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 820 442' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-29f2605aef896f90944d207b9d4e9d4c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-29f2605aef896f90944d207b9d4e9d4c)' width='820' height='442' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAiAEADASIAAhEBAxEB/8QAGwABAAMBAAMAAAAAAAAAAAAAAAQFBgMCBwj/xAAqEAABAwQBAgUEAwAAAAAAAAABAgMEAAURIRIGMRNBUWGBFBUiMgdxof/EABgBAQADAQAAAAAAAAAAAAAAAAACAwQB/8QAIxEAAgICAgIBBQAAAAAAAAAAAAECEQMhEjEEQVEiYZGx4f/aAAwDAQACEQMRAD8A%2bnaUpQCs51b1SxYEobS348xwckt5wEj1Ua0dYx2BBX/IEt%2b9lrwRGQ7HD5AQcYB76OPT3rN5U5xglj026v4Ksrkl9Psr7H17OnXFqO5bUPpcVjEbPJPvvR/yvYDKy42FKTxVsFOc4I0RUWNLiuZFrZQhgDLkkN8G0pHocDkf60PWu8RYdbU6j9HFqWj3STo/Pf5rnjKcVU58hiUlpys7UpStRaKgXi5t2xplS21uuPuBpptBAKlEZ7kgDt51PqtvsF6fFS019ItPLK2pTXNCx8HII9RUMnLi%2bPZGV1oiOdRcJLMUWueZjrRdSxxSDpWDk5wB557VW3i%2b225Qm4cmBOedfWtox2xxdQ4jB4nfuDntquMKx3W3XmMIbyCW4jmVuNqUz%2bTmfCG8gAdt51VjbunXo90jXCRKQ7IDjzr5CMBSlpCQE%2bgAFYrz5Fxa%2bzuutfn2UXkkqKCNHs0e4JaMS7T5AeW0mO66Fp5oSFdsgY3561WjR1RHcaaSxDluTXHVsiGEgOJUj9snOABkbrxidPusX77gZCCj6h57gEnOFpSAPjFV1ytUy1z/ALjBDj0lUp50eGyXEhtYT%2bK0gg%2bXcVGMcuFNxVK/hda3%2bziU4LSNDaLu3c3pbSWH2HYqkpcS8ACCRnGjVlWd6Rjzg9c51yQpDkt1JSlaOBwlOM8cnA9Ad6rRVtwSlKCcu/7ovxtuNsUpSrSYpSlAKUpQClKUB//Z' /%3e%3c/svg%3e"}}},"context":{}}