{"hash":"6eab5397a2d6c11ddf021b778b38f6e8e79b2231","data":{"post":{"title":"[Java] Effective Java, 객체 생성과 삭제","path":"/01-java-effective-java/","date":"11. April 2021","timeToRead":25,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Effective Java","title":"Effective Java","path":"/tag/Effective%20Java/"},{"id":"Object","title":"Object","path":"/tag/Object/"}],"description":"Effective Java 책 중, ch2 객체 생성과 삭제에 대해 정리합니다.","content":"<h1 id=\"객체-생성과-삭제\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%82%AD%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 생성과 삭제</h1>\n<h2 id=\"item-1-생성자-대신-정적-팩토리-메서드-고려\"><a href=\"#item-1-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B3%A0%EB%A0%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 1. 생성자 대신 정적 팩토리 메서드 고려</h2>\n<h3 id=\"정적-팩토리-메서드의-장점\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 팩토리 메서드의 장점</h3>\n<p>다음과 같이 정적 팩토리 메서드를 통해 생성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rank</span><span class=\"token punctuation\">></span></span> faceCards <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>JACK<span class=\"token punctuation\">,</span> QUEEN<span class=\"token punctuation\">,</span> KING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BigInteger</span> prime <span class=\"token operator\">=</span> <span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">StackWalker</span> luke <span class=\"token operator\">=</span> <span class=\"token class-name\">StackWalker</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"1-정적-팩토리-메서드의-한-가지-장점은-생성자와-달리-이름이-존재합니다\"><a href=\"#1-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%ED%95%9C-%EA%B0%80%EC%A7%80-%EC%9E%A5%EC%A0%90%EC%9D%80-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%A1%B4%EC%9E%AC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 정적 팩토리 메서드의 한 가지 장점은 생성자와 달리 이름이 존재합니다.</h4>\n<ul>\n<li>정적 팩토리가 사용하기 쉽고, 읽기 쉬운 클라이언트 코드를 제공합니다.</li>\n<li>여러 생성자가 필요하다고 판단되면, 정적 팩토리 메서드를 사용하는 것이 좋습니다.</li>\n</ul>\n<h4 id=\"2-생성자와-달리-호출될-때마다-새-개체를-만들-필요가-없습니다\"><a href=\"#2-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%ED%98%B8%EC%B6%9C%EB%90%A0-%EB%95%8C%EB%A7%88%EB%8B%A4-%EC%83%88-%EA%B0%9C%EC%B2%B4%EB%A5%BC-%EB%A7%8C%EB%93%A4-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 생성자와 달리 호출될 때마다 새 개체를 만들 필요가 없습니다.</h4>\n<ul>\n<li>생성된 인스턴스를 캐시하고 불필요한 중복 객체 생성을 방지하고 반복적으로 분배 가능합니다.</li>\n<li>반복 된 호출에서 동일한 객체를 반환하는 정적 팩토리 메서드의 기능을 통해 클래스는 언제든지 존재하는 인스턴스를 엄격하게 제어 할 수 있습니다.</li>\n</ul>\n<h4 id=\"3-생성자와-달리-반환-유형의-모든-하위-유형의-객체를-반환할-수-있습니다\"><a href=\"#3-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%EB%B0%98%ED%99%98-%EC%9C%A0%ED%98%95%EC%9D%98-%EB%AA%A8%EB%93%A0-%ED%95%98%EC%9C%84-%EC%9C%A0%ED%98%95%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 생성자와 달리 반환 유형의 모든 하위 유형의 객체를 반환할 수 있습니다.</h4>\n<ul>\n<li>이러한 유연함을 이용해 특정 응용 프로그램은 API가 클래스를 공개하지 않고도 객체를 반환 할 수 있습니다.</li>\n<li>Java 8에서는 인터페이스에 정적 메서드를 포함 할 수 없다는 제한이 제거되었으므로 편하게 사용할 수 있습니다.</li>\n</ul>\n<h4 id=\"4-반환-된-개체의-클래스가-입력-매개-변수의-함수로-호출마다-다를-수-있다\"><a href=\"#4-%EB%B0%98%ED%99%98-%EB%90%9C-%EA%B0%9C%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%9E%85%EB%A0%A5-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98%EC%9D%98-%ED%95%A8%EC%88%98%EB%A1%9C-%ED%98%B8%EC%B6%9C%EB%A7%88%EB%8B%A4-%EB%8B%A4%EB%A5%BC-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 반환 된 개체의 클래스가 입력 매개 변수의 함수로 호출마다 다를 수 있다.</h4>\n<ul>\n<li>구현 클래스의 존재는 클라이언트에 보이지 않기 때문에 RegularEnumSet과 같은 작은 열거 유형에 대한 성능적 이점이 있습니다.</li>\n</ul>\n<h4 id=\"5-메서드를-포함하는-클래스가-작성될-때-반환-된-객체의-클래스가-존재할-필요가-없다\"><a href=\"#5-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%9E%91%EC%84%B1%EB%90%A0-%EB%95%8C-%EB%B0%98%ED%99%98-%EB%90%9C-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%A0-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 메서드를 포함하는 클래스가 작성될 때 반환 된 객체의 클래스가 존재할 필요가 없다.</h4>\n<ul>\n<li>유연한 정적 팩토리 메소드는 JDBC (Java Database Connectivity API)와 같은 Service provider framework 기반을 형성합니다.</li>\n<li>\n<p>서비스 공급자 프레임워크는 세가지 필수 구성 요소가 존재합니다.</p>\n<ul>\n<li>구현을 나타내는 서비스 인터페이스 (<code class=\"language-text\">a service interface</code>)</li>\n<li>공급자가 구현을 등록하느데 사용하는 공급자 등록 API (<code class=\"language-text\">a provider registration APi</code>)</li>\n<li>클라이언트가가 서비스의 인스턴스를 얻기 위해 사용하느 서비스 액세스 API (<code class=\"language-text\">a service access API</code>)</li>\n<li>(선택적 네 번째 구성 요소) 서비스 제공 업체 인터페이스 (<code class=\"language-text\">service provider interface</code>)</li>\n</ul>\n</li>\n</ul>\n<p>서비스 제공 업체 프레임 워크 패턴에는 다양한 변형이 존재합니다.</p>\n<ul>\n<li>서비스 액세스 API는 공급자가 제공하는 것보다 더 풍부한 서비스 인터페이스를 클라이언트에 반환 가능 (<code class=\"language-text\">Bridge 패턴</code>)</li>\n</ul>\n<h3 id=\"정적-팩토리-메서드의-단점\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 팩토리 메서드의 단점</h3>\n<h4 id=\"1-public-또는-protected-생성자가-없는-클래스는-하위-클래스화-할-수-없습니다\"><a href=\"#1-public-%EB%98%90%EB%8A%94-protected-%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80-%EC%97%86%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%ED%95%98%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%99%94-%ED%95%A0-%EC%88%98-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. public 또는 protected 생성자가 없는 클래스는 하위 클래스화 할 수 없습니다.</h4>\n<ul>\n<li>Collections Framework에서 편의 구현 클래스를 하위 클래스로 만드는 것은 불가능합니다.</li>\n<li>프로그래머가 상속(inheritance)보다 합성(composition) 를 사용하는 것을 장려하며, immutable types에 필요합니다.</li>\n</ul>\n<h4 id=\"2-프로그래머가-찾기-어렵습니다\"><a href=\"#2-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EC%B0%BE%EA%B8%B0-%EC%96%B4%EB%A0%B5%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 프로그래머가 찾기 어렵습니다.</h4>\n<ul>\n<li>API 문서에서 눈에 띄지 않습니다.</li>\n<li>생성자가 수행하므로 생상자 대신 정적 팩토리 메서드를 제공하는 클래스를 인스턴스화 하는 방법을 파악하기 어렵습니다.</li>\n</ul>\n<h3 id=\"대표적-팩토리-메서드\"><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대표적 팩토리 메서드</h3>\n<p>다음은 대표적인 일반적인 이름입니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">from</code></p>\n<ul>\n<li>단일 매개 변수를 취하고이 유형 의 해당 인스턴스를 반환하는 유형 변환 메소드</li>\n<li><code class=\"language-text\">Date d = Date.from(instant)</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">of</code></p>\n<ul>\n<li>여러 매개 변수를 사용하고이를 통합하는이 유형의 인스턴스를 반환하는 집계 메서드</li>\n<li><code class=\"language-text\">Set &lt;Rank&gt; faceCards = EnumSet.of (JACK, QUEEN, KING);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">valueOf</code></p>\n<ul>\n<li>from및 of에 대한 보다 자세한 대안</li>\n<li><code class=\"language-text\">BigInteger prime = BigInteger.valueOf (Integer.MAX_VALUE);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">instance</code> or <code class=\"language-text\">getInstance</code></p>\n<ul>\n<li>매개 변수 (있는 경우)로 설명되지만 같은 값을 가질 수없는 인스턴스를 반환</li>\n<li><code class=\"language-text\">StackWalker luke = StackWalker.getInstance (옵션);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">create</code> or <code class=\"language-text\">newInstance</code></p>\n<ul>\n<li>instance또는 getInstance. 단, 메서드가 각 호출이 새 인스턴스를 반환하도록 보장한다는 점은 예외</li>\n<li><code class=\"language-text\">Object newArray = Array.newInstance (classObject, arrayLen);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">getType</code></p>\n<ul>\n<li>getInstance비슷하지만 팩토리 메서드가 다른 클래스에있는 경우 사용</li>\n<li><code class=\"language-text\">FileStore fs = Files.getFileStore (경로);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">newType</code></p>\n<ul>\n<li>newInstance비슷하지만 팩토리 메서드가 다른 클래스에있는 경우 사용</li>\n<li><code class=\"language-text\">BufferedReader br = Files.newBufferedReader (경로);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">type</code></p>\n<ul>\n<li>get유형 과 new유형의 간결한 대안</li>\n<li><code class=\"language-text\">List &lt;Complaint&gt; litany = Collections.list (legacyLitany);</code></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"item-2-생성자-매개-변수가-많은-경우-빌더를-고려\"><a href=\"#item-2-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98%EA%B0%80-%EB%A7%8E%EC%9D%80-%EA%B2%BD%EC%9A%B0-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EA%B3%A0%EB%A0%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 2. 생성자 매개 변수가 많은 경우, 빌더를 고려</h2>\n<p>Static factories 와 생성자는 제한을 고유하므로, 잘 확장되지 않습니다.</p>\n<h3 id=\"telescoping-constructor-패턴\"><a href=\"#telescoping-constructor-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>telescoping constructor 패턴</h3>\n<ul>\n<li>생성자에 필수 매개 변수만 제공하고, 다른 하나에는 단일 선택적 매개 변수, 다른 하나는 두 개의 선택적 맥개 변수가 있는 등의 방식으로 생성자를 제공하는 패턴입니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sodium<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>텔레 스코핑 생성자 패턴은 작동하지만 매개 변수가 많으면 클라이언트 코드를 작성하기 어렵고 여전히 읽기가 어렵습니다.</li>\n</ul>\n<h3 id=\"javabeans-패턴\"><a href=\"#javabeans-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaBeans 패턴</h3>\n<p>이를 해결하는 방법은 setter 메소드 호출(<code class=\"language-text\">JavaBeans 패턴</code>)입니다. (이 경우는 텔레 스코핑 생성자 패턴을 해결하기에는 유리하나 <strong>불일치를 허용하고 가변성을 요구</strong>한다는 단점이 존재합니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> servingSize <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수; 기본값 없음</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> servings <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수; 기본값 없음</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> calories <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> fat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sodium <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p>JavaBeans 패턴은 구성이 여러 호출로 분할되기 때문에 JavaBean은 구성 과정에서 일관성없는 상태에 있을 수 있습니다.</p>\n<ul>\n<li>유효성을 확인하는 것으로 일관성을 유지할 수 있는 옵션이 따로 없습니다.</li>\n<li>클래스를 불변으로 만들 가능성을 배제하고 스레드 안전성을 보장하기 위해 노력이 필요합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"builder-패턴\"><a href=\"#builder-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Builder 패턴</h3>\n<p>텔레 스코핑 생성자 패턴의 안전성 + JavaBeans 패턴의 가독성을 결합</p>\n<ul>\n<li>클라이언트는 필요한 모든 매개 변수를 사용하여 생성자 (또는 정적 팩토리)를 호출하고 빌더 객체를 가져옵니다.</li>\n<li>그런 다음 클라이언트는 빌더 개체에서 setter와 유사한 메서드를 호출하여 관심있는 각 선택적 매개 변수를 설정합니다.</li>\n<li>클라이언트는 매개 변수가없는 build메서드를 호출하여 일반적으로 변경할 수없는 개체를 생성합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필수 매개 변수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 선택적 매개 변수-기본값으로 초기화</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> calories <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> fat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sodium <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servingSize <span class=\"token operator\">=</span> servingSize<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servings <span class=\"token operator\">=</span> 서빙<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">NutritionFacts</span> cocaCola <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NutritionFacts<span class=\"token punctuation\">.</span>Builder</span> <span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>calories <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>sodium <span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>carbohydrate <span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>build <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<p>해당 코드는 작성하기 쉽고 읽기 쉽습니다.</p>\n<ul>\n<li>스프링은 <code class=\"language-text\">@Builder</code> 어노테이션이 있습니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스 계층 구조를위한 빌더 패턴</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Topping</span> <span class=\"token punctuation\">{</span>HAM<span class=\"token punctuation\">,</span> MUSHROOM<span class=\"token punctuation\">,</span> ONION<span class=\"token punctuation\">,</span> PEPPER<span class=\"token punctuation\">,</span> SAUSAGE<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">EnumSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span>noneOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> addTopping <span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span> topping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     toppings<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span>requireNonNull <span class=\"token punctuation\">(</span>topping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> self <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Pizza</span> build <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Subclasses must override this method to return \"this\"</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">T</span> self <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toppings <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// See Item  50</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 추상 self메서드 와 함께 메서드 체이닝이 캐스트 없이도 하위 클래스에서 제대로 작동합니다. 따라서 아래의 장점을 가집니다.</p>\n<ul>\n<li>빌더 패턴은 매우 유연합니다. (반복 사용을 통해 여러 개체를 빌드할 수 있음)</li>\n</ul>\n<p>다만, 이러한 단점이 있습니다.</p>\n<ul>\n<li>개체를 만들기 위해서는 작성기를 만들어야 하기 때문에, 만드는 비용 및 성능이 중요한 상황에서 문제가 될 수 있습니다. (처음부터 시작하는 경우에 빌더를 선택하면 좋습니다.)</li>\n</ul>\n<p>따라서 <strong>빌더 패턴은 생성자 또는 정적 팩토리에 소수 이상의 매개 변수가 있는 클래스를 디자인할 때 장점</strong>을 가집니다.</p>\n<br/>\n<h2 id=\"item-3-private-생성자-또는-열거형을-통해-싱글-톤-속성을-적용\"><a href=\"#item-3-private-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%98%90%EB%8A%94-%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%8B%B1%EA%B8%80-%ED%86%A4-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 3. private 생성자 또는 열거형을 통해 싱글 톤 속성을 적용</h2>\n<p>singleton은 정확하게 한번만 인스턴스화 되고, stateless 또는 unique한 시스템 컴포넌트입니다. <strong>클래스를 싱글톤으로 만들면, 클라이언트 테스트가 어려울 수 있습니다.</strong> 왜냐하면 해당 유형으로 사용되는 인터페이스를 구현하지 않는 이상에 싱글톤을 mock으로 구현할 수 없기 때문입니다.</p>\n<p>일반적으로 싱글톤을 구현하는 방법에 따라 구분할 수 있습니다.</p>\n<h3 id=\"1-public-final-field를-통한-singleton-구현\"><a href=\"#1-public-final-field%EB%A5%BC-%ED%86%B5%ED%95%9C-singleton-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. public final field를 통한 singleton 구현</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public final field가 있는 singleton</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Elvis</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>private 생성자는 public static final 필드를 초기화하기 위해 한번만 호출되며, Elvis.INSTANCE는 public, protected 생성자가 없기 때문에 monoelvistic(단일성)이 보장됩니다.</li>\n<li>\n<p><code class=\"language-text\">public final field</code>는 해당 장점을 가집니다.</p>\n<ul>\n<li>API가 클래스가 싱글톤임을 명확하게 합니다.</li>\n<li>퍼블릭 정적 필드는 최종이므로 항상 동일한 객체 참조를 포함합니다.</li>\n<li>매우 간단합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-정적-팩토리를-통한-싱글톤\"><a href=\"#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%8B%B1%EA%B8%80%ED%86%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 정적 팩토리를 통한 싱글톤</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Singleton with static factory</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Elvis</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Elvis</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code class=\"language-text\">Elvis.getInstance</code> 을 사용하는 모든 호출은 동일한 객체 참조를 반환하고, 다른 Elvis 인스턴스는 생성되지 않습니다.</li>\n<li>\n<p>정잭 팩토리의 장점은 아래와 같습니다.</p>\n<ul>\n<li>API를 변경하지 않고도 클래스가 싱글톤인지 여부에 대해 바꿀 수 있는 유연성을 제공합니다.</li>\n<li>애플리케이션에서 필요한 경우, <code class=\"language-text\">genericwe singleton factory</code> 를 작성할 수 있습니다.</li>\n<li><code class=\"language-text\">method reference(메소드 참조)</code> 를 supllier(공급자)로 사용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>그러나 1번이나 2번의 접근 방식은 싱글톤은 <code class=\"language-text\">serializabe(직렬화)</code> 하는 경우에는 <code class=\"language-text\">implements Serializable</code> 만으로는 충분하지 않기 때문에 모든 인스턴스 필드(<code class=\"language-text\">transient</code>)를 선언하고 <code class=\"language-text\">readResolve</code> 메소드를 제공해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 싱글톤 속성을 보존하는 readResolve 메서드</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> readResolve <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// true Elvis를 반환하고 가바지 커렉터가 Elvis의 복사품을 처리합니다.</span>\n  <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"3-단일-요소-열거-형-선언\"><a href=\"#3-%EB%8B%A8%EC%9D%BC-%EC%9A%94%EC%86%8C-%EC%97%B4%EA%B1%B0-%ED%98%95-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 단일 요소 열거 형 선언</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Enum sigleton - the preferred approach</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  INSTANCE<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>public field 접근 방식과 유사하지만 더 <strong>간결하고 직렬화를 제공</strong>합니다.</li>\n<li>종종 singleton을 구현하는 가장 좋은 방법입니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-4-private-생성자를-통해-noninstantiability비인스턴스성을-적용합니다\"><a href=\"#item-4-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%ED%86%B5%ED%95%B4-noninstantiability%EB%B9%84%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%84%B1%EC%9D%84-%EC%A0%81%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 4. private 생성자를 통해 noninstantiability(비인스턴스성)을 적용합니다.</h2>\n<ul>\n<li><code class=\"language-text\">java.lang.Math</code> 나 <code class=\"language-text\">java.util.Arrays</code>, <code class=\"language-text\">java.util.Colletions</code> 와 같은 유틸리티 클래스는 인스턴스화되도록 설계되어 있지 않습니다.</li>\n<li>추상 클래스를 만들어서 noninstantiability를 적용하려는 것은 동작하지 않습니다.</li>\n<li>다만 기본 생성자는 클래스에 명시적 생성자가 없는 경우에 생성되므로, private constructor을 포함함으로서 class를 noninstantiable 상태로 만들 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Noninstantiable utility class</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UtilityClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Suppress default constructor for noninstantiability</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">UtilityClass</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>explict constructor(명시적 생성자)는 private 이므로, 외부에서 접근할 수 없습니다.</li>\n<li><code class=\"language-text\">AssertionError()</code> 는 생성자가 실수로 클래스 내에서 호출되는 경우에 보험을 제공합니다. 즉, 어떤 상황에서도 클래스가 인스턴스화 되지않음을 보장합니다.</li>\n<li>다만, 이러한 방법은 클래스가 하위 클래스로 분류되는 것을 방지합니다. 즉, 서브 클래스에는 호출할 액세스 가능한 super class 생성자가 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-5-hardwiring-자원에-의존성-주입dependency-injection을-선호합니다\"><a href=\"#item-5-hardwiring-%EC%9E%90%EC%9B%90%EC%97%90-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85dependency-injection%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 5. Hardwiring 자원에 의존성 주입(Dependency Injection)을 선호합니다.</h2>\n<p>많은 클래스가 하나 이상의 기본 리소스에 의존합니다.</p>\n<p>부정적인 케이스는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 유연하지 않고, 테스트할 수 없는 잘못 사용된 유틸리티</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lexicon</span> dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Noninstantiable</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isValid <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggests</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>즉, Static utility classes 와 싱글톤은 기본 리스스에 의해 동작이 매개변수화 된 클래스에 적합하지 않습니다.</li>\n<li>따라서 이를 해결하는 패턴은 <strong>새 인스턴스를 만들때, 생성자에 리소스를 전달하는 방법</strong>입니다. (DI, Dependency Injection)</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Dependency injection provides flexibility and testability</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellCheker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lexicon</span> dictionary<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpellChecker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lexicon</span> dictionary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggestions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Dependency Injection Pattern(의존성 주입 패턴)은 다음의 장점을 가집니다.</p>\n<ul>\n<li>immutabiliy(불변성)을 보존합니다.</li>\n<li>\n<p>resource factory를 전달함으로서 패턴을 변경할 수 있습니다. (<strong>Factory Method Pattern</strong>)</p>\n<ul>\n<li>자바8에 도입된 <code class=\"language-text\">Supplier&lt;T&gt;</code> 인터페이스는 Factories를 표현하는데 효과적입니다.</li>\n<li><code class=\"language-text\">Supplier&lt;T&gt;</code> 메소드는 <code class=\"language-text\">bounded wildcard type(제한된 와일드카드 유형)</code> 을 사용해서 팩토리의 매개변수를 제한하여, 클라이언트가 지정된 유형의 하위 유형의 생성하는 팩토리를 전달해야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mosaic</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Tile</span><span class=\"token punctuation\">></span></span> tileFactory<span class=\"token punctuation\">)</span></code></pre>\n<p>결론적으로는 <strong>singleton 이나 static utility class를 사용하여 하나 이상의 기본 리소스에 의존하는 클래스를 구현하지 않고, 클래스가 이러한 리소스를 직접 생성하지 않도록 설정</strong>해야합니다. 대신에, Resource 또는 Factory를 통해서 생성자에 전달해야합니다. (또는 static factory 나 builder) <strong>DI를 통해서 클래스의 유연성과 재사용성, 테스트 기능을 향상</strong> 시킬 수 있습니다.</p>\n<br/>\n<h2 id=\"item-6-불필요한-객체를-생성하는-것을-줄입니다\"><a href=\"#item-6-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%84-%EC%A4%84%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 6. 불필요한 객체를 생성하는 것을 줄입니다.</h2>\n<p>필요할때마다 기능적으로 동등한 새 객체를 만드는 것보다 단일 객체를 재사용하는 것이 적절합니다.</p>\n<ul>\n<li>나쁜 케이스 : <code class=\"language-text\">String s = new String(&quot;clothes&quot;)</code></li>\n</ul>\n<p>좀 더 개선하면 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">String s = &quot;clothes&quot;</code></li>\n</ul>\n<p><code class=\"language-text\">static factory method</code> 를 사용하면, 불필요한 객체 생성을 피할 수 있습니다. 따라서 다음과 같이 작성하여 성능이 향상 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 성능 향상 가능.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isRomanNumeral <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^(?=.)M*(C[MD]|D?C{0,3})\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다만 문자열이 정규식과 일치하는지 확인하는 가장 쉬운 방법이지만 String.matches` 성능이 중요한 상황에서 반복적으로 사용하기에는 적합하지 않습니다. 이를 개선하면 아래처럼 바뀝니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 성능 향상을 위해 값 비싼 객체 재사용합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RomanNumerals</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> ROMAN <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>compile <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"^ (? =.) M * (C [MD] | D? C {0,3})\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"( X [CL] | L? X {0,3}) (I [XV] | V? I {0,3}) $ \"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isRomanNumeral <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ROMAN<span class=\"token punctuation\">.</span>matcher <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>matches <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>이러한 버전은 isRomanNumeral을 자주 호출할 경우 높은 성능을 얻으며, 명확성도 향상되었고 사용자가 보기 쉽습니다.</li>\n</ul>\n<p>Autoboxing는 애매하지만, primitive 와 boxed primitive types간의 구분을 없애버리지는 않습니다. 이러한 잘못된 사용은 속도를 느리게 만듭니다. 따라서, boxed primitives 보다, primitive를 선호하고 의도하지 않은 오토 박싱을 조심해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 느리게 만들어버림.</span>\n    sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"item-7-사용하지-않는-개체의-참조를-제거합니다\"><a href=\"#item-7-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B0%9C%EC%B2%B4%EC%9D%98-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 7. 사용하지 않는 개체의 참조를 제거합니다.</h2>\n<p>흔히. 가비지컬렉터를 사용하는 언어의 경우에는 메모리 관리에 대해 생각할 필요가 없다고 생각을 하지만 그렇지 않습니다.</p>\n<h3 id=\"메모리-낭비의-원인-1---미-참조\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-1---%EB%AF%B8-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 1 - 미 참조</h3>\n<p>다음은 간단하게 스택을 구성한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n      elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음 코드에서 스택이 커졌다가 줄어든 경우, 프로그램에 더 이상 참조가 없더라고 스택에서 참조된 객체는 가비지 수집이 되지 않습니다.</p>\n<p>이를 수정하는 방법은 참조가 쓸모 없게 되면 <strong>null out</strong> 참조를 하면 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> pop <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 사용하지 않는 참조</span>\n  <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>객체 참조를 무효화하는 것은 표준이 아니라 예외로 처리해야합니다.</li>\n<li>클래스가 자체 메모리를 관리할 때마다 프로그래머는 메모리 누수에 대해 경고해야합니다. 해제시 개체 참조를 null로 처리해야합니다.</li>\n</ul>\n<h3 id=\"메모리-낭비의-원인-2---캐시\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-2---%EC%BA%90%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 2 - 캐시</h3>\n<p>캐시에 넣어놓으면 참조가 있다는 사실을 이후에 잊고, 관련성이 없어진 이후에도 남아있을 확률이 높습니다. 대부분의 캐시에서 사용하는 데이터의 가치는 시간과 반비례하기 때문에 항목을 정리할 필요가 있습니다. <code class=\"language-text\">LinkedHashMap</code> 는 <code class=\"language-text\">removeEldestEntry</code> 방법을 통해서 이러한 낭비를 피하기 위해 노력합니다.</p>\n<h3 id=\"메모리-낭비의-원인-3-리스너-및-기타-콜백\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-3-%EB%A6%AC%EC%8A%A4%EB%84%88-%EB%B0%8F-%EA%B8%B0%ED%83%80-%EC%BD%9C%EB%B0%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 3. 리스너 및 기타 콜백</h3>\n<p>클라이언트가 콜백을 등록하지만, 명시적으로 취소하지 않으면 누적됩니다.</p>\n<p>이러한 부분을 삭제하는 방법은 <code class=\"language-text\">.NET Framework</code> 의 <code class=\"language-text\">WeakHashMap</code> 과 같습니다.</p>\n<p><strong>이렇듯이 메모리 낭비는 명백한 오류로 나타나지 않기 때문에, 미리 예상하고 예방하는 방법을 배우는 것이 매우 바람직합니다.</strong></p>\n<br/>\n<h2 id=\"item-8-finalizers종료자와-cleaners클리너를-피합니다\"><a href=\"#item-8-finalizers%EC%A2%85%EB%A3%8C%EC%9E%90%EC%99%80-cleaners%ED%81%B4%EB%A6%AC%EB%84%88%EB%A5%BC-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 8. Finalizers(종료자)와 Cleaners(클리너)를 피합니다.</h2>\n<p><code class=\"language-text\">Finalizers</code> 는 얘측할 수 없고 종종 위험하고 일반적으로 불필요합니다.</p>\n<ul>\n<li>비정상적인 동작, 성능 저하, 이식성의 문제가 발생할 수 있습니다.</li>\n</ul>\n<p>Java 9부터는 Finalizers를 더이상 사용하지는 않지만, Cleaners를 사용합니다. 그러나, <code class=\"language-text\">Cleaner</code>는 <code class=\"language-text\">Finalizers</code> 보다 덜 위험하지만 그래도 예측할 수 없고, 느리고, 일반적으로 불필요합니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-1---즉시-실행될-것이라는-보장이-없음\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-1---%EC%A6%89%EC%8B%9C-%EC%8B%A4%ED%96%89%EB%90%A0-%EA%B2%83%EC%9D%B4%EB%9D%BC%EB%8A%94-%EB%B3%B4%EC%9E%A5%EC%9D%B4-%EC%97%86%EC%9D%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 1 - 즉시 실행될 것이라는 보장이 없음</h3>\n<p>종료자나 클리너가 실행되는 시간 사이에 임의의 시간이 걸릴 수 있습니다. 즉, <strong>종료자 또는 클리너에서 시간이 중요한 작업을 수행하면 안됩니다.</strong></p>\n<h3 id=\"finalizers와-cleaner의-단점-2---종료-중에-발생한-예외는-무시됩니다\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-2---%EC%A2%85%EB%A3%8C-%EC%A4%91%EC%97%90-%EB%B0%9C%EC%83%9D%ED%95%9C-%EC%98%88%EC%99%B8%EB%8A%94-%EB%AC%B4%EC%8B%9C%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 2 - 종료 중에 발생한 예외는 무시됩니다.</h3>\n<p>이러한 예외가 손상된 상태로 종료된 경우, 다른 스레드가 이를 사용할려고 하면 비 결정적인 동작이 발생할 수 있습니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-3---심각한-성능-저하\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-3---%EC%8B%AC%EA%B0%81%ED%95%9C-%EC%84%B1%EB%8A%A5-%EC%A0%80%ED%95%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 3 - 심각한 성능 저하</h3>\n<p><code class=\"language-text\">Try-with-resource</code>와 가비지 컬렉터를 쓰는 경우 12ns가 걸리는데 종료자를 사용하면 시간이 550ns가 발생합니다. Cleaner는 조금 더 빠르지만 66ns가 걸립니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-4---심각한-보안-문제-존재\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-4---%EC%8B%AC%EA%B0%81%ED%95%9C-%EB%B3%B4%EC%95%88-%EB%AC%B8%EC%A0%9C-%EC%A1%B4%EC%9E%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 4 - 심각한 보안 문제 존재</h3>\n<p><code class=\"language-text\">finalizer attacks(종료자 공격)</code>을 사용하는 경우, 문제가 발생합니다.</p>\n<p>이를 막기 위해서는 생성자에서 예외를 던지는 경우, 객체가 존재하지 않도록 방지할 수 있으나 종료자가 이를 불가능하게 만듭니다. 이를 <strong>해결하기 위해서는 <code class=\"language-text\">finalize</code> 와 같은 최종 메서드를 사용</strong>해야합니다.</p>\n<h3 id=\"finalizers나-cleaner를-쓰지-않기-위해서\"><a href=\"#finalizers%EB%82%98-cleaner%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers나 Cleaner를 쓰지 않기 위해서.</h3>\n<ul>\n<li><code class=\"language-text\">AutoCloseable</code> 을 통해서 클래스를 구현합니다.</li>\n<li><code class=\"language-text\">try-with-resource</code> 를 통해서 종료를 보장합니다.</li>\n</ul>\n<h3 id=\"finalizers나-cleaner의-합법적인-용도\"><a href=\"#finalizers%EB%82%98-cleaner%EC%9D%98-%ED%95%A9%EB%B2%95%EC%A0%81%EC%9D%B8-%EC%9A%A9%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers나 Cleaner의 합법적인 용도</h3>\n<ul>\n<li>\n<p>리소스 소유자가 close method 호출을 무시할 경우, 안전막 역할을 하는 것입니다.</p>\n<ul>\n<li><code class=\"language-text\">FileInputStream</code>, <code class=\"language-text\">FileOutputStream</code>, <code class=\"language-text\">ThreadPoolExecutor</code> 등이 finalizers를 통해서 안전망 역할을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">native peer</code>가 있는 객체와 관련된 경우에 사용합니다.</p>\n<ul>\n<li>이러한 객체는 일반 객체가 아니므로 가비지 컬렉터가 이에 대해 모르기 때문에, 회수할 수 엇습니다.</li>\n<li>다만, 이렇게 사용을 하더라도 <code class=\"language-text\">close method</code>를 사용해야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클리너를 안전망을 사용하는 경우.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Room</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutoCloseable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cleaner</span> cleaner <span class=\"token operator\">=</span> <span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// cleaning이 필요합니다. Room을 참조하면 안됩니다.</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 방의 쓰레기 더미 수</span>\n    <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numJunkPiles <span class=\"token operator\">=</span> numJunkPiles<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// close 메소드 또는 클리너에 의해 호출</span>\n\t\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cleaning room\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      numJunkPiles <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// room의 상태, cleanable과 공유됨</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">State</span> state<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// cleanable, gc에 의해 가능할때 room이 청소됩니다.</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cleaner<span class=\"token punctuation\">.</span>Cleanable</span> cleanable<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span>numJunkPiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcleanable <span class=\"token operator\">=</span> cleaner<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcleanable<span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=kbh3983&#x26;logNo=220908731253&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">추가적인 참고자료</a></p>\n<p>다음과 같이 State 인스턴스가 Room을 참조하지 않도록 사용합니다.</p>\n<br/>\n<h2 id=\"item-9-try-with-resource-를-try-finally-보다-선호합니다\"><a href=\"#item-9-try-with-resource-%EB%A5%BC-try-finally-%EB%B3%B4%EB%8B%A4-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 9. TRY-WITH-RESOURCE 를 TRY-FINALLY 보다 선호합니다.</h2>\n<p>Java 라이브러리에서는 close 메소드를 호출하는 경우, 많은 자원이 소모되기 때문에 다른 방법을 사용해야합니다.</p>\n<p><code class=\"language-text\">Try-finally</code> 는 2개 이상의 경우에서는 사용하기 어렵기 때문에, <code class=\"language-text\">try-with-resource</code> 를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> firstLineOfFile <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> firstLineOfFile <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> defaultVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> defaultVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/EffectiveJava.633a126.62da2dbeb71f67a6b063e53d90d77388.jpeg","size":{"width":800,"height":1073},"sizes":"(max-width: 800px) 100vw, 800px","srcset":["/assets/static/EffectiveJava.a67b0b2.62da2dbeb71f67a6b063e53d90d77388.jpeg 480w","/assets/static/EffectiveJava.633a126.62da2dbeb71f67a6b063e53d90d77388.jpeg 800w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 1073' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a77cbd8273266b44cedd9d66cbf64af5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a77cbd8273266b44cedd9d66cbf64af5)' width='800' height='1073' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABWAEADASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYFBwIDBAEI/8QAORAAAgEDAwEFBQYDCQAAAAAAAQIDAAQRBRIhMQYHEyJRFBUyQWEjJHGxstEWkaEXJTM2VWRyc4H/xAAYAQADAQEAAAAAAAAAAAAAAAAAAgMFBP/EACkRAAIBAgUCBQUAAAAAAAAAAAABAgMRBCExUXESMiIzQcHwEyNhkaH/2gAMAwEAAhEDEQA/APqmiitc88VvEZbiRIoxjLOwUD5dTQBsorh98aZ/qFn1x/jr%2b9Y%2b/NK4/vOx56feE/egCQoqO9%2b6T8tUseRkfeE/eq41LvM1RtQvRoem2V7YQzNFHOZH8%2b3gngYxkcUk6kYK8itKjOq7QRbFFQHYbW5%2b0PZ2HULqBIJXeRSiEkeViuRn8Kn6ZO6uick4tphSh3toknd7rCy/AUTJ9POvNN9Knept/gHVzJ8AjBb8AwJolowjqj5507UMxWUXsOkypIrEs8DOVwxHmcNhTjHxYOa6VtPbHhim03TYoTIviyWy7W25GQDuPyzXZrd3BHFbRzB/Z799qRZBzxkBtoAJ56mvJrYRRKVntVQchfakTBBx0z1zxWfm/FH5/TUSULwna/z8MjH0/wC8WzWmnaYfDkM584yUVhtXcTyemQAQcHpUl2diCaWYrkW6usnwFmTB3dFxXt1FC91pFq17ayMkgVIlCkwbmTdnHTnb19DU2XWCa5ijlJ8W7cK0bLjG7qfUfL%2bdLWfgV9ymCX3Xbb3RbfdsmzsdYKPRv1Gmel3u/GOydiPofzNMVaFPsXBlVvMlywpS72AG7udfB6ezNTbSp3q4/s813PQWzGmloItSglt7GSC1kkS6sZIljkYuyt4uNqg9fKuQB681svFSCWRoLSRpl8xdwjqp%2bLjgjr04rMXDi61GVJjEILJvERMMoxgDkg%2bvy5qM0A6q92LIXapFuVZocY3yeH5WLHkYUAVxKTtn6HdlezRvsj4mrWcjxxp48qbsKFG0t9Plx06GpTsI80fZyEuzxbJX3EMoUedsZzkn/wArDwL2K6tpJfBVY54WwFA3faDGPUZGaz7Ib20OF4Io7j7V/OeCAGPHXIqNaScMtztwkLVXfb3L47v/APKdh/xP6jTDS73fHPZKwx0w36jTFWjT7FwY9bzJcsKVe9Q7e7zXT/tmpqpb7xsfwZqW4ArtXIPpvFNLQSOqKc11Uv7OVNOuoIHWzVXL8dckgj5kjHBpF0%2b99glnW/nto5ZjBOvhEtsj8LBI6g44JyeCab5HR97NcxsGJ3FgVJGOnJz86i5lsdkQjlgDcjmIjpwPwH51wxslY05Qcnexq0u6gvYbF5NSBlM8SJG458IMOg6AYG71zxUr2VaD3ZLiNfBM0gQMN2fMeRk4B%2bpNRFnb2/vS2LyQGYsAEiUtk54PHGfyqS0AXcWkKsEkcbB3Vy5CkLnpk/kKnXs45HRgouNV3fp7ovXu2Oexun/g/wCo0zUp91kgk7D6cQeR4gP0Ic5FNlaFPsXBj1vMlywqF7Y6euqdnrqykMgSUoD4YBbhgeM/hU1mimeZNZFPv2IWUCR7vVt6nhfDTgH64ofu6tQSTqupgAHLeCgz/Srgrx0WRCjqGUjBBGQan9GOxdYmotJP9lMwd3thBLG663qKmNsj7OPrnrUGlnDos15Y3e8yQyuhIYYdeMMQR8xzV8%2b7bHJPsVtkjB%2byXn%2blaLjQtJuZmmuNMsZZX%2bJ3gVieMckipVMP1xssi1DGOnPqld5W1IDunwOxsGMY8ebp/wBjU4VosbK2sIBBZW8VvCCW2RKFXJOScCt9dEV0xSOScuqTlucVxZyS3IlEygD4cx5ZPXac4/mDXbRRTChRRRQAUUUUAFFFFAH/2Q==' /%3e%3c/svg%3e"}}},"context":{}}