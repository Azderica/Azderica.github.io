{"hash":"314c4422387ef2cae421ff768d6b6746d38a40d1","data":{"post":{"title":"[Java] Java I/O","path":"/13-java-study/","date":"21. February 2021","timeToRead":9,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Stream","title":"Stream","path":"/tag/Stream/"}],"description":"Java I/O에 대해 정리합니다.","content":"<h1 id=\"java-io\"><a href=\"#java-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JAVA I/O</h1>\n<p>13주차 내용은 자바의 I/O에 관련된 내용입니다.</p>\n<ul>\n<li>스트림 (Stream) / 버퍼 (Buffer) / 채널 (Channel) 기반의 I/O</li>\n<li>InputStream 과 OutputStream</li>\n<li>Byte 와 Character 스트림</li>\n<li>표준 스트림 (System.in, System.out, System.err)</li>\n<li>파일 읽고 쓰기</li>\n</ul>\n<br/>\n<h2 id=\"스트림-버퍼-채널-기반-io\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EB%B2%84%ED%8D%BC-%EC%B1%84%EB%84%90-%EA%B8%B0%EB%B0%98-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림, 버퍼, 채널 기반 I/O</h2>\n<h3 id=\"자바-nionew-inputoutput\"><a href=\"#%EC%9E%90%EB%B0%94-nionew-inputoutput\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 NIO(New Input/Output)</h3>\n<p>자바 1.4버전부터 추가된 API로 Non-blocking 처리가 가능하며, 스트림이 아닌 채널을 사용합니다.</p>\n<p>기존의 I/O와는 다음의 차이가 있습니다.</p>\n<ul>\n<li>기존 IO 방식의 경우에서는 각각의 스트림에서 read()와 write()가 호출이 되면 데이터가 입력 되고, 데이터가 출력되기전까지, 스레드는 멈춤상태가 됩니다. 이 경우에는 작업이 끝날때까지 사용할 수 없으며, 그전에는 해당 IO 스레드는 사용할 수 없고 인터럽트도 할 수 없습니다. (스트림을 닫는 방법이 유일합니다.)</li>\n<li>NIO의 블로킹 상태에서는 Interrupt를 통해서 빠져 나올 수 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>--</th>\n<th>IO</th>\n<th>NIO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>입출력 방식</td>\n<td>스트림</td>\n<td>채널</td>\n</tr>\n<tr>\n<td>비동기 방식 지원</td>\n<td>X</td>\n<td>O</td>\n</tr>\n<tr>\n<td>Blocking/Non-Blocking</td>\n<td>Blocking Only</td>\n<td>Both</td>\n</tr>\n<tr>\n<td>사용 경우</td>\n<td>연결 클라이언트가 적고</td>\n<td>연결 클라이언트가 많고</td>\n</tr>\n<tr>\n<td></td>\n<td>I/O처리가 큰 경우(대용량)</td>\n<td>I/O처리가 작은 경우(저용량)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"스트림stream\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BCstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림(Stream)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108591789-ccf3d380-73ad-11eb-9cd6-625d393cf111.png\" alt=\"image\"></p>\n<ul>\n<li>FIFO(First In First Out)</li>\n<li>단방향이기 때문에 입력 스트림과 출력 스트림을 별도로 사용합니다.</li>\n<li>연속된 데이터의 흐름으로 입출력 진행시 다른 작업을 할 수 없는 블로킹(Blocking) 상태가 됩니다.</li>\n<li>입출력 대상을 변경하기 편하며 동일한 프로그램 구조를 유지할 수 있습니다.</li>\n</ul>\n<h3 id=\"버퍼buffer\"><a href=\"#%EB%B2%84%ED%8D%BCbuffer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>버퍼(Buffer)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108591844-21974e80-73ae-11eb-90af-b3353a464654.png\" alt=\"image\"></p>\n<ul>\n<li>byte, char, int 등의 기본 데이터 타입을 저장할 수 있는 저장소로서, 배열과 마찬가지로 제한된 크기(capacity)에 순서대로 데이터를 저장합니다.</li>\n<li>버퍼는 데이터를 저장하기 위한 것이며, 실제로 버퍼가 사용되는 것은 채널을 통해서데이터를 주고 받을 때 사용됩니다.</li>\n<li><strong>채널을 통해서 소켓, 파일 등에서 데이터를 전송할 때나 읽어올 때 버퍼를 사용하게 됨으로써 가비지량을 최소화 시키며 이는 가비지 콜렉션의 회수를 줄임으로써 서버의 전체 처리량을 증가시킵니다.</strong></li>\n</ul>\n<h3 id=\"채널channel-기반-io\"><a href=\"#%EC%B1%84%EB%84%90channel-%EA%B8%B0%EB%B0%98-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>채널(Channel) 기반 I/O</h3>\n<p>채널은 서버와 클라인트간의 통신 수단을 나타냅니다. 일종의 데이터가 다니는 통로라는 점에서 비슷하지만 <strong>양방향</strong>이기 때문에 읽기와 쓰기가 동시에 가능합니다.</p>\n<p>대표적으로 다음과 같이 있습니다.</p>\n<ul>\n<li>SocketChannel (소켓과 연결)</li>\n<li>FileChannel (파일 채널)</li>\n<li>Pipe.SinkChannel (파이프와 연결)</li>\n<li>Pipe.SourceChannel (파이프와 연결)</li>\n<li>ServerSocketChannel (서버소켓과 연결)</li>\n</ul>\n<br/>\n<h2 id=\"inputstream-outputstream\"><a href=\"#inputstream-outputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>InputStream, OutputStream</h2>\n<h3 id=\"inputstream\"><a href=\"#inputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>InputStream</h3>\n<ul>\n<li>바이트 기반의 <strong>입력 스트림의 최상위 추상 클래스</strong>입니다.</li>\n<li>모든 바이트 기반 입력 스트림은 해당 클래스 상속 받아서 만들어집니다.</li>\n<li>버퍼, 파일, 네트워크 단에서 입력되는 데이터를 읽어오는 기능을 수행합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read()</td>\n<td>입력 스트림으로부터 1바이트를 읽어서 바이트를 리턴</td>\n</tr>\n<tr>\n<td>read(byte[] b)</td>\n<td>입력 스트림으로부터 읽은 바이트들을 매개값으로 주어진 바이트 배열 b에 저장하고 실제로 읽은 바이트 수를 리턴</td>\n</tr>\n<tr>\n<td>read(byte[] b, int off, int len)</td>\n<td>입력 스트림으로부터 len 개의 바이트만큼 읽고 매개값으로 주어진 바이트 배열 b[off]부터 len 개까지 저장</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>사용한 시스템 자원을 반납하고 입력 스트림 닫기</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputstream\"><a href=\"#outputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OutputStream</h3>\n<ul>\n<li>바이트 기반의 <strong>출력 스트림의 최상위 추상 클래스</strong>입니다.</li>\n<li>모든 바이트 기반 출력 스트림은 해당 클래스를 상속 받아서 만들어집니다.</li>\n<li>버퍼, 파일, 네트워크 단으로 데이터를 내보내는 기능을 수행합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>write(int b)</td>\n<td>출력 스트림으로부터 1바이트를 보냅니다.</td>\n</tr>\n<tr>\n<td>write(byte[] b</td>\n<td>출력 스트림으로부터 주어진 바이트 배열 b의 모든 바이트를 보낸다</td>\n</tr>\n<tr>\n<td>write(byte[] b, int off, int len)</td>\n<td>출력 스트림으로 주어진 바이트 배열 b[off]부터 len 개까지의 바이트를 보내야한다</td>\n</tr>\n<tr>\n<td>flush()</td>\n<td>버퍼에 잔류하는 모든 바이트를 출력한다.</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>사용한 시스템 자원을 반납하고 입력 스트림 닫기</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"byte와-character-스트림\"><a href=\"#byte%EC%99%80-character-%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Byte와 Character 스트림</h2>\n<p>스트림의 객체도는 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600189-14438980-73d9-11eb-82cb-75b83bb27abf.png\" alt=\"image\"></p>\n<h3 id=\"byte-stream\"><a href=\"#byte-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Byte Stream</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600070-325cba00-73d8-11eb-8538-8f81084f99c7.png\" alt=\"image\"></p>\n<ul>\n<li>binary 데이터를 입출력하는 스트림</li>\n<li>데이터는 <strong>1바이트</strong> 단위로 처리합니다.</li>\n<li>이미지, 동영상 등을 송수신할 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"character-stream\"><a href=\"#character-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Character Stream</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600068-2d980600-73d8-11eb-9e03-79e0abf2700f.png\" alt=\"image\"></p>\n<ul>\n<li>text 데이터를 입출력하는 스트림</li>\n<li>데이터는 <strong>2바이트</strong> 단위로 처리합니다.</li>\n<li>일반적인 테스트 및 JSON, HTML 등을 송수신할 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"보조-stream\"><a href=\"#%EB%B3%B4%EC%A1%B0-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>보조 Stream</h3>\n<ul>\n<li>FilterInputStream과 FilterOutputStream을 상속받는 클래스들로 기본 스트림과 결합하여 특정 상황에서 편하게 사용할 수 있습니다.</li>\n<li>\n<p>BufferedInputStream/BufferedOutputStream</p>\n<ul>\n<li>버퍼를 사용하여 입출력 효율과 편의를 위해 사용할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>BufferedReader/BufferedWriter</p>\n<ul>\n<li>라인단위의 입출력이 편리합니다.</li>\n</ul>\n</li>\n<li>\n<p>InputStreamReader/OutputStreamReader</p>\n<ul>\n<li>바이트 스트림을 문자 스트림처러 쓸 수 있도록하며 문자 인코딩 변환을 지원합니다.</li>\n</ul>\n</li>\n<li>\n<p>DataInputStream/DataOutputStream</p>\n<ul>\n<li>자바 원시 자료형 데이터 처리에 적합합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"표준-스트림-systemin-systemout-systemerr\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%8A%A4%ED%8A%B8%EB%A6%BC-systemin-systemout-systemerr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>표준 스트림 (System.in, System.out, System.err)</h2>\n<p>표준 스트림은 콘솔(console,도스창)을 통한 데이터 입력과 콘솔로의 데이터 출력을 의미합니다. 자바에서는 표준 스트림을 3가지 제공을 합니다.(System.in, System.out, System.err)</p>\n<p>해당 표준 스트림은 <code class=\"language-text\">java.lang</code> 패키지의 System 클래스 내부에 선언되어 있습니다. 또한 이 표준 스트림들은 자바 어플리케이션의 실행과 동시에 사용할 수 있도록 자동적으로 생성이 됩니다. 그렇기 때문에 개발자가 별도로 스트림을 생성하는 코드를 작성하지 않고도 사용이 가능합니다.</p>\n<p>이를 확인해보면 다음과 같이 구성되어 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">System</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">InputStream</span> in<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PrintStream</span> out<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PrintStream</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같은 의미를 가집니다,</p>\n<ul>\n<li><code class=\"language-text\">System.out</code> 은 콘솔 화면에 문자열을 출력하기 위한 용도로 사용되는 출력 스트림입니다.</li>\n<li><code class=\"language-text\">System.in</code> 은 키보드의 입력을 받아들이기 위해 사용되는 입력 스트림입니다.</li>\n<li>\n<p><code class=\"language-text\">System.out</code> 와 <code class=\"language-text\">System.err</code></p>\n<ul>\n<li>둘다 출력 스트림입니다.</li>\n<li><code class=\"language-text\">System.err</code> 는 좀 더 정확하고 빠르게 출력해야하기 때문에 버퍼링을 지원하지 않습니다. (버퍼링 도중 프로그램이 멈추면 버퍼링 내용이 출력이 되지않기 때문에.)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"파일-읽고-쓰기\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B3%A0-%EC%93%B0%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>파일 읽고 쓰기</h2>\n<p>텍스트 파일의 경우에는 문자 스트림 클래스를 사용하고, 바이너리 파일의 경우에는 바이트 스트림을 기본적으로 사용합니다.</p>\n<ul>\n<li>입출력 효율을 위해 Buffered 계열의 보조 스트림을 사용하는 것이 좋습니다.</li>\n</ul>\n<p><strong>텍스트 파일</strong> 의 경우</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  br<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>이진 파일</strong> 의 경우</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedInputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedOutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">100000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://bingbingpa.github.io/java/whiteship-live-study-week13/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bingbingpa.github.io/java/whiteship-live-study-week13/</a></li>\n<li>\b<a href=\"https://github.com/LeeWoooo/Java_LiveStudy/tree/master/week13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/LeeWoooo/Java_LiveStudy/tree/master/week13</a></li>\n<li><a href=\"https://github.com/JJongSue/javastudy/tree/master/src/main/java/week13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/JJongSue/javastudy/tree/master/src/main/java/week13</a></li>\n</ul>\n","cover_image":null}},"context":{}}