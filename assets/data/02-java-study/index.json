{"hash":"6eab5397a2d6c11ddf021b778b38f6e8e79b2231","data":{"post":{"title":"[Java] 데이터 타입, 변수, 배열","path":"/02-java-study/","date":"31. December 2020","timeToRead":5,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Data","title":"Data","path":"/tag/Data/"},{"id":"Type","title":"Type","path":"/tag/Type/"}],"description":"자바 데이터 타입, 변수, 배열을 사용하는 방법을 익힙니다.","content":"<h1 id=\"java-package\"><a href=\"#java-package\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Package</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 2주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>프리미티브 타입 종류와 값의 범위 그리고 기본 값</li>\n<li>프리미티브 타입과 레퍼런스 타입</li>\n<li>리터럴</li>\n<li>변수 선언 및 초기화하는 방법</li>\n<li>변수의 스코프와 라이프타임</li>\n<li>타입 변환, 캐스팅 그리고 타입 프로모션</li>\n<li>1차 및 2차 배열 선언하기</li>\n<li>타입 추론, var</li>\n</ul>\n<br/>\n<h2 id=\"프리미티브-타입-종류와-값의-범위-그리고-기본-값\"><a href=\"#%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85-%EC%A2%85%EB%A5%98%EC%99%80-%EA%B0%92%EC%9D%98-%EB%B2%94%EC%9C%84-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B8%B0%EB%B3%B8-%EA%B0%92\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프리미티브 타입 종류와 값의 범위 그리고 기본 값</h2>\n<p>프리미티브 타입은 <strong>기본 타입</strong>을 의미합니다.</p>\n<p>자바의 기본 타입은 8종류입니다.</p>\n<table>\n<thead>\n<tr>\n<th>타입 종류</th>\n<th>메모리 크기</th>\n<th>값 범위</th>\n<th>기본 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>1byte</td>\n<td>-128 ~ 127</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>1byte</td>\n<td>-32,768 ~ 32,767</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>2byte</td>\n<td>-2,147,483,648 ~ 2,147,483,647</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4byte</td>\n<td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>8byte</td>\n<td>(3.4 X 10^-38) ~ (3.4 X 10^38)</td>\n<td>0.0F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>4byte</td>\n<td>(1.7 X 10^-308) ~ (1.7 X 10^308)</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>8byte</td>\n<td>0 ~ 65,535</td>\n<td>'\\u0000'</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>2byte</td>\n<td>true/false</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"프리미티브-타입과-레퍼런스-타입\"><a href=\"#%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85%EA%B3%BC-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4-%ED%83%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프리미티브 타입과 레퍼런스 타입</h2>\n<h3 id=\"primitive-type\"><a href=\"#primitive-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Primitive type</h3>\n<ul>\n<li>기본 타입</li>\n<li>byte, short, signed/unsigned int, signed/unsigned long, float, double, boolean, char</li>\n<li>not object</li>\n<li><strong>값을 저장</strong>합니다</li>\n</ul>\n<h3 id=\"reference-type\"><a href=\"#reference-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference type</h3>\n<ul>\n<li>참조 타입</li>\n<li>class, interface, enum, array, String type</li>\n<li><strong>주소를 저장</strong>합니다.</li>\n</ul>\n<br/>\n<h2 id=\"리터럴\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>리터럴</h2>\n<ul>\n<li><strong>데이터</strong>를 의미합니다.</li>\n<li>변수의 값이 변하지 않습니다.</li>\n</ul>\n<p>다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> alphabet <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"변수-선언-및-초기화하는-방법\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변수 선언 및 초기화하는 방법</h2>\n<p>일반적으로 초기화하는 방법으로 2가지 방법이 있습니다.</p>\n<h3 id=\"1-변수-선언-후-이후에-초기화\"><a href=\"#1-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%9B%84-%EC%9D%B4%ED%9B%84%EC%97%90-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 변수 선언 후 이후에 초기화</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output : 1</span></code></pre>\n<h3 id=\"2-변수-선언과-동시에-초기화\"><a href=\"#2-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EA%B3%BC-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 변수 선언과 동시에 초기화</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output : 2</span></code></pre>\n<br/>\n<h2 id=\"변수의-스코프와-라이프타임\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%EB%9D%BC%EC%9D%B4%ED%94%84%ED%83%80%EC%9E%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변수의 스코프와 라이프타임</h2>\n<p>프로그램에서 사용되는 변수들은 사용 가능한 범위를 가집니다. 그 범위를 <strong>변수의 스코프</strong>라고 합니다. 변수가 선언된 블럭이 그 변수의 사용 범위입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VarScopeExam</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> globalValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">localScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> localValue <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>globalValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 전체 범위</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// localScope 범위</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// localScope 범위</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"타입-변환-캐스팅-그리고-타입-프로모션\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98-%EC%BA%90%EC%8A%A4%ED%8C%85-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%ED%83%80%EC%9E%85-%ED%94%84%EB%A1%9C%EB%AA%A8%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입 변환, 캐스팅 그리고 타입 프로모션</h2>\n<p>타입 변환은 <strong>하나의 타입을 다른 타입으로 바꾸는 것을 의미</strong>합니다.</p>\n<h3 id=\"primitive-type-1\"><a href=\"#primitive-type-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Primitive type</h3>\n<ul>\n<li>\n<p>Widening type cast : 더 넓은 타입으로 형을 변환합니다.</p>\n<ul>\n<li>ex. int to long, byte to short...</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> value2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<p>Narrow type case : 더 좁은 타입으로의 형을 변환합니다.</p>\n<ul>\n<li>값이 손실될 수 있습니다.</li>\n<li>ex. long to int, short to byte...</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> value <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> value2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"reference-type-1\"><a href=\"#reference-type-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference type</h3>\n<ul>\n<li>Inheritance 관계에서만 가능</li>\n<li>\n<p>Upcast : subclass -> superclass</p>\n<ul>\n<li>모든 subclass는 superclass의 컨텐츠를 가지고 있으므로, superclass 로의 casting이 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>Downcase : superclass -> subclass</p>\n<ul>\n<li>모든 superclass는 subclass의 컨텐츠를 가지고 있지 않을 수 도 있습니다. 그래서 오류가 발생할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"1차-및-2차-배열-선언하기\"><a href=\"#1%EC%B0%A8-%EB%B0%8F-2%EC%B0%A8-%EB%B0%B0%EC%97%B4-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1차 및 2차 배열 선언하기</h2>\n<p>배열 길이를 초과하게 되면, ArrayIndexOutOfBounds 예외가 발생합니다.</p>\n<h3 id=\"1차-배열\"><a href=\"#1%EC%B0%A8-%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1차 배열</h3>\n<ul>\n<li><code class=\"language-text\">타입[] 배열이름 = new 타입[배열길이];</code>의 형태를 가지고 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// number = { 1, 2, 3};</span></code></pre>\n<h3 id=\"2차-배열\"><a href=\"#2%EC%B0%A8-%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2차 배열</h3>\n<ul>\n<li><code class=\"language-text\">타입[][] 배열이름 = new 타입[열 길이][행 길이];</code>의 형태를 가지고 있습니다.</li>\n<li>2차원 배열은 배열 요소로 1차원 배열을 가지는 배열입니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// arr</span>\n<span class=\"token comment\">// {  0,  1,  2 }</span>\n<span class=\"token comment\">// { 10, 11, 12 }</span></code></pre>\n<br/>\n<h2 id=\"타입-추론-var\"><a href=\"#%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0-var\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입 추론, var</h2>\n<p><strong>타입 추론</strong>은 <strong>변수 타입을 명시하지 않고 컴파일러가 데이터 타입이 무엇인지 추론한다는 것을 의미</strong>합니다.</p>\n<p>var</p>\n<ul>\n<li>지역 변수에서만 사용 가능합니다.</li>\n<li>선언과 동시에 반드시 초기화를 해야합니다.</li>\n<li>null 초기화하면 작동하지 않습니다.</li>\n<li>람다 표현식에는 var을 사용할 수 없습니다.</li>\n<li>타입이 없어서 배열에 초기값을 넘겨도 작동하지 않습니다.</li>\n</ul>\n<p>예제코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.naver.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/methods.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/generics/methods.html</a></li>\n<li><a href=\"https://www.baeldung.com/java-type-erasure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-type-erasure</a></li>\n<li><a href=\"https://www.baeldung.com/java-10-local-variable-type-inference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-10-local-variable-type-inference</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg","size":{"width":680,"height":440},"sizes":"(max-width: 680px) 100vw, 680px","srcset":["/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg 680w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 680 440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9716c389a175768fda62e76437e55968'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9716c389a175768fda62e76437e55968)' width='680' height='440' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAApAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAwECBAUGAAj/xAAtEAACAAQFAgUDBQAAAAAAAAABAgADBBEFEiExQRMiBhRRYXEyQpEVM2Jygf/EABkBAQEBAQEBAAAAAAAAAAAAAAEAAgQDBf/EABsRAAMBAAMBAAAAAAAAAAAAAAABAhESITET/9oADAMBAAIRAxEAPwDz/l944JcQUS2Jh4ljmPonK6IwGsO2iW0pSgNokYPhL4pXrTJOlyVyPMebM2RFUsxtybA2A3OkRKtK3eFycCLfxTh6YZj9XQy1dPLN0WVxYhlFjf1N9bjTXS41NaBaBE3gLLYe8JvBspbYQ3psvEIaSkXK59CIay2a0WEuUqrYgEneE8ujMAbj4hOf6dkS2lo1XgvBfOIzVdGehNu0mrQtmRlNivYbgEHkcRR9FU%2b2/vGywqi8PfoNJUYrMCVYlzn6ciYVnTe/s1GnBFj63grwZvX0Vfi%2bjmSqiu69LNmiYZSy6yaG0yi3aW1NwAuvA/2Ml5fL/KNzj9D4flYZVDDcRmVNVLnIsnO7967OxU6AHcRl1kD7iTEvCqmmV1rcWhyS7/V%2bIsukliMoiOZRRrkacGEy66LHy6e/5gq0qKuYrrxrABuIPM2jOmlKDSqdDqUFoWbKCaoLLyBCDYQjfSfiDT04LBGRXHcLxHmU5GqG49IUbR0JjjoFVJbLbWJExQFAG20Bb94f1jpuw%2bYmSnEf/9k=' /%3e%3c/svg%3e"}}},"context":{}}