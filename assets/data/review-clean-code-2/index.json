{"hash":"fc6e29a67ddc38efe16f045a3de184da00f36a74","data":{"post":{"title":"[Review] Clean Code 내용정리 - 2","path":"/review-clean-code-2/","date":"6. November 2020","timeToRead":9,"tags":[{"id":"Review","title":"Review","path":"/tag/Review/"},{"id":"Book","title":"Book","path":"/tag/Book/"},{"id":"CleanCode","title":"CleanCode","path":"/tag/CleanCode/"},{"id":"Clean-code","title":"Clean-code","path":"/tag/Clean-code/"},{"id":"Java","title":"Java","path":"/tag/Java/"}],"description":" Clean code 책 정리 2편입니다. ","content":"<h1 id=\"clean-code-내용-정리---2\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 2</h1>\n<h2 id=\"4장-주석\"><a href=\"#4%EC%9E%A5-%EC%A3%BC%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4장. 주석</h2>\n<p>부정확한 주석은 아예 없는 주석보다 나쁘다.</p>\n<ol>\n<li>\n<p>주석은 나쁜 코드를 보완하지 못한다.</p>\n<ul>\n<li>코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문에, 주석보다는 코드를 정리를 해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>코드로 의도를 표현하기.</p>\n<ul>\n<li>많은 경우에서 주석에서 할 수 있는 설명을 함수로 표현해도 충분하다</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"좋은-주석\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%A3%BC%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>좋은 주석</h3>\n<ol>\n<li>\n<p>법적인 주석</p>\n<ul>\n<li>회사가 정립한 구현 표준을 지켜야 하는 경우</li>\n</ul>\n</li>\n<li>\n<p>정보를 제공하는 주석</p>\n<ul>\n<li>기본적인 정보를 주석으로 제공</li>\n<li>\n<p>Ex)</p>\n<pre><code class=\"language-java\">// kk:mm:ss EEE, MMM dd, yyyy 형식이다.\nPattern timeMatcher = Pattern.compile(\n    \"\\\\d*:\\\\d*:\\\\d* \\\\w*, \\\\w*, \\\\d*, \\\\d*\");\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>의도를 설명하는 주석</p>\n<ul>\n<li>의도를 표현</li>\n<li>\n<p>Ex)</p>\n<pre><code class=\"language-java\">public void testConcurrentAddWidgets() throw Exception {\n  ...\n  // 스레드를 대량 생성하는 방법으로 어떻게든 경쟁 조건을 만들려 시도한다.\n  for(int i=0; i&#x3C;25000; i++){\n    WidgetBuilderThread widgetBuilderThread = new WidgetBuilderThread(widgetBuilder, text, parent, failFlag);\n    Thread thread = new Thread(widgetBuilderThread);\n    thread.start();\n  }\n  assertEquals(false, failFlag.get());\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li>\n<p>의미를 명료하게 밝히는 주석</p>\n<ul>\n<li>모호한 인수나 반환 값의 의미를 읽기 좋게 표현</li>\n<li>\n<p>Ex)</p>\n<pre><code class=\"language-java\">...\n\nassertThat(a.compareTo(a) == 0);    // a == a\nassertThat(a.compareTo(b) != 0);    // a != b\n...\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li>\n<p>결과를 경고하는 주석</p>\n<ul>\n<li>결과를 경고할 목적</li>\n<li>\n<p>Ex)</p>\n<pre><code class=\"language-java\">public static SimpleDateFormat makeStandardHttpDataFormat(){\n  // SimpleDateFormat은 스레드에 안전하지 못하다.\n  // 따라서 각 인스턴스를 독립적으로 생성해야 한다.\n  SimpleDateFormat df = new SimpleDateFormat(\"EEE, dd MMM. yyyy HH:mm:ss z\");\n  df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n  return df;\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>TODO 주석</p>\n<ul>\n<li>앞으로 할 일을 설명할 때 괜찮다.</li>\n<li>\n<p>Ex)</p>\n<pre><code class=\"language-java\">// TODO-MdM 현재 필요하지 않다\n// 체크아웃 모델을 도입하면 함수가 필요 없다.\nprotected VersionInfo makeVersion() throws Exception{\n  return null;\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>중요성을 강조하는 주석</p>\n<ul>\n<li>중요성을 강조하기 위해 주석을 사용한다.</li>\n<li>\n<p>Ex)</p>\n<pre><code class=\"language-java\">String listItemContent = match.group(3).trim();\n// 여기서 trim은 정말 중요하다. trim 함수는 문자열에서 시작 공백을 제거한다.\n// 문자열에 시작 공백이 있으면 다른 문자열로 인식되기 때문이다.\nnew ListItemWidget(this, listItemContent, this.level + 1);\nreturn buildList(text.substring(match.end()));\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>공개 API에서 Javadocs</p>\n<ul>\n<li>설명이 잘 된 공개 API를 사용하는 것도 방법.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"나쁜-주석\"><a href=\"#%EB%82%98%EC%81%9C-%EC%A3%BC%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>나쁜 주석</h3>\n<ol>\n<li>주절거리는 주석</li>\n<li>같은 이야기를 중복하는 주석</li>\n<li>오해할 여지가 있는 주식</li>\n<li>의무적으로 다는 주석</li>\n<li>이력을 기록하는 주석</li>\n<li>있으나 마나 한 주석</li>\n<li>무서운 잡음 : 의미 없는 주석</li>\n<li>함수나 변수로 표현할 수 있다면 주석을 달지 말기.</li>\n<li>\n<p>위치를 표시하는 주석</p>\n<ul>\n<li>Ex) <code>// Action//////////////</code></li>\n<li>반드시 필요할 때만, 아주 드물게 사용하기</li>\n</ul>\n</li>\n<li>닫는 괄호에 다는 주석</li>\n<li>공로를 돌리거나 저자를 표시하는 주석</li>\n<li>주석으로 처리한 코드</li>\n<li>\n<p>HTML 주석</p>\n<ul>\n<li>너무 지저분하다.</li>\n</ul>\n</li>\n<li>전역 정보</li>\n<li>너무 많은 정보</li>\n<li>\n<p>모호한 관계</p>\n<ul>\n<li>주석과 주석이 설명하는 코드는 둘 사이 관계가 명백해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>함수 헤더</p>\n<ul>\n<li>짧은 함수는 긴 설명이 필요 없다.</li>\n</ul>\n</li>\n<li>\n<p>비공개 코드에서 Javadocs</p>\n<ul>\n<li>공개하지 않을 코드라면 Javadocs는 쓸모가 없음.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"5장-형식-맞추기\"><a href=\"#5%EC%9E%A5-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5장. 형식 맞추기</h2>\n<p>프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야하고, 코드 형식을 맞추기 위한 간단한 규칙을 정하고 이를 수행해야 한다.</p>\n<h3 id=\"형식을-맞추는-목적\"><a href=\"#%ED%98%95%EC%8B%9D%EC%9D%84-%EB%A7%9E%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>형식을 맞추는 목적</h3>\n<ul>\n<li>코드 형식은 중요하다.</li>\n<li>오늘 구현한 코드는 다음 버전에서 바뀔 확률이 높으며, 구현한 코드의 가독성은 이후 바뀔 코드의 품질에 지대한 영향을 미친다.</li>\n</ul>\n<h3 id=\"적절한-행-길이를-유지하기-세로-형식\"><a href=\"#%EC%A0%81%EC%A0%88%ED%95%9C-%ED%96%89-%EA%B8%B8%EC%9D%B4%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0-%EC%84%B8%EB%A1%9C-%ED%98%95%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>적절한 행 길이를 유지하기 (세로 형식)</h3>\n<p>사실 200줄 정도인 파일로도 커다란 시스템을 구축할 수 있다.</p>\n<ol>\n<li>\n<p>신문 기사처럼 작성하기</p>\n<ul>\n<li>좋은 신문 기사는 최상단에서 기사를 몇 마디로 요약하는 표제가 있다.</li>\n<li>소스파일도 이름은 간단하면서 설명이 가능하게 짓는다.</li>\n<li>신문이 다양한 기사로 이뤄지는 것처럼, 소스 코드도 그렇게 구성한다.</li>\n</ul>\n</li>\n<li>\n<p>개념은 빈 행으로 분리하기</p>\n<ul>\n<li>\n<pre><code class=\"language-java\">// 좋은 케이스\nprivate String function1(){\n  ...\n};\n\nprivate String function2(){\n  ...\n};\n\n// 나쁜 케이스\nprivate String function1(){\n  ...\n};\nprivate String function2(){\n  ...\n};\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>세로 밀집도</p>\n<ul>\n<li>줄 바꿈이 개념을 분리한다면, 세로 밀집도는 연관성을 의미</li>\n</ul>\n</li>\n<li>\n<p>수직거리</p>\n<ul>\n<li>서로 밀집한 개념은 세로로 가까이 둔다. 단, 다른 파일에 속한다면 규칙은 통하지 않는다.</li>\n<li>타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 한다.</li>\n<li>\n<p><strong>변수 선언</strong></p>\n<ul>\n<li>변수는 사용하는 위치에 최대한 가까이 선언</li>\n</ul>\n</li>\n<li>\n<p><strong>인스턴스 변수</strong></p>\n<ul>\n<li>인스턴스 변수는 클래스 맨 처음에 선언</li>\n</ul>\n</li>\n<li>\n<p><strong>종속 함수</strong></p>\n<ul>\n<li>한 함수가 다른 함수를 호출한다면, 두 함수는 세로로 가까이 배치한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>개념적 유사성</strong></p>\n<ul>\n<li>개념적인 친화도가 높을수록 코드를 가까이 배치한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>세로 순서</p>\n<ul>\n<li>일반적으로 함수 호출 종속성은 아래 방향으로 유지</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"가로-형식-맞추기\"><a href=\"#%EA%B0%80%EB%A1%9C-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가로 형식 맞추기</h3>\n<p>일반적으로는 가로길이는 45자 근처이다. (가급적으로는 120자 정도를 제한)</p>\n<ol>\n<li>\n<p>가로 공백과 밀집도</p>\n<ul>\n<li>가로 공백을 사용해 밀집한 개념과 느슨한 개념을 표현</li>\n<li>\n<p>Ex)</p>\n<pre><code class=\"language-java\">private void measureLine(String line){\n  lineCount++;\n  int lineSize = line.length();    // 느슨한 개념\n  totalhars += lineSize;\n  lineWidthHistogram.addLine(lineSize, lineCount);\n  recordWidestLine(lineSize);        // 밀집한 개념\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>가로 정렬</p>\n<ul>\n<li>코드처럼 선언부가 길다면 클래스를 쪼개야 한다는 의미</li>\n</ul>\n</li>\n<li>\n<p>들여 쓰기</p>\n<ul>\n<li>scope로 이뤄진 계층을 보여준다.</li>\n<li><strong>\"들여 쓰기 무시하기\"를</strong> 피하기</li>\n</ul>\n</li>\n<li>\n<p>가짜 범위</p>\n<ul>\n<li>세미콜론은 새 행에다 제대로 들여 써서 넣어준다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"팀-규칙\"><a href=\"#%ED%8C%80-%EA%B7%9C%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>팀 규칙</h3>\n<p>좋은 소프트웨어 시스템은 읽기 쉬운 문서로 이뤄 저 야한다.</p>\n<h2 id=\"6장-객체와-자료-구조\"><a href=\"#6%EC%9E%A5-%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6장. 객체와 자료 구조</h2>\n<h3 id=\"자료-추상화\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%B6%94%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자료 추상화</h3>\n<ul>\n<li>자료를 세세하게 공개하기보다는 추성적인 개념으로 표현하는 편이 좋다.</li>\n<li>아무 생각 없이 GET/SET을 추가하는 방법은 좋지 않다.</li>\n</ul>\n<h3 id=\"자료객체-비대칭\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B0%9D%EC%B2%B4-%EB%B9%84%EB%8C%80%EC%B9%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자료/객체 비대칭</h3>\n<ul>\n<li>모든 것이 객체가 좋은 것은 아니고, 단순한 자료 구조와 절차적인 코드가 좋을 때도 있음</li>\n<li>객체 지향 코드에서 어려운 변경은 절차적인 코드에서 쉽고, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉬움.</li>\n</ul>\n<h3 id=\"디미터-법칙\"><a href=\"#%EB%94%94%EB%AF%B8%ED%84%B0-%EB%B2%95%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>디미터 법칙</h3>\n<blockquote>\n<p>모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙<br>\n즉, 객체의 내부를 몰라야 한다는 법칙</p>\n</blockquote>\n<ol>\n<li>\n<p>기차 충돌</p>\n<ul>\n<li>\n<pre><code class=\"language-java\">// 기차 충돌 코드\nfinal String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();\n\n// 이를 방지하는 코드\nOptions opts = ctxt.getOptions();\nFile scratchDir = opts.getScratchDir();\nfinal String outputDir = scratchDir.getAbsolutePath();\n\n// 단, 아래의 코드는 디미터 법칙과 상관 없음.\nfinal String outputDir = ctxt.options.scratchDir.absolutePath;\n</code></pre>\n</li>\n<li>자료 구조는 무조건 함수 없이 공개 변수만 포함한다면, 문제는 간단하겠지만<br>\n그럴 수 없기 때문에 요구하는 프레임워크와 표준(ex. 빈)이 존재한다.</li>\n</ul>\n</li>\n<li>\n<p>잡종 구조</p>\n<ul>\n<li>잡종 구조는 절차적과 객체적의 단점만 모아놓은 구조이기 때문에, 피하는 편이 좋다.</li>\n</ul>\n</li>\n<li>구조체 감추기</li>\n</ol>\n<h3 id=\"자료-전달-객체\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%A0%84%EB%8B%AC-%EA%B0%9D%EC%B2%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자료 전달 객체</h3>\n<p>DTO나 빈 구조 등을 사용한다</p>\n<ul>\n<li>\n<p>활성 레코드</p>\n<ul>\n<li>DTO의 특수한 형태, 자료 구조로 취급하기</li>\n<li>비즈니스 규칙은 넣는 것이 아니고, 비즈니스 규칙을 넣고 싶으면 내부 자료를 숨기는 객체를 따로 생성한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<ul>\n<li>객체는 동작을 공개하고 자료를 숨긴다. 그러나, 자료 구조는 별다른 도작 없이 자료를 노출한다.</li>\n<li>\n<p>어떤 시스템을 구현할 때</p>\n<ul>\n<li>새로운 자료 타입을 추가하는 유연성이 필요하면 객체를 선택.</li>\n<li>새로운 동작을 추가하는 유연성이 필요하면 자료 구조와 절차적인 코드가 더 적합하다.</li>\n</ul>\n</li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/blog/assets/static/CleancodeBook.07cc2b7.7222e95f3717f77d5f3ed287711f1d64.jpg","size":{"width":860,"height":1021},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/blog/assets/static/CleancodeBook.a67b0b2.7222e95f3717f77d5f3ed287711f1d64.jpg 480w","/blog/assets/static/CleancodeBook.07cc2b7.7222e95f3717f77d5f3ed287711f1d64.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 1021' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2da16ebb829634911838dadcc8b5c487'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2da16ebb829634911838dadcc8b5c487)' width='860' height='1021' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABMAEADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAABAUCAwYAAQj/xAAxEAACAQMDAQUGBgMAAAAAAAABAgMABBESITFBBRMzUWEGFCIycZEVFkKhwfBigdH/xAAXAQEBAQEAAAAAAAAAAAAAAAAAAQID/8QAGREBAQEBAQEAAAAAAAAAAAAAAAERAhIx/9oADAMBAAIRAxEAPwD6pql7qGN9MkiISwUamAyT0HnV1Y3tiCS59tOzkjkChAJCp2yFck9M8Cg15lUSBCy6z0zUs45BoK57v3kh2YEqMHoDvjNeESKpMc4YBR%2brJ/vO9Y9NYO1L517zS3XdBA2nVnG2K8jllaTS8enrkZqzpMM66s1e%2b01lZSrG8szMXKHRGTpx1OenTIrRQsWiVjya0idJrm3mk7Zs54XjWOGR%2b9VlGp1ZMAA488HGRTms9f3fc%2b03ZdqIo3Ny8xLMCSoRAdug%2bYc5/mgZ3LYuWHdhgUGojkDf7VVKIWViupWIGAw2/vFM8A8gb1XJDGynKgEjGQOlc7xrUpYyR7aJ9OOdiOagQ%2b%2bi6Ugf5f8AaOa1i0BdJwPWqJLSI9D96eaaDlE2j41jkXyIDU7tvAT6UpazQHZmA8qbW3gJWuZZ9SrKzPaXdfm7sQsjNMDchCGwACi6tsb9Oo/3xWmpPN2Wl327Z9oNLIr2JlCovyv3igHP0xWkOKHdLklyJYwNtI0fzmiKqnnjiAEjYJ4GM0tz6ArRL1Wb3uRGGTgDy%2bwq9%2btS71HKhWB1DUPUVF%2btBS1G23gJQbUZbeAlBZQ8Dr7xMmRqJzj0q55EQfEwFILm%2bEPtDYBQzrOZI9mxjjcjrx%2b9BoaDkdYb12lOkMgCk/vRlBz6p7kw6yqKuo45JrPSwJO3DQIUzExA68jeqGPwEB8xlxjDNgbefJo5nlhCRHEkrE6STjb1qk3LvhI0USfFqBOwxWMaBYdotRL6ljUjc85NP7bwFpElzIsUaqNRCgnIJJyaeWvgJWuMTpXdWwlU4ODQdvZyJJHqEOEYkl1y31U9Ka11bZdkeYoaeJjL3sEgV8aTkZBFE11SzSXABtG0oVdhKpJ14znPO1RNhsulnDDOWBALZ5pjXVPMXaW/hgwoyQAMfNyPWmEKlI1U7kVKuqySfEf/2Q==' /%3e%3c/svg%3e"}}},"context":{}}