{"hash":"a494b8b1778660c606708ae3dd5d59774a4a3863","data":{"post":{"title":"[SpringBoot] SpringBoot JUnit4를 JUnit5으로 바꾸기","path":"/00-springboot-junit/","date":"11. August 2021","timeToRead":5,"tags":[{"id":"Spring","title":"Spring","path":"/tag/Spring/"},{"id":"SpringBoot","title":"SpringBoot","path":"/tag/SpringBoot/"},{"id":"Test","title":"Test","path":"/tag/Test/"},{"id":"JUnit","title":"JUnit","path":"/tag/JUnit/"},{"id":"JUnit4","title":"JUnit4","path":"/tag/JUnit4/"},{"id":"JUnit5","title":"JUnit5","path":"/tag/JUnit5/"},{"id":"Rule","title":"Rule","path":"/tag/Rule/"}],"description":" SpringBoot JUnit에 대해 좀 더 정리하고, JUnit4에서 JUnit5으로 수정하는 방법에 대해 서술합니다.","content":"<h1 id=\"springboot-junit4를-junit5으로-바꾸기\"><a href=\"#springboot-junit4%EB%A5%BC-junit5%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpringBoot JUnit4를 JUnit5으로 바꾸기.</h1>\n<p>기존에 JUnit에 대해 글을 작성을 했는데, 해당 글은 JUnit4 기준으로 작성을 했었고 현재는 대부분의 테스트 코드를 JUnit5를 쓰는 것이 좋습니다.</p>\n<p>이에 따라 어떤식으로 테스트를 고치는 지에 대해 작성합니다.</p>\n<h2 id=\"junit5-특징\"><a href=\"#junit5-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit5 특징</h2>\n<p><code class=\"language-text\">JUnit5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/129037234-991b10d3-9fdd-4205-b2e0-824abcdcb2b8.png\" alt=\"JUnit\"></p>\n<p>기존 JUnit4는 단일 jar이였으나 JUnit5는 JUnit Platform, JUnit Jupiter, JUnit Vintage 모듈 세가지로 구성됩니다.</p>\n<h3 id=\"junit-platform\"><a href=\"#junit-platform\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit Platform</h3>\n<ul>\n<li>JVM에서 동작하는 테스트 프레임워크입니다.</li>\n<li>테스트를 발견하고 계획을 생성하고 결과를 보고하는 TestEngine 인터페이스를 정의합니다.</li>\n</ul>\n<h3 id=\"junit-jupiter\"><a href=\"#junit-jupiter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit Jupiter</h3>\n<ul>\n<li>JUnit5 TestEngine의 실제 구현체입니다.</li>\n<li>JUnit5 기반의 테스트를 실행시키기 위한 TestEngine을 Platform에 제공합니다.</li>\n</ul>\n<h3 id=\"junit-vintage\"><a href=\"#junit-vintage\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit Vintage</h3>\n<ul>\n<li>TestEngine에서 JUnit3, JUnit4 기반 테스트를 실행하기 위한 기능을 제공합니다.</li>\n<li><strong>아래에서는 이를 줄이는 방법으로 서술합니다.</strong></li>\n</ul>\n<br/>\n<h2 id=\"junit5-변경시-어노테이션-변경\"><a href=\"#junit5-%EB%B3%80%EA%B2%BD%EC%8B%9C-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EB%B3%80%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit5 변경시, 어노테이션 변경</h2>\n<p>대표적인 예시로 JUnit4에서 자주 쓰는 어노테이션을 아래에 예시로 둡니다. (개인적으로 많이 쓰는 내용)</p>\n<h3 id=\"test---test\"><a href=\"#test---test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Test</code> -> <code class=\"language-text\">@Test</code></h3>\n<ul>\n<li>해당 어노테이션을 달아둔 메서드가 테스트 메서드임을 나타냅니다.</li>\n<li>\n<p>어노테이션의 이름은 변경되지 않았으나 경로가 변경되었습니다.</p>\n<ul>\n<li>JUnit4 : <code class=\"language-text\">org.junit.Test</code></li>\n<li>JUnit5 : <code class=\"language-text\">org.junit.jupiter.api.Test</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"before---beforeeach\"><a href=\"#before---beforeeach\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Before</code> -> <code class=\"language-text\">@BeforeEach</code></h3>\n<ul>\n<li>각각의 <code class=\"language-text\">@Test</code>, <code class=\"language-text\">@RepeatTest</code>, <code class=\"language-text\">@ParameterizedTest</code>,<code class=\"language-text\">@TestFactory</code> 전에 실행됩니다.</li>\n</ul>\n<h3 id=\"after---aftereach\"><a href=\"#after---aftereach\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@After</code> -> <code class=\"language-text\">@AfterEach</code></h3>\n<ul>\n<li>각각의 <code class=\"language-text\">@Test</code>, <code class=\"language-text\">@RepeatTest</code>, <code class=\"language-text\">@ParameterizedTest</code>, <code class=\"language-text\">@TestFactory</code> 후에 실행됩니다.</li>\n</ul>\n<h3 id=\"beforeclass---beforeall\"><a href=\"#beforeclass---beforeall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@BeforeClass</code> -> <code class=\"language-text\">@BeforeAll</code></h3>\n<ul>\n<li>모든 <code class=\"language-text\">@Test</code>, <code class=\"language-text\">@RepeatTest</code>, <code class=\"language-text\">@ParameterizedTest</code>,<code class=\"language-text\">@TestFactory</code> 전에 실행됩니다.</li>\n<li>\n<p>해당 어노테이션을 사용하기 위해서는 라이프사이클을 꼭 설정해주어야합니다.</p>\n<ul>\n<li><code class=\"language-text\">@TestInstance(LifeCycle.PER_CLASS)</code></li>\n<li><code class=\"language-text\">@TestInstance(LifeCycle.PER_METHOD)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"afterclass---afterall\"><a href=\"#afterclass---afterall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@AfterClass</code> -> <code class=\"language-text\">@AfterAll</code></h3>\n<ul>\n<li>모든 <code class=\"language-text\">@Test</code>, <code class=\"language-text\">@RepeatTest</code>, <code class=\"language-text\">@ParameterizedTest</code>,<code class=\"language-text\">@TestFactory</code> 후에 실행됩니다.</li>\n<li>\n<p>해당 어노테이션을 사용하기 위해서는 라이프사이클을 꼭 설정해주어야합니다.</p>\n<ul>\n<li><code class=\"language-text\">@TestInstance(LifeCycle.PER_CLASS)</code></li>\n<li><code class=\"language-text\">@TestInstance(LifeCycle.PER_METHOD)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"runwith---extendwith\"><a href=\"#runwith---extendwith\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@RunWith</code> -> <code class=\"language-text\">@ExtendWith</code></h3>\n<ul>\n<li>확정을 선언적으로 등록하는데 사용합니다. ExtendWith 뒤에 확장할 Extension을 추가해서 사용합니다.</li>\n</ul>\n<p>대표적으로 다음과 같이 코드를 구성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// before</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoJUnitRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"ignore---disabled\"><a href=\"#ignore---disabled\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Ignore</code> -> <code class=\"language-text\">@Disabled</code></h3>\n<ul>\n<li>테스트 클래스 또는 테스트 메서드를 비활성화 하는데 사용합니다.</li>\n<li>\n<p>특히, <strong>JUnit4와 JUnit5를 혼용해서 사용하면 적용이 안됩니다.</strong></p>\n<ul>\n<li><code class=\"language-text\">org.junit.Test</code> 와 <code class=\"language-text\">@Disabled</code>를 쓰거나 혹은 <code class=\"language-text\">org.junit.jupiter.api.Test</code>와 <code class=\"language-text\">@Ignore</code>을 같이 사용하면 안됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"x---displayname\"><a href=\"#x---displayname\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>x -> <code class=\"language-text\">@DisplayName</code></h3>\n<ul>\n<li>테스트 클래스 또는 테스트 메서드에 대한 사용자 지정 표시 이름을 정해줄 때 씁니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이 테스트는 이제 제겁니다.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token function\">testService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 코드를 구성하고 테스트를 돌리면 DisplayName으로 테스트가 돌아간게 보이게 됩니다.</p>\n<br/>\n<h2 id=\"rule의-삭제와-그에-따른-junit5\"><a href=\"#rule%EC%9D%98-%EC%82%AD%EC%A0%9C%EC%99%80-%EA%B7%B8%EC%97%90-%EB%94%B0%EB%A5%B8-junit5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rule의 삭제와 그에 따른 JUnit5</h2>\n<p>사실 오늘의 핵심 중 하나로, JUnit4 테스트를 JUnit5로 고치다보면 앞에 있던 부분은 쉽게 고칠 수 있으나 <code class=\"language-text\">@Rule</code>이라는 어노테이션이 없어져서 고민인 경우가 있습니다. <code class=\"language-text\">@ExtendWith</code>으로 수정이 되었으나, 아마 체감이 되는 이야기가 아닐 것이라 이를 어떻게 수정하면 좋을 지 공유합니다.</p>\n<p>해당 코드는 일부 각색한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoJUnitRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">UtilsTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Rule</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExpectedException</span> expectedException <span class=\"token operator\">=</span> <span class=\"token class-name\">ExpectedException</span><span class=\"token punctuation\">.</span><span class=\"token function\">none</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Mock</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Utils</span> utils<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Before</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n\n    utils <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 정상적테스트<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">String</span> parameter <span class=\"token operator\">=</span> <span class=\"token string\">\"normal\"</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 실패한테스트<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    expectedException<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DomainException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    expectedException<span class=\"token punctuation\">.</span><span class=\"token function\">expectMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패한 파라미터 값입니다.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">String</span> parameter <span class=\"token operator\">=</span> <span class=\"token string\">\"fail\"</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음의 코드를 JUnit5로 수정하면 다음과 같이 고칠 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">UtilsTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Mock</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Utils</span> utils<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Before</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n\n    utils <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"정상적 테스트\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">isNormalResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">String</span> parameter <span class=\"token operator\">=</span> <span class=\"token string\">\"normal\"</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패한 테스트\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">isFailResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Throwable</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// given</span>\n      <span class=\"token class-name\">String</span> parameter <span class=\"token operator\">=</span> <span class=\"token string\">\"fail\"</span>\n\n      <span class=\"token comment\">// when</span>\n      <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DomainException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패한 파라미터 값입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 <code class=\"language-text\">@Rule</code> 을 제거하고 JUnit5로 수정할 수 있습니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>해당 코드는 제가 임의로 작성한 부분이고, 좀 더 좋은 방법이 있을 수 있습니다. 참고 정도로만 하시면 좋을 것 같습니다. 잘못된 부분이 있으면 커멘트 주세요.</p>\n<ul>\n<li><a href=\"https://hirlawldo.tistory.com/39\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JUnit5 테스트코드 작성하기</a></li>\n<li><a href=\"https://jade314.tistory.com/entry/Junit-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JUnit5 (JUnit4와 비교)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/51012335/how-to-replace-rule-annotation-in-junit-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to replace rule annotation in junit 5</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/SpringLogo.214a68b.be0c3d9590430504675b948223711f21.png","size":{"width":820,"height":442},"sizes":"(max-width: 820px) 100vw, 820px","srcset":["/assets/static/SpringLogo.a67b0b2.be0c3d9590430504675b948223711f21.png 480w","/assets/static/SpringLogo.214a68b.be0c3d9590430504675b948223711f21.png 820w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 820 442' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-29f2605aef896f90944d207b9d4e9d4c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-29f2605aef896f90944d207b9d4e9d4c)' width='820' height='442' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAiAEADASIAAhEBAxEB/8QAGwABAAMBAAMAAAAAAAAAAAAAAAQFBgMCBwj/xAAqEAABAwQBAgUEAwAAAAAAAAABAgMEAAURIRIGMRNBUWGBFBUiMgdxof/EABgBAQADAQAAAAAAAAAAAAAAAAACAwQB/8QAIxEAAgICAgIBBQAAAAAAAAAAAAECEQMhEjEEQVEiYZGx4f/aAAwDAQACEQMRAD8A%2bnaUpQCs51b1SxYEobS348xwckt5wEj1Ua0dYx2BBX/IEt%2b9lrwRGQ7HD5AQcYB76OPT3rN5U5xglj026v4Ksrkl9Psr7H17OnXFqO5bUPpcVjEbPJPvvR/yvYDKy42FKTxVsFOc4I0RUWNLiuZFrZQhgDLkkN8G0pHocDkf60PWu8RYdbU6j9HFqWj3STo/Pf5rnjKcVU58hiUlpys7UpStRaKgXi5t2xplS21uuPuBpptBAKlEZ7kgDt51PqtvsF6fFS019ItPLK2pTXNCx8HII9RUMnLi%2bPZGV1oiOdRcJLMUWueZjrRdSxxSDpWDk5wB557VW3i%2b225Qm4cmBOedfWtox2xxdQ4jB4nfuDntquMKx3W3XmMIbyCW4jmVuNqUz%2bTmfCG8gAdt51VjbunXo90jXCRKQ7IDjzr5CMBSlpCQE%2bgAFYrz5Fxa%2bzuutfn2UXkkqKCNHs0e4JaMS7T5AeW0mO66Fp5oSFdsgY3561WjR1RHcaaSxDluTXHVsiGEgOJUj9snOABkbrxidPusX77gZCCj6h57gEnOFpSAPjFV1ytUy1z/ALjBDj0lUp50eGyXEhtYT%2bK0gg%2bXcVGMcuFNxVK/hda3%2bziU4LSNDaLu3c3pbSWH2HYqkpcS8ACCRnGjVlWd6Rjzg9c51yQpDkt1JSlaOBwlOM8cnA9Ad6rRVtwSlKCcu/7ovxtuNsUpSrSYpSlAKUpQClKUB//Z' /%3e%3c/svg%3e"}}},"context":{}}