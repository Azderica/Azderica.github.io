{"hash":"d48fec9eeba58c206f22c32326d49aab3f1f64f3","data":{"post":{"title":"[Review] Clean Code 내용정리 - 1","path":"/01-clean-code/","date":"6. November 2020","timeToRead":7,"tags":[{"id":"Review","title":"Review","path":"/tag/Review/"},{"id":"Book","title":"Book","path":"/tag/Book/"},{"id":"CleanCode","title":"CleanCode","path":"/tag/CleanCode/"},{"id":"Clean-code","title":"Clean-code","path":"/tag/Clean-code/"},{"id":"Java","title":"Java","path":"/tag/Java/"}],"description":" Clean code 책 정리 1편입니다. ","content":"<h1 id=\"clean-code-내용-정리---1\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 1</h1>\n<p>대학시절 프런트 개발을 하다가, ebay에서 웹 개발을 하면서 백엔드 개발을 주로 하다 보니, Java나 C#으로 개발을 주로 하게 되었는데, 모르는 부분도 많고 함께 프로젝트를 만들기 때문에 좀 더 좋은 개발을 하고 싶어서, 1년 전에 샀던 책을 다시 펴서 정리한다.</p>\n<h2 id=\"1장-clean-code\"><a href=\"#1%EC%9E%A5-clean-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1장. Clean Code</h2>\n<p><strong>나쁜 코드가 만드는 결과</strong></p>\n<ul>\n<li>개발 속도의 감소</li>\n<li>팀 생산성의 하락, 이후 재개발 필요</li>\n<li>유지 보수의 어려움</li>\n</ul>\n<h3 id=\"깨끗한-코드란\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%EC%BD%94%EB%93%9C%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨끗한 코드란?</h3>\n<ul>\n<li>모든 테스트를 통과</li>\n<li>중복이 없음</li>\n<li>시스템 내 모든 설계 아이디어를 표현함</li>\n<li>클래스, 메서드, 함수 등을 최대한 줄임</li>\n</ul>\n<h2 id=\"2장-의미-있는-이름\"><a href=\"#2%EC%9E%A5-%EC%9D%98%EB%AF%B8-%EC%9E%88%EB%8A%94-%EC%9D%B4%EB%A6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2장. 의미 있는 이름</h2>\n<p>핵심은 다음과 같다.</p>\n<ol>\n<li>\n<p>의도를 분명히 밝히기.</p>\n<ul>\n<li>ex) <code class=\"language-text\">int elapsedTimeInDays</code>, <code class=\"language-text\">daysSinceCreation</code> 등등</li>\n</ul>\n</li>\n<li>\n<p>그릇된 정보를 피하기.</p>\n<ul>\n<li>일관성을 지켜야한다.</li>\n</ul>\n</li>\n<li>의미 있게 구분하기.</li>\n<li>발음하기 쉬운 이름을 사용하기.</li>\n<li>검색하기 쉬운 이름을 사용하기.</li>\n<li>\n<p>인코딩을 피하기.</p>\n<ul>\n<li>헝가리식 표기법</li>\n<li>멤버 변수 접두어</li>\n<li>인터페이스 클래스와 구현 클래스</li>\n</ul>\n</li>\n<li>자신의 기억력을 자랑하지 말기.</li>\n<li>클래스 이름은 명사나 명사구.</li>\n<li>메서드 이름은 동사나 동사구.</li>\n<li>기발한 이름을 피하기</li>\n<li>한 개념에 한 단어 사용</li>\n<li>말장난하지 말기</li>\n<li>\n<p>해법 영역에서 가져온 이름 사용하기</p>\n<ul>\n<li>전산, 알고리즘, 패턴, 수학 용어들은 사용해도 괜찮다.</li>\n</ul>\n</li>\n<li>\n<p>문제 영역에서 가져온 이름 사용하기</p>\n<ul>\n<li>적절한 프로그래머 용어가 없다면, 문제 영역에서 가져온다.</li>\n</ul>\n</li>\n<li>\n<p>의미 있는 맥락을 추가</p>\n<ul>\n<li>스스로 의미가 분명하게 해 주기. -> 클래스, 함수, 이름 공간에 넣어 맥락 주기</li>\n<li>모든 방법이 어렵다면 접두어 사용하기</li>\n</ul>\n</li>\n<li>불필요한 맥락 없애기.</li>\n</ol>\n<p>핵심 중 하나는, 좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고, 문화적인 배경이 같아야 한다.</p>\n<h2 id=\"3장-함수\"><a href=\"#3%EC%9E%A5-%ED%95%A8%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3장. 함수</h2>\n<p>함수의 규칙은 다음과 같다.</p>\n<ol>\n<li>\n<p>작게 만들기</p>\n<ul>\n<li>일반적으로 2줄, 3줄, 4줄이 이상적으로 좋다.</li>\n<li>\n<p>블록과 들여 쓰기.</p>\n<ul>\n<li>if/else/while 문 등에 들어가는 블록은 한 줄이여야 함.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>한 가지만 하기</p>\n<ul>\n<li><strong>함수는 한 가지를 해야 하고 한 가지를 잘해야 한다.</strong></li>\n</ul>\n</li>\n<li>\n<p>함수 당 추상화 수준은 하나로</p>\n<ul>\n<li>한 함수에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈림</li>\n<li>\n<p><strong>내려가기 규칙</strong> : 위에서 아래로 코드 읽기</p>\n<ul>\n<li>마치 이야기처럼</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Switch 문</p>\n<ul>\n<li>\n<p>다형성 사용해서 최대한 숨기고 반복하지 않게 하기.</p>\n<ul>\n<li>객체 안에서 숨기기</li>\n<li>최대한 한 번만 사용하기</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>서술적인 이름 사용</p>\n<ul>\n<li>서술적인 이름이 설계에서 더 뚜렷한 의미를 가지고 개선하기 쉬워짐</li>\n<li>일관성 유지하기</li>\n</ul>\n</li>\n<li>\n<p>함수 인수</p>\n<ul>\n<li>함수에서 이상적인 인수는 0개이다.</li>\n<li>\n<p>1개(단항), 2개(이항)까지고 좋고, 3개(삼항)는 가능한 피하고, 4개(다항)는 이유가 필요하다.</p>\n<ul>\n<li>점점 더 읽기 어려워짐.</li>\n<li><code class=\"language-text\">includeSetupPageInfo(new PageContent)</code> 보다는 <code class=\"language-text\">includeSetupPage()</code>가 더 읽기 좋음</li>\n<li>\n<p>단항 형식의 좋은 예</p>\n<ul>\n<li><code class=\"language-text\">boolean fileExists(&quot;MyFile&quot;)</code></li>\n</ul>\n</li>\n<li>\n<p>이항 함수의 좋은 예</p>\n<ul>\n<li><code class=\"language-text\">Point p = new Point(0, 0)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>동사와 키워드</p>\n<ul>\n<li>함수의 의도나 인수의 순서와 의도를 제대로 표현하려면 좋은 함수가 필수</li>\n<li>\n<p>단항 함수는 함수와 인수가 동사/명사 쌍을 이뤄야 한다.</p>\n<ul>\n<li>ex) <code class=\"language-text\">writeField(name)</code> 등</li>\n<li><code class=\"language-text\">assertEquals</code>보다는 <code class=\"language-text\">assertExpectedEqualsActual(expected, actual)</code> 이 더 좋다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>부수 효과를 일으키지 마라</p>\n<ul>\n<li>즉, 함수에서 한 가지를 하겠다고 하고, 다른 기능을 넣지 마라</li>\n<li>\n<p>출력 인수</p>\n<ul>\n<li>일반적으로는 출력 인수를 피해라.</li>\n<li><code class=\"language-text\">appendFooter(s)</code> 보다는 <code class=\"language-text\">report.appendFooter()처럼</code> 작성하기.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>명령과 조회를 분리하기</p>\n<ul>\n<li>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야 한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>오류 코드보다 예외를 사용하라</strong></p>\n<ul>\n<li>명령 함수에서 오류 코드를 반환하는 방식은 명령/조회 분리 규칙을 미묘하게 위반한다.</li>\n<li>\n<p>Try/Catch 블록 뽑아내기.</p>\n<ul>\n<li>흉측함, 별도 함수로 뽑아내는 편이 좋다.</li>\n</ul>\n</li>\n<li>\n<p>오류 처리도 한 가지 작업</p>\n<ul>\n<li>오류 처리도 오류만 처리해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>오류 클래스를 따로 선언하면, 해당 클래스는 의존성 자석이 되기 때문에 다른 코드에서 import 해서 사용해야 한다.</p>\n<ul>\n<li>즉, 오류 클래스가 변한다면 클래스 전부를 다시 컴파일하고 다시 배치해야 한다.</li>\n<li>따라서 일반적으로는 예외를 사용하기</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>반복하지 말기</p>\n<ul>\n<li>AOP(Aspect Oriented Programming), COP(Component Oriented Programming) 등 모두가 어떤 면에서는 <strong>중복 제거 전략</strong>이 들어간다.</li>\n</ul>\n</li>\n<li>\n<p>구조적 프로그래밍</p>\n<ul>\n<li>모든 함수와 함수 내 모든 블록에 <strong>입구와 출구가 하나만 존재해야 한다</strong></li>\n<li>루프 안에서 break나 continue를 사용해서는 안된다. goto는 아시다시피 절대로 안됨</li>\n<li>해당 문제는 함수가 아주 클 때 상당한 이익을 제공.</li>\n</ul>\n</li>\n<li>\n<p>함수는 짜는 방법</p>\n<ul>\n<li>일종의 글짓기와 비슷</li>\n<li>초안은 길고 복잡할 수 있지만,<br>\n수정하면서 코드를 다듬고 함수를 만들고, 이름을 바꾸고 중복을 제거하고 메서드를 제거하기</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<p>모든 시스템은 특정 응용 분야 시스템을 기술할 목적으로 프로그래머가 설계한 DSL(Domain Specific Language, 도메인 특화 언어)로 만든다. 이러한 기술 들은 함수를 잘 만드는 방법이다. 그러나 정말로 중요한 것은 <strong>시스템이다.</strong></p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/CleancodeBook.07cc2b7.7222e95f3717f77d5f3ed287711f1d64.jpg","size":{"width":860,"height":1021},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/CleancodeBook.a67b0b2.7222e95f3717f77d5f3ed287711f1d64.jpg 480w","/assets/static/CleancodeBook.07cc2b7.7222e95f3717f77d5f3ed287711f1d64.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 1021' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2da16ebb829634911838dadcc8b5c487'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2da16ebb829634911838dadcc8b5c487)' width='860' height='1021' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABMAEADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAABAUCAwYAAQj/xAAxEAACAQMDAQUGBgMAAAAAAAABAgMABBESITFBBRMzUWEGFCIycZEVFkKhwfBigdH/xAAXAQEBAQEAAAAAAAAAAAAAAAAAAQID/8QAGREBAQEBAQEAAAAAAAAAAAAAAAERAhIx/9oADAMBAAIRAxEAPwD6pql7qGN9MkiISwUamAyT0HnV1Y3tiCS59tOzkjkChAJCp2yFck9M8Cg15lUSBCy6z0zUs45BoK57v3kh2YEqMHoDvjNeESKpMc4YBR%2brJ/vO9Y9NYO1L517zS3XdBA2nVnG2K8jllaTS8enrkZqzpMM66s1e%2b01lZSrG8szMXKHRGTpx1OenTIrRQsWiVjya0idJrm3mk7Zs54XjWOGR%2b9VlGp1ZMAA488HGRTms9f3fc%2b03ZdqIo3Ny8xLMCSoRAdug%2bYc5/mgZ3LYuWHdhgUGojkDf7VVKIWViupWIGAw2/vFM8A8gb1XJDGynKgEjGQOlc7xrUpYyR7aJ9OOdiOagQ%2b%2bi6Ugf5f8AaOa1i0BdJwPWqJLSI9D96eaaDlE2j41jkXyIDU7tvAT6UpazQHZmA8qbW3gJWuZZ9SrKzPaXdfm7sQsjNMDchCGwACi6tsb9Oo/3xWmpPN2Wl327Z9oNLIr2JlCovyv3igHP0xWkOKHdLklyJYwNtI0fzmiKqnnjiAEjYJ4GM0tz6ArRL1Wb3uRGGTgDy%2bwq9%2btS71HKhWB1DUPUVF%2btBS1G23gJQbUZbeAlBZQ8Dr7xMmRqJzj0q55EQfEwFILm%2bEPtDYBQzrOZI9mxjjcjrx%2b9BoaDkdYb12lOkMgCk/vRlBz6p7kw6yqKuo45JrPSwJO3DQIUzExA68jeqGPwEB8xlxjDNgbefJo5nlhCRHEkrE6STjb1qk3LvhI0USfFqBOwxWMaBYdotRL6ljUjc85NP7bwFpElzIsUaqNRCgnIJJyaeWvgJWuMTpXdWwlU4ODQdvZyJJHqEOEYkl1y31U9Ka11bZdkeYoaeJjL3sEgV8aTkZBFE11SzSXABtG0oVdhKpJ14znPO1RNhsulnDDOWBALZ5pjXVPMXaW/hgwoyQAMfNyPWmEKlI1U7kVKuqySfEf/2Q==' /%3e%3c/svg%3e"}}},"context":{}}