{"hash":"49b01721c2ed4f1361ca6db09477053f31e960ba","data":{"post":{"title":"[Java] Java Enum","path":"/11-java-study/","date":"1. February 2021","timeToRead":3,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Enum","title":"Enum","path":"/tag/Enum/"}],"description":"Java Enum에 대해 정리합니다.","content":"<h1 id=\"java-enum\"><a href=\"#java-enum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Enum</h1>\n<p>11주차 내용은 자바의 Enum에 관련된 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>enum 정의하는 방법</li>\n<li>enum이 제공하는 메소드 (values()와 valueOf())</li>\n<li>java.lang.Enum</li>\n<li>EnumSet</li>\n</ul>\n<h2 id=\"enum-정의\"><a href=\"#enum-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 정의</h2>\n<p><strong>enum</strong>은 열겨형이라 불리며, 관련된 상수를 편리하게 선언하기 위해 상수를 여러개 정의할 때 사용됩니다.</p>\n<p>간단하게 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Language</span> <span class=\"token punctuation\">{</span>\n    JAVASCRIPT<span class=\"token punctuation\">,</span> JAVA<span class=\"token punctuation\">,</span> PYTHON<span class=\"token punctuation\">,</span> TYPESCRIPT\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용할려면 다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printEnumOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>JAVASCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>JAVA<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>PYTHON<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>TYPESCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>output</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106461852-ae9a6680-64d8-11eb-9431-d97516e46b24.png\" alt=\"output-1\"></p>\n<p>다음과 같기 때문에 순서를 조심히 해야합니다.</p>\n<h3 id=\"상수-데이터-추가\"><a href=\"#%EC%83%81%EC%88%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상수 데이터 추가</h3>\n<p>다음처럼 상수 데이터를 넣어줄 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ItCompany</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">GOOGLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">APPLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">NAVER</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">KAKAO</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ItCompany</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"enum-값-사용\"><a href=\"#enum-%EA%B0%92-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 값 사용</h2>\n<p>Enum에서 값을 꺼내는 방법은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">Language.JAVASCRIPT</code></li>\n<li><code class=\"language-text\">Language.valueOf(&quot;JAVA&quot;)</code></li>\n<li><code class=\"language-text\">Enum.valueOf(Language.class, &quot;PYTHON&quot;)</code></li>\n<li><code class=\"language-text\">Language.TYPESCRIPT.name()</code></li>\n</ul>\n<p>해당 코드의 결과는 다음과 같이 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106462114-fde09700-64d8-11eb-80bf-fdd498b1c92f.png\" alt=\"output-2\"></p>\n<br/>\n<h2 id=\"enum-메소드\"><a href=\"#enum-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 메소드</h2>\n<p>enum에서 제공되는 메소드는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">ordinal()</code> : enum의 순서</li>\n<li><code class=\"language-text\">name()</code> : 각 요소들의 이름</li>\n<li><code class=\"language-text\">valeOf()</code> : 문자열로 enum 요소의 이름을 찾아서 이름을 리턴</li>\n<li>\n<p><code class=\"language-text\">values()</code> : 모든 enum의 요소들을 배열로 만들어줍니다.</p>\n<ul>\n<li><code class=\"language-text\">Language[] values = Language.values();</code></li>\n<li>output : JAVASCRIPT, JAVA, PYTHON, TYPESCRIPT</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compareTo()</code> : 비교를 할 수 있습니다.</p>\n<ul>\n<li>A.compareTo(B) : 같으면 0, A > B인 경우 1, A &#x3C; B 인 경우는 -1 입니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"javalangenum\"><a href=\"#javalangenum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>java.lang.Enum</h2>\n<p>Enum클래스를 보면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// method</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 해당 <code class=\"language-text\">java.lang.enum</code>은 모든 열겨형의 조상으로서, 여러 메소드 등을 사용할 수 있습니다.</p>\n<p>그 중에서 여러 눈에 뛰는 메소드로는 아래와 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Class&lt;E&gt; getDeclaringClass()</code></td>\n<td>열거형의 Class 객체 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">String name()</code></td>\n<td>열거형 상수의 이름을 문자열로 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">int ordinal()</code></td>\n<td>열거형 상수가 정의된 순서 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">T valueOf(Class&lt;T&gt; enumType, String name)</code></td>\n<td>지정된 열거형에서 name과 일치하는 열거형 상수 반환</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"enum-멤버-추가\"><a href=\"#enum-%EB%A9%A4%EB%B2%84-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 멤버 추가</h2>\n<p>열거형을 구분할 때나 확인하는 경우에는 ordinal() 보다는 멤버를 추가하는 방식이 일반적으로는 좋습니다. 특히 불연속적인 경우가 필요할 경우에는 다음과 같이 사용하는 방식이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"></code></pre>\n<br/>\n<h2 id=\"enumset\"><a href=\"#enumset\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EnumSet</h2>\n<p>Enum을 사용하여서 Set 자료구조를 만들 수 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">allOf</code> : enum에서 정의된 정보를 모두 추가할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">EnumSet.allOf(Language.class)</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">noneOf</code> : 아무것도 추가하지 않습니다.</li>\n<li>\n<p><code class=\"language-text\">of</code> : 요소를 넣을 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">EnumSet&lt;Language&gt; languageSet = EnumSet.of(Language.JAVA);</code></li>\n</ul>\n</li>\n</ul>\n<p>그 외에도 다양한 메소드가 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://b-programmer.tistory.com/262\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/262</a></li>\n<li><a href=\"https://wisdom-and-record.tistory.com/52\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wisdom-and-record.tistory.com/52</a></li>\n<li><a href=\"https://www.notion.so/Enum-6ffa87530c424d8ab7a1b585bfb26fa2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/Enum-6ffa87530c424d8ab7a1b585bfb26fa2</a></li>\n<li><a href=\"https://parkadd.tistory.com/50\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://parkadd.tistory.com/50</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg","size":{"width":680,"height":440},"sizes":"(max-width: 680px) 100vw, 680px","srcset":["/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg 680w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 680 440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9716c389a175768fda62e76437e55968'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9716c389a175768fda62e76437e55968)' width='680' height='440' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAApAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAwECBAUGAAj/xAAtEAACAAQFAgUDBQAAAAAAAAABAgADBBEFEiExQRMiBhRRYXEyQpEVM2Jygf/EABkBAQEBAQEBAAAAAAAAAAAAAAEAAgQDBf/EABsRAAMBAAMBAAAAAAAAAAAAAAABAhESITET/9oADAMBAAIRAxEAPwDz/l944JcQUS2Jh4ljmPonK6IwGsO2iW0pSgNokYPhL4pXrTJOlyVyPMebM2RFUsxtybA2A3OkRKtK3eFycCLfxTh6YZj9XQy1dPLN0WVxYhlFjf1N9bjTXS41NaBaBE3gLLYe8JvBspbYQ3psvEIaSkXK59CIay2a0WEuUqrYgEneE8ujMAbj4hOf6dkS2lo1XgvBfOIzVdGehNu0mrQtmRlNivYbgEHkcRR9FU%2b2/vGywqi8PfoNJUYrMCVYlzn6ciYVnTe/s1GnBFj63grwZvX0Vfi%2bjmSqiu69LNmiYZSy6yaG0yi3aW1NwAuvA/2Ml5fL/KNzj9D4flYZVDDcRmVNVLnIsnO7967OxU6AHcRl1kD7iTEvCqmmV1rcWhyS7/V%2bIsukliMoiOZRRrkacGEy66LHy6e/5gq0qKuYrrxrABuIPM2jOmlKDSqdDqUFoWbKCaoLLyBCDYQjfSfiDT04LBGRXHcLxHmU5GqG49IUbR0JjjoFVJbLbWJExQFAG20Bb94f1jpuw%2bYmSnEf/9k=' /%3e%3c/svg%3e"}}},"context":{}}