{"hash":"0cbdbe3ad78e6929600cc32326d49aab3f1f64f3","data":{"post":{"title":"[Architecture] MSA : SAGA 패턴이란","path":"/01-architecture-msa/","date":"22. December 2020","timeToRead":7,"tags":[{"id":"Saga","title":"Saga","path":"/tag/Saga/"},{"id":"Saga pattern","title":"Saga pattern","path":"/tag/Saga%20pattern/"},{"id":"Architecture","title":"Architecture","path":"/tag/Architecture/"},{"id":"MSA","title":"MSA","path":"/tag/MSA/"},{"id":"micro service architecture","title":"micro service architecture","path":"/tag/micro%20service%20architecture/"},{"id":"Pattern","title":"Pattern","path":"/tag/Pattern/"}],"description":" SAGA 패턴에 대해 정리합니다.","content":"<h1 id=\"msa--saga-패턴의-정의과-종류\"><a href=\"#msa--saga-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98%EA%B3%BC-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA : SAGA 패턴의 정의과 종류</h1>\n<p>이전에 MSA 개념에 대해 잡아보았습니다. 오늘은 MSA를 듣다보면 꼭 듣게 되는 SAGA 패턴에 대해 공부해보겠습니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/00-architecture-msa/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MSA 개념 잡기</a></li>\n</ul>\n<br/>\n<h2 id=\"들어가기-앞서서\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>들어가기 앞서서.</h2>\n<p>기존의 Monolithic와 MSA 아키텍처에 대해서는 이전 게시글에서 정리했습니다. 오늘은 좀 더 MSA에 대해 이야기할려고 합니다. MSA 아키텍처를 구성하기 어려운 이유 중 하나는 <strong>트랜적션</strong> 의 문제입니다.</p>\n<p>기존의 Monolithic 환경에서는 DBMS가 기본적으로 제공해주는 트랜잭선 기능을 통해서 데이터 commit이나 rollback을 통해서 일관성있게 관리하였습니다. 그러나 Applcation 과 DB가 분산되면서 해당 트랜잭션 처리를 단일 DBMS에서 제공하는 기능으로는 해결할 수 없습니다.</p>\n<h3 id=\"대안--two-phase-commit\"><a href=\"#%EB%8C%80%EC%95%88--two-phase-commit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대안 : Two-Phase Commit?</h3>\n<p>여러 서비스 간에 데이터 일관성을 유지하기 위해서 전통적인 방법인 Two-Phase commit 과 같은 방법을 사용했습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102893652-4f8f0e00-44a5-11eb-9f1a-f4d3508e6c97.png\" alt=\"two-phase commit\"></p>\n<p>다만 이 방법은 하나의 서비스가 장애가 있는 경우나 각각의 서비스에 동시에 Rocking이 걸리게 되면 성능의 문제가 발생하기 때문에 비효율적입니다. 더나아가 각각의 서비스가 다른 instance에 있기 때문에 이를 통제하는데 어려움이 있습니다.</p>\n<blockquote>\n<p>트랜잭션이란?</p>\n</blockquote>\n<p>트랜잭션이란 데이터베이스의 상태를 변화시키기 위해서 수행하는 작업의 단위를 의미합니다. 트랜잭션은 4가지의 특성(원자성, 일관성, 독립성, 지속성)을 지켜야합니다. 이에 대해 상세하게 다루기에는 주제에 너무 벗어난 주제이기 때문에 다른 게시글로 정리하겠습니다.</p>\n<br/>\n<h2 id=\"saga-패턴의-정의\"><a href=\"#saga-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SAGA 패턴의 정의</h2>\n<p>위의 문제를 해결하기 위해서 SAGA 패턴이 등장했습니다.</p>\n<p>SAGA 패턴이란 <strong>마이크로서비스들끼리 이벤트를 주고 받아 특정 마이크로서비스에서의 작업이 실패하면 이전까지의 작업이 완료된 마이크서비스들에게 보상 (complemetary) 이벤트를 소싱함으로써 분산 환경에서 원자성(atomicity)을 보장</strong>하는 패턴입니다.</p>\n<p>이를 그림으로 표현하면 다음과 같습니다. SAGA 패턴의 이벤트 성공 시는 다음과 같이 동작합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102894284-33d83780-44a6-11eb-9cb0-1c526edd5642.png\" alt=\"saga-pattern-success\"></p>\n<p>SAGA 패턴의 이벤트 실패 시는 다음과 같이 실패 이벤트를 주어 처리합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102894291-35a1fb00-44a6-11eb-93bf-2371f322c99c.png\" alt=\"saga-pattern-fail\"></p>\n<p>해당 SAGA 패턴의 핵심은 <strong>트랜잭션의 관리주체가 DBMS에 있는 것이 아닌 Application</strong>에 있습니다. Application이 분산되어 있을때는 각 Applicatin은 하위에 존재하는 DB는 local 트랜잭션만 담당합니다.</p>\n<p>즉, 각각의 Application의 트랜잭션 요청의 실패로 인한 Rollback 처리(보상 트랜잭션)은 Application에서 구현합니다.</p>\n<p>이러한 과정을 통해서 순차적으로 트랜잭션이 처리되며, 마지막 트랜잭션이 끝났을 때 데이터가 완전히 영속되었음을 확인하고 종료합니다. 이 방법을 통해서 최종 일관성(Eventually Consistency)를 달성할 수 있습니다.</p>\n<br/>\n<h2 id=\"saga-패턴의-종류\"><a href=\"#saga-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SAGA 패턴의 종류</h2>\n<p>일반적으로 SAGA 패턴은 크게 2가지로 나누어집니다. 하나는 <strong>Choreography based SAGA pattern</strong>이고 다른 하나는 <strong>Orchestration based SAGA pattern</strong>입니다.</p>\n<h3 id=\"choreography-based-saga-pattern\"><a href=\"#choreography-based-saga-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Choreography based SAGA pattern</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102895303-ccbb8280-44a7-11eb-8b80-8b87630db5f5.png\" alt=\"Choreography-Based Saga Success\"></p>\n<p>Choreography-based Saga 패턴은 보유한 서비스 내의 Local 트랜잭션을 관리하며 트랜잭션이 종료하게 되면 완료 Event를 발행합니다. 만약 그 다음 수행해야할 트랜잭션이 있으면 해당 트랜잭션을 수행해야하는 App으로 이벤트를 보내고, 해당 App은 완료 Event를 수신받고 다음 작업을 진행합니다. 이를 순차적으로 수행합니다. 이때 Event는 Kafka와 같은 메시지 큐를 통해서 비동기 방식으로 전달할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102895310-cf1ddc80-44a7-11eb-9941-de72656dd3a8.png\" alt=\"Choreography-Based Saga Fail\"></p>\n<p>Choreography-base Saga 패턴에서는 각 App별로 트랜잭션을 관리하는 로직이 있습니다. 이를 통해서 중간에 트랜잭션이 실패하면 해당 트랜잭션 취소 처리를 실패한 App에서 보상 Event를 발행해서 Rollback 처리를 시도합니다.</p>\n<h4 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점</h4>\n<ul>\n<li>구성하기 편합니다.</li>\n</ul>\n<h4 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점</h4>\n<ul>\n<li>운영자 입장에서 트랜잭션의 현재 상태를 확인하기 어렵습니다.</li>\n</ul>\n<h3 id=\"orchestration-based-saga-pattern\"><a href=\"#orchestration-based-saga-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Orchestration based SAGA pattern</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102895290-c927fb80-44a7-11eb-88ee-8f08ec4b2c21.png\" alt=\"Orchestration-Based Saga Success\"></p>\n<p>Orchestration-Based Saga 패턴은 트랜잭션 처리를 위해 Saga 인스턴스(Manager)가 별도로 존재합니다. 트랜잭션에 관여하는 모든 App은 Manager에 의해 점진적으로 트랜잭션을 수행하며 결과를 Manager에게 전달하게 되고, 비지니스 로직상 마지막 트랜잭션이 끝나면 Manager를 종료해서 전체 트랜잭션 처리를 종료합니다. 만약 중간에 실패하게 되면 Manager에서 보상 트랜잭션을 발동하여 일관성을 유지합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102895323-d47b2700-44a7-11eb-9bc1-2c46cf517c06.png\" alt=\"Orchestration-Based Saga Fail\"></p>\n<p>해당 Orchestration-Based Saga 패턴은 모든 관리를 Manager가 호출하기 때문에 분산트랜잭션의 중앙 집중화가 이루어집니다.</p>\n<h4 id=\"장점-1\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점</h4>\n<ul>\n<li>서비스간의 복잡성이 줄어들어서 구현 및 테스트가 쉬워집니다.</li>\n<li>트랜잭션의 현재 상태를 Manager가 알고 있으므로 롤백을 하기 쉽습니다.</li>\n</ul>\n<h4 id=\"단점-1\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점</h4>\n<ul>\n<li>관리를 해야하는 Orchestrator 서비스가 추가되어야하기 때문에 인프라 구현이 복잡해집니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>MSA 아키텍처 중 가장 유명한 SAGA 패턴에 대해 알아보았습니다. 다만 항상 SAGA 패턴이 좋다고는 볼 수 없습니다. 비지니스 로직상 트랜잭션 처리가 반드시 필요한 경우에만 사용하는 것이 좋습니다. 그렇지 않으면 여러곳에서 트랜잭션 처리 지옥을 경험할 수 있기 때문에 필요한 곳에서만 사용할 수 있도록 비지니스 로직을 설계하고 사용하는 것이 좋습니다.</p>\n<p>다음 게시글에서는 CQRS 패턴에 대해서 정리해보겠습니다. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://jjeongil.tistory.com/1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jjeongil.tistory.com/1100</a></li>\n<li><a href=\"https://cla9.tistory.com/22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cla9.tistory.com/22</a></li>\n<li><a href=\"https://velog.io/@dvmflstm/SAGA-pattern%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%84%EC%82%B0-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@dvmflstm/SAGA-pattern%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%84%EC%82%B0-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0</a></li>\n<li><a href=\"https://ichi.pro/ko/maikeulo-seobiseu-akitegcheo-saga-paeteon-ilan-mueos-imyeo-eolmana-jung-yohabnikka-94512583990635\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ichi.pro/ko/maikeulo-seobiseu-akitegcheo-saga-paeteon-ilan-mueos-imyeo-eolmana-jung-yohabnikka-94512583990635</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/SagaLogo.07cc2b7.ce6b121cc59f72f88dece8dc50a74694.png","size":{"width":860,"height":484},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/SagaLogo.a67b0b2.ce6b121cc59f72f88dece8dc50a74694.png 480w","/assets/static/SagaLogo.07cc2b7.ce6b121cc59f72f88dece8dc50a74694.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 484' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0e8f19beb1e299152ec7d37a48d8733a'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0e8f19beb1e299152ec7d37a48d8733a)' width='860' height='484' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAPQUlEQVRo3nXaadBX4xsH8POiN0RRKfvSpKYpopmkyTCYsRTaF5MUk0iJ7Gv2UJYipCJLkmSpkETZt2TPFkKmMY2XXp/b%2bVzjeuYZ//m/OHO2e7m%2by3Xd9/k9T/XBBx%2bUe%2b65p1x55ZXlp59%2bKt9%2b%2b215%2b%2b23y6JFi8ry5cvLL7/8Ur7%2b%2buvy%2bOOPly1btpTnn3%2b%2bbNq0qTz55JNl8%2bbN5eeffy6vvPJKueyyy8rq1avLu%2b%2b%2bW4z52muvlQ8//LCsX7%2b%2bfPbZZ/Huq6%2b%2bKi%2b//HJZuHBhefTRR8s777xTvvvuu7Jq1ary8ccfx3hPPfVUWbBgQXn99dejr1jMaTznjz76KK7F%2bemnn5Z77723zJo1K8b68ssvo9%2baNWui7W%2b//RZzG%2bPPP/8sL7zwQvn888/jfvv27eX3338vVQKePn16WbZsWQQC8AMPPFCuv/768sknn5T333%2b/rF27ttx9990xuc5vvvlmgNLWhK%2b%2b%2bmqA09a7W2%2b9tTz22GPljz/%2bCJAvvfRS2bp1a4B85JFHypw5c8obb7wR/Y1tXgC0u/HGG4OUH3/8MdoYnzjmuO222yKGDRs2BMErV66MA1DgVqxYUbZt2xZCvPXWW2XdunUxx/fffx/k6o9Y/cVZAWjAZ555pjz33HPlxRdfLL/%2b%2bmuQIVD3SKL61VdfXZ5%2b%2buny3nvvxQRcsGTJkvLNN9/EJPpwjHf6ujc2ggGiDrAC55qNGzcGiU888UQ8F5CgAXWvj/kF6zmC77jjjni3c%2bfOcIPnwGn37LPPBmAkG4ur9dGfQ%2bbOnVsWL14c%2bJLcCiBq6GCgpUuXxmCeUw5IqhqAOkAhgJ0feuihUAujnmEfIAN7TzljAnzdddeVhx9%2bOMiktjk4QnA33HBDpJi2BBE0IpHHha2tLw6EEgSh0oAADz74YAtgzxFMBO//%2buuv6Mclnu/YsSNicF9Ra9q0aWF5kwMip26//fbIeRPLVwdmgUvLCQwhBpX33CAI1z/88EMEzNYC5jDtAUekMyW1yRRCnrP24vJevVCLgASO06SV5wByAPG46L777ot4xckJyDYeXET4%2b%2b%2b/49587qVyRQVKyg0K6gTIzTffHECBkTtqBPAm45L58%2beHCiYUoMAAZDFAuEI/gSFLUCamLNIUTRanOkK0cXCU%2bb/44otIEQELlr2NT0lHiqIIi1E7oM1pfmOxOdfBh1TtuH327NlxbZwKy4LGOBu6B5AyGGYVRNx///0xONCCmTFjRigiSOkiVdhNP4EAZmJOYnMHa6b9jYUIwXKQd0B4Lg5ke0Zh5IqRM6WWebwHAtG5%2biCKA6UDJ4tDCqn%2biDcWcuGRFkSpKHTppZfGS6yxlkLjpQAwiGnAVfWsBZ4BDhCgJhKUSSklMMCorA93cVmuHAou9wAtaCmiigtOzdGXUgkOCMQB7dBXtZe6Ds7MIkkMhS5TzHNucM9Z5jAX8SrBXXHFFeXOO%2b%2bMB8Cdd955YWuBIODyyy8PggRlz4BFwJGAaQNqJ0AE3HTTTeEe6cX2JtVOX%2b4ByFhIEiAiPc85jM0xd911V5CJsFwWtTdXLnPIF496ZS5WR66xHQo593CVcdUDTnIfDtCB7QDmBhMbFDgTAKWDILFufb/lllvCHVKFSthP5ZFmv2BS1X3w4MFl1KhR5Ywzzojz6NGjy8knnxzPTz311LgfOXJkGTNmTDnppJPK0KFDy5AhQ1rOU6ZMCfAOLnSWx4oiUjN9gBcrsmzirDpi4sqLL7448BBY2nG8d8io2AfT8opNFT92BN5AUsK1AVItBLGm%2b6lTp8agAvMcswhhWYDbtGlTOnToUPbcc8/Svn37OPLeOZ/l8z322COOjh07Rl/kiJGjcmkFhFDc6hpILhUTMrhZHymtDYHFmssgsY0VRVCn888/Pzp4gIBrr722ZemyRMoh7eSwZyYBlNXYz8GS6gCHsB5SEADIgQceWPbff///Ofbbb7//e68PQkaMGNGyyaF41hCgOEEsrhXb3Bhp45CahNBejATOOkMs9afSiV0ta9gxkWv2xvLMmTNjb67CWqLS/qwv102oOOYeX1uT23X17du3dO7cOYDtu%2b%2b%2bZZ999glwrvNZ62vv85l2XCINzMfy%2bQ1hTjFzhTwGjHiUVQBhEpPalt8F0oBg%2bkpNQsNXsbkNhJvMW5ZCwLx586Iz1d07K0CYMwHbJWEqOetTQ8AC7d%2b/f%2bnUqVMATHDs3aVLlwC39957x3P2R1RrEhDAAepEfoCJ0/zSlVjqjboFmAJ31VVXhZNTOHHZkIlJXTKG3OdeLo0iCIxCk7luw0M9imOQzXI9tb5aSgycaz97spRUQRJi2FG7M888s7Rr167F3tJh4sSJoZi6A%2bihhx4a9eO4444LwEmWM1IOP/zwcBVRkJ3pKKcTtDwHCEjv89uDIPBZNvUXG%2bLsThFpvApQygvIIBopIhpSkSMQoIPdmwnkOYYFgRTOkGMsiAQ1hSrDhg0LxZMA1whTfS%2b44IKy2267RRH12Ypo961ThHu4CNkAyGcqSkNxiNEGjf1Z3Vntkd9SRoqoWwjQDpZcOi31iKuomF9Y0gEwg1EZoxp5zmqUoDZiFErXyFALMG5CBOiH3dNPPz2sDlRae9y4cdHO%2btyzZ88WOyPhyCOPLHvttVdLMZQalkdgAEAw4PYT1BVb/nYhNkAtf2KXBvKcEJ5L59xkIUUMimpFXSoY1JLCyhqzWW6IAJYaiFH8MEgV77hHerhnR%2bA9p5Y1HojWBHCXQOSqtV6/U045JZzHOemCJMAYKjeHqAVWG25wDQQCCJCg1YncYLG/OLJemEM/hMAUDtBAEPLWg0wBDRFhQAPZPHgHvEDlce74uAMoTuIMwdg82fBkXgMvp9u2bVuOPvrocsABB7TkeRZBS1/rIihlpBFri1McyFXlKa5WUVFM4s2NmHuFj92lrbTgyAsvvDDI4FJCG7MyoMDlMSBUpD5CqMlCfnaS46xmMNZyRoDqr59UkE4C884EJ5xwQhS%2b1gQgVd0xb7du3SLPbZXNscsuuwQxWQOkz6BBg4KA/PCSx84Aio0rATUv4bjgkksuCYEchECSGkZA9Qdxin78HiAFTK4ouaa0gTA2adKkcAWLI8QA3udySH0TACNdFMT8OAE0HQAUNW1/5bNnbH/IIYdEjrO1wLt3796yHLZ2gHmRigTBIyB/FpPPCJCaSOEScWmLHM4kjDa55UeIpTD2AQJVmQFMlYGjKmLkigGpjVFLZv5eqBprp43%2bxvLMpoO9BgwYEAoD49yvX7/YlSHW5IokIILz9WajteuuuwZhScDw4cMDHCCAcwP1xEIItYGq3ECs3Oz4%2bQ4B4rHCub7oootadq8%2b54MAD%2bQ5CyOCdQ0uLbCLMRseQAFEigBUZQNSXRHNHyiQo2CqA8cee2xLCqSls/Cx8hFHHBGg7QXs%2bFgXUf91APDyW1xIEBeCgXIWG9CA5tZc/JwFlzYcRFhFU%2bzGio8hRYJtFAhEAKkOSAFq6wgopgVrmQFSmmiroGhncq5AkPeCsrlJAnJzA5RcVwzZfffdd48zcrzLtrkV9hWpcKlL5s%2b9fxY2Vr/mmmtiGZeO7i3J3mknrT2HUZ0gEuKsXlEDrPvyQeXEEFAsL9cw5ZlrBdGZGxB17rnnBlBquNdHIGqEdt4pghTNiu9wrdo73OeHkuf/bWdPcPzxx4fL5DER8ud3LpQamQaeO/KbJr8IpbS4pIc6R3nvYLMcVoCxl2oOvFx2rTMwCGBpZ3nljD12BRQRAjGgQBBilZBj7C6nkUBNZ47Iz2EAXeeR7VxrxxG9evWK8YBmZfuVXLmoCSwSiACk2LWT%2b7k5Q55nrjmCa6083FTJEbY2iM4aSwGOwBymqQ7k5MmTI6cUOeDzpzABqh2spmJLB/cqvMLnhw5V3/rPFVaH0047Le69c/joUTQ9z2dHHXVUFEyEAytgIgAAUNYd76UHaxPCOX840U690ccZzlxCowZ4IW/T9pQHBKNY5BCgWUu6sA9C1A4HxwjAKuE%2b27AttdSP/Pmcat4JIHeO2mSBsonKP9CIKbfiVgokS1XtHProK1bjmU8/AhKL9Y1HJGc1QawcIAZbaXPERkggOrAtBlmfiqxvMAUSw%2b4FhUnsGpgbgBaIwLgGQcaTUtogVnvBCNozZ/feURXB%2bgtKW4CIglwF1bi58TFupp3CJj20109/18YmJoG1scIhMLfIdpNIrAyiE8DpAAy5p7yJBAi4au9aMfGcKlRFGNAmci%2bltNMfAMFwggktUZ4jQLoAJ42c043qCMWo75NcW6AcUpIY4kSGsRu31k08tWecBYd5jItUZ%2bBzSSSWFPGucpPrpok15gTgBM0dCh6LA4UwjvAMIYLiAO24gTuyDkghYyMBYYg1LkDOUkbdQW7WEv1yJ8nawDg7xPpvnambsWrgG1B1M17dkFc3Dqi9a9xSN0TWzXh1Q2zdAK0bQuNolsu6Scm6WVZrDqsEiXUKshD1TCIgVmU9YAV7zjnntIAEQoHyYSQ1EqQ8QyTlzj777HLMMcfEhqdPnz6xwVH5rfMqfv4YmvsAhza2xAcffHD08bvi%2bPHjI76sVVRWowBM91KYQP%2bSEssd8rgSoURBtL7qjPdNHagruaeDAakMtIGA4gAKIYA6lPfMamD3ByxVkcQBglW5gbOE%2bdjxiw4Sxo4dG2QZW3uuQZjgBWYspBsX0VYQK8Zhhx0WewJEHXTQQaV3796xQjTzUVxdYP1aGjTC1E1NqxvgdTNu3eAJdzTjh0OaAlk3KVQ3qRgOUv%2bq/IoCPnOZehQHnOI%2bdPyUBbxDoJ5r53vdDxkAC1DQ3uVKYAVQeRWqXIKcKZGrgzTJd5Sx9RWcwqWqE4kAHHfiiSeWHj161EhuyKkbYgM4cIAhwLnJ9bopdvWmTZvC7uvXr6%2bbbXTdbI/rZtschJi3AoJlFZasAQlUsaM6N1jXbXqoo4/f69m0a9eusV0VIFCKCzAAAKQtUijnN0KEO1g1K3buQNnUltZ6b%2bsLOJd4l38NZnUqclKTGnWz3a4bAepmx1g3c9VN27rpVzeOisLYpHgcFOcMz7iCQ%2bCt2Ij9pAH1WdAhfwE%2b66yz4hA8R0yYMCG2r6yJGCwKFnBB5k4xgdrJVVUVhzTgBu19lDiA9YEDeP4FN/9RwrIHsAMZufyJtynGNfIAa%2bIKItSWgQMHRpxSF0na6pPLrENN%2bPcDsP4HTEgExZ/88I4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"}}},"context":{}}