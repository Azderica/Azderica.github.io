{"hash":"2858839cb272bd8e3f388ae3dd5d59774a4a3863","data":{"post":{"title":"[Java] Effective Java, 모든 객체에 공통적인 메소드","path":"/02-java-effective-java/","date":"12. April 2021","timeToRead":12,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Effective Java","title":"Effective Java","path":"/tag/Effective%20Java/"},{"id":"Object","title":"Object","path":"/tag/Object/"}],"description":"Effective Java 책 중, ch3 모든 객체에 공통적인 메소드에 대해 정리합니다.","content":"<h1 id=\"모든-객체의-공통적인-메소드\"><a href=\"#%EB%AA%A8%EB%93%A0-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B3%B5%ED%86%B5%EC%A0%81%EC%9D%B8-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모든 객체의 공통적인 메소드</h1>\n<p><code class=\"language-text\">Object</code>는 자바에서 모든 오브젝트의 최상위 클래스이며, 상속을 통해서 사용하도록 설계되었습니다. 따라서 <code class=\"language-text\">Object</code> 클래스에서 final이 아닌 메서드들(대표적인 예시로, equals, hashCode, toString, clone, finalize 등)이 모두 오버라이딩을 염두하고 설계되었습니다.</p>\n<p>아래에서는 이를 재정의하는 것에 대해서 정리합니다.</p>\n<h2 id=\"item-10-equals를-오버라이딩-할-때-일반적인-룰을-준수합니다\"><a href=\"#item-10-equals%EB%A5%BC-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-%ED%95%A0-%EB%95%8C-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EB%A3%B0%EC%9D%84-%EC%A4%80%EC%88%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 10. <code class=\"language-text\">Equals</code>를 오버라이딩 할 때, 일반적인 룰을 준수합니다.</h2>\n<p>equals 메서드를 재정의하는 방법은 여러가지가 있지만, 잘못된 사용은 끔찍한 결과를 만듭니다. 따라서 다음의 룰을 준수해야합니다.</p>\n<ul>\n<li>클래스의 각 인스턴스는 본질적으로 unique합니다.</li>\n<li>클래스에 대해 <code class=\"language-text\">logical equality(지역적 동일성)</code> 테스트를 제공할 필요가 없습니다.</li>\n<li>슈퍼 클래스는 이미 equals를 이미 오버라이딩하였으므로, 슈퍼클래스의 동작은 이미 클래스의 적합합니다.</li>\n<li>클래스는 private나 package-private이므로, 해당 'equals'는 호출되지 않을것이라고 확신합니다.</li>\n</ul>\n<h3 id=\"equivalence-relation의-조건\"><a href=\"#equivalence-relation%EC%9D%98-%EC%A1%B0%EA%B1%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>equivalence relation의 조건.</h3>\n<p>equivalence relation 이란, 요소 집합에서 요소가 서로 동일한 것으로 간주하는 하위 집합으로 분할하는 연산자이며 이를 <code class=\"language-text\">equivalence class</code>라고 합니다. 이를 위해서는 5가지의 요구 사항을 지켜야합니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Reflexivity(반사성)</code></p>\n<ul>\n<li>객체가 자신과 동일해야합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Symmetry(대칭)</code></p>\n<ul>\n<li>두 객체가 동일한 지 여부에 대해 동의해야합니다.</li>\n<li>equals 를 위반한 경우, 해당 객체가 다른 객체를 비교하게 되면 어떻게 동작할지 알 수가 없습니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 대칭을 위반한 케이스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 대칭을 위반한 경우</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 단방향 상호 운용성</span>\n      <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>equalsIgnoreCase <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 대칭을 준수한 코드</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>equalsIgnoreCase <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">Transitivity</code></p>\n<ul>\n<li>한 객체가 두번째 객체와 같고, 두번째 객체가 세번째 객체와 같으면 첫번째 객체와 세번째 객체가 같아야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// equals contract를 위반하지 않는 값 구성 요소</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorPoint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Point</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">asPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ColorPoint</span> cp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> cp<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> cp<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">Consistency</code></p>\n<ul>\n<li>두 객체가 같은 경우에, 둘 중 하나가 변경되지 않는 한 항상 동일하게 유지되어야합니다.</li>\n<li>신뢰할 수 없는 리소스에 의존하는 경우, equals를 사용하면 안됩니다.</li>\n<li>대표적으로 사용하면 안되는 것이, <code class=\"language-text\">java.net.url</code>에서의 equals이며, 이는 IP를 사용하기 때문에 시간이 바뀌면서 바뀔 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Non-nullity</code></p>\n<ul>\n<li>모든 객체는 null과 같으면 안됩니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Implicit null check - preferred</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">MyType</span> mt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyType</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>s\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"좋은-equals-사용-방법\"><a href=\"#%EC%A2%8B%EC%9D%80-equals-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>좋은 equals 사용 방법</h3>\n<ul>\n<li><code class=\"language-text\">==</code>를 사용하여 인수가 이 객체에 대한 참조인지 확인합니다.</li>\n<li><code class=\"language-text\">instanceof</code>를 사용해서 argument의 유형한 타입인지 확인합니다.</li>\n<li>올바른 유형으로 캐스트합니다.</li>\n<li>클래스의 각 중요한 필드에 대해 인수의 해당 필드가, 이 객체의 해당 필드와 일치하는 지 확인합니다.</li>\n</ul>\n<p>이러한 방법으로 equals를 작성하고 나서는 세가지를 확인해야합니다.</p>\n<ul>\n<li><code class=\"language-text\">symmetric</code>, <code class=\"language-text\">transitive</code>, <code class=\"language-text\">consistent</code></li>\n</ul>\n<p>그 외의 주의사항은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">equals</code>를 재정의할 때는, <code class=\"language-text\">hashCode</code>를 재정의합니다.</li>\n<li>너무 영리하게 할 필요가 없습니다. 복잡하게 구성하면 안됩니다.</li>\n<li><code class=\"language-text\">equals</code>를 선언할 때는, 객체를 다른 타입으로 대체하면 안됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-11-equals를-오버라이딩-할때-hashcode를-항상-오버라이딩합니다\"><a href=\"#item-11-equals%EB%A5%BC-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-%ED%95%A0%EB%95%8C-hashcode%EB%A5%BC-%ED%95%AD%EC%83%81-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 11. <code class=\"language-text\">Equals</code>를 오버라이딩 할때, <code class=\"language-text\">Hashcode</code>를 항상 오버라이딩합니다.</h2>\n<ul>\n<li><code class=\"language-text\">equals</code>를 재정의하는 모든 클래스에서는 반드시 <code class=\"language-text\">hashCode</code>를 재정의해야합니다.</li>\n<li>동일한 개체에 동일한 해시 코드가 있어야합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 전형적인 hashCode method</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>areaCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>성능을 향상시키기 위해 hash code 계산에서 중요한 필드를 제외하면 안됩니다. (품질이 급격하게 떨어짐)</li>\n<li><code class=\"language-text\">hashCode</code>에서 반환한 값에 대해 자세한 스펙을 제공하면 안됩니다. 이 경우, 클라이언트 값에 합리적으로 의존할 수 없습니다. 따라서, 유연성을 제공해야합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-12-tostring을-항상-오버라이딩합니다\"><a href=\"#item-12-tostring%EC%9D%84-%ED%95%AD%EC%83%81-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 12. <code class=\"language-text\">ToString</code>을 항상 오버라이딩합니다.</h2>\n<p>아래의 부분을 중시해야합니다.</p>\n<ul>\n<li>equals나 hashCode를 준수하는 것만큼의 비중은 아니지만, 좋은 <code class=\"language-text\">toString</code>을 제공하면, 클래스를 더 좋게 사용할 수 있고 이후에 디버깅을 하기도 편해집니다.</li>\n<li>가능한 경우, <code class=\"language-text\">toString</code> 메소드는 객체에서 포함하고 있는 중요한 정보를 반환해야합니다.</li>\n<li>형식 지정 여부와 관계없이, 의도를 명확하게 문서화해야합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* 휴대폰 번호를 세 부분으로 나누는 것은 너무 작기때문에,\n * 이러한 필드값을 채우기 위해, 다음과 같이 진행했습니다.\n * Ex. lineNum이 123인 경우, \"0123\"으로 나타냅니다.\n */</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%03d-%03d-%04d\"</span><span class=\"token punctuation\">,</span> areaCode<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>형식을 지정했든 말든, <code class=\"language-text\">toString</code>로 반환되는 값에 포함된 정보에 대해 프로그램 액세스를 제공해야합니다.</li>\n</ul>\n<p>정리하자면, toString을 사용한다면 <strong>가급적 해당 객체가 가지고 있는 모든 정보들을 노출시키는 것이 좋습니다.</strong></p>\n<br/>\n<h2 id=\"item-13-신중하게-clone을-오버라이딩합니다\"><a href=\"#item-13-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-clone%EC%9D%84-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 13. 신중하게 <code class=\"language-text\">Clone</code>을 오버라이딩합니다.</h2>\n<p><code class=\"language-text\">Cloneable</code> 인터페이스는 복제가능한 클래스를 명시하는 인터페이스이지만, 그 목적을 수행하지 못합니다. 즉, 여러 객체를 복사하는 경우 잘못되는 경우가 쉽게 발생합니다.</p>\n<p>대표적인 예시로 <code class=\"language-text\">immutable class</code>의 경우에는 낭비적인 복사를 사용하기 때문에, <code class=\"language-text\">clone</code> 메소드를 제공하면 안됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 사용하지 않는 참조</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n      elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 위의 스택 클래스를 clone을 하는 경우, 복제된 Stack 클래스의 경우 동일한 elements 주소를 참조하기 때문에, 복제본의 불변성이 파괴됩니다.</p>\n<p>즉, clone 메서드는 생성자 역할을 수행하기 때문에, 원본 객체에 해를 끼치지 않고 복제본에 불변을 수행하는 지 확인해야합니다.</p>\n<p>또한 <strong>추가적으로 생성자를 호출하지 않고, 객체를 생성할 수도 있기 때문에 이는 큰 위험을 가지고 있습니다.</strong></p>\n<p>따라서 다음과 같이 clone()을 사용해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Stack</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CloneNotSupportedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">Cloneable</code> 아키텍처는 변경가능한 객체을 참조하는 final 필드의 일반적인 사용과 호환되지 않습니다.</p>\n<p>따라서 아래와 같은 복사를 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반복적인 복사, 깨끗하지만 맹목적으로 복사본을 덮어씁니다.</span>\n<span class=\"token class-name\">Entry</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Entry</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> p <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 이러한 방법보다, 가장 좋은 방법 중 하나는 <strong>복사 생성자 또는 복사 팩토리를 제공하는 것</strong>입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 복사 생성자, Copy constructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Yum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Yum</span> yum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 복사 팩토리, Copy factory</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Yum</span> <span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Yum</span> yum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이러한 방법은 클래스가 구현한 인터페이스 타입 인스턴스를 인수로 받을 수 있기 때문에, 클라이언트는 원본의 구현 타입에 얽매이지 않고 복제본의 타입을 정할 수 있습니다.</p>\n<p>결론적으로, <code class=\"language-text\">Cloneable</code>을 확장하는 것은 좋지 않으며 생성자와 팩토리를 사용하는 것이 좋습니다. 다만 배열의 경우는 clone 메서드를 사용하는 것이 좋습니다.</p>\n<blockquote>\n<p>추가적으로 알면 좋은 글</p>\n</blockquote>\n<p>clone() 메서드의 경우, deep copy이고 arraycopy()의 경우, shallow clone입니다.</p>\n<ul>\n<li><a href=\"https://masima305.tistory.com/36\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">clone() vs arraycopy()</a></li>\n<li><a href=\"https://velog.io/@coin46/Shallow-copy-vs-Deep-copy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shallow Copy vs Deep Copy</a></li>\n</ul>\n<p>[추가적으로 ]</p>\n<br/>\n<h2 id=\"item-14-comparable을-개발할때-고려합니다\"><a href=\"#item-14-comparable%EC%9D%84-%EA%B0%9C%EB%B0%9C%ED%95%A0%EB%95%8C-%EA%B3%A0%EB%A0%A4%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 14. <code class=\"language-text\">Comparable</code>을 개발할때 고려합니다.</h2>\n<p><code class=\"language-text\">compareTo</code> 메서드는 <code class=\"language-text\">Comparable</code> 인터페이스의 유일한 메서드입니다. (Object 메서드가 아닙니다.) 이는 Comparable 객체의 컬렉션 유지 관리에도 편하는 장점이 있습니다.</p>\n<p>sgn에 대한 여러가지 수학적 조건이 있으나 여기서는 너무 수학적으로 설명되기에 이를 생략합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 개체 참조 필드와 비교 가능한 단일 필드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span> cis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> cis<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">Object</code>의 <code class=\"language-text\">equals</code>나 <code class=\"language-text\">==</code>와 주로 비교대상이 되며 이를 특징별로 정리하면 다음과 같습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">compareTo</code></p>\n<ul>\n<li>기준에 따라 비교합니다. 동일성 비교에 더해 순서까지 비교할 수 있으며 제네릭합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">equals</code></p>\n<ul>\n<li>두 객체의 값의 동일성 여부를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">==</code></p>\n<ul>\n<li>두 객체의 동일성 여부를 반환합니다.</li>\n</ul>\n</li>\n</ul>\n<p>이중에서 <code class=\"language-text\">compareTo</code>에 대해서 좀 더 알아보자면 지켜야하는 3가지의 규약이 있습니다.</p>\n<ul>\n<li>두 객체의 참조의 순서를 바꿔 비교해도 항상 예상한 결과가 같아야합니다.</li>\n<li>a &#x3C; b, b &#x3C; c라면 a &#x3C; c가 성립해야합니다.</li>\n<li>같은 객체들끼리는 어떤 객체와 비교하더라도 항상 같아야합니다.</li>\n</ul>\n<h3 id=\"comparable-vs-comparator\"><a href=\"#comparable-vs-comparator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comparable VS Comparator</h3>\n<p><code class=\"language-text\">Comparable</code> 인터페이스의 경우 <code class=\"language-text\">compareTo()</code> 메서드를 오버라이딩 하여서 인자로 넘어온 같은 타입의 다른 객체와 대소 비교합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Fields, Getters, Setters 생략</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">Comparator</code> 인터페이스의 경우, 정렬 대상 클래스를 수정할 수 없을 때 주로 사용합니다. 주로 <code class=\"language-text\">Arrays.sort()</code>, <code class=\"language-text\">Collections.sort()</code> 등을 사용하며, 이를 통해서 정렬을 합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span> comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Player</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> comparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>다만 보통은 람다함수로 표현합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이에 대한 상세 내용은 아래르 참고하면 좋습니다.</p>\n<ul>\n<li><a href=\"https://www.daleseo.com/java-comparable-comparator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">comparable vs comparator</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/EffectiveJava.633a126.62da2dbeb71f67a6b063e53d90d77388.jpeg","size":{"width":800,"height":1073},"sizes":"(max-width: 800px) 100vw, 800px","srcset":["/assets/static/EffectiveJava.a67b0b2.62da2dbeb71f67a6b063e53d90d77388.jpeg 480w","/assets/static/EffectiveJava.633a126.62da2dbeb71f67a6b063e53d90d77388.jpeg 800w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 1073' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a77cbd8273266b44cedd9d66cbf64af5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a77cbd8273266b44cedd9d66cbf64af5)' width='800' height='1073' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABWAEADASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYFBwIDBAEI/8QAORAAAgEDAwEFBQYDCQAAAAAAAQIDAAQRBRIhMQYHEyJRFBUyQWEjJHGxstEWkaEXJTM2VWRyc4H/xAAYAQADAQEAAAAAAAAAAAAAAAAAAgMFBP/EACkRAAIBAgUCBQUAAAAAAAAAAAABAgMRBCExUXESMiIzQcHwEyNhkaH/2gAMAwEAAhEDEQA/APqmiitc88VvEZbiRIoxjLOwUD5dTQBsorh98aZ/qFn1x/jr%2b9Y%2b/NK4/vOx56feE/egCQoqO9%2b6T8tUseRkfeE/eq41LvM1RtQvRoem2V7YQzNFHOZH8%2b3gngYxkcUk6kYK8itKjOq7QRbFFQHYbW5%2b0PZ2HULqBIJXeRSiEkeViuRn8Kn6ZO6uick4tphSh3toknd7rCy/AUTJ9POvNN9Knept/gHVzJ8AjBb8AwJolowjqj5507UMxWUXsOkypIrEs8DOVwxHmcNhTjHxYOa6VtPbHhim03TYoTIviyWy7W25GQDuPyzXZrd3BHFbRzB/Z799qRZBzxkBtoAJ56mvJrYRRKVntVQchfakTBBx0z1zxWfm/FH5/TUSULwna/z8MjH0/wC8WzWmnaYfDkM584yUVhtXcTyemQAQcHpUl2diCaWYrkW6usnwFmTB3dFxXt1FC91pFq17ayMkgVIlCkwbmTdnHTnb19DU2XWCa5ijlJ8W7cK0bLjG7qfUfL%2bdLWfgV9ymCX3Xbb3RbfdsmzsdYKPRv1Gmel3u/GOydiPofzNMVaFPsXBlVvMlywpS72AG7udfB6ezNTbSp3q4/s813PQWzGmloItSglt7GSC1kkS6sZIljkYuyt4uNqg9fKuQB681svFSCWRoLSRpl8xdwjqp%2bLjgjr04rMXDi61GVJjEILJvERMMoxgDkg%2bvy5qM0A6q92LIXapFuVZocY3yeH5WLHkYUAVxKTtn6HdlezRvsj4mrWcjxxp48qbsKFG0t9Plx06GpTsI80fZyEuzxbJX3EMoUedsZzkn/wArDwL2K6tpJfBVY54WwFA3faDGPUZGaz7Ib20OF4Io7j7V/OeCAGPHXIqNaScMtztwkLVXfb3L47v/APKdh/xP6jTDS73fHPZKwx0w36jTFWjT7FwY9bzJcsKVe9Q7e7zXT/tmpqpb7xsfwZqW4ArtXIPpvFNLQSOqKc11Uv7OVNOuoIHWzVXL8dckgj5kjHBpF0%2b99glnW/nto5ZjBOvhEtsj8LBI6g44JyeCab5HR97NcxsGJ3FgVJGOnJz86i5lsdkQjlgDcjmIjpwPwH51wxslY05Qcnexq0u6gvYbF5NSBlM8SJG458IMOg6AYG71zxUr2VaD3ZLiNfBM0gQMN2fMeRk4B%2bpNRFnb2/vS2LyQGYsAEiUtk54PHGfyqS0AXcWkKsEkcbB3Vy5CkLnpk/kKnXs45HRgouNV3fp7ovXu2Oexun/g/wCo0zUp91kgk7D6cQeR4gP0Ic5FNlaFPsXBj1vMlywqF7Y6euqdnrqykMgSUoD4YBbhgeM/hU1mimeZNZFPv2IWUCR7vVt6nhfDTgH64ofu6tQSTqupgAHLeCgz/Srgrx0WRCjqGUjBBGQan9GOxdYmotJP9lMwd3thBLG663qKmNsj7OPrnrUGlnDos15Y3e8yQyuhIYYdeMMQR8xzV8%2b7bHJPsVtkjB%2byXn%2blaLjQtJuZmmuNMsZZX%2bJ3gVieMckipVMP1xssi1DGOnPqld5W1IDunwOxsGMY8ebp/wBjU4VosbK2sIBBZW8VvCCW2RKFXJOScCt9dEV0xSOScuqTlucVxZyS3IlEygD4cx5ZPXac4/mDXbRRTChRRRQAUUUUAFFFFAH/2Q==' /%3e%3c/svg%3e"}}},"context":{}}