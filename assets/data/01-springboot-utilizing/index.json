{"hash":"441d039ecb7f9b8f8ede21c119627ec9bc8d91ab","data":{"post":{"title":"[SpringBoot] SpringBoot 활용하기 - 1","path":"/01-springboot-utilizing/","date":"3. August 2020","timeToRead":8,"tags":[{"id":"Spring","title":"Spring","path":"/tag/Spring/"},{"id":"SpringBoot","title":"SpringBoot","path":"/tag/SpringBoot/"},{"id":"Backend","title":"Backend","path":"/tag/Backend/"},{"id":"SpringStarter","title":"SpringStarter","path":"/tag/SpringStarter/"}],"description":" 'SpringBoot 활용하기'의 첫번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpringBoot 활용하기</h1>\n<table>\n<thead>\n<tr>\n<th>스프링 부트 핵심 기능</th>\n<th>각종 기술 연동</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SpringApplication</td>\n<td>스프링 웹 MVC</td>\n</tr>\n<tr>\n<td>외부설정</td>\n<td>스프링 웹 MVC</td>\n</tr>\n<tr>\n<td>프로파일</td>\n<td>스프링 데이터</td>\n</tr>\n<tr>\n<td>로깅</td>\n<td>스프링 시큐리티</td>\n</tr>\n<tr>\n<td>테스트</td>\n<td>REST API 클라이언트</td>\n</tr>\n<tr>\n<td>Spring-Dev-Tools</td>\n<td>다루지 않은 내용들</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"springapplication\"><a href=\"#springapplication\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpringApplication</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-spring-application\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-spring-application</a></p>\n<p>Tip) 자동 설정이 되지않을때나 궁금할때는 디버그를 보면 확인할 수 있다.</p>\n<ul>\n<li>\n<p>기본 로그 레벨 INFO</p>\n<ul>\n<li>뒤에로깅수업때자세히살펴볼예정</li>\n</ul>\n</li>\n<li>FailureAnalyzer</li>\n<li>\n<p>배너</p>\n<ul>\n<li>banner.txt | gif | jpg | png</li>\n<li>classpath 또는 spring.banner.location</li>\n<li>\\${spring-boot.version} 등의 변수를 사용할 수 있음.</li>\n<li>Banner 클래스 구현하고 SpringApplication.setBanner()로 설정 가능.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">SpringApplication</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringinitApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">setBanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">,</span> sourceClass<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Spring Boot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>\n<p>배너끄는방법</p>\n<ul>\n<li>SpringApplicationBuilder로 빌더 패턴 사용 가능</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">SprintApplicationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringinitApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-applicatio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-applicatio</a> n.html#boot-features-application-events-and-listeners</p>\n<ul>\n<li>\n<p>ApplicationEvent 등록</p>\n<ul>\n<li>\n<p>ApplicationContext를 만들기 전에 사용하는 리스너는 @Bean으로 등록할 수 없다.</p>\n<ul>\n<li>SpringApplication.addListners()</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// SampleListner</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleListner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApplicationStartedEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationStartedEvent</span> applicationStartedEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=======================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Application is starting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=======================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Application</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 작성시. Spring 이 빌드될 때 찍히는 거 볼 수 있다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>WebApplicationType 설정</p>\n<p>WebApplicationType은 Servlet, Reactive, None 등이 있는데 이걸로 돌아간다.</p>\n<p>둘 다 없으면 None으로 돌려야하고, 두개다 있으면 Servlet으로 돌아간다. Reactive로 하고 싶으면 따로 작성해야한다.</p>\n</li>\n<li>\n<p>애플리케이션 아규먼트 사용하기</p>\n<ul>\n<li>ApplicationArguments를 빈으로 등록해 주니까 가져다 쓰면 됨.</li>\n</ul>\n<p>argument에 생성자가 하나면 Bean을 생성할 때 자동으로 해준다.</p>\n</li>\n<li>\n<p>애플리케이션 실행한 뒤 뭔가 실행하고 싶을 때</p>\n<ul>\n<li>ApplicationRunner (추천) 또는 CommandLineRunner</li>\n<li>\n<p>순서 지정 가능 @Order</p>\n<p>숫자가 높을수록 우선순위가 높은 것.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"외부-설정\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>외부 설정</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config</a></p>\n<h3 id=\"사용할-수-있는-외부-설정\"><a href=\"#%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%99%B8%EB%B6%80-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>사용할 수 있는 외부 설정</h3>\n<ul>\n<li>properties</li>\n<li>YAML</li>\n<li>환경변수</li>\n<li>커맨드 라인 아규먼트</li>\n</ul>\n<h3 id=\"프로퍼티-우선-순위\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로퍼티 우선 순위</h3>\n<p>위에 있을수록 높음.</p>\n<ol>\n<li>유저 홈 디렉토리에 있는 spring-boot-dev-tools.properties</li>\n<li>테스트에 있는 @TestPropertySource</li>\n<li>@SpringBootTest 애노테이션의 properties 애트리뷰트</li>\n<li>커맨드 라인 아규먼트</li>\n<li>SPRING_APPLICATION_JSON (환경 변수 또는 시스템 프로티) 에 들어있는 프로퍼티</li>\n<li>ServletConfig 파라미터</li>\n<li>ServletContext 파라미터</li>\n<li>java:comp/env JNDI 애트리뷰트</li>\n<li>System.getProperties() 자바 시스템 프로퍼티</li>\n<li>OS 환경 변수</li>\n<li>RandomValuePropertySource</li>\n<li>JAR 밖에 있는 특정 프로파일용 application properties</li>\n<li>JAR 안에 있는 특정 프로파일용 application properties</li>\n<li>JAR 밖에 있는 application properties</li>\n<li>JAR 안에 있는 application properties</li>\n<li>@PropertySource</li>\n<li>기본 프로퍼티 (SpringApplication.setDefaultProperties)</li>\n</ol>\n<p>application.properties 우선 순위 (높은게 낮은걸 덮어 씁니다.)</p>\n<blockquote>\n<p>위에 있는게 이김.</p>\n</blockquote>\n<ol>\n<li>file:./config/</li>\n<li>file:./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ol>\n<p>랜덤값 설정하기</p>\n<ul>\n<li>\\${random.*}</li>\n</ul>\n<p>플레이스 홀더</p>\n<blockquote>\n<p>인풋텍스트나 아레아 등에서 안내 문구를 삽입해 주는 기능 + 클릭하면 사라지는 아주 좋은 기능</p>\n</blockquote>\n<ul>\n<li>name = keesun</li>\n<li>fullName = \\${name} baik</li>\n</ul>\n<h3 id=\"타입-세이프-프로퍼티\"><a href=\"#%ED%83%80%EC%9E%85-%EC%84%B8%EC%9D%B4%ED%94%84-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입-세이프 프로퍼티</h3>\n<p>타입-세이프 프로퍼티 <code class=\"language-text\">@ConfigurationProperties</code></p>\n<ul>\n<li>여러 프로퍼티를 묶어서 읽어올 수 있음</li>\n<li>\n<p>빈으로등록해서다른빈에주입할수있음</p>\n<ul>\n<li>@EnableConfigurationProperties</li>\n<li>@Component</li>\n<li>@Bean</li>\n</ul>\n</li>\n<li>\n<p>융통성 있는 바인딩</p>\n<ul>\n<li>context-path (케밥)</li>\n<li>context_path (언드스코어)</li>\n<li>contextPath (캐멀)</li>\n<li>CONTEXTPATH</li>\n</ul>\n</li>\n<li>\n<p>프로퍼티 타입 컨버전</p>\n<ul>\n<li>@DurationUnit</li>\n</ul>\n</li>\n<li>\n<p>프로퍼티 값 검증</p>\n<ul>\n<li>@Validated</li>\n<li>JSR-303 (@NotNull, ...)</li>\n</ul>\n</li>\n<li>메타정보생성</li>\n<li>\n<p>@Value</p>\n<ul>\n<li>SpEL 을 사용할 수 있지만...</li>\n<li>위에 있는 기능들은 전부 사용 못합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"프로파일\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로파일</h3>\n<ul>\n<li>\n<p>@Profile 애노테이션은 어디에?</p>\n<ul>\n<li>@Configuration</li>\n<li>@Component</li>\n</ul>\n</li>\n<li>\n<p>어떤 프로파일을 활성화 할 것인가?</p>\n<ul>\n<li>spring.profiles.active</li>\n</ul>\n</li>\n<li>\n<p>어떤 프로파일을 추가할 것인가?</p>\n<ul>\n<li>spring.profiles.include</li>\n</ul>\n</li>\n<li>\n<p>프로파일용 프로퍼티</p>\n<ul>\n<li>application-{profile}.properties</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"로깅\"><a href=\"#%EB%A1%9C%EA%B9%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로깅</h2>\n<p>로깅 퍼사드 VS 로거</p>\n<blockquote>\n<p>로깅 퍼사드의 장점은 로거를 자신들이 원하는 거를 사용할 수 있는 점</p>\n</blockquote>\n<ul>\n<li><strong>Commons Logging</strong>, SLF4j</li>\n<li>JUL, Log4J2, <strong>Logback</strong> (최종적으로는 Logback으로 왔다.)</li>\n</ul>\n<p>스프링 5에 로거 관련 변경 사항</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/overview.html#overview-logging\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/overview.html#overview-logging</a></li>\n<li>\n<p>Spring-JCL</p>\n<ul>\n<li>Commons Logging -> SLF4j or Log4j2</li>\n<li>pom.xml에 exclusion 안해도 됨.</li>\n</ul>\n</li>\n</ul>\n<p>스프링 부트 로깅</p>\n<ul>\n<li>기본 포맷</li>\n<li>--debug (일부 핵심 라이브러리만 디버깅 모드로)</li>\n<li>--trace (전부 다 디버깅 모드로)</li>\n<li>컬러 출력: spring.output.ansi.enabled</li>\n<li>파일 출력: logging.file 또는 logging.path</li>\n<li>로그 레벨 조정: logging.level.패지키 = 로그 레벨</li>\n</ul>\n<h3 id=\"커스터마이징\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스터마이징</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html</a> : 커스텀 로그 설정 파일 사용하기</p>\n<p>Logback: logback-spring.xml - 기본적으로는 이거 사용을 추천</p>\n<p>Log4J2: log4j2-spring.xml</p>\n<p>JUL (비추): logging.properties</p>\n<p>Logback extension</p>\n<ul>\n<li>프로파일 <springProfile name=”프로파일”></li>\n<li>Environment 프로퍼티 <springProperty></li>\n</ul>\n<p>로거를 Log4j2로 변경하기</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging</a></p>\n<br/>\n<h2 id=\"테스트\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing</a></p>\n<p>시작은 일단 spring-boot-starter-test를 추가하는 것 부터</p>\n<ul>\n<li>test 스콥으로 추가.</li>\n</ul>\n<p>@SpringBootTest</p>\n<ul>\n<li>@RunWith(SpringRunner.class)랑 같이 써야 함.</li>\n<li>빈 설정 파일은 설정을 안해주나? 알아서 찾습니다. (@SpringBootApplication)</li>\n<li>\n<p>webEnvironment</p>\n<ul>\n<li>MOCK: mock servlet environment. 내장 톰캣 구동 안 함.</li>\n<li>RANDON_PORT, DEFINED_PORT: 내장 톰캣 사용 함.</li>\n<li>NONE: 서블릿 환경 제공 안 함.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// TEST Code</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">myepark<span class=\"token punctuation\">.</span>ebaykorea<span class=\"token punctuation\">.</span>springtestdemo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AutoConfigureMockMvc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcRequestBuilders</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultHandlers</span><span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest<span class=\"token punctuation\">.</span>WebEnvironment</span><span class=\"token punctuation\">.</span>MOCK<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@AutoConfigureMockMvc</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringtestdemoApplicationTests</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello myepark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andDo</span><span class=\"token punctuation\">(</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>@MockBean</p>\n<ul>\n<li>ApplicationContext에 들어있는 빈을 Mock으로 만든 객체로 교체 함.</li>\n<li>모든 @Test 마다 자동으로 리셋.</li>\n</ul>\n<p>슬라이스 테스트</p>\n<ul>\n<li>레이어 별로 잘라서 테스트하고 싶을 때 (빈을 다 체크하고 싶지 않을때)</li>\n<li>@JsonTest</li>\n<li>@WebMvcTest</li>\n<li>@WebFluxTest</li>\n<li>@DataJpaTest</li>\n<li>...</li>\n</ul>\n<p>스프링 테스트</p>\n<ul>\n<li>\n<p><strong>OutputCapture</strong></p>\n<ul>\n<li>Log에 찍히는 모든 output를 캡쳐한다.</li>\n<li>ex) <code class=\"language-text\">assertThat(outputCapture.toString()).contains(&quot;holoman&quot;).contains(&quot;skip&quot;);</code></li>\n</ul>\n</li>\n<li>TestPropertyValues</li>\n<li>TestRestTemplate</li>\n<li>ConfigFileApplicationContextInitializer</li>\n</ul>\n<h3 id=\"spring-boot-devtools\"><a href=\"#spring-boot-devtools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Boot Devtools</h3>\n<ul>\n<li>캐시 설정을 개발 환경에 맞게 변경.</li>\n<li>\n<p>클래스패스에 있는 파일이 변경 될 때마다 자동으로 재시작.</p>\n<ul>\n<li>\n<p>직접 껐다 켜는거 (cold starts)보다 빠른다. 왜?</p>\n<ul>\n<li>class 로더를 2개를 사용해서...</li>\n</ul>\n</li>\n<li>릴로딩 보다는 느리다. (JRebel 같은건 아님)</li>\n<li>리스타트 하고 싶지 않은 리소스는? spring.devtools.restart.exclude</li>\n<li>리스타트 기능 끄려면? spring.devtools.restart.enabled = false</li>\n</ul>\n</li>\n<li>\n<p>라이브 릴로드? 리스타트 했을 때 브라우저 자동 리프레시 하는 기능</p>\n<ul>\n<li>브라우저 플러그인 설치해야 함.</li>\n<li>라이브 릴로드 서버 끄려면? spring.devtools.liveload.enabled = false</li>\n</ul>\n</li>\n<li>\n<p>글로벌 설정</p>\n<ul>\n<li>\n<p>~/.spring-boot-devtools.properties</p>\n<ul>\n<li>1순위 외부 설정, 우선순위가 가장 높음</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>리모트 애플리케이션</p>\n<ul>\n<li>원격에서 할 수 있는데. 추천은 안함(복잡함, 보안적 측면 문제)</li>\n</ul>\n</li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/SpringLogo.214a68b.be0c3d9590430504675b948223711f21.png","size":{"width":820,"height":442},"sizes":"(max-width: 820px) 100vw, 820px","srcset":["/assets/static/SpringLogo.a67b0b2.be0c3d9590430504675b948223711f21.png 480w","/assets/static/SpringLogo.214a68b.be0c3d9590430504675b948223711f21.png 820w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 820 442' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-29f2605aef896f90944d207b9d4e9d4c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-29f2605aef896f90944d207b9d4e9d4c)' width='820' height='442' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAiAEADASIAAhEBAxEB/8QAGwABAAMBAAMAAAAAAAAAAAAAAAQFBgMCBwj/xAAqEAABAwQBAgUEAwAAAAAAAAABAgMEAAURIRIGMRNBUWGBFBUiMgdxof/EABgBAQADAQAAAAAAAAAAAAAAAAACAwQB/8QAIxEAAgICAgIBBQAAAAAAAAAAAAECEQMhEjEEQVEiYZGx4f/aAAwDAQACEQMRAD8A%2bnaUpQCs51b1SxYEobS348xwckt5wEj1Ua0dYx2BBX/IEt%2b9lrwRGQ7HD5AQcYB76OPT3rN5U5xglj026v4Ksrkl9Psr7H17OnXFqO5bUPpcVjEbPJPvvR/yvYDKy42FKTxVsFOc4I0RUWNLiuZFrZQhgDLkkN8G0pHocDkf60PWu8RYdbU6j9HFqWj3STo/Pf5rnjKcVU58hiUlpys7UpStRaKgXi5t2xplS21uuPuBpptBAKlEZ7kgDt51PqtvsF6fFS019ItPLK2pTXNCx8HII9RUMnLi%2bPZGV1oiOdRcJLMUWueZjrRdSxxSDpWDk5wB557VW3i%2b225Qm4cmBOedfWtox2xxdQ4jB4nfuDntquMKx3W3XmMIbyCW4jmVuNqUz%2bTmfCG8gAdt51VjbunXo90jXCRKQ7IDjzr5CMBSlpCQE%2bgAFYrz5Fxa%2bzuutfn2UXkkqKCNHs0e4JaMS7T5AeW0mO66Fp5oSFdsgY3561WjR1RHcaaSxDluTXHVsiGEgOJUj9snOABkbrxidPusX77gZCCj6h57gEnOFpSAPjFV1ytUy1z/ALjBDj0lUp50eGyXEhtYT%2bK0gg%2bXcVGMcuFNxVK/hda3%2bziU4LSNDaLu3c3pbSWH2HYqkpcS8ACCRnGjVlWd6Rjzg9c51yQpDkt1JSlaOBwlOM8cnA9Ad6rRVtwSlKCcu/7ovxtuNsUpSrSYpSlAKUpQClKUB//Z' /%3e%3c/svg%3e"}}},"context":{}}