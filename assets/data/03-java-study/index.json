{"hash":"c2dcd6346273a26a908e8ae3dd5d59774a4a3863","data":{"post":{"title":"[Java] 자바 연산자","path":"/03-java-study/","date":"1. January 2021","timeToRead":8,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Data","title":"Data","path":"/tag/Data/"},{"id":"Type","title":"Type","path":"/tag/Type/"}],"description":"자바가 제공하는 다양한 연산자에 대해 정리합니다.","content":"<h1 id=\"java-operator\"><a href=\"#java-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Operator</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 3주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>산술 연산자</li>\n<li>비트 연산자</li>\n<li>관계 연산자</li>\n<li>논리 연산자</li>\n<li>instanceof</li>\n<li>assignment(=) operator</li>\n<li>화살표(->) 연산자</li>\n<li>3항 연산자</li>\n<li>연산자 우선 순위</li>\n<li>(optional) Java 13. switch 연산자</li>\n</ul>\n<br/>\n<h2 id=\"산술-연산자\"><a href=\"#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>산술 연산자</h2>\n<p>산술 연산자는 크게 4가지로 구성됩니다. 덧셈 연산자, 뺄셈 연산자, 곱셈 연산자, 나머지 연산자로 이루어지며, 이는 일반적인 수학 수식처럼 이해하면 됩니다.</p>\n<h3 id=\"코드-예시\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">calcOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 8</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 15</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1 (실수형이라면 1.666 이지만 정수형이므로 내림으로 1이 나온다.)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"비트-연산자\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>비트 연산자</h2>\n<p>비트 연산은 일반적으로 1과 0으로 이루어지며 0은 거짓, 그 외의 값은 참을 의미합니다. 대표적인 비트 연산자로는 <code class=\"language-text\">~(not), &amp;(and), |(or), ^(xor)</code> 이 있습니다.</p>\n<h3 id=\"not-\"><a href=\"#not-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NOT, ~</h3>\n<table>\n<thead>\n<tr>\n<th>입력</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"and-\"><a href=\"#and-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AND, &#x26;</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"or\"><a href=\"#or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OR,</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"xor-\"><a href=\"#xor-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XOR, ^</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"코드-예시-1\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bitOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001111</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -11</span>\n  <span class=\"token comment\">// 11111111 11111111 11111111 11110101</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">|</span> num2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 15</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00001111</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> num2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 비트 연산을 사용할 수 있습니다. 일반적으로 자주 사용하지는 않으나, 종종 알고리즘을 풀 때 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"관계-연산자\"><a href=\"#%EA%B4%80%EA%B3%84-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>관계 연산자</h2>\n<p>연산자를 중심으로 양쪽의 값이 어떤 관계를 갖는지 확인하는 연산입니다. 관계 연산자로는 <code class=\"language-text\">==, !=, &gt;, &gt;=, &lt;, &lt;=, instance of</code> 가 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>이름</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>같음</td>\n<td>양쪽이 같으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>다름</td>\n<td>양쪽이 다르면 참, 같으면 거짓</td>\n</tr>\n<tr>\n<td>></td>\n<td>보다 큼</td>\n<td>왼쪽이 크면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>>=</td>\n<td>보다 크거나 같음</td>\n<td>왼쪽이 크거나 같으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>&#x3C;</td>\n<td>보다 작음</td>\n<td>왼쪽이 작으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>&#x3C;=</td>\n<td>보다 작거나 같음</td>\n<td>왼쪽이 작거나 같으면 참, 아니면 거짓</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"코드-예시-2\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relationOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">>=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"논리-연산자\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>논리 연산자</h2>\n<p>비트 연산과 비슷하지만, 대상이 boolean 타입의 논리 값입니다. <code class=\"language-text\">!</code>은 논리적인 부정을 의미하고, <code class=\"language-text\">&amp;&amp;(and)</code>와 <code class=\"language-text\">||(or)</code> 연산은 비트 연산자와 비슷한 개념을 가집니다.</p>\n<h3 id=\"코드-예시-3\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relativeOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> boo_true <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> boo_false <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>boo_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">&amp;&amp;</span> boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">||</span> boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">&amp;&amp;</span> boo_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만 신경써야하는 부분은, &#x26;와 &#x26;&#x26;, |과 ||은 <strong>두번째 조건</strong>의 확인이 다릅니다.</p>\n<p>&#x26;&#x26;는 첫번째 조건이 참이 아니면 두번째 조건을 보지않지만, &#x26;는 두번째 조건을 봅니다. 마찬가지로 ||은 첫번째 조건이 참이면 두번째 조건을 확인하지않지만, |은 두번째 조건을 확인합니다.</p>\n<br/>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>instanceof</h2>\n<p><strong>레퍼런스 타입 변수가 레퍼런스 타입의 데이터 티입인지 확인해 보는 연산</strong>입니다. 일반적으로 레퍼런스 타입 변수가 레퍼런스 타입으로 타입 변환이 가능한지 확인하기 위해서 사용합니다.</p>\n<p><code class=\"language-text\">(레퍼런스 타입 변수) instance of (레퍼런스 데이터 타입)</code>의 형태를 가집니다.</p>\n<h3 id=\"코드-예시-4\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> interType<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type2 <span class=\"token keyword\">extends</span> type1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type3 <span class=\"token keyword\">implements</span> interType <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Week3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">instanceOfExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    type1 myType1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    type2 myType2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    type3 myType3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType1 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType2 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType3 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType2 <span class=\"token keyword\">instanceof</span> type2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"assignment-operator\"><a href=\"#assignment-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>assignment(=) operator</h2>\n<p>일반적으로 대입 연산자 혹은 할당 연산자라고 부릅니다. 오른쪽의 피연산자를 왼쪽의 피연산자의 값으로 할당합니다. 따라서, 왼쪽에는 변수, 오른쪽에는 리터럴이나 리터럴이 담긴 변수가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">assignmentOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 <code class=\"language-text\">variable = literal</code>의 형태를 가집니다.</p>\n<p>이외에도 시프트 연산이 존재합니다. 다음과 같은 <code class=\"language-text\">&gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</code>와 같은 시프트 연산이 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shiftOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 80</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 01010000</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 작동합니다. <code class=\"language-text\">&gt;&gt;</code>와 <code class=\"language-text\">&gt;&gt;&gt;</code>의 차이는 오른쪽으로 비트 이동시, 왼쪽에 추가로 넣는 값에 MSB값으로 채우는지 0으로 채우는지의 차이입니다.</p>\n<p><code class=\"language-text\">&gt;&gt;</code>의 경우는 MSB로 부족한 비트값을 채우고, <code class=\"language-text\">&gt;&gt;&gt;</code>은 0으로 부족한 값을 채웁니다.</p>\n<br/>\n<h2 id=\"화살표--연산자\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C--%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>화살표(->) 연산자</h2>\n<p>자바에 람다가 도입하면서 등장하였습니다. 자바 람다에 대해서는 <a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">java lambda</a> 글을 참고하면 됩니다.</p>\n<p>해당 글을 간략하게 정리하자면 화살표 연산자는 <code class=\"language-text\">() -&gt; {}</code> 의 형태를 가지고 있으며, 매개변수를 받아, 메소드(함수)를 실행합니다.</p>\n<br/>\n<h2 id=\"3항-연산자\"><a href=\"#3%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3항 연산자</h2>\n<p>다음과 같은 형태를 지니고 있습니다.이 연산자를 통해서 코드를 짧게 할 수 있습니다.</p>\n<p><code class=\"language-text\">(조건) ? (조건이 참일 시, 실행) : (조건이 거짓일 시, 실행)</code></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">binomialOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"okay\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"okay\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 나타낼 수 있습니다.</p>\n<br/>\n<h2 id=\"연산자-우선-순위\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>연산자 우선 순위</h2>\n<p>연산자의 우선 순위는 다음과 같습니다. 해당 우선순위가 앞에 있을수록 먼저 실행됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>우선순위</th>\n<th>연산자</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code class=\"language-text\">(), []</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code class=\"language-text\">!, ~, ++, --</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code class=\"language-text\">*, /, %</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code class=\"language-text\">+, -</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code class=\"language-text\">&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code class=\"language-text\">&lt;, &lt;=, &gt;, &gt;=</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code class=\"language-text\">=, !=</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code class=\"language-text\">&amp;</code></td>\n</tr>\n<tr>\n<td>9</td>\n<td><code class=\"language-text\">^</code></td>\n</tr>\n<tr>\n<td>10</td>\n<td><code class=\"language-text\">|</code></td>\n</tr>\n<tr>\n<td>11</td>\n<td><code class=\"language-text\">&amp;&amp;</code></td>\n</tr>\n<tr>\n<td>12</td>\n<td><code class=\"language-text\">||</code></td>\n</tr>\n<tr>\n<td>13</td>\n<td><code class=\"language-text\">?:</code></td>\n</tr>\n<tr>\n<td>14</td>\n<td><code class=\"language-text\">=, +=, -=, *=, /=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, ~=</code></td>\n</tr>\n</tbody>\n</table>\n<p>다음과 같은 우선순위를 가지며, 일반적으로 괄호를 잘 쓰는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"java-13-switch-연산자\"><a href=\"#java-13-switch-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 13. switch 연산자</h2>\n<p>switch 문법의 가독성과 실행 속도를 향상 시키기 위해 있는 문법입니다. 자바 13에서의 switch 는 statement가 아닌 operator에 더 가깝고, 이미 처리된 결과를 통해서 해당 연산을 수행합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"c\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Document.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Document.html</a></li>\n<li><a href=\"https://blog.naver.com/hsm622/222150928707\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/hsm622/222150928707</a></li>\n<li><a href=\"https://nipafx.dev/java-13-switch-expressions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nipafx.dev/java-13-switch-expressions/</a></li>\n</ul>\n","cover_image":null}},"context":{}}