{"hash":"efa0708c55f8d5cbd854f8d9d80ca9ef32b474be","data":{"post":{"title":"[Java] 자바 POJO란","path":"/00-java-pojo/","date":"15. February 2021","timeToRead":10,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Pojo","title":"Pojo","path":"/tag/Pojo/"},{"id":"Spring","title":"Spring","path":"/tag/Spring/"}],"description":"자바 POJO개념에 대해 정리합니다.","content":"<h1 id=\"pojoplain-object-java-object\"><a href=\"#pojoplain-object-java-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO(Plain Object Java Object)</h1>\n<p>오늘은 자바나 스프링 프레임워크에서 주로 사용하는 POJO에 대한 개념을 정리합니다.</p>\n<br/>\n<h2 id=\"pojo-란\"><a href=\"#pojo-%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO 란?</h2>\n<p>POJO란 <strong>Plain Old Java Object</strong>의 약자로서, 오래된 방식의 간단한 자바 오브젝트라는 말로 해석할 수 있습니다. 이를 다른 말로 표현하자면, Java EE 등의 무거운 프레임워크 들을 사용하게 되면서 해당 프레임워크에 종속된 \"무거운\" 객체를 사용함에 대해 이를 반발해서 사용되게 된 용어입니다.</p>\n<p>2009년에 마틴 파울러, 레베카 파슨스, 조시 맥켄지에 의해 만들어졌습니다. 아래는 POJO에 대한 기원입니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&quot;We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it&#39;s caught on very nicely.&quot;\n\n우리는 왜 사람들이 자기들 시스템에 일반적인 오브젝트를 사용하는 것에 반대하는지 궁금했고, 그 이유는 단순한 오브젝트에 멋진 이름이 없기 때문이라고 결론을 지었습니다. 그래서 우리는 멋진 이름을 지었고, 매우 인기를 얻었습니다.</code></pre>\n<p>\"POJO\"라는 용어는 주요 Java 오브젝트 모델, 컨벤션 또는 프레임워크를 따르지 않는 Java 오브젝트를 의미합니다.</p>\n<p>예를 들자면, 다음과 같습니다. ORM 기술을 적용하기 위해 ORM 프레임 워크인 Hibernate을 사용하기 위해 이를 직접 의존하는 경우 POJO가 아니게됩니다. 이를 사용하기 위해서는 <strong>JPA라는 특정 표준 인터페이스를 통해서 사용해야합니다. (스프링의 PSA로 이야기할 수 있습니다.)</strong></p>\n<br/>\n<h2 id=\"pojo의-정의\"><a href=\"#pojo%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO의 정의</h2>\n<p>앞서 설명한 POJO를 좀 더 자세하게 설명하면 다음과 같이 설명할 수 있습니다.</p>\n<p>이상적인 POJO는 Java 언어 규약에 의해 강제된 것 이외의 제한에 구속되지 않는 Java 오브젝트입니다.</p>\n<p>따라서 POJO는 다음과 같은 것을 하면 안됩니다.</p>\n<ul>\n<li>미리 지정된 클래스를 extends하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>미리 정의된 인터페이스를 implement하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span> <span class=\"token keyword\">implements</span> javax<span class=\"token punctuation\">.</span>ejb<span class=\"token punctuation\">.</span><span class=\"token class-name\">EntityBean</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>미리 정의된 Annotation을 포함하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@javax</span><span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span><span class=\"token class-name\">Entity</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 기술적인 어려움과 다른 이유로 인해서 POJO-compliant은 기술된 많은 소프트웨어 제품이나 프레임워크들은 실제로 미리 정의된 Annotation을 제대로 동작하는 기능을 구현하기 위해 필요합니다.</p>\n<p>이와 같은 것들의 특징은 Annotation을 추가하기 전에는 POJO이고 Annotation이 제거된다면 POJO 상태로 되돌아간다면, 이를 POJO로 간주할 수 있습니다.</p>\n<br/>\n<h2 id=\"pojo에-대한-다양한-이야기\"><a href=\"#pojo%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO에 대한 다양한 이야기.</h2>\n<h3 id=\"javabeans\"><a href=\"#javabeans\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaBeans</h3>\n<p>JavaBean은 특별한 POJO의 변형으로 이야기 할 수 있습니다. JavaBean은 <code class=\"language-text\">Serializable</code> 인터페이스를 상속받고, 인수가 없는 생성자를 가지며 <code class=\"language-text\">getter/setter</code> 메소드를 사용하여서 속성에 액세스할 수 있습니다. 이러한 규칙을 통해서 JavaBeans에 대해 간단한 참조를 사용할 수 있습니다.</p>\n<p>이러한 방법을 통해서 프레임워크에서는 Bean의 정확한 유형을 알 필요없이 사용할 수 있습니다. 다만 JavaBeans가 완전히 구현되는 경우에는 <code class=\"language-text\">Serializable</code>를 구현해야기 때문에 POJO 모델을 약간 깨트릴 수도 있습니다. 하지만 이는 큰 부담이 되지는 않습니다.</p>\n<p>POJO를 구현한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> someProperty<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSomeProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> someProperty<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSomeProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> someProperty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someProperty <span class=\"token operator\">=</span> someProperty<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"ejbenterprise-javabeans\"><a href=\"#ejbenterprise-javabeans\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EJB(Enterprise JavaBeans)</h3>\n<p>기업의 IT 시스템의 요구사항이 늘어나고 기초적인 JDK로는 한계가 있어서 EJB 기술이 등장하였습니다. EJB의 경우에 아래의 문제를을 해결하기 위해 등장했습니다.</p>\n<ul>\n<li>기업의 업무 복잡도가 증가함에 따라 비지니스 로직이 복잡해졌습니다.</li>\n<li>사용자의 처리의 요구를 빠르고 안정이고 확장 가능한 형태로 유지하기 위해 필요한 로우레벨의 기술적인 처리요구가 필요합니다. (트랜잭션 처리, 상태 관리, 멀티스레딩, 리소스 풀링, 보안 등)</li>\n</ul>\n<p>다만 <strong>EJB의 경우에는 현실적이지 않고 과도한 엔지니어링으로 실패</strong>했습니다. EJB는 필요한 것이 많고, 복잡하며 컨테이너 밖에서는 정상적으로 동작하지 않았습니다.</p>\n<p>특히, <strong>EJB 스펙을 따르는 비지니스 오브젝트들은 객체지향적인 특징과 장점을 포기해야합니다.</strong> EJB는 상속과 다형성 등을 사용할 수 없고, 간단한 기능 하나를 위해서 많은 인터페이스와 EJB 의존적인 상속을 해야했습니다.</p>\n<p>EJB는 <strong>형편없는 생산성과 느린 성능, 불필요한 기술적인 복잡도, 과도한 스펙 등의 문제</strong>로 인해 POJO 방식으로 돌아가게 됩니다.</p>\n<br/>\n<h2 id=\"pojo-프레임워크\"><a href=\"#pojo-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO 프레임워크</h2>\n<p>POJO를 사용하는 장점과 EJB의 문제를 해결하고, 엔터프라이즈 서비스와 기술을 사용할 수 있게 하는 프레임워크입니다. 많은 POJO 프레임워크가 있지만 그중에 손에 꼽히는 것은 Hibernate와 Spring입니다.</p>\n<p>Hibernate는 Persistence 기술과 오브젝트-관계형 DB 매핑을 순수한 POJO를 이용해서 사용할 수 있게 만드는 POJO 기반의 <strong>퍼스스턴스 프레임워크(Persistence Framework)</strong> 입니다.</p>\n<p>스프링은 앤터프라이즈 서비스들을 POJO 기반으로 만든 비지니스 오브젝트로 사용할 수 있게 합니다. 대표적인 기술로 선언적인 트랜잭션과 보안이 있습니다. 또한 오브젝트 컨테이너를 제공해서 인스턴스들의 라이프사이클을 관리하고, OOP를 더 OOP답게 쓸수 있게 해주는 AOP 기술을 적용하여 POJO 개발을 더 쉽게 만들어줍니다.</p>\n<ul>\n<li>Persistence Framework : 데이터의 저장, 조회, 변경, 삭제를 다루는 클래스 및 설정 파일들의 집합입니다. 퍼시스턴스 프레임워크를 사용하면 JDBC 프로그래밍의 복잡함이나 번거로움 없이 간단한 작업만으로 데이터베이스와 연동되는 시스템을 빠르게 개발할 수 있으며 안정적인 구동도 보장합니다.</li>\n</ul>\n<br/>\n<h2 id=\"pojo를-지향해야하는-이유\"><a href=\"#pojo%EB%A5%BC-%EC%A7%80%ED%96%A5%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO를 지향해야하는 이유</h2>\n<p>POJO 프로그래밍의 목적은 <strong>자바의 객체지향적인 특징을 살려 비지니스 로직에 충실한 개발이 가능하도록 하는 것입니다.</strong> 또한 복잡한 요구조건을 가진 엔터프라이즈 개발의 필요조건을 충족시킬 수 있도록 POJO 기반의 프레임워크를 적절히 이용하는 것이 요구됩니다. 단순히 POJO 프레임워크를 사용하는 것이 아니라 그에 대한 여러 기준을 준수해야합니다.</p>\n<ul>\n<li>\n<p>객체지향적인 설계원칙에 충실하도록 개발</p>\n<ul>\n<li>POJO의 자바 오브젝트는 객체지향언어로서 자바 오브젝트의 특징을 가져야합니다.</li>\n<li>반복적인 템플릿 구조와 테스트하기 힘든 구조, 확장이나 재활용이 어려움이 있으면 안됩니다.</li>\n</ul>\n</li>\n<li>\n<p>테스트 코드를 잘 작성했는지</p>\n<ul>\n<li><strong>수정-빌드-배포-테스트</strong>의 사이클을 유지하는 것은 EJB와 같은 문제를 가지고 있습니다.</li>\n<li>잘 만들어진 POJO는 자동화된 테스트 코드 작성이 편리합니다,</li>\n<li>반복적으로 테스트를 실행할 수 있으므로 코드 검증과 품질 향상에 유리합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rich-domain-model\"><a href=\"#rich-domain-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rich Domain Model</h3>\n<p>POJO의 자바 오브젝트가 가진 기본적인 특징은 하나의 오브젝트 안에 상태(State)와 행위(Behavior)을 모두 가지고 있습니다. 즉, <strong>인스턴스 변수</strong>와 <strong>로직을 가진 메소드</strong>가 있습니다.</p>\n<p>객체지향 원리에 충실하게 도메인 모델을 만드는 것을 풍성한 도메인 모델(Rich Domain Model)이라고 이야기합니다.</p>\n<h3 id=\"올바른-pojo-프로그래밍\"><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-pojo-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>올바른 POJO 프로그래밍</h3>\n<p>앞서 이야기했듯이 POJO를 잘 사용하면 최소한의 코드와 좋은 코드를 만들 수 있습니다. 특히 가장 중요한 내용은 반드시 <strong>자동화된 테스트 코드를 개발하는 것입니다. 이를 통해 만들어진 테스트 코드는 지속적인 변화에 유현하게 대응할 수 있습니다.</strong></p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Plain_old_Java_object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Plain_old_Java_object</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Jakarta_Enterprise_Beans\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Jakarta_Enterprise_Beans</a></li>\n<li><a href=\"http://bywoong.com/post/832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://bywoong.com/post/832</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%8B%9C%EC%8A%A4%ED%84%B4%EC%8A%A4_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%8B%9C%EC%8A%A4%ED%84%B4%EC%8A%A4_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC</a></li>\n<li><a href=\"https://velog.io/@dion/what-is-POJO\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@dion/what-is-POJO</a></li>\n<li><a href=\"https://siyoon210.tistory.com/120\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://siyoon210.tistory.com/120</a></li>\n<li><a href=\"https://happyer16.tistory.com/entry/POJOplain-old-java-object%EB%9E%80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://happyer16.tistory.com/entry/POJOplain-old-java-object%EB%9E%80</a></li>\n<li><a href=\"https://jobc.tistory.com/121\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jobc.tistory.com/121</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg","size":{"width":680,"height":440},"sizes":"(max-width: 680px) 100vw, 680px","srcset":["/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg 680w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 680 440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9716c389a175768fda62e76437e55968'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9716c389a175768fda62e76437e55968)' width='680' height='440' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAApAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAwECBAUGAAj/xAAtEAACAAQFAgUDBQAAAAAAAAABAgADBBEFEiExQRMiBhRRYXEyQpEVM2Jygf/EABkBAQEBAQEBAAAAAAAAAAAAAAEAAgQDBf/EABsRAAMBAAMBAAAAAAAAAAAAAAABAhESITET/9oADAMBAAIRAxEAPwDz/l944JcQUS2Jh4ljmPonK6IwGsO2iW0pSgNokYPhL4pXrTJOlyVyPMebM2RFUsxtybA2A3OkRKtK3eFycCLfxTh6YZj9XQy1dPLN0WVxYhlFjf1N9bjTXS41NaBaBE3gLLYe8JvBspbYQ3psvEIaSkXK59CIay2a0WEuUqrYgEneE8ujMAbj4hOf6dkS2lo1XgvBfOIzVdGehNu0mrQtmRlNivYbgEHkcRR9FU%2b2/vGywqi8PfoNJUYrMCVYlzn6ciYVnTe/s1GnBFj63grwZvX0Vfi%2bjmSqiu69LNmiYZSy6yaG0yi3aW1NwAuvA/2Ml5fL/KNzj9D4flYZVDDcRmVNVLnIsnO7967OxU6AHcRl1kD7iTEvCqmmV1rcWhyS7/V%2bIsukliMoiOZRRrkacGEy66LHy6e/5gq0qKuYrrxrABuIPM2jOmlKDSqdDqUFoWbKCaoLLyBCDYQjfSfiDT04LBGRXHcLxHmU5GqG49IUbR0JjjoFVJbLbWJExQFAG20Bb94f1jpuw%2bYmSnEf/9k=' /%3e%3c/svg%3e"}}},"context":{}}