{"hash":"6eab5397a2d6c11ddf021b778b38f6e8e79b2231","data":{"post":{"title":"[Review] Clean Code 내용정리 - 6","path":"/06-clean-code/","date":"6. November 2020","timeToRead":7,"tags":[{"id":"Review","title":"Review","path":"/tag/Review/"},{"id":"Book","title":"Book","path":"/tag/Book/"},{"id":"CleanCode","title":"CleanCode","path":"/tag/CleanCode/"},{"id":"Clean-code","title":"Clean-code","path":"/tag/Clean-code/"},{"id":"Java","title":"Java","path":"/tag/Java/"}],"description":" Clean code 책 정리 마지막 편입니다. ","content":"<h1 id=\"clean-code-내용-정리---6\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 6</h1>\n<h2 id=\"부록-a-동시성\"><a href=\"#%EB%B6%80%EB%A1%9D-a-%EB%8F%99%EC%8B%9C%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>부록 A. 동시성</h2>\n<h3 id=\"\"></h3>\n<p>클라이언트/서버 예제</p>\n<h4 id=\"서버\"><a href=\"#%EC%84%9C%EB%B2%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서버</h4>\n<p>애플리케이션에서 많은 시간을 보내는 가능성은 크게 2개이다.</p>\n<ul>\n<li>I/O : 소켓 사용, 데이터베이스 연결, 가상 메모리 스와핑 기다리기 emd</li>\n<li>프로세서 : 수치 계산, 정규 표현식 처리, 가비지 컬렉션 등</li>\n</ul>\n<p>일반적으로 프로그램이 <strong>프로세서 연산에 많은 시간을 보낸다면, 하드웨어를 추가하여 성능을 높여야 한다.</strong></p>\n<p>즉, 스레드를 늘린다고 해결할 수 있는 문제가 아니다.</p>\n<p>하지만 프로그램이 주로 <strong>I/O 연산에 시간을 보낸다면 동시성이 성능을 높여 줄 수 있다.</strong></p>\n<h4 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h4>\n<p>단일스레드 시스템에서 다중 스레드 시스템으로 변환하고, 성능을 높이기 위해서는 다음과 같은 방법을 사용해야한다.</p>\n<ul>\n<li>I/O에 많은 시간을 보내야 한다.</li>\n<li>관련된 코드를 분리시켜 여러개의 클래스로 분리해 <strong>단일 책임 원칙</strong>을 지켜야 한다.</li>\n</ul>\n<h3 id=\"가능한-실행-경로\"><a href=\"#%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%8B%A4%ED%96%89-%EA%B2%BD%EB%A1%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가능한 실행 경로</h3>\n<p>10000개의 스레드로 현재 값인 변수에 1을 더한다고 했을 때 가정했을때,</p>\n<p>최악의 경우는 1부터 10000까지 나올 수 있다.</p>\n<p>이를 해결하기 위해서는 ...</p>\n<h4 id=\"심층-분석\"><a href=\"#%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>심층 분석</h4>\n<p>3가지 정의를 이야기할 수 있다.</p>\n<ul>\n<li><strong>프레임</strong> : 모든 메서드 호출에는 프레임이 필요하다</li>\n<li><strong>지역 변수</strong> : 메서드 범위 내에 정의되는 모든 변수를 가리킴</li>\n<li><strong>피연산자 스택</strong> : JVM이 지원하는 명령 대다수는 매개변수를 받으며, 이 매개변수를 저장하는 장소</li>\n</ul>\n<p>이 3개를 atomic으로 잘 처리한다면, 결과는 일정하다.</p>\n<h5 id=\"결론-1\"><a href=\"#%EA%B2%B0%EB%A1%A0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h5>\n<p>스레드가 서로의 작업을 덮어쓰는 과정을 이해하기 위해서는 어떤 연산이 안전한지 못한지에 파악할 수 있도록 메모리 모델을 이해하고 있어야한다.</p>\n<p>즉, 아래의 3가지를 이해해야 한다.</p>\n<ul>\n<li>공유 객체/값이 있는 곳</li>\n<li>동시 읽기/수정 문제를 일으킬 소지가 있는 코드</li>\n<li>동시성 문제를 방지하는 법</li>\n</ul>\n<h3 id=\"라이브러리를-이해하기\"><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>라이브러리를 이해하기</h3>\n<h4 id=\"executor-프레임워크\"><a href=\"#executor-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Executor 프레임워크</h4>\n<ul>\n<li>스레드 풀링으로 정교한 실행을 지원한다.</li>\n<li>코드가 깔끔해지고 이해하기 쉬워지며, 크기가 작아진다.</li>\n<li>스레드 풀 크기를 자동으로 조정하며, 재사용할 수 있다.</li>\n</ul>\n<h4 id=\"스레드를-차단하지-않는-방법non-blocking\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A5%BC-%EC%B0%A8%EB%8B%A8%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%B0%A9%EB%B2%95non-blocking\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드를 차단하지 않는 방법(non blocking)</h4>\n<ul>\n<li>\n<p>최신 프로세서는 blocking 하지 않고 안정적으로 값을 갱신한다.</p>\n<ul>\n<li>Ex) AtomicInteger, incrementAndGet() 등등</li>\n</ul>\n</li>\n<li>현대 프로세서는 CAS(Compare and Swap)을 지원한다.</li>\n</ul>\n<h4 id=\"다중-스레드-환경에서-안전하지-않은-클래스\"><a href=\"#%EB%8B%A4%EC%A4%91-%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EC%95%88%EC%A0%84%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다중 스레드 환경에서 안전하지 않은 클래스</h4>\n<p>다중 스레드 환경에서 안정하지 않는 환경은 다음과 같다.</p>\n<ul>\n<li>SimpleDateFormat</li>\n<li>데이터베이스 연결</li>\n<li>java.util 컨테이너 클래스</li>\n<li>서블릿</li>\n</ul>\n<h3 id=\"메서드-사이에-존재하는-의존성-조심\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9D%B4%EC%97%90-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A1%B0%EC%8B%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메서드 사이에 존재하는 의존성 조심</h3>\n<p>추적하기 어렵지만 이를 해결하는 방안은 크게 3가지로 구성된다.</p>\n<h4 id=\"1-실패를-용인하기\"><a href=\"#1-%EC%8B%A4%ED%8C%A8%EB%A5%BC-%EC%9A%A9%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 실패를 용인하기</h4>\n<h4 id=\"2-클라이언트-기반-잠금\"><a href=\"#2-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EA%B8%B0%EB%B0%98-%EC%9E%A0%EA%B8%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 클라이언트-기반 잠금</h4>\n<p>굉장히 위험한 전략이다.</p>\n<h4 id=\"3-서버-기반-잠금\"><a href=\"#3-%EC%84%9C%EB%B2%84-%EA%B8%B0%EB%B0%98-%EC%9E%A0%EA%B8%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 서버-기반 잠금</h4>\n<p>일반적으로 가장 바람직한 방법이다.</p>\n<ul>\n<li>코드 중복이 줄어든다.</li>\n<li>성능이 좋아진다.</li>\n<li>오류가 발생할 가능성이 줄어든다.</li>\n<li>스레드 정책이 하나이다.</li>\n<li>공유 변수 범위가 절어든다.</li>\n</ul>\n<h3 id=\"작업-처리량-높이기\"><a href=\"#%EC%9E%91%EC%97%85-%EC%B2%98%EB%A6%AC%EB%9F%89-%EB%86%92%EC%9D%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>작업 처리량 높이기</h3>\n<p>동기화 영역은 언제나 작아야한다.</p>\n<h3 id=\"데드락\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락</h3>\n<p>데드락의 4가지 조건</p>\n<ul>\n<li>상호 배제 (Mutual Exclusion)</li>\n<li>잠금 &#x26; 대기 (Lock &#x26; Wait)</li>\n<li>선점 불가 (No Preemption)</li>\n<li>순환 대기 (Circular Wait)</li>\n</ul>\n<h4 id=\"상호-배제\"><a href=\"#%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상호 배제</h4>\n<ul>\n<li>정의 : 여러 스레드가 동시에 사용하지 못하고, 개수가 제한적인 경우</li>\n<li>\n<p>해결책</p>\n<ul>\n<li>동시에 사용해도 괜찮은 자원을 사용, Ex) Atomic</li>\n<li>스레드 수 이상으로 자원 수를 높임</li>\n<li>자원을 점유하기 전에 필요한 자원이 모두 있는지 확인</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"잠금--대기\"><a href=\"#%EC%9E%A0%EA%B8%88--%EB%8C%80%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>잠금 &#x26; 대기</h4>\n<ul>\n<li>정의 : 스레드가 자원을 점유하면 필요한 나머지 자원까지 모두 점유해 작업을 마칠 때까지 이미 점유한 자원을 내놓지 않는다.</li>\n<li>\n<p>해결책</p>\n<ul>\n<li>대기하지 않기</li>\n</ul>\n</li>\n<li>\n<p>문제점</p>\n<ul>\n<li>기아(Starvation) : 한 스레드가 계속해서 필요한 자원을 점유하지 못하는 것</li>\n<li>라이브락(Livelock) : 여러 스레드가 한번에 잠금으로 들어가 계속 자원을 점유했다 내놨다를 반복하는 것</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"선점-불가\"><a href=\"#%EC%84%A0%EC%A0%90-%EB%B6%88%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>선점 불가</h4>\n<ul>\n<li>정의 : 한 스레드가 다른 스레드로부터 자원을 빼앗지 못함</li>\n<li>\n<p>해결책</p>\n<ul>\n<li>다른 자원을 뺏어오기</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"순환-대기\"><a href=\"#%EC%88%9C%ED%99%98-%EB%8C%80%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>순환 대기</h4>\n<ul>\n<li>정의 : 스레드 A는 B가 끝나기를 기다리고, 스레드 B는 A가 끝나기를 기다리는 상황</li>\n<li>해결책 : 간단한 규약을 설정해서 순환이 없도록 한다</li>\n<li>\n<p>문제점</p>\n<ul>\n<li>자원을 할당하는 순서와 자원을 사용하는 순서를 다르게 한다</li>\n<li>때로는 순서에 따라 자원을 할당하기 어려움</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"다중-스레드-코드-테스트\"><a href=\"#%EB%8B%A4%EC%A4%91-%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다중 스레드 코드 테스트</h3>\n<ul>\n<li>몬테 카를로 테스트 : 조율이 가능하게 유연하게 테스트를 만든다</li>\n<li>시스템을 배치할 플랫폼 전부에서 테스트를 돌린다</li>\n<li>부하가 변하는 장비에서 테스트를 돌린다.</li>\n</ul>\n<h3 id=\"스레드-코드-테스트를-도와주는-도구\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%8F%84%EC%99%80%EC%A3%BC%EB%8A%94-%EB%8F%84%EA%B5%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드 코드 테스트를 도와주는 도구</h3>\n<p>대표적인 예시로 IBM의 ConTest가 있다.</p>\n<p>사용방법은 다음과 같다.</p>\n<ul>\n<li>실제 코드와 테스트 코드 작성</li>\n<li>ConTest로 실제 코드와 테스트 코드에 보조 코드 추가</li>\n<li>테스트를 실행</li>\n</ul>\n<hr>\n<p>드디어 정리 완료.</p>\n<p><strong>부록 B. org.jfree.date.SerialDate</strong> 와 <strong>부록 C. 휴리스틱의 교차 참조 목록</strong> 은 코드 위주라서, 해당 부분을 따로 추가하지 않았다.</p>\n<p>점차 이전의 게시글을 틈틈이 수정하면서 가독성을 높이는 작업을 할 예정.</p>\n<p>책의 내용을 대부분 정리하기는 했지만, 코드나 원글의 내용을 다 담지 못한 듯 하여 한번 책을 읽어보는 것이 좋을 듯합니다.</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/CleancodeBook.07cc2b7.7222e95f3717f77d5f3ed287711f1d64.jpg","size":{"width":860,"height":1021},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/CleancodeBook.a67b0b2.7222e95f3717f77d5f3ed287711f1d64.jpg 480w","/assets/static/CleancodeBook.07cc2b7.7222e95f3717f77d5f3ed287711f1d64.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 1021' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2da16ebb829634911838dadcc8b5c487'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2da16ebb829634911838dadcc8b5c487)' width='860' height='1021' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABMAEADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAABAUCAwYAAQj/xAAxEAACAQMDAQUGBgMAAAAAAAABAgMABBESITFBBRMzUWEGFCIycZEVFkKhwfBigdH/xAAXAQEBAQEAAAAAAAAAAAAAAAAAAQID/8QAGREBAQEBAQEAAAAAAAAAAAAAAAERAhIx/9oADAMBAAIRAxEAPwD6pql7qGN9MkiISwUamAyT0HnV1Y3tiCS59tOzkjkChAJCp2yFck9M8Cg15lUSBCy6z0zUs45BoK57v3kh2YEqMHoDvjNeESKpMc4YBR%2brJ/vO9Y9NYO1L517zS3XdBA2nVnG2K8jllaTS8enrkZqzpMM66s1e%2b01lZSrG8szMXKHRGTpx1OenTIrRQsWiVjya0idJrm3mk7Zs54XjWOGR%2b9VlGp1ZMAA488HGRTms9f3fc%2b03ZdqIo3Ny8xLMCSoRAdug%2bYc5/mgZ3LYuWHdhgUGojkDf7VVKIWViupWIGAw2/vFM8A8gb1XJDGynKgEjGQOlc7xrUpYyR7aJ9OOdiOagQ%2b%2bi6Ugf5f8AaOa1i0BdJwPWqJLSI9D96eaaDlE2j41jkXyIDU7tvAT6UpazQHZmA8qbW3gJWuZZ9SrKzPaXdfm7sQsjNMDchCGwACi6tsb9Oo/3xWmpPN2Wl327Z9oNLIr2JlCovyv3igHP0xWkOKHdLklyJYwNtI0fzmiKqnnjiAEjYJ4GM0tz6ArRL1Wb3uRGGTgDy%2bwq9%2btS71HKhWB1DUPUVF%2btBS1G23gJQbUZbeAlBZQ8Dr7xMmRqJzj0q55EQfEwFILm%2bEPtDYBQzrOZI9mxjjcjrx%2b9BoaDkdYb12lOkMgCk/vRlBz6p7kw6yqKuo45JrPSwJO3DQIUzExA68jeqGPwEB8xlxjDNgbefJo5nlhCRHEkrE6STjb1qk3LvhI0USfFqBOwxWMaBYdotRL6ljUjc85NP7bwFpElzIsUaqNRCgnIJJyaeWvgJWuMTpXdWwlU4ODQdvZyJJHqEOEYkl1y31U9Ka11bZdkeYoaeJjL3sEgV8aTkZBFE11SzSXABtG0oVdhKpJ14znPO1RNhsulnDDOWBALZ5pjXVPMXaW/hgwoyQAMfNyPWmEKlI1U7kVKuqySfEf/2Q==' /%3e%3c/svg%3e"}}},"context":{}}