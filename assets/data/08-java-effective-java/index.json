{"hash":"4d08d5d9909bc52ba8ae53ab8b5e8ea790bc2d53","data":{"post":{"title":"[Java] Effective Java, Methods","path":"/08-java-effective-java/","date":"24. May 2021","timeToRead":28,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Stater","title":"Stater","path":"/tag/Stater/"},{"id":"Effective Java","title":"Effective Java","path":"/tag/Effective%20Java/"},{"id":"General","title":"General","path":"/tag/General/"}],"description":"Effective Java 책 중, ch9. 일반화에 대해 정리합니다.","content":"<h1 id=\"general-programming\"><a href=\"#general-programming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>General Programming</h1>\n<p>이번 챕터는 언어의 이론이나 관념이 아닌 실제적인 사실들에 대해 정리합니다. 지역 변수, 제어 구조, 라이브러리, 데이터 유형 및 두가지의 언어 외 기능(<code class=\"language-text\">reflection</code>와 <code class=\"language-text\">native method</code>)에 대해 설명합니다. 그리고 최적화 및 명명 규칙에 대해 정리합니다.</p>\n<h2 id=\"item-57-지역-변수의-범위를-최소화합니다\"><a href=\"#item-57-%EC%A7%80%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 57. 지역 변수의 범위를 최소화합니다.</h2>\n<p><a href=\"https://github.com/Azderica/Book-Record/tree/master/Effective%20Java/ch4#item-15-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-%EB%A9%A4%EB%B2%84%EC%9D%98-%EC%A0%91%EA%B7%BC%EC%84%B1%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">클래스 및 멤버의 접근성 최소화</a>의 내용과 비슷하며, 지역 변수의 점위를 최소화함으로써 <strong>코드의 가독성과 유지 관리성을 높이고 오류 가능성을 줄일 수 있습니다.</strong></p>\n<p>지역 변수의 범위를 최소화하는 가장 강력한 기술은 처음 사용되는 위치에 선언하는 것입니다. 변수를 사용하기 전에 선언하면 프로그램이 무엇을 하려는지 어려워집니다.</p>\n<p>거의 모든 지역 변수 선언에는 이니셜라이저가 필요합니다. 이가 없다면, 선언할 때까지 선언을 연기해야합니다.</p>\n<p>대표적으로 루프는 변수의 범위를 최소화할 수 있는 기능을 제공합니다. 또한 while 루프 보다는 for 루프를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션 또는 배열을 반복하는 데 선호되는 관용구</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> e <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do Something with e</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 반복자가 필요한 경우</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Element</span> e <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e and i</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>일반적으로 for 루프를 선호하는 이유는 while 루프를 잘 못 사용하면 버그가 발생하기 쉽기 때문입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 잘못된 결과를 만들기 쉬움</span>\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i2 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// BUG!</span>\n  <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컴파일시, 에러가 바로 나오게 됩니다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Element</span> e <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e and i</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">// Compile-time error - cannot find symbol i</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i2 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Element</span> e2 <span class=\"token operator\">=</span> i2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e2 and i2</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이렇기 때문에 for loop를 좀 더 선호하는 것이 좋습니다.</p>\n<p>또는, 아채처럼 지역 변수의 범위를 최소화할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token function\">expensiveComputation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with i;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이는, i와 n 모두가 loop 내에서만 범위를 가지고 있습니다.</p>\n<p>마지막 기술은, 지역변수의 범위를 최소화하는 마지막 기술은 메서드를 작고 집중적으로 유지하는 것이 좋습니다. 동일한 방법으로 여러 동작을 수행하면 지역변수가 다른 코드 범위에 있을 수 있기 때문에 이러한 일이 발생하지 않도록 하는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"item-58-전통적인-for-루프-보다는-for-each-루프를-더-선호합니다\"><a href=\"#item-58-%EC%A0%84%ED%86%B5%EC%A0%81%EC%9D%B8-for-%EB%A3%A8%ED%94%84-%EB%B3%B4%EB%8B%A4%EB%8A%94-for-each-%EB%A3%A8%ED%94%84%EB%A5%BC-%EB%8D%94-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 58. 전통적인 <code class=\"language-text\">FOR</code> 루프 보다는 <code class=\"language-text\">FOR-EACH</code> 루프를 더 선호합니다.</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션을 반복하는 것이 가장 좋은 방법은 아닙니다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Element</span> e <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>기존의 for loop 문도, while 문 보다는 낫지만 완벽하지 않습니다. 요소만 필요한 경우, 이는 복잡할 뿐입니다.</p>\n<p>for-each 루프는 이러한 문제를 해결합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션 및 배열을 반복하는 데 선호되는 관용구</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> e <span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 for-each 문은 중첩된 반복문에서 좀 더 도움이 됩니다. 아래는 for문에서 발생하기 쉬운 버그입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Face</span> <span class=\"token punctuation\">{</span>ONE<span class=\"token punctuation\">,</span> TWO<span class=\"token punctuation\">,</span> THREE<span class=\"token punctuation\">,</span> FOUR<span class=\"token punctuation\">,</span> FIVE<span class=\"token punctuation\">,</span> SIX<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Collection</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Face</span><span class=\"token punctuation\">></span></span> faces <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span>allOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Face</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Face</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> faces<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Face</span><span class=\"token punctuation\">></span></span> j <span class=\"token operator\">=</span> faces<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span> next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">+</span> j<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Expected Output : {ONE, ONE}, {ONE, TWO}, ..., {SIX, SIX}</span>\n<span class=\"token comment\">// Real Output : {ONE, ONE}, {TWO, TWO}, ..., {SIX, SIX}</span></code></pre>\n<p>이를 생각하는 값을 나오게 하기 위해서는 아래처럼 구성하면 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션 및 배열에 중첩 된 반복에 대한 기본 관용구</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Suit</span> suit <span class=\"token operator\">:</span> suits<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rank</span> rank <span class=\"token operator\">:</span> ranks<span class=\"token punctuation\">)</span>\n    deck<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span>suit<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>다만 for-each 문을 사용할 수 없는 경우는 세가지 상황이 있습니다.</p>\n<ul>\n<li>\n<p>Destructive filtering(파괴적 필터링)</p>\n<ul>\n<li>선택한 요소를 제거하는 컬렉션을 탐색해야하는 경우, <code class=\"language-text\">remove</code> 메서드를 호출할 수 잇도록 명시적 반복자를 사용해야합니다.</li>\n<li>Java 8에 추가된 Collection의 removeIf 메서드를 사용하여 명시적 순회를 피할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Transforming(변형)</p>\n<ul>\n<li>목록 또는 배열을 탐색하고 해당 요소 값의 일부 또는 전체를 교체해야하는 경우, 요소 값을 바꾸기 위해서 list iterator 또는 array index가 필요합니다.</li>\n</ul>\n</li>\n<li>\n<p>Parallel iteration(병렬 반복)</p>\n<ul>\n<li>여러 컬렉션을 병렬로 트래버스해야하는 경우, 모든 반보기 또는 인덱스 변수를 잠금 단계로 진행할 수 있도록 iterator 또는 인덱스 변수를 명시적으로 제어해야합니다.</li>\n</ul>\n</li>\n</ul>\n<p>for-each 루프를 사용하면, 컬렉션과 배열을 반복할 수 있을 뿐만 아니라, 단일 메서드로 구성된 Iterable 인터페이스를 구현하는 모든 개체를 발복할 수 있습니다. 인터페이스의 모습은 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterable</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//이 반복 가능한 요소에 대한 iterator를 반환합니다.</span>\n  <span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이렇게 하면, 사용자가 for-each 루프를 사용해서 type을 iterator할 수 있습니다. 즉, <strong>for-each 루프는 for 성능 저하없이 명확성, 유연성 및 버그 방지 측면에서 기존 루프에 비해 강력한 이점을 제공합니다.</strong> 또한 최대한 for-each 루프를 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"item-59-라이브러리를-알고-사용해야합니다\"><a href=\"#item-59-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%95%8C%EA%B3%A0-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 59. 라이브러리를 알고 사용해야합니다.</h2>\n<p>예를 들어, random 을 사용해야할 때 random을 쓰려면 여러 버그가 발생할 수 있습니다. 이러한 경우, 여러 결점이 존재하기 때문에 이를 해결해야합니다.</p>\n<p>대표적인 예시로 자바 7의, ThreadLocalRandom이 있습니다. 이를 사용하면, 높은 품질의 난수를 빠르게 생성할 수 있습니다.</p>\n<p>표준 라이브러리 사용은 다음의 장점을 가집니다.</p>\n<ul>\n<li><strong>표준 라이브러리를 사용하면, 이를 작성한 전문가의 지식과 이전에 사용했던 경험을 활용할 수 있습니다.</strong></li>\n<li>업무와 관련 없는 부분에 시간을 낭비할 필요가 없습니다.</li>\n<li>시간이 지남에 따라 성능이 향상되는 경향이 있습니다.</li>\n<li>시간이 지남에 따라 얻는 경향이 있습니다. (누락된 기능이 후속 추가될 수 있습니다.)</li>\n</ul>\n<p>예를 들어 다음과 같이 보여줄 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java 9에 추가 된 transferTo를 사용하여 URL의 내용을 인쇄합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> URL <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> openStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    in<span class=\"token punctuation\">.</span> transferTo <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 라이브러리는 문서들을 공부하기에는 너무 많습니다. 그러나, 모든 프로그래머들은 <code class=\"language-text\">java.lang</code>, <code class=\"language-text\">java.util</code>, <code class=\"language-text\">java.io</code>와 서브패키지의 기본 사항에 대해 잘 알고 있어야합니다.</p>\n<p>이를 요약하면 다음과 같습니다. <strong>라이브러리가 있는 경우 사용해야하고 모르는 경우에는 라이브러리가 있는지 확인해야합니다.</strong> 일반적으로 라이브러리 코드는 사용자가 직접 작성하는 코드보다 좋으며 시간이 지남에 따라 개선 될 가능성이 높습니다.</p>\n<br/>\n<h2 id=\"item-60-정확한-답변이-필요한-경우-float와-double을-피합니다\"><a href=\"#item-60-%EC%A0%95%ED%99%95%ED%95%9C-%EB%8B%B5%EB%B3%80%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%BD%EC%9A%B0-float%EC%99%80-double%EC%9D%84-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 60. 정확한 답변이 필요한 경우, <code class=\"language-text\">FLOAT</code>와 <code class=\"language-text\">DOUBLE</code>을 피합니다.</h2>\n<p><code class=\"language-text\">float</code>와 <code class=\"language-text\">double</code> 유형은 과학 및 공학 계산을 위해서 설게되었습니다. 그렇기 때문에 정확한 근사치를 신속하게 제공하기 위해서 설계된 구조입니다. 따라서, 정확한 결과에 제공하면 안되며 정확한 결과가 필요한 곳에서는 사용하면 안됩니다. (Ex. 금전 계산 등)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Broken - 화폐 계산에 부동 소수점을 사용합니다!</span>\n<span class=\"token comment\">// 사용하면 안됩니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> funds <span class=\"token operator\">=</span> <span class=\"token number\">1.00</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> itemsBought <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> <span class=\"token number\">0.10</span><span class=\"token punctuation\">;</span> funds <span class=\"token operator\">>=</span> price<span class=\"token punctuation\">;</span> price <span class=\"token operator\">+=</span> <span class=\"token number\">0.10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    funds <span class=\"token operator\">-=</span> price<span class=\"token punctuation\">;</span>\n    itemsBought<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>itemsBought <span class=\"token operator\">+</span> <span class=\"token string\">\" items bought.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change: $\"</span> <span class=\"token operator\">+</span> funds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// output : 0.3999999... (잘못된 값)</span></code></pre>\n<p>따라서, 아래처럼 수정해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">BigDecimal</span> TEN_CENTS <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> itemsBought <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">BigDecimal</span> funds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span> price <span class=\"token operator\">=</span> TEN_CENTS<span class=\"token punctuation\">;</span>\n        funds<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TEN_CENTS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    funds <span class=\"token operator\">=</span> funds<span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    itemsBought<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>itemsBought <span class=\"token operator\">+</span> <span class=\"token string\">\" items bought.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Money left over: $\"</span> <span class=\"token operator\">+</span> funds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 경우, BigDecimal을 사용하게 되면 정확한 결과를 만들 수 있습니다. (다만, 원시적인 값에 비해 조금 더 느려집니다.)</p>\n<br/>\n<h2 id=\"item-61-boxed-primitive-보다-primitive-type을-선호합니다\"><a href=\"#item-61-boxed-primitive-%EB%B3%B4%EB%8B%A4-primitive-type%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 61. Boxed Primitive 보다 Primitive type을 선호합니다.</h2>\n<p>자바는 <code class=\"language-text\">int</code>, <code class=\"language-text\">double</code>, <code class=\"language-text\">boolean과</code> 같은 기본(Primitive) 요소와 <code class=\"language-text\">String</code>이나 <code class=\"language-text\">List</code>와 같은 참조(Reference) 유형으로 구성되어 있습니다. 또한 모든 기본 유형(Primitive Type)에는 Boxed Primitive라고 하는 참조 유형이 있습니다. 이것이 바로, <code class=\"language-text\">int</code>, <code class=\"language-text\">double</code>, <code class=\"language-text\">boolean</code>에 해당하는 <code class=\"language-text\">Integer</code>, <code class=\"language-text\">Double</code>, <code class=\"language-text\">Boolean</code> 입니다.</p>\n<p>Primitive와 Boxed Primitive 사이에는 세 가지 주요 차이점이 있습니다.</p>\n<ul>\n<li>Primitive는 값만 가지고 있는 반면에, Boxed Primitive는 값과 구별되는 ID를 가지고 있습니다.</li>\n<li>Primitive는 기본 값만 존재하는 반면에, Boxed Primitive는 null과 같이 비 기능적 값이 있습니다.</li>\n<li>Primitive는 Boxed Primitive보다 시간과 공간 효율적입니다.</li>\n</ul>\n<p>이러한 차이를 참고해서 만들어야 합니다.</p>\n<p>즉, 아래의 코드는 잘못된 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Comparator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> naturalOrder <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> j<span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnaturalOrder<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// output : 1 -> error</span></code></pre>\n<p>이와 같은 문제로, boxed primitives에는 <code class=\"language-text\">==</code> 연산자를 적용하는 것은 거의 대부분 잘못된 것입니다. 따라서 비교를 할때는 primitive를 사용하는 것이 더 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Unbelievable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span> <span class=\"token string\">\"Unbelievable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만, 위의 코드처럼 사용하는 것도 좋지 않습니다. primitive와 boxed primitive를 혼합해서 사용하는 경우, boxed primitive 타입이 박스 해제가 되는 문제가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 매우 느린 코드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">+</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드는 지역 변수 sum을 기본(Primitive) 타입이 아닌, Boxed Primitive 타입을 사용했기 때문에 반복적으로 boxing되고 unboxed 되는 문제가 존재합니다.</p>\n<p>요약하자면, 선택권이 있는 경우에는 Boxed primitive 보다는 primitive를 사용하는 것이 좋습니다. Boxed Primitive를 사용해야하는 상황이면 조심히 사용해야합니다. <strong>Auto boxing은 boxed primitives를 사용하는 위험은 아니지만, 자세한 정도를 줄입니다.</strong></p>\n<p>프로그램이 boxed 및 unboxed primitive 를 포함하는 혼합 계산을 할때는 unboxing을 수행되고, 프로그램이 unboxing을 수행할 때는 <code class=\"language-text\">NullPointerException</code>을 throw할 필요가 있습니다. 프로그램이 Primitive 타입을 Boxed Primitive에 넣으면 비용이 많이 들고 불필요한 개체 생성이 발생할 수 있습니다.</p>\n<br/>\n<h2 id=\"item-62-다른-유형이-적합한-문자열은-피합니다\"><a href=\"#item-62-%EB%8B%A4%EB%A5%B8-%EC%9C%A0%ED%98%95%EC%9D%B4-%EC%A0%81%ED%95%A9%ED%95%9C-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 62. 다른 유형이 적합한 문자열은 피합니다.</h2>\n<p>문자열은 텍스트를 위해 설계되었습니다. 따라서 문자열로 몇가지를 하면 안되는 경우가 있습니다.</p>\n<h3 id=\"문자열은-다른-값-타입을-대체하지-못합니다\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EB%8B%A4%EB%A5%B8-%EA%B0%92-%ED%83%80%EC%9E%85%EC%9D%84-%EB%8C%80%EC%B2%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열은 다른 값 타입을 대체하지 못합니다.</h3>\n<ul>\n<li>입력에서 문자열로 받는 경우가 있지만, 숫자인 경우에는 int, float, BigInteger로 변환해야하고 참/거짓의 경우에는 Enum 또는 boolean으로 처리해야합니다.</li>\n</ul>\n<h3 id=\"문자열은-enum-형을-대체하지-못합니다\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-enum-%ED%98%95%EC%9D%84-%EB%8C%80%EC%B2%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열은 Enum 형을 대체하지 못합니다.</h3>\n<ul>\n<li>Enum은 문자열보다, Enum형 상수를 사용하는 것이 중요합니다.</li>\n</ul>\n<h3 id=\"문자열은-aggregate-타입을-대체하지-못합니다\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-aggregate-%ED%83%80%EC%9E%85%EC%9D%84-%EB%8C%80%EC%B2%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열은 aggregate 타입을 대체하지 못합니다.</h3>\n<ul>\n<li>Entity에 여러 구성이 있는 경우, 사용하지 않는 것이 좋습니다.</li>\n</ul>\n<h3 id=\"문자열은-capabilities를-대체하지-못합니다\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-capabilities%EB%A5%BC-%EB%8C%80%EC%B2%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열은 capabilities를 대체하지 못합니다.</h3>\n<ul>\n<li>때때로 문자열은 일부 기능에 대한 액세스 권한을 부여하기위해 사용하는데, 스레드 로컬 변수를 사용할 때 문제가 생길 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Broken - 문자열을 기능으로 부적절하게 사용했습니다!</span>\n<span class=\"token comment\">// 두 클라이언트가 독립적으로 스레드 로컬을 사용하기로 결정하면 의도하지않게 변수를 공유하므로 여러 문제가 발생가능합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// Noninstantiable</span>\n\n  <span class=\"token comment\">// 명명 된 변수에 대한 현재 스레드의 값을 설정합니다.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 명명 된 변수에 대한 현재 스레드의 값을 반환합니다.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 해결하는 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 요약하면, 더 나인 데이터 유형이 존재하거나 쓸 수 있을 때 객체를 문자열로 나타내는 자연스러운 경향을 피해야합니다. 부적절하게 사용되는 문자열은 다른 유형보다 번거롭고 유연성이 떨어지며 느리고, 오류가 발생하기 쉽습니다.</p>\n<br/>\n<h2 id=\"item-63-문자열-연결의-성능에-주의합니다\"><a href=\"#item-63-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%97%B0%EA%B2%B0%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%97%90-%EC%A3%BC%EC%9D%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 63. 문자열 연결의 성능에 주의합니다.</h2>\n<p>문자열 연결 연산자, <code class=\"language-text\">+</code>는 몇개의 문자열을 하나로 결합하는 편리하고 좋은 방법입니다. 작은 범위에서는 좋을 수 있지만, 문자열 연결 연산자를 사용해서 n개의 문자열을 연결하는 경우, n 타임이 걸리게 됩니다.</p>\n<p>즉, 아래는 잘못된 사용 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 부적절한 문자열 연결 사용-성능이 좋지 않습니다!</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">numItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">+=</span> <span class=\"token function\">lineForItem</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// String concatenation</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 해결하기 위해서는 <code class=\"language-text\">StringBuilder</code>를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> statement <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">StringBuilder</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span> <span class=\"token punctuation\">(</span>numItems <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> LINE_WIDTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>numItems <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    b<span class=\"token punctuation\">.</span>append <span class=\"token punctuation\">(</span>lineForItem <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>toString <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>자바 6이후로, 문자열 연결 속도를 높였으나 아직까지는 <code class=\"language-text\">StringBuilder</code>를 사용하는 것이 좋습니다.</p>\n<p>즉, 성능이 관련이 없는 경우가 아니면, 문자열 연결 연산자(<code class=\"language-text\">+</code>)를 사용해서 몇개의 문자열을 결합하지 않는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-64-인터페이스로-객체를-참조합니다\"><a href=\"#item-64-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A1%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%B0%B8%EC%A1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 64. 인터페이스로 객체를 참조합니다.</h2>\n<p>객체를 참조하려면 클래스보다 인터페이스를 사용을 선호해야합니다. <strong>적절한 인터페이스 유형이 있는 경우, 매개 변수, 반환 값, 변수 및 필드는 모두 인터페이스 유형을 사용하여 선언해야합니다.</strong></p>\n<p>즉, 아래처럼 작성하는 것이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Good Case - 인터페이스를 유형으로 사용</span>\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">></span></span> sonSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bad Case - 클래스를 유형으로 사용한 것</span>\n<span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">></span></span> sonSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>인터페이스를 유형으로 사용하게 되면 프로그램이 좀 더 <strong>유연</strong>해집니다. 다만, 적절한 인터페이스가 없는 경우에는 인터페이스가 아닌 클래스에서 객체를 참조하는 것이 전적으로 중요합니다.</p>\n<p>따라서, 인터페이스를 사용할 수 있다면 인터페이스를 사용해서 객체를 참조시켜 프로그램이 더 유연하고 세련되게 구성합니다. 적절한 인터페이스가 없으면 필요한 기능을 제공하는 클래스 계층 구조에서 가장 덜 구체적인 클래스를 사용하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-65-리플렉션보다-인터페이스를-선호합니다\"><a href=\"#item-65-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98%EB%B3%B4%EB%8B%A4-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 65. 리플렉션보다 인터페이스를 선호합니다.</h2>\n<ul>\n<li><a href=\"https://velog.io/@ptm0304/Java-%EC%9E%90%EB%B0%94-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reflection ?</a></li>\n</ul>\n<p>핵심 리플렉션 기능인 <code class=\"language-text\">java.lang.reflect</code>는 임의의 클래스에 대한 프로그래밍 방식 액세스를 제공합니다. Class 객체가 주어지면, Class 인스턴스가 나타내는 생성자, 메서드 및 필드를 나타내는 Constructor, Method, Field 인스턴스를 얻을 수 있습니다.</p>\n<p>그러나 리플렉션을 사용하게 되면, 아래의 단점을 가지게 됩니다.</p>\n<ul>\n<li>예외 검사를 포함하여 컴파일 타임 유형 검사의 모든 이점을 잃게됩니다.</li>\n<li>반사 액세스를 수행하는 데 필요한 코든느 서투르고 장황합니다.</li>\n<li>성능이 저하됩니다.</li>\n</ul>\n<p>일반적으로는 리플렉션을 사용하는 것은 거의 안좋습니다.</p>\n<p>리플렉션은 매우 제한된 형태로만 사용함으로써 비용을 거의 발생시키지 않으면서 리플렉션의 많은 이점을 얻을 수 있습니다. 컴파일 타임에 사용할 수 없는 클래스를 사용해야하는 많은 프로그램의 경우, 컴파일 타임에 클래스를 참조할 적절한 인터페이스 또는 수퍼 클래스가 있습니다. 이 경우, Reflective 인스턴스로 생성하고 해당 interface나 super 클래스를 통해서 정상적으로 액세스 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 인터페이스 액세스를 통한 Reflective instantiation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 클래스 이름을 클래스 객체로 변환</span>\n  <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> cl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    cl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Unchecked cast!</span>\n      <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class not found.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Get the constructor</span>\n  <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> cons <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    cons <span class=\"token operator\">=</span> cl<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchMethodException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No parameterless constructor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Instantiate the set</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> cons<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Constructor not accessible\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class not instantiable.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Constructor threw \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassCastException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class doesn't implement Set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Exercise the set</span>\n  s<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드처럼 피를레션은 강력함을 가지고 있습니다. <code class=\"language-text\">&lt;? extends Set&lt;String&gt;&gt;</code>을 통해서, <code class=\"language-text\">service provider framework</code>등을 구현하는데 도움이 됩니다.</p>\n<p>그러나, reflection의 단점 또한 잘 보입니다.</p>\n<ul>\n<li>런타임에 여러 에러가 발생할 수 있는 가능성이 있습니다.</li>\n<li>클래스에서 인스턴스를 생성하기 위해서는 긴 코드가 필요합니다.</li>\n</ul>\n<p>또한 위 프로그램을 컴파일하면 확인되지 않은 캐스트 경고가 발생합니다.</p>\n<p>드물지만, 합법적인 리플렉션 사용법 중 하나는 런타임에 없을 수 있는 다른 클래스, 메서드, 필드에 대한 클래스의 종속성을 관리하는 것입니다.</p>\n<p>이를 정리하자면, <strong>리플렉션은 정교한 특정 시스템 프로그래밍 작업에는 필요한 기능이지만 많은 단점이 있습니다.</strong> 컴파일 타입에 알려지지 않은 클래스로 작업해야하는 프로그램을 작성하는 경우, 가능하면 리플렉션을 사용해서 개체를 인스턴스화하고 컴파일 타임에 알려진 일부 인터페이서 또는 슈퍼클래스를 사용해서 개체에 액세스 하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-66-네이티브-메서드를-신중하게-사용합니다\"><a href=\"#item-66-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 66. 네이티브 메서드를 신중하게 사용합니다.</h2>\n<p>JNI(Java Native Interface)를 사용하면, Java Program이 C. C++와 같은 <code class=\"language-text\">native programming language</code>로 작성된 메소드인 <code class=\"language-text\">native method</code>를 호출할 수 있습니다. 일반적으로 <code class=\"language-text\">native method</code>의 용도는 3가지입니다.</p>\n<ul>\n<li>레지스토리와 같은 플랫폼 별 기능에 대한 액세스를 제공합니다.</li>\n<li>레거시 데이터에 대한 액세스를 제공하는 레거시 라이브러리를 포함하여 네이티브 코드의 기존 라이브러리에 대한 액세스를 제공하비낟.</li>\n<li>네이티브 메서드는 성능 향상을 위해 애플리케이션의 성능에 중요한 부분을 네이티브 언어로 작성하는데 사용합니다.</li>\n</ul>\n<p>그러나 현재 시점에서는 거의 사용하지 않는 것이 좋습니다. 기본 메서드를 통해서 레지스토리와 같은 플랫폼에 액세스하는 것도 거의 필요하지 않고, <strong>성능향상을 위해 native method를 사용하는 것도 거의 권장하지 않습니다.</strong></p>\n<p>또한 native method를 사용하는 것은 심각한 단점이 있습니다. native method의 경우, 안전하기 않기 때문에 메모리 손상 등 여러 문제가 발생하기 쉽습니다. 그리고 이식성이 떨어지며, 디버그하기 어렵습니다. 가비지컬렉터도 추적하기 힘들며, 성능을 저하시킬 수 있습니다. 그리고 가독성이 매우 부족합니다.</p>\n<p>즉, 네이티브 메서드를 사용할 수 있는 경우는 하위 수준 리소스나 native library에 액세스하는 경우에 한하며, 이 경우에도 최대한 버그를 피하도록 노력해야합니다.</p>\n<br/>\n<h2 id=\"item-67-신중하게-최적화합니다\"><a href=\"#item-67-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 67. 신중하게 최적화합니다.</h2>\n<p>최적화에 대한 세가지 격언이 있습니다.</p>\n<ul>\n<li>어리석음을 포함해서 다른 단일 이유보다 효율성이라는 이름으로 잘못된 문제를 일으키면 안됩니다.</li>\n<li>97% 정도의 작은 효율성은 잊어야합니다. 조기 최적화는 모든 문제의 근원입니다.</li>\n<li>\n<p>최적화에 대해 두가지 규칙을 지켜야합니다.</p>\n<ul>\n<li>최적화하지 마세요.</li>\n<li>완벽하고 최적화되지 않은 solution을 확보할때까지는 수행하지 않습니다.</li>\n</ul>\n</li>\n</ul>\n<p>이처럼, 최적하는 조심히해야하며 특히 조기 최적화는 문제가 생기기 쉽습니다.</p>\n<p>성능을 위해 건전한 아키텍처 원칙을 희생하면 안됩니다. <strong>빠른 프로그램 보다는 좋은 프로그램을 작성하는 것이 중요합니다.</strong> 좋은프로그램이 빠르지 않는 경우에는 아키텍처를 통해서 최적화할 수 있습니다.</p>\n<p>따라서 아래 사항을 고려해야합니다.</p>\n<ul>\n<li>설계 과정에서 성능을 고려하며, 개발도중에 변경에는 시스템이 잘못구성될 수 있습니다.</li>\n<li>성능을 제한하는 설계 결정을 피하기 위해서 노력해야합니다.</li>\n<li>API 설계 결정의 성능 결과를 고려해야합니다. 다만, 좋은 성능을 얻기 위해서 API를 왜곡하는 것은 매우 나쁩니다.</li>\n<li>Java는 성능 모델이 약하기 때문에, C나 C++에 비해 최적화를 좀 더 잘할 필요가 있습니다.</li>\n</ul>\n<p>즉, 빠른 프로그램 보다는 좋은 프로그램을 작성하는 것이 중요합니다. 그렇게 되면 속도가 따라올 것입니다. 다만, 시스템을 설계하는 동안 성능에 대해 생각해야합니다. 그리고, 시스템을 개발 완료 후 에는 성능을 측정하고, 빠른지 확인하고 그렇지 않은 경우에는 프로파일러를 통해서 원인을 찾고 최적화하는 작업을 수행합니다.</p>\n<br/>\n<h2 id=\"item-68-일반적으로-허용되는-명명-규칙을-준수합니다\"><a href=\"#item-68-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%97%88%EC%9A%A9%EB%90%98%EB%8A%94-%EB%AA%85%EB%AA%85-%EA%B7%9C%EC%B9%99%EC%9D%84-%EC%A4%80%EC%88%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 68. 일반적으로 허용되는 명명 규칙을 준수합니다.</h2>\n<p>자바 플랫폼에서는 잘 정립된 naming conventions이 있으며, 대부분은 The Java Language Specification에 포함되어 있습니다.</p>\n<p>패키지, 클래스, 인터페이스, 메서드, 필드 및 형식 변수를 포함하는 여러 naming conventions가 있으며, 이를 위반하면 안됩니다. 이러한 규칙을 위반하면 이후에 사용하기 어려울 수 있습니다.</p>\n<ul>\n<li>패키지 및 모듈은 마침표로 구분된 구성요소와 함께 계층적이며 소문자 알파벳 문자(가끔 숫자)로 구성되어야합니다.</li>\n<li>열거 형 및 주석 유형 이름을 포함한 클래스느 및 인터페이스 이름은 하나 이상의 단어로 구성되어야하며, 각 단어의 앞은 대문자로 표시해야합니다.</li>\n<li>메서드 및 필드 이름은 클래스나 인터페이스와 동일한 방식으로 naming conventions를 사용하지만, 첫 글자는 소문자로 구성해야합니다.</li>\n<li>상수 필드의 경우 하나이상의 대문자와 밑줄 문자로 구성합니다. (EX. <code class=\"language-text\">COIN_VALUE</code>)</li>\n<li>약어의 경우는, 좀 더 신중하게 선정해야합니다.</li>\n</ul>\n<p>이를 예시로 하면 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>식별자 유형</th>\n<th>예</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Package, module</td>\n<td><code class=\"language-text\">org.junit.jupiter.api, com.google.common.collect</code></td>\n</tr>\n<tr>\n<td>Class, Interface</td>\n<td><code class=\"language-text\">Stream, FutureTask, LinkedHashMap, HttpClient</code></td>\n</tr>\n<tr>\n<td>Method, Field</td>\n<td><code class=\"language-text\">remove, groupingBy, getCrc</code></td>\n</tr>\n<tr>\n<td>Constant Field</td>\n<td><code class=\"language-text\">MIN_VALUE, NEGATIVE_INFINITY</code></td>\n</tr>\n<tr>\n<td>Local Variable</td>\n<td><code class=\"language-text\">i, denom, houseNum</code></td>\n</tr>\n<tr>\n<td>Type Parameter</td>\n<td><code class=\"language-text\">T, E, K, V, X, R, U, V, T1, T2</code></td>\n</tr>\n</tbody>\n</table>\n<p>위와 같은 standard naming conventions를 내재회 하고, 그 다음 특성을을 사용하는 방법을 인지하는 것이 좋습니다. 일반적으로 grammatical conventions는 더 복잡하고 느슨합니다. <code class=\"language-text\">The Java Language Specification</code>에서 인용한 글은 \"오래 유지된 관습적 사용이 달라지는 경우, 이러한 관습을 과도하게 따라하면 안됩니다.\"라는 글입니다. 즉, 상식에 한해서 개발하는 것이 필요합니다.</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/EffectiveJava.633a126.62da2dbeb71f67a6b063e53d90d77388.jpeg","size":{"width":800,"height":1073},"sizes":"(max-width: 800px) 100vw, 800px","srcset":["/assets/static/EffectiveJava.a67b0b2.62da2dbeb71f67a6b063e53d90d77388.jpeg 480w","/assets/static/EffectiveJava.633a126.62da2dbeb71f67a6b063e53d90d77388.jpeg 800w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 1073' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a77cbd8273266b44cedd9d66cbf64af5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a77cbd8273266b44cedd9d66cbf64af5)' width='800' height='1073' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABWAEADASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAYFBwIDBAEI/8QAORAAAgEDAwEFBQYDCQAAAAAAAQIDAAQRBRIhMQYHEyJRFBUyQWEjJHGxstEWkaEXJTM2VWRyc4H/xAAYAQADAQEAAAAAAAAAAAAAAAAAAgMFBP/EACkRAAIBAgUCBQUAAAAAAAAAAAABAgMRBCExUXESMiIzQcHwEyNhkaH/2gAMAwEAAhEDEQA/APqmiitc88VvEZbiRIoxjLOwUD5dTQBsorh98aZ/qFn1x/jr%2b9Y%2b/NK4/vOx56feE/egCQoqO9%2b6T8tUseRkfeE/eq41LvM1RtQvRoem2V7YQzNFHOZH8%2b3gngYxkcUk6kYK8itKjOq7QRbFFQHYbW5%2b0PZ2HULqBIJXeRSiEkeViuRn8Kn6ZO6uick4tphSh3toknd7rCy/AUTJ9POvNN9Knept/gHVzJ8AjBb8AwJolowjqj5507UMxWUXsOkypIrEs8DOVwxHmcNhTjHxYOa6VtPbHhim03TYoTIviyWy7W25GQDuPyzXZrd3BHFbRzB/Z799qRZBzxkBtoAJ56mvJrYRRKVntVQchfakTBBx0z1zxWfm/FH5/TUSULwna/z8MjH0/wC8WzWmnaYfDkM584yUVhtXcTyemQAQcHpUl2diCaWYrkW6usnwFmTB3dFxXt1FC91pFq17ayMkgVIlCkwbmTdnHTnb19DU2XWCa5ijlJ8W7cK0bLjG7qfUfL%2bdLWfgV9ymCX3Xbb3RbfdsmzsdYKPRv1Gmel3u/GOydiPofzNMVaFPsXBlVvMlywpS72AG7udfB6ezNTbSp3q4/s813PQWzGmloItSglt7GSC1kkS6sZIljkYuyt4uNqg9fKuQB681svFSCWRoLSRpl8xdwjqp%2bLjgjr04rMXDi61GVJjEILJvERMMoxgDkg%2bvy5qM0A6q92LIXapFuVZocY3yeH5WLHkYUAVxKTtn6HdlezRvsj4mrWcjxxp48qbsKFG0t9Plx06GpTsI80fZyEuzxbJX3EMoUedsZzkn/wArDwL2K6tpJfBVY54WwFA3faDGPUZGaz7Ib20OF4Io7j7V/OeCAGPHXIqNaScMtztwkLVXfb3L47v/APKdh/xP6jTDS73fHPZKwx0w36jTFWjT7FwY9bzJcsKVe9Q7e7zXT/tmpqpb7xsfwZqW4ArtXIPpvFNLQSOqKc11Uv7OVNOuoIHWzVXL8dckgj5kjHBpF0%2b99glnW/nto5ZjBOvhEtsj8LBI6g44JyeCab5HR97NcxsGJ3FgVJGOnJz86i5lsdkQjlgDcjmIjpwPwH51wxslY05Qcnexq0u6gvYbF5NSBlM8SJG458IMOg6AYG71zxUr2VaD3ZLiNfBM0gQMN2fMeRk4B%2bpNRFnb2/vS2LyQGYsAEiUtk54PHGfyqS0AXcWkKsEkcbB3Vy5CkLnpk/kKnXs45HRgouNV3fp7ovXu2Oexun/g/wCo0zUp91kgk7D6cQeR4gP0Ic5FNlaFPsXBj1vMlywqF7Y6euqdnrqykMgSUoD4YBbhgeM/hU1mimeZNZFPv2IWUCR7vVt6nhfDTgH64ofu6tQSTqupgAHLeCgz/Srgrx0WRCjqGUjBBGQan9GOxdYmotJP9lMwd3thBLG663qKmNsj7OPrnrUGlnDos15Y3e8yQyuhIYYdeMMQR8xzV8%2b7bHJPsVtkjB%2byXn%2blaLjQtJuZmmuNMsZZX%2bJ3gVieMckipVMP1xssi1DGOnPqld5W1IDunwOxsGMY8ebp/wBjU4VosbK2sIBBZW8VvCCW2RKFXJOScCt9dEV0xSOScuqTlucVxZyS3IlEygD4cx5ZPXac4/mDXbRRTChRRRQAUUUUAFFFFAH/2Q==' /%3e%3c/svg%3e"}}},"context":{}}