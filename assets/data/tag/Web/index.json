{"hash":"409256f0cf4ba53e53b5c32326d49aab3f1f64f3","data":{"tag":{"title":"Web","belongsTo":{"edges":[{"node":{"title":"[WEB] Socket 통신 vs Http 통신","path":"/00-web-socket/","date":"4. January 2021","timeToRead":3,"description":"Socket 통신과 HTTP 통신의 차이에 대해 서술합니다.","content":"<h1 id=\"socket-통신-vs-http-통신\"><a href=\"#socket-%ED%86%B5%EC%8B%A0-vs-http-%ED%86%B5%EC%8B%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Socket 통신 VS HTTP 통신</h1>\n<p>오늘은 웹에서 통신하는 대표적인 방식인 두 방식의 차이에 대해 서술하겠습니다.</p>\n<h2 id=\"socket-통신\"><a href=\"#socket-%ED%86%B5%EC%8B%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Socket 통신</h2>\n<p>Socket 통신을 한마지로 표현하자면, <strong>Server와 Client가 특정 Port를 통해 실시간으로 양방향 통신을 하는 방식</strong>입니다.</p>\n<h3 id=\"socket-통신의-구조\"><a href=\"#socket-%ED%86%B5%EC%8B%A0%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Socket 통신의 구조</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103532675-042a2600-4ecf-11eb-815c-b73529445021.png\" alt=\"Socket통신\">\n출처 : <a href=\"https://mangkyu.tistory.com/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mangkyu.tistory.com/48</a></p>\n<p>특정 포트를 통해 연결하여 실시간 양방향 통신을 합니다. 서버 또한 요청을 보낼 수 있고, 실시간으로 요청을 보낼 수 있기 때문에 양방향 정보 교환에서 유리한 점을 가집니다. 만약에 동영상 스트리밍이나 게임 서비스를 socket통신을 하지 않고 하는 경우에는 계속적인 연결요청이 가므로, 과부하가 걸리게 됩니다.</p>\n<h3 id=\"socket-통신의-특징\"><a href=\"#socket-%ED%86%B5%EC%8B%A0%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Socket 통신의 특징</h3>\n<ul>\n<li>Server와 Client가 계속 연결을 유지하는 <strong>양방향 통신</strong>입니다.</li>\n<li>Server와 Client가 실시간으로 데이터를 주고 받는 상황이 필요한 경우에 주로 사용됩니다.</li>\n<li>실시간 동영상 Streaming이나 온라인 게임 등과 같은 경우에 자주 사용됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"http-통신\"><a href=\"#http-%ED%86%B5%EC%8B%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 통신</h2>\n<h3 id=\"http-통신의-구조\"><a href=\"#http-%ED%86%B5%EC%8B%A0%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 통신의 구조.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103532658-feccdb80-4ece-11eb-8085-2cb7d7f83d8d.png\" alt=\"HTTP통신\">\n출처 : <a href=\"https://mangkyu.tistory.com/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mangkyu.tistory.com/48</a></p>\n<p>client의 요청(Request)이 있을 때만 서버가 응답(response)하여 해당 정보를 전송하고 곧바로 연결을 종료하는 방식입니다. 일반적으로 request를 보냈을 때, 내용을 기다리는시간과 연결하는 시간이 필요하기 때문에 해당 통신은 콘텐츠 위주의 데이터를 사용할 때 유용합니다.</p>\n<h3 id=\"http-통신의-특징\"><a href=\"#http-%ED%86%B5%EC%8B%A0%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 통신의 특징</h3>\n<ul>\n<li>Client가 요청을 보내는 경우에만 Server가 응답하는 <strong>단방향 통신</strong>입니다.</li>\n<li>Server로부터 응답을 받은 후에는 연결이 바로 종료가 됩니다.</li>\n<li>실시간 연결이 아니고, 필요한 경우에만 Server로 요청을 보내는 상황에 유용합니다.</li>\n<li>요청을 보내 Server의 응답을 기다리는 어플리케이션 개발에 주로 사용됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>HTTP 통신과 Socket 통신에 대해 알아보았습니다. 가장 큰 차이 중 하나는 단방향 통신과 양방향 통신의 차이입니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://velog.io/@ejchaid/http\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@ejchaid/http</a></li>\n<li><a href=\"https://mangkyu.tistory.com/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mangkyu.tistory.com/48</a></li>\n</ul>\n"}},{"node":{"title":"[Springboot] CORS 이슈 해결하기","path":"/00-springboot-cors/","date":"27. December 2020","timeToRead":2,"description":" Springboot CORS에 대한 해결방법입니다.","content":"<h1 id=\"springboot-cors-이슈-해결하기\"><a href=\"#springboot-cors-%EC%9D%B4%EC%8A%88-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot CORS 이슈 해결하기.</h1>\n<p>지난 게시글에서는 CORS 이슈에 대해 정리했습니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/00-web-cors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CORS란.</a></li>\n</ul>\n<p>회사 보안 정책에 따라서, 웹페이지에 허용되는 HTTP 메소드가 제한되는 경우가 있습니다. 저 또한 회사에서 이러한 업무를 해야하는 경우가 있기 때문에 이에 대해 한번 정리합니다.</p>\n<p>이러한 CORS 이슈를 스프링 부트에서 해결하는 방법에 대해서 코드를 작성해볼려고합니다.</p>\n<h2 id=\"custom-filter-사용\"><a href=\"#custom-filter-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Filter 사용.</h2>\n<p>인터넷에서 CORS 이슈에 대한 해결책을 찾아보면 Spring은 쉽게 확인할 수 있는데, Sprinboot에 대한 글이 별로 없어 이를 작성했습니다.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mvc</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dispatch-options-request</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n<p>yaml 파일에서는 다음과 같이 추가했습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>   <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> servletRequest<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GET, OPTIONS, HEAD, POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">HttpServletResponse</span> resp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      resp<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">.</span>SC_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>기존의 Filter를 상속받아서 다음과 같이 수정합니다.</p>\n<p>이를 메소드 점검해보면 다음과 같습니다.</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">curl -v -X OPTIONS {url}</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103171817-7cbb3200-4892-11eb-9a4a-d1125fc46506.png\" alt=\"image\"></p>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>다만 의문점 중 하나는 <strong>TRACE를 막는 방법</strong>에 대해서는 아직 확인 중에 있습니다.</p>\n<p>특히 <code class=\"language-text\">curl -v -X TRACE {url}</code> 와 <code class=\"language-text\">curl -v -X trace {url}</code> 이 다른 결과 값을 나타내는 것을 확인할 수 있습니다.</p>\n<p>이에 대해서는 좀 더 명확한 답을 추가해서 글에 추가를 해놓겠습니다. 혹시라도 답을 아시거나 잘못된 부분이 있으면 이야기주세요. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://webhack.dynu.net/?idx=20161110.001&#x26;print=friendly\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webhack.dynu.net/?idx=20161110.001&#x26;print=friendly</a></li>\n</ul>\n"}},{"node":{"title":"[WEB] CORS","path":"/00-web-cors/","date":"26. December 2020","timeToRead":6,"description":" CORS에 대한 개념을 잡습니다. ","content":"<h1 id=\"corscross-origin-resource-sharing\"><a href=\"#corscross-origin-resource-sharing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS(Cross-Origin Resource Sharing)</h1>\n<p>웹 개발을 하게 되면, 반드시 보게되는 이슈입니다. 그러나 이에 대한 개념에 대해 정확하게 모른다는 생각이 들어 정리합니다.</p>\n<br/>\n<h2 id=\"cors의-정의\"><a href=\"#cors%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS의 정의</h2>\n<p>CORS(Cross-Origin Resource Sharing)은 <strong>추가 HTTP 헤더를 사용</strong>하여, <strong>하나의 출처(origin)에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 권한을 부여하도록 브라우저에 알려주는 체제</strong>입니다.</p>\n<p><strong>하나의 출처</strong>란? URL의 프로토콜, 호스트, 포트가 동일한 경우를 의미합니다.</p>\n<p>일반적으로는 다른 출처(origin)에서 내 자원(resource)에 함부로 접근하지 못하게 하기 위해 사용됩니다.</p>\n<p>일반적으로 <strong>요청 헤더 목록</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p>Origin</p>\n<ul>\n<li>fetch가 시작되는 위치.</li>\n<li>경로 정보는 포함이 되지않고 서버 이름만 포함됨.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Request-Method</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 을 할 때, 실제 요청에서 어떤 메소드를 사용할지 서버에 알려줍니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Request-Headers</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 을 할 때, 실제 요청에서 어떤 header를 사용할 것인지 서버에서 알리기 위해 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>응답 헤더 목록</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p>Access-Control-Allow-Origin</p>\n<ul>\n<li>브라우저가 해당 origin이 자원에 접근할 수 있도록 허용합니다.</li>\n<li><code class=\"language-text\">*</code> 은 credentials이 없는 요청에 한해서 모든 origin에서 접근이 가능하도록 허용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Expose-Headers</p>\n<ul>\n<li>브라우저가 액세스할 수 있는 서버의 화이트리스트 헤더를 허용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Max-Age</p>\n<ul>\n<li>얼마나 오랫동안 <code class=\"language-text\">preflight request</code>가 캐싱될 수 있는지를 나타냅니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Credential</p>\n<ul>\n<li><code class=\"language-text\">Credentials</code>가 true일 때 요청에 대한 응답이 노출될 수 있는지를 나타냅니다.</li>\n<li><code class=\"language-text\">preflight request</code> 에 대한 응답의 일부로 사용되는 경우, 실제 자격 증명을 사용하여 실제 요청을 수행 할 수 있는지를 나타냅니다.</li>\n<li>간단한 GET 요청의 경우에는 <code class=\"language-text\">preflight</code> 되지 않으므로 자격 증명이 필요한 리소스를 요청하면 헤더가 리소스와 함께 반환되지 않으며 브라우저에서 응답을 무시하고 웹 콘텐츠로 반환하지 않습니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Methods</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 에 대한 응답으로 허용되는 메서드들을 나타냅니다.</li>\n<li>일반적으로 회사에서 보안 상의 이유로 http 메소드를 제한하는 경우, 이 헤더를 많이 사용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Headers</p>\n<ul>\n<li><code class=\"language-text\">preflight</code> 요청에 대한 응답으로 실제 요청 시 사용할 수 있는 HTTP 헤더를 나타냅니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>preflight request</strong>란? <strong>미리 전송(사전요청)</strong>을 의미합니다. 이는 본격적인 교차 HTTP 요청 전에 서버 측에서 그 요청의 메서드와 헤더에 대한 인식을 진행하는 지 확인합니다.</p>\n<p>이는 위에 있는 HTTPHeader의 \"Origin\", \"Access-Control-Request-Method\", \"Access-Control-Request-Headers\" 의 3가지 HTTP request headers를 사용하는 HTTPMethod(\"OPTIONS\") 요청입니다.</p>\n<br/>\n<h2 id=\"cors가-없으면\"><a href=\"#cors%EA%B0%80-%EC%97%86%EC%9C%BC%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS가 없으면?</h2>\n<p>만약 어떤 사이트에서 CORS 제한이 없으면 어떻게 될까요. 다른 출처의 어플리케이션이 서로 통신하는 것에 아무런 제한이 없게된다면 악의를 가진 사용자가 소스 코드를 볼 수도 있고, 세션정보를 가져갈 수도 있습니다.</p>\n<p>또한 <a href=\"https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%9A%94%EC%B2%AD_%EC%9C%84%EC%A1%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSRF(Cross-Site Request Forgery)</a>나 <a href=\"https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">XSS(Cross-Site Scripting)</a>와 같은 방법을 사용해서 어플리케이션에서 코드가 실행된 것처럼 꾸며서 사용자의 정보를 탈취하기 너무 쉬워집니다.</p>\n<p>이러한 경우에 개발자들이 투자해야하는 리소스들은 더 많아지기 때문에 이에 대한 제한은 꼭 필요합니다.</p>\n<br/>\n<h2 id=\"cors는-어떻게-동작하나요\"><a href=\"#cors%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%98%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS는 어떻게 동작하나요?</h2>\n<p>이러한 CORS의 정의와 왜 필요한지에 대해서 알게 되었기 때문에 좀 더 자세하게 이야기를 해볼려고 합니다.</p>\n<p>GET 요청은 다음과 같이 간단하게 작동합니다. 특히 GET은 서버의 자원을 바꾸지 않기 때문에 로직은 아래처럼 간단합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103171139-141d8680-488d-11eb-87bc-38088c87fbbf.png\" alt=\"CORS-GET\"></p>\n<p>그러나 POST와 같은 비멱등인 경우, 허용하지 않은 도메인이 서버 자원을 변경시킬 수 있기 때문에 이를 신경써줘야합니다. 따라서 POST와 같은 경우는 아래처럼 동작합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103171048-67430980-488c-11eb-98a1-4e77c348d22d.png\" alt=\"CORS-POST\"></p>\n<p>먼저 OPTIONS을 요청해서 해당 도메인간의 요청이 정상적인지 확인합니다.</p>\n<p>이와 같이 CORS는 동작합니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>CORS에 대한 이슈에 대해 정리했습니다. 이에 대한 개념을 잡았으며, 다음 글에서는 spring boot에서 CORS 이슈를 해결하는 방법에 대해 이야기해보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Preflight_request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Glossary/Preflight_request</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Origin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Origin</a></li>\n<li><a href=\"https://hannut91.github.io/blogs/infra/cors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hannut91.github.io/blogs/infra/cors</a></li>\n<li><a href=\"https://zzossig.io/posts/web/what_is_cors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://zzossig.io/posts/web/what_is_cors/</a></li>\n</ul>\n"}},{"node":{"title":"[GraphQL] GraphQL 개념잡기","path":"/00-graphql/","date":"1. December 2020","timeToRead":6,"description":" GraphQL에 대한 기본적인 내용을 정리합니다. ","content":"<h1 id=\"graphql이란\"><a href=\"#graphql%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL이란</h1>\n<p>gatsby로 블로그를 이전하게 되면서 GraphQL에 대해서 반드시 알아야하는 상황이 왔다. 기존에도 공부를 했어야한다고 꾸준하게 생각을 했는데, 드디어 한번 공부하게 되었다.</p>\n<br/>\n<h2 id=\"graphql-정의\"><a href=\"#graphql-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL 정의</h2>\n<p>페이스북에서 만든 퀴리 언어입니다. 다만 SQL은 <strong>데이터베이스에 저장된 데이터를 효율적으로 가져오는 것을 목적</strong>으로 하지만, GraphQL은 <strong>웹 클라이언트가 데이터를 서버로부터 효율적으로 가져오는 것을 목적</strong>으로 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/100871453-a9726880-34e3-11eb-9211-ef08e50163bf.png\" alt=\"image\"></p>\n<blockquote>\n<p>발전하고 있는 GraphQL의 관심도.</p>\n</blockquote>\n<p>GraphQL은 위에 이야기했듯이 기존의 쿼리언어인 sql과 많은 구조적 차이가 있습니다.</p>\n<br/>\n<h2 id=\"graphql-vs-http-api\"><a href=\"#graphql-vs-http-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL vs HTTP API</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/100874660-40d9ba80-34e8-11eb-8670-75e1c8ff0309.png\" alt=\"image\"></p>\n<blockquote>\n<p>HTTP API와 GQL의 기술 스택 비교</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/100874777-6bc40e80-34e8-11eb-8bde-b938ffea55f9.png\" alt=\"image\"></p>\n<blockquote>\n<p>REST API와 GraphQL API의 차이</p>\n</blockquote>\n<p>GraphQL API를 사용하면 여러번 네트워크 호출을 할 필요 없이, 한번의 네트워크 호출로 처리 할 수 있습니다.</p>\n<br/>\n<h2 id=\"graphql-구조\"><a href=\"#graphql-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL 구조</h2>\n<h3 id=\"sql문-예시\"><a href=\"#sql%EB%AC%B8-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SQL문 예시.</h3>\n<p>ex) 유저가 좋아하는 게시글을 가져오는 글이 필요하다.</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">.</span>likes\n<span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span>\n    <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> board <span class=\"token keyword\">on</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> board<span class=\"token punctuation\">.</span>user_id</code></pre>\n<p>다음과 같은 쿼리를 구성할 수 있습니다. 그러나, 만약에 웹에서 이를 호출할려고 하는데, 여러 테이블을 join을 해야하는 경우가 발생할 수 있습니다. 이러한 경우에는 endpoint가 많아지는 문제가 발생할 수 있습니다.</p>\n<h3 id=\"graphql문-예시\"><a href=\"#graphql%EB%AC%B8-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL문 예시.</h3>\n<p>다음과 같은 경우 graphql은 아래와 같이 표현할 수 있습니다.</p>\n<ul>\n<li>쿼리문(query)</li>\n</ul>\n<pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span><span class=\"token punctuation\">{</span>\n    user<span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">,</span>\n        likes <span class=\"token punctuation\">{</span>\n            title\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>응답 데이터 형식(mutation)</li>\n</ul>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"user\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"likes\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"title\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"content13\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"title\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"content56\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>서버사이드 GraphQL 어플리케이션은 gql로 작성된 쿼리를 입력으로 받아 쿼리를 처리한 결과를 다시 클라이언트로 돌려줍니다. HTTP API가 특정 DB나 플랫폼에 종속적이지 않은 것처럼 마찬가지로 gql도 역시 어떠한 특정 DB나 플랫폼에 종속적이지 않습니다.</p>\n<p>좀 더 자세하게 구조를 보면 다음과 같습니다. gql은 <strong>쿼리</strong>와 <strong>뮤테이션</strong>으로 구분됩니다. 쿼리는 데이터를 읽는데 사용되고, 뮤테이션은 데이터를 변조(CUD) 하는데 사용됩니다. 그러나 내부적으로는 큰 차이가 없고, 개념상의 차이라고 이해하면 됩니다.</p>\n<p>gql에서 쿼리에 변수라는 개념이 있습니다. 이 변수를 통해서 함수 인터페이스를 구현할 수 있습니다.</p>\n<pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> getStudentInformation<span class=\"token punctuation\">(</span><span class=\"token variable\">$studentId</span><span class=\"token punctuation\">:</span> ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    personalInfo<span class=\"token punctuation\">(</span><span class=\"token attr-name\">studentId</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$studentId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name\n        address1\n        address2\n        major\n    <span class=\"token punctuation\">}</span>\n    classInfo<span class=\"token punctuation\">(</span><span class=\"token attr-name\">yead</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">studentId</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$studentId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        classCode\n        className\n        teacher <span class=\"token punctuation\">{</span>\n            name\n            major\n        <span class=\"token punctuation\">}</span>\n        classRoom <span class=\"token punctuation\">{</span>\n            id\n            maintainer <span class=\"token punctuation\">{</span>\n                name\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    SATInfo<span class=\"token punctuation\">(</span><span class=\"token attr-name\">schoolCode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0412</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">studentId</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$studentId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        totalScore\n        dueDate\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 <strong>오퍼레이션</strong> 네임 쿼리(쿼리용 함수)는 RDBMS의 프로시져와 비슷한 개념입니다. 이 개념을 통해 REST API 호출과 다르게, 한번의 호출로 모든 데이터를 가져올 수 있습니다. 더 나아가서 gql 오퍼레이션 네임 쿼리는 클라이언트 프로그래머가 작성하고 관리합니다.</p>\n<p>이 기능 덕분에 gql은 백엔드와 프론트 개발자의 협업에 많은 영향을 주었습니다. gql을 사용하면 백엔드 개발자가 개발하는 API의 request/response의 형식에 의존도가 낮아집니다. 다만, 데이터 schema에 대한 협업은 필요합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/101355449-ec647f80-38d9-11eb-8709-0cd0f98dc9f0.png\" alt=\"image\"></p>\n<br/>\n<h2 id=\"스키마타입schematype\"><a href=\"#%EC%8A%A4%ED%82%A4%EB%A7%88%ED%83%80%EC%9E%85schematype\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스키마/타입(schema/type)</h2>\n<p><strong>스키마</strong>란 서버 구현내에서 API를 정의하는데 사용되는 유형의 시스템입니다. 모든 기능은 스키마 내에서 정의됩니다.</p>\n<h3 id=\"오브젝트-타입과-필드\"><a href=\"#%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%ED%83%80%EC%9E%85%EA%B3%BC-%ED%95%84%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>오브젝트 타입과 필드</h3>\n<p>gql은 다음과 같이 작성합니다.</p>\n<pre class=\"language-js\"><code class=\"language-js\">type <span class=\"token maybe-class-name\">Charater</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token operator\">!</span>\n    item<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Episode</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>오브젝트 타입 : Character</li>\n<li>필드 : name, item</li>\n<li>스칼라 타입 : String, ID, Int ...</li>\n<li>느낌표(!) : 필수값을 의미</li>\n<li>대괄호([, ]) : 배열을 의미  </li>\n</ul>\n<br/>\n<h2 id=\"리졸버resolver\"><a href=\"#%EB%A6%AC%EC%A1%B8%EB%B2%84resolver\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>리졸버(resolver)</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/101355996-c68baa80-38da-11eb-93a1-e0238e95ed2a.png\" alt=\"image\"></p>\n<p><code class=\"language-text\">GraphQL 파이프라인</code>을 보면, GraphQL 쿼리는 파싱되어 <code class=\"language-text\">리졸버</code>로 들어가게 됩니다. 즉, <code class=\"language-text\">리졸버</code>는 GraphQL에서 실제로 데이터 처리를 담당하는 개념으로 이해하면 됩니다.</p>\n<br/>\n<h2 id=\"인트로스펙션introspection\"><a href=\"#%EC%9D%B8%ED%8A%B8%EB%A1%9C%EC%8A%A4%ED%8E%99%EC%85%98introspection\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인트로스펙션(introspection)</h2>\n<p>API를 만드는 경우에는 프론트와 백엔드가 협업하여 API 인터페이스를 작성하고 작업에 들어갑니다.</p>\n<p>그러나, <strong>GraphQL의 인트로스펙션 기능을 사용하면 현재 서버에 저장된 스키마를 실시간으로 확인할 수 있습니다.</strong> 이는 문서를 다로 만들 필요 없이 백엔드 개발자가 스키마를 정의해주면 프론트엔드 개발자는 실시간으로 확인해서 개발하면 됩니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>graphql에 대한 기본적인 내용을 정리했습니다. 정확한 개념을 잡는데 이해가 되었으면 좋겠습니다. 다음에는 이를 직접 사용해보면서 내용을 구체화 시키겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://tech.kakao.com/2019/08/01/graphql-basic/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tech.kakao.com/2019/08/01/graphql-basic/</a></li>\n<li><a href=\"https://www.redhat.com/ko/topics/api/what-is-graphql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.redhat.com/ko/topics/api/what-is-graphql</a></li>\n<li><a href=\"https://medium.com/@yeon22/graphql-graphql%EC%9D%B4%EB%9E%80-8468571ea96a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@yeon22/graphql-graphql%EC%9D%B4%EB%9E%80-8468571ea96a</a></li>\n<li><a href=\"https://simsimjae.medium.com/graphql%EA%B0%9C%EB%A1%A0-8d61b1952191\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://simsimjae.medium.com/graphql%EA%B0%9C%EB%A1%A0-8d61b1952191</a></li>\n</ul>\n"}}]}}},"context":{}}