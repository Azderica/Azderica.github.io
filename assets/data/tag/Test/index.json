{"hash":"c252e7650a6691103be74bcadb51dd243a8d98c2","data":{"tag":{"title":"Test","belongsTo":{"edges":[{"node":{"title":"[Spring] Mock 테스트와 Stub 테스트 차이","path":"/00-spring-test-mock-and-stub/","date":"25. February 2022","timeToRead":1,"description":"Mock 테스트와 Stub 테스트 차이를 서술합니다.","content":"<h1 id=\"mock-테스트-stub-테스트\"><a href=\"#mock-%ED%85%8C%EC%8A%A4%ED%8A%B8-stub-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mock 테스트, Stub 테스트</h1>\n"}},{"node":{"title":"[SpringBoot] SpringBoot JUnit4를 JUnit5으로 바꾸기","path":"/00-springboot-junit/","date":"11. August 2021","timeToRead":5,"description":" SpringBoot JUnit에 대해 좀 더 정리하고, JUnit4에서 JUnit5으로 수정하는 방법에 대해 서술합니다.","content":"<h1 id=\"springboot-junit4를-junit5으로-바꾸기\"><a href=\"#springboot-junit4%EB%A5%BC-junit5%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpringBoot JUnit4를 JUnit5으로 바꾸기.</h1>\n<p>기존에 JUnit에 대해 글을 작성을 했는데, 해당 글은 JUnit4 기준으로 작성을 했었고 현재는 대부분의 테스트 코드를 JUnit5를 쓰는 것이 좋습니다.</p>\n<p>이에 따라 어떤식으로 테스트를 고치는 지에 대해 작성합니다.</p>\n<h2 id=\"junit5-특징\"><a href=\"#junit5-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit5 특징</h2>\n<p><code class=\"language-text\">JUnit5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/129037234-991b10d3-9fdd-4205-b2e0-824abcdcb2b8.png\" alt=\"JUnit\"></p>\n<p>기존 JUnit4는 단일 jar이였으나 JUnit5는 JUnit Platform, JUnit Jupiter, JUnit Vintage 모듈 세가지로 구성됩니다.</p>\n<h3 id=\"junit-platform\"><a href=\"#junit-platform\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit Platform</h3>\n<ul>\n<li>JVM에서 동작하는 테스트 프레임워크입니다.</li>\n<li>테스트를 발견하고 계획을 생성하고 결과를 보고하는 TestEngine 인터페이스를 정의합니다.</li>\n</ul>\n<h3 id=\"junit-jupiter\"><a href=\"#junit-jupiter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit Jupiter</h3>\n<ul>\n<li>JUnit5 TestEngine의 실제 구현체입니다.</li>\n<li>JUnit5 기반의 테스트를 실행시키기 위한 TestEngine을 Platform에 제공합니다.</li>\n</ul>\n<h3 id=\"junit-vintage\"><a href=\"#junit-vintage\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit Vintage</h3>\n<ul>\n<li>TestEngine에서 JUnit3, JUnit4 기반 테스트를 실행하기 위한 기능을 제공합니다.</li>\n<li><strong>아래에서는 이를 줄이는 방법으로 서술합니다.</strong></li>\n</ul>\n<br/>\n<h2 id=\"junit5-변경시-어노테이션-변경\"><a href=\"#junit5-%EB%B3%80%EA%B2%BD%EC%8B%9C-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EB%B3%80%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit5 변경시, 어노테이션 변경</h2>\n<p>대표적인 예시로 JUnit4에서 자주 쓰는 어노테이션을 아래에 예시로 둡니다. (개인적으로 많이 쓰는 내용)</p>\n<h3 id=\"test---test\"><a href=\"#test---test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Test</code> -> <code class=\"language-text\">@Test</code></h3>\n<ul>\n<li>해당 어노테이션을 달아둔 메서드가 테스트 메서드임을 나타냅니다.</li>\n<li>\n<p>어노테이션의 이름은 변경되지 않았으나 경로가 변경되었습니다.</p>\n<ul>\n<li>JUnit4 : <code class=\"language-text\">org.junit.Test</code></li>\n<li>JUnit5 : <code class=\"language-text\">org.junit.jupiter.api.Test</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"before---beforeeach\"><a href=\"#before---beforeeach\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Before</code> -> <code class=\"language-text\">@BeforeEach</code></h3>\n<ul>\n<li>각각의 <code class=\"language-text\">@Test</code>, <code class=\"language-text\">@RepeatTest</code>, <code class=\"language-text\">@ParameterizedTest</code>,<code class=\"language-text\">@TestFactory</code> 전에 실행됩니다.</li>\n</ul>\n<h3 id=\"after---aftereach\"><a href=\"#after---aftereach\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@After</code> -> <code class=\"language-text\">@AfterEach</code></h3>\n<ul>\n<li>각각의 <code class=\"language-text\">@Test</code>, <code class=\"language-text\">@RepeatTest</code>, <code class=\"language-text\">@ParameterizedTest</code>, <code class=\"language-text\">@TestFactory</code> 후에 실행됩니다.</li>\n</ul>\n<h3 id=\"beforeclass---beforeall\"><a href=\"#beforeclass---beforeall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@BeforeClass</code> -> <code class=\"language-text\">@BeforeAll</code></h3>\n<ul>\n<li>모든 <code class=\"language-text\">@Test</code>, <code class=\"language-text\">@RepeatTest</code>, <code class=\"language-text\">@ParameterizedTest</code>,<code class=\"language-text\">@TestFactory</code> 전에 실행됩니다.</li>\n<li>\n<p>해당 어노테이션을 사용하기 위해서는 라이프사이클을 꼭 설정해주어야합니다.</p>\n<ul>\n<li><code class=\"language-text\">@TestInstance(LifeCycle.PER_CLASS)</code></li>\n<li><code class=\"language-text\">@TestInstance(LifeCycle.PER_METHOD)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"afterclass---afterall\"><a href=\"#afterclass---afterall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@AfterClass</code> -> <code class=\"language-text\">@AfterAll</code></h3>\n<ul>\n<li>모든 <code class=\"language-text\">@Test</code>, <code class=\"language-text\">@RepeatTest</code>, <code class=\"language-text\">@ParameterizedTest</code>,<code class=\"language-text\">@TestFactory</code> 후에 실행됩니다.</li>\n<li>\n<p>해당 어노테이션을 사용하기 위해서는 라이프사이클을 꼭 설정해주어야합니다.</p>\n<ul>\n<li><code class=\"language-text\">@TestInstance(LifeCycle.PER_CLASS)</code></li>\n<li><code class=\"language-text\">@TestInstance(LifeCycle.PER_METHOD)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"runwith---extendwith\"><a href=\"#runwith---extendwith\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@RunWith</code> -> <code class=\"language-text\">@ExtendWith</code></h3>\n<ul>\n<li>확정을 선언적으로 등록하는데 사용합니다. ExtendWith 뒤에 확장할 Extension을 추가해서 사용합니다.</li>\n</ul>\n<p>대표적으로 다음과 같이 코드를 구성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// before</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoJUnitRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"ignore---disabled\"><a href=\"#ignore---disabled\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Ignore</code> -> <code class=\"language-text\">@Disabled</code></h3>\n<ul>\n<li>테스트 클래스 또는 테스트 메서드를 비활성화 하는데 사용합니다.</li>\n<li>\n<p>특히, <strong>JUnit4와 JUnit5를 혼용해서 사용하면 적용이 안됩니다.</strong></p>\n<ul>\n<li><code class=\"language-text\">org.junit.Test</code> 와 <code class=\"language-text\">@Disabled</code>를 쓰거나 혹은 <code class=\"language-text\">org.junit.jupiter.api.Test</code>와 <code class=\"language-text\">@Ignore</code>을 같이 사용하면 안됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"x---displayname\"><a href=\"#x---displayname\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>x -> <code class=\"language-text\">@DisplayName</code></h3>\n<ul>\n<li>테스트 클래스 또는 테스트 메서드에 대한 사용자 지정 표시 이름을 정해줄 때 씁니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이 테스트는 이제 제겁니다.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token function\">testService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 코드를 구성하고 테스트를 돌리면 DisplayName으로 테스트가 돌아간게 보이게 됩니다.</p>\n<br/>\n<h2 id=\"rule의-삭제와-그에-따른-junit5\"><a href=\"#rule%EC%9D%98-%EC%82%AD%EC%A0%9C%EC%99%80-%EA%B7%B8%EC%97%90-%EB%94%B0%EB%A5%B8-junit5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rule의 삭제와 그에 따른 JUnit5</h2>\n<p>사실 오늘의 핵심 중 하나로, JUnit4 테스트를 JUnit5로 고치다보면 앞에 있던 부분은 쉽게 고칠 수 있으나 <code class=\"language-text\">@Rule</code>이라는 어노테이션이 없어져서 고민인 경우가 있습니다. <code class=\"language-text\">@ExtendWith</code>으로 수정이 되었으나, 아마 체감이 되는 이야기가 아닐 것이라 이를 어떻게 수정하면 좋을 지 공유합니다.</p>\n<p>해당 코드는 일부 각색한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoJUnitRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">UtilsTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Rule</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExpectedException</span> expectedException <span class=\"token operator\">=</span> <span class=\"token class-name\">ExpectedException</span><span class=\"token punctuation\">.</span><span class=\"token function\">none</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Mock</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Utils</span> utils<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Before</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n\n    utils <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 정상적테스트<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">String</span> parameter <span class=\"token operator\">=</span> <span class=\"token string\">\"normal\"</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> 실패한테스트<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    expectedException<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DomainException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    expectedException<span class=\"token punctuation\">.</span><span class=\"token function\">expectMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패한 파라미터 값입니다.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">String</span> parameter <span class=\"token operator\">=</span> <span class=\"token string\">\"fail\"</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음의 코드를 JUnit5로 수정하면 다음과 같이 고칠 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">UtilsTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Mock</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Utils</span> utils<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Before</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n\n    utils <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Utils</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"정상적 테스트\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">isNormalResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">String</span> parameter <span class=\"token operator\">=</span> <span class=\"token string\">\"normal\"</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패한 테스트\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">isFailResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Throwable</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// given</span>\n      <span class=\"token class-name\">String</span> parameter <span class=\"token operator\">=</span> <span class=\"token string\">\"fail\"</span>\n\n      <span class=\"token comment\">// when</span>\n      <span class=\"token class-name\">Result</span> result <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DomainException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패한 파라미터 값입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 <code class=\"language-text\">@Rule</code> 을 제거하고 JUnit5로 수정할 수 있습니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>해당 코드는 제가 임의로 작성한 부분이고, 좀 더 좋은 방법이 있을 수 있습니다. 참고 정도로만 하시면 좋을 것 같습니다. 잘못된 부분이 있으면 커멘트 주세요.</p>\n<ul>\n<li><a href=\"https://hirlawldo.tistory.com/39\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JUnit5 테스트코드 작성하기</a></li>\n<li><a href=\"https://jade314.tistory.com/entry/Junit-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JUnit5 (JUnit4와 비교)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/51012335/how-to-replace-rule-annotation-in-junit-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to replace rule annotation in junit 5</a></li>\n</ul>\n"}},{"node":{"title":"[SpringBoot] SpringBoot 테스트 코드 작성하기","path":"/01-springboot-test/","date":"26. October 2020","timeToRead":7,"description":" SpringBoot Test에 대한 코드입니다. ","content":"<h1 id=\"springboot-테스트-코드\"><a href=\"#springboot-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpringBoot 테스트 코드</h1>\n<p>대학교 시절, 프론트 위주 개발을 하다가 스프링 개발을 하다보니 가장 어려웠던 점은 테스트 코드를 작성하는 부분이였다.</p>\n<p>테스트 코드를 작성할 때, 여러 어노테이션이 등장하고 이 부분에 대한 개념도 없다는 것을 느끼고 있다. (다음 게시물은 아마 스프링 어노테이션에 대해서 작성할 예정이다.)</p>\n<p>간략하게라도 글을 통해 정리하고, 이후 점차 추가해가는 방향으로 진행해야겠다.</p>\n<br/>\n<h2 id=\"junit\"><a href=\"#junit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit</h2>\n<h3 id=\"junit의-특징\"><a href=\"#junit%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Junit의 특징.</h3>\n<ul>\n<li>JUnit은 자바용 단위 테스트 작성을 위한 표준 프레임워크다.</li>\n<li>xUnit이라는 단위 테스트 프레임워크의 자바 구현물이다.</li>\n<li>테스트 도구이며 외부 테스트 프로그램을 작성해 할 필요 없이 이를 관리해줄 수 있따.</li>\n<li>하나의 jar파일로 되어 있으며 사용법 또한 간단하다</li>\n<li>테스트 결과를 확인하는 것 뿐만 아니라 최적화된 코드를 유추하는 기능도 있어서 성능향상을 기대할 수 있따.</li>\n<li>Test 클래스를 통해 다른 개발자에게 테스트 방법과 클래스 히스토리를 알려줄 수 있다.</li>\n</ul>\n<h3 id=\"junit에서-테스트를-지원하는-어노테이션annotation\"><a href=\"#junit%EC%97%90%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit에서 테스트를 지원하는 어노테이션(Annotation)</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">@Test</code></p>\n<ul>\n<li>@Test 가 선언된 메서드는 테스트를 수행하는 메소드가 된다.</li>\n<li>JUnit은 각각의 테스트가 서로 영향을 주지 않고, 독립적으로 실행됨을 원칙으로 하며, @Test마다 객체를 생성한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Ignore</code></p>\n<ul>\n<li>@Ignore가 선언된 메서드는 테스트를 실행하지 않는다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Before</code></p>\n<ul>\n<li>@Before가 선언된 메서드는 @Test 메서드가 실행되기 전에 반드시 실행된다.</li>\n<li>@Test메서드에서 공통으로 사용하는 코드를 @Before 메서드에 선언하여 사용하면 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@After</code></p>\n<ul>\n<li>@After가 선언된 메서드는 @Test 메서드가 실행된 후 실행된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@BeforeClass</code></p>\n<ul>\n<li>@BeforeClass 어노테이션은 @Test 메서드보다 먼저 한번만 수행되어야 할 경우에 사용된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@AfterClass</code></p>\n<ul>\n<li>@AfterClass 어노테이션은 @Test 메서드보다 나중에 한번만 수행되어야 할 경우에 사용된다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>JUnit4와 Junit5는 테스트 어노테이션이 서로 다르다.</p>\n<p>: 해당글 참고 예정 : <a href=\"https://pureainu.tistory.com/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pureainu.tistory.com/190</a></p>\n</blockquote>\n<h3 id=\"자주-사용하는-junit-메서드\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-junit-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자주 사용하는 JUnit 메서드</h3>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>assertEquals(a,b)</strong></td>\n<td>객체 a, b의 값이 일치하는 지 확인</td>\n</tr>\n<tr>\n<td>assertArrayEquals(a,b)</td>\n<td>배열 a, b의 값이 일치하는 지 확인</td>\n</tr>\n<tr>\n<td>assertSame(a,b)</td>\n<td>객체 a, b가 같은 객체인지를 확인 <br/> 두 객체의 레퍼런스가 동일한지 확인</td>\n</tr>\n<tr>\n<td>assertTrue(a)</td>\n<td>조건 a가 참인가를 확인</td>\n</tr>\n<tr>\n<td><strong>assertNotNull(a)</strong></td>\n<td>객체 a가 null이 아님을 확인</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"springt-test-어노테이션\"><a href=\"#springt-test-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springt-Test 어노테이션</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">@RunWith(SpringJUnit4ClassRunner.class)</code></p>\n<ul>\n<li>@RunWith 어노테이션을 사용함으로써, JUnit에 내장된 러너를 사용하는 대신 어노테이션에 정의된 러너 클래스를 사용</li>\n<li>JUnit 프레임워크의 테스트 실행방법을 확장할 때 사용하는 어노테이션이다.</li>\n<li>@RunWith를 사용하기 위해선 JUnit 실행에 필요한 SpringJUnit4ClassRunner 클래스를 상속받은 @RunWith(SpringRunner.class)를 꼭 붙여서 사용해야 한다.</li>\n<li>@RunWith 어노테이션은 각각의 테스트 별로 객체가 생성되더라도 싱글톤(Singletone)의 ApplicationContext를 보장한다.</li>\n<li>@RunWith 어노테이션은 JUnit4에서 주로 사용하는 것으로 알고 있고, JUnit5의 경우에는 @ExtendWith를 사용한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@ContextConfiguration</code></p>\n<ul>\n<li>스프링 빈(Bean) 설정 파일의 위치를 지정할 때 사용하는 어노테이션이다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Autowired</code></p>\n<ul>\n<li>스프링 DI에서 사용하는 어노테이션이다.</li>\n<li>해당 변수에 자동으로 빈(Bean)을 매핑해준다.</li>\n<li>스프링 빈(Bean) 설정 파일을 읽기 위해 GenericXmlApplicatoinContext를 사용할 필요가 없다</li>\n<li>변수, setter 메서드, 생성자, 일반 메서드에 적용 가능하다.</li>\n<li>의존하는 객체를 주입할 때는 주로 Type을 사용한다.</li>\n<li><property>, <constructer-arg> 태그와 동일한 역할을 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@SpringBootTest</code></p>\n<ul>\n<li>통합 테스트를 제공하는 기본적인 스프링 부트 테스트 어노테이션이다.</li>\n<li>여러 단위의 테스트를 하나의 통합된 테스트로 수행할 때 적합한 어노테이션이다.</li>\n<li>만능 테스트 어노테이션으로 하고 싶은 모든 테스트를 수행할 수 있다.</li>\n<li>애플리케이션에 설정된 빈을 모두 로드하기 때문에 규모가 클 수록 느려지는 단점이 있다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@WebMvcTest</code></p>\n<ul>\n<li>MVC를 위한 테스트 어노테이션이다.</li>\n<li>웹에서 테스트하기 힘든 Controller를 테스트하는 데 적합하고 웹 상의 요청 또는 응답에 대해 테스트할 수 있다.</li>\n<li>@WebMvcTest를 사용하면 MVC 관련 설정인 어노테이션만 불러오기 때문에 @SpringBootTest보다 가벼운 테스트가 가능</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@DataJpaTest</code></p>\n<ul>\n<li>JPA 관련 테스트 설정만 로드하는 어노테이션이다.</li>\n<li>데이터 소스의 설정이 정상적인지 JPA를 사용하여 데이터를 제대로 CRUD 하는지 테스트가 가능하다.</li>\n<li>@Entity 어노테이션을 스캔하여 Spring Data JPA 저장소를 구성한다.</li>\n<li>실제 데이터 베이스 공간을 사용하지 않고, 내장형 데이터 베이스 공간을 사용하여 테스트하기 때문에 JPA 테스트 이후 실제 데이터 베이스가 변경 되었는지 걱정할 필요가 없다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@RestClientTest</code></p>\n<ul>\n<li>REST 관련 테스트를 도와주는 어노테이션이다.</li>\n<li>REST 통신의 데이터 형식으로 주로 사용되는 JSON 형식에 대해서 제대로 응답을 반환하는지 등을 테스트 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Json Test</code></p>\n<ul>\n<li>JSON 테스트를 지원하는 어노테이션이다.</li>\n<li>@JsonTest 어노테이션은 JSON의 직렬화와 역직렬화를 수행하는 라이브러리인 Gson과 Jackson API 테스트를 제공한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>다음과 같이 스프링 테스트에서 사용하는 어노테이션에 대해서 간단하게 정리하였다.</p>\n<p>이후에는 mock과 mockito에 대해서 작성해보아야 겠다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://donghun.dev/Spring-Boot-Test-Keywrod-one\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://donghun.dev/Spring-Boot-Test-Keywrod-one</a></li>\n<li><a href=\"https://epthffh.tistory.com/entry/Junit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84%ED%85%8C%EC%8A%A4%ED%8A%B8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://epthffh.tistory.com/entry/Junit을-이용한-단위테스트</a></li>\n<li><a href=\"https://shlee0882.tistory.com/202\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shlee0882.tistory.com/202</a></li>\n<li><a href=\"https://pureainu.tistory.com/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pureainu.tistory.com/190</a></li>\n</ul>\n"}}]}}},"context":{}}