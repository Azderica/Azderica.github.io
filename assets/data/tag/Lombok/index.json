{"hash":"2858839cb272bd8e3f388ae3dd5d59774a4a3863","data":{"tag":{"title":"Lombok","belongsTo":{"edges":[{"node":{"title":"[Spring] 자주 사용하는 Lombok 어노테이션","path":"/00-spring-lombok/","date":"18. July 2021","timeToRead":4,"description":"자주 사용하는 Lombok 어노테이션에 대해 정리합니다.","content":"<h1 id=\"자주-사용하는-lombok-어노테이션\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-lombok-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자주 사용하는 Lombok 어노테이션</h1>\n<p>자주 사용하는 Lombok 어노테이션에 대해 정리합니다.</p>\n<h2 id=\"접근자설정자-자동-생성\"><a href=\"#%EC%A0%91%EA%B7%BC%EC%9E%90%EC%84%A4%EC%A0%95%EC%9E%90-%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>접근자/설정자 자동 생성</h2>\n<ul>\n<li><code class=\"language-text\">@Getter</code></li>\n<li><code class=\"language-text\">@Setter</code></li>\n</ul>\n<p>다음과 같이 코드를 예시로 들 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span> <span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> itemId<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> itemName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">@Getter</code>과 <code class=\"language-text\">@Setter</code> 모두 클래스나 메서드에서 사용할 수 있으며, 이를 통해서 여러 경우에 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Item</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set</span>\nitem<span class=\"token punctuation\">.</span><span class=\"token function\">setItemId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nitem<span class=\"token punctuation\">.</span><span class=\"token function\">setItemName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// get</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getItemId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// output : 1</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getItemName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output : Item</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"생성자-자동-생성\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성자 자동 생성</h2>\n<p>Lombok 어노테이션을 통해서 생성자를 자동으로 생성할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">@NoArgsConstructor</code> : 파라미터가 없는 기본 생성자</li>\n<li><code class=\"language-text\">@AllArgsConstructor</code> : 모든 필드 값을 파라미터로 받는 생성자</li>\n<li><code class=\"language-text\">@RequiredArgsConstructor</code> : <code class=\"language-text\">final</code>, <code class=\"language-text\">@NonNull</code>인 필드 값만 파라미터로 받는 생성자</li>\n</ul>\n<p>다음과 같이 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@NonNull</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token annotation punctuation\">@NonNull</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 여러 생성자로 생성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// NoArgsConstructor</span>\n<span class=\"token class-name\">Member</span> member1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// AllArgsConstructor</span>\n<span class=\"token class-name\">Member</span> member2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// RequiredArgsConstructor</span>\n<span class=\"token class-name\">Member</span> member3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B@naver.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"tostring-어노테이션\"><a href=\"#tostring-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ToString 어노테이션</h2>\n<ul>\n<li><code class=\"language-text\">@ToString</code></li>\n</ul>\n<p><code class=\"language-text\">@ToString</code> 어노테이션 클래스에 붙여주면 자동으로 생성해줍니다. 이와 추가적으로 <code class=\"language-text\">exclude</code> 속성을 사용하면, 특정 필드를 <code class=\"language-text\">toString()</code>에서 결과를 제거할 수 있습니다.</p>\n<p>이를 다음과 같이 생성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@ToString</span><span class=\"token punctuation\">(</span>exclude <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test@naver.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output : Member(name=test, email=test@naver.com)</span></code></pre>\n<p>다만, 멤버 변수 중 객체 타입이 존재하고 순환 참조가 있다면 무한 루프가 발생합니다. 이 경우에도 꼭 <code class=\"language-text\">exclude</code>를 사용하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"equalsandhashcode-어노테이션\"><a href=\"#equalsandhashcode-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EqualsAndHashCode 어노테이션</h2>\n<p>자바 빈을 만들때 사용하는 <code class=\"language-text\">equals</code>와 <code class=\"language-text\">hashCode</code> 메서드를 자주 오버라이딩하는데, <code class=\"language-text\">@EqualsAndHashCode</code> 어노테이션을 사용하면 자동으로 이 메서드를 생성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@EqualsAndHashCode</span><span class=\"token punctuation\">(</span>callSuper <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">callSuper</code> 속성을 통해서 <code class=\"language-text\">equals</code>와 <code class=\"language-text\">hashCode</code> 메소드 자동 생성 시 부모 클래스의 필드까지 감안할 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Member</span> member1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmember1<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmember1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmember1<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A@naver.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Member</span> member2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmember2<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmember2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmember2<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A@naver.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmember1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>member2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// callSuper = true, false</span>\n<span class=\"token comment\">// callSuper = false, true</span></code></pre>\n<br/>\n<h2 id=\"data\"><a href=\"#data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data</h2>\n<p><code class=\"language-text\">@ToString</code>, <code class=\"language-text\">@EqualsAndHashCode</code>, <code class=\"language-text\">@Getter</code>, <code class=\"language-text\">@Setter</code>, <code class=\"language-text\">@RequiredArgsConstructor</code> 를 합친 어노테이션입니다.</p>\n<p>다만 <code class=\"language-text\">JPA</code>와 같은 <code class=\"language-text\">ORM</code>을 사용한다면 조심하게 사용해야합니다. 위에서 <code class=\"language-text\">@ToString</code>과 마찬가지로 순환참조가 발생하는 경우, 문제가 발생합니다. 이 경우에는 <code class=\"language-text\">exclude</code>를 사용할 수 없기 때문에 코드가 길어져도 <code class=\"language-text\">@Data</code> 어노테이션을 피하는 것이 좋습니다.</p>\n<br>\n<h2 id=\"그-외에도\"><a href=\"#%EA%B7%B8-%EC%99%B8%EC%97%90%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그 외에도.</h2>\n<ul>\n<li><code class=\"language-text\">@Value</code> : 불변 클래스를 생성할 때 사용합니다.</li>\n<li><code class=\"language-text\">@Builder</code> : 빌더 패턴을 사용할 수 있도록 코드를 생성합니다.</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://projectlombok.org/features/all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lombok Document</a></li>\n<li><a href=\"https://www.daleseo.com/lombok-popular-annotations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자주 사용되는 Lombok 어노테이션</a></li>\n<li><a href=\"https://gardeny.tistory.com/4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lombok 자주 쓰는 어노테이션 정리</a></li>\n<li><a href=\"https://velog.io/@jayjay28/%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-Lombok-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자주 사용하는 Lombok 어노테이션</a></li>\n</ul>\n"}}]}}},"context":{}}