{"hash":"62db5db29df89ca374fafd271e74d0cbf6feeaea","data":{"tag":{"title":"NoSql","belongsTo":{"edges":[{"node":{"title":"[Database] Couchbase XDCR","path":"/00-db-couchbase-xdcr/","date":"2. April 2021","timeToRead":4,"description":"Couchbase XDCR에 대해 정리합니다.","content":"<h1 id=\"couchbase-xdcr\"><a href=\"#couchbase-xdcr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Couchbase XDCR</h1>\n<p>최근 진행해야하는 작업 중 하나가, 기존 Couchbase 서버가 있는 데이터 센터에서 서버 부하 해결 및 안정성을 위해 다른 데이터 센터에 데이터를 복제를 해야할 필요성이 존재합니다.</p>\n<p>회사에서 작업하는 주 목적은 데이터 서버에 있는 Couchbase 서버가 모두 죽었을 때, 정상적으로 작동하도록 구성하는 것이 목표입니다.</p>\n<p>이를 위해서 Cross Data Center Replication (약어, XDCR)에 대해 정리합니다.</p>\n<br/>\n<h2 id=\"xdcr이란\"><a href=\"#xdcr%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XDCR이란.</h2>\n<p>XDCR(Cross Data Center Replication)은 클러스터 간의 데이터를 복제하며, 데이터 센터 장애에 대한 보호 기능과 고성능 데이터 액세스 기능을 제공합니다.</p>\n<p>XDCR은 source 클러스터의 특정 버킷에서 대상 클러스터의 특정 버킷으로 데이터를 복제합니다. XDCR agent를 통해 Database Change Protocol을 사용하여 버킷에서 다른 타켓 버킷으로 데이터를 넘길 수 있습니다.</p>\n<br/>\n<h2 id=\"xdcr과-클러스터-내부-복제와의-차이\"><a href=\"#xdcr%EA%B3%BC-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%82%B4%EB%B6%80-%EB%B3%B5%EC%A0%9C%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XDCR과 클러스터 내부 복제와의 차이</h2>\n<ul>\n<li>클러스터 내부 복제의 경우, 클로스터 노드 전체에 데이터를 복제하나 XDCR의 경우 다른 데이터센터에 있는 여러 클러스터에 데이터를 복제합니다.</li>\n<li>클러스터 내부 복제의 경우, 단일 버킷에 대해 수행되지만 XDCR은 복제를 위해 두 개의 버킷이 필요합니다. (하나는 복제 데이터 제공 소스 클러스터 버킷, 다른 하나는 수신 받을 대상의 클러스터)</li>\n<li>클러스터 내 복제는 버킷 생성에서 구성되지만, XDCR은 소스 버킷과 대상 버킷을 모두 생성 후에 구성됩니다.</li>\n</ul>\n<blockquote>\n<p>클러스터(cluster)</p>\n</blockquote>\n<p>여러 대의 컴퓨터들이 연결되어 하나의 시스템처럼 동작하는 컴퓨터들의 집합, 해당 위에서는 서버들의 집합</p>\n<blockquote>\n<p>버킷(bucket)</p>\n</blockquote>\n<p>일반적으로 데이터가 영역으로 분할되는 document 유형입니다.</p>\n<br/>\n<h2 id=\"xdcr-절차\"><a href=\"#xdcr-%EC%A0%88%EC%B0%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XDCR 절차</h2>\n<p>사전 작업</p>\n<ul>\n<li>\n<p>XDCR의 대상이 될 원격 클러스터에 대한 References를 정의합니다.</p>\n<ul>\n<li><a href=\"https://docs.couchbase.com/server/current/manage/manage-xdcr/create-xdcr-reference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Document</a></li>\n</ul>\n</li>\n<li>\n<p>소스 버킷에서 지장된 대상 버킷으로 변경내용을 전송하는 복제를 정의하고 시작합니다.</p>\n<ul>\n<li><a href=\"https://docs.couchbase.com/server/current/learn/clusters-and-availability/xdcr-overview.html#manage:manage-xdcr/create-xdcr-replication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Document</a></li>\n</ul>\n</li>\n<li>복제를 모니터링합니다.</li>\n</ul>\n<p>다음의 옵션을 사용할 수 있습니다.</p>\n<ul>\n<li>Couchbase Web Console</li>\n<li>CLI</li>\n<li>REST API(Web Console, CLI)</li>\n</ul>\n<br/>\n<h2 id=\"xdcr-direction-topology\"><a href=\"#xdcr-direction-topology\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XDCR Direction, Topology</h2>\n<p>크게 전략은 단방향(Unidirectionally)와 양방향(Bidirectionally)로 구성됩니다.</p>\n<p>향후 진행할 작업은 양방향 XDCR을 구성할 방향이다.</p>\n<h3 id=\"unidirectionally\"><a href=\"#unidirectionally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unidirectionally</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113409137-a2089080-93eb-11eb-9fdc-15f325939633.png\" alt=\"Unidirectionally\"></p>\n<p>지정된 소스 버킷에 포함된 데이터가 지정된 대상 버킷에 복제되며, 일반적으로 <strong>백업 용도로 사용</strong>됩니다.</p>\n<h3 id=\"bidirectionally\"><a href=\"#bidirectionally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bidirectionally</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113409142-a5038100-93eb-11eb-8e01-c23ce981dfd5.png\" alt=\"Bidirectionally\"></p>\n<p>지정된 소스 버킷에 포함된 데이터는 대상 버킷에 복제되고, 반대의 방향의 경우에도 적용됩니다. 해당 두 버킷을 모두 데이터 서비스용으로 사용할 수 있으며, <strong>사용자에 좀 더 빠른 데이터 액세스를 제공</strong>할 수 있습니다.</p>\n<p>이러한 양방향 XDCR은 두 데이터 센터 이상으로도 작업할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113409371-1d6a4200-93ec-11eb-8ff6-0a2205b62be6.png\" alt=\"image\"></p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>간략하게, XDCR에 대해 작성했습니다. 향후, 해당 작업 완료 후 추가적인 게시글을 작성할 예정입니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.couchbase.com/server/current/learn/clusters-and-availability/xdcr-overview.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Couchbase XDCR Doc</a></li>\n</ul>\n"}},{"node":{"title":"[Database] NoSQL 데이터베이스 정리","path":"/00-db-nosql/","date":"1. April 2021","timeToRead":8,"description":"Nosql에 대해 소개하고 특징에 대해 정리합니다.","content":"<h1 id=\"nosql\"><a href=\"#nosql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NoSQL</h1>\n<p>해당 게시글은 NoSQL에 대한 내용을 간략하게 정리하고, 여러가지 NoSQL Database를 특징별로 정리합니다.</p>\n<br/>\n<h2 id=\"rdb와의-차이\"><a href=\"#rdb%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RDB와의 차이</h2>\n<p>대부분 RDB와 NoSQL의 차이를 인지하고 있는데 이를 표로 간략하게 정리하면 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>RDB</th>\n<th>NoSQL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>데이터모델</td>\n<td>고정 행과 열이 있는 테이블</td>\n<td>document-Json, key value, ...</td>\n</tr>\n<tr>\n<td>예시</td>\n<td>Oracle, MySQL, MSSQL, PostgreSQL</td>\n<td>MongoDB, Redis, Hbase, Neo4j</td>\n</tr>\n<tr>\n<td>목적</td>\n<td>범용</td>\n<td>범용, 대량의 데이터 추출, 관계 분석, 탐색 등</td>\n</tr>\n<tr>\n<td>스키마</td>\n<td>엄격</td>\n<td>유연</td>\n</tr>\n<tr>\n<td>확장성</td>\n<td>수직</td>\n<td>수형성</td>\n</tr>\n<tr>\n<td>ACID 트랜잭션</td>\n<td>지원</td>\n<td>대부분 지원하지 않음</td>\n</tr>\n<tr>\n<td>ORM</td>\n<td>ORM 필요</td>\n<td>대부분 ORM이 필요없음</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"nosql의-장단점\"><a href=\"#nosql%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NoSQL의 장단점</h2>\n<h3 id=\"nosql의-장점\"><a href=\"#nosql%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NoSQL의 장점</h3>\n<p>NoSQL은 다음의 장점을 가집니다.</p>\n<ul>\n<li>\n<p>유연한 데이터 모델</p>\n<ul>\n<li>유연한 스키마를 가지므로, 요구 사항이 변경되었을 때 데이터베이스를 쉽게 변경할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>수평적 확장</p>\n<ul>\n<li>일반적으로 RDB의 경우에는 용량 초과시 <strong>수직적 확장</strong>(크고 비싼 서버)가 필요하지만, NoSQL의 경우는 수평적 확장이 가능합니다. (제한은 존재함)</li>\n</ul>\n</li>\n<li>\n<p>빠른 쿼리</p>\n<ul>\n<li>일반적으로 RDB의 경우, 여러 테이블을 Join해서 쿼리를 사용하지만, NoSQL의 경우는 쿼리에 최적화되어 저장합니다.</li>\n</ul>\n</li>\n<li>\n<p>개발자에 친화적</p>\n<ul>\n<li>NoSQL은 데이터 구조를 일반적인 프로그래밍 언어의 데이터 구조에 매핑합니다.</li>\n<li>적은 코드를 작성하면서, 개발 시간을 단축하고 버그를 줄일 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nosql의-단점\"><a href=\"#nosql%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NoSQL의 단점</h3>\n<p>NoSQL에서 이야기되는 가장 큰 단점으로는 ACID 트랜잭션을 지원하지 않는 것입니다. 물론 적절한 스키마 디자인을 제공하면 단일 레코드의 원자화는 가능합니다.</p>\n<blockquote>\n<p>ACID</p>\n</blockquote>\n<ul>\n<li>A : atomicity, 원자성</li>\n<li>C : consistency, 일관성</li>\n<li>I : isolation, 고립성</li>\n<li>D : durability, 지속성</li>\n</ul>\n<br/>\n<h2 id=\"nosql-데이터베이스-별-특징\"><a href=\"#nosql-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%B3%84-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NoSQL 데이터베이스 별 특징</h2>\n<p>NoSQL 데이터베이스의 특성을 크게 다음과 같이 4가지로 나눌 수 있습니다.</p>\n<ul>\n<li>Key-Value Database</li>\n<li>Document Database</li>\n<li>Column Family Database</li>\n<li>Graph Database</li>\n</ul>\n<h3 id=\"key-value-database\"><a href=\"#key-value-database\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Key-Value Database</h3>\n<p>Key와 Value로 이루어졌으며, <strong>저장과 조회</strong>이란 원칙에 가장 충실합니다.</p>\n<p>Key-Value Database는 다음의 특징을 가집니다.</p>\n<ul>\n<li>Key 값은 unique한 고유값으로 유지되어야합니다.</li>\n<li>테이블간 join을 고려하지 않으므로 RDB의 외부키 등이 필요없습니다.</li>\n<li>Value에 모든 데이터 타입을 허용하며 이에 따라 검증 로직을 잘 구성하는 것이 중요합니다.</li>\n</ul>\n<p>Key-Value Database는 다음과 같은 종류들이 있습니다.</p>\n<ul>\n<li><strong>Redis</strong></li>\n<li><strong>AWS DynamoDB</strong></li>\n<li>Oracle Berkely</li>\n<li>Riak</li>\n</ul>\n<p>Key-Value Database는 일반적으로 아래의 경우에서 많이 사용합니다.</p>\n<ul>\n<li><strong>성능 향상을 위해 데이터베이스 데이터 캐싱</strong></li>\n<li>웰 어플리케이션에서 일시적인 속성 추적</li>\n<li>\n<p>모바일 애플리케이션용 사용자 데이터 정보와 구성 정보 저장</p>\n<ul>\n<li>다만 개인정보 등은 NoSQL에 저장하는 것은 지양해야함.</li>\n</ul>\n</li>\n<li>\n<p>이미지나 오디오 파일 같은 대용량 객체 저장</p>\n<ul>\n<li>일반적으로 NAS를 사용하기는 함.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"document-database\"><a href=\"#document-database\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Document Database</h3>\n<p>Key-Value Database와 마찬가지로 데이터 저장시에는 Key-Value Type을 사용하지만, 가장 큰 차이는 <strong>Document 타입으로 저장</strong>됩니다. (Ex. JSON, XML)</p>\n<p>Document Database는 다음의 특징을 가집니다.</p>\n<ul>\n<li>값을 문서(semi-structured entity)로 저장합니다. (일반적으로 JSON, XML)</li>\n<li>값을 저장하기 전에 schema를 별도로 정의하지 않으며, document가 schema가 됩니다.</li>\n<li>\n<p>각 문서별로 다른 필드를 가질 수 있기 때문에 개발자는 입력시 <strong>컬럼과 필드에 대한 관리</strong>를 제대로 해야합니다.</p>\n<ul>\n<li>필도 속성에 대한 관리가 필요합니다.</li>\n</ul>\n</li>\n</ul>\n<p>Document Database는 다음과 같은 종류가 있습니다.</p>\n<ul>\n<li><strong>MongoDB</strong></li>\n<li>CouchDB</li>\n<li>Couchbase</li>\n</ul>\n<p>Document Database는 일반적으로 아래의 경우에서 많이 사용합니다.</p>\n<ul>\n<li>대용량 데이터를 읽고 쓰는 웹사이트 백엔드 지원</li>\n<li>제품처럼 다양한 속성이 있는 데이터 관리</li>\n<li>다양한 유형의 메타데이터 추적</li>\n<li>Json 데이터 구조를 사용하는 어플리케이션</li>\n<li>비정규화된 중첩 구조의 데이터를 사용하는 애플리케이션</li>\n</ul>\n<blockquote>\n<p>CouchDB와 Couchbase의 차이.</p>\n</blockquote>\n<ul>\n<li>Couchbase는 JSON용 SQL과 같은 쿼리 언어 N1QL이 있으나, CouchDB는 없습니다.</li>\n<li>Couchbase는 기업용이 있으나, CouchDB는 오픈소스만 있습니다.</li>\n<li>Couchbase는 pessimistic lock이 있으나, CouchDB는 MVCC 개념을 사용하므로 없습니다.</li>\n<li>Couchbase의 topology는 분산되어 있으나, CouchDB는 master-master 복제 개념입니다.</li>\n</ul>\n<h3 id=\"column-family-database\"><a href=\"#column-family-database\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Column Family Database</h3>\n<p>Column Family Database는 대용량 데이터, 읽기와 쓰기 성능, 고가용성을 위해 설계되었습니다. (Ex. 구글의 Big Table, 페이스북의 Cassandra)</p>\n<p>Column Family Database는 다음의 특징을 가집니다.</p>\n<ul>\n<li>\n<p>RDB와 같이 Column과 Row를 사용해서 스키마를 정의합니다.</p>\n<ul>\n<li>컬럼 수가 많으면 관련된 컬럼들을 컬렉션으로 묶을 수 있습니다. (이를 <strong>Column Family</strong>라고 합니다.)</li>\n</ul>\n</li>\n<li>Document Database와 같이 미리 정의된 스키마를 사용하지 않으므로 원하는 시점에 컬럼을 추가가능합니다.</li>\n<li>테이블간 조인을 지원하지 않습니다.</li>\n</ul>\n<p>즉, 다음과 같은 모습으로 구성되어 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113298137-76779e80-9336-11eb-9ed1-cb287417ad04.png\" alt=\"Hbase Column Families\"></p>\n<p>Column Family Database는 다음과 같은 종류가 있습니다.</p>\n<ul>\n<li><strong>Hbase</strong></li>\n<li><strong>Cassandra</strong></li>\n<li>GCP(Google Cloud Platform) BigTable</li>\n<li>MS Azure Cosmos DB</li>\n</ul>\n<p>Column Family Database는 일반적으로 아래의 경우에서 많이 사용합니다.</p>\n<ul>\n<li>데이터베이스에 쓰기 작업이 많은 애플리케이션</li>\n<li>지리적으로 여러 데이터 센터에 분산되어 있는 애플리케이션</li>\n<li>복제본 데이터가 단기적으로 불일치해도 큰 문제가 없는 애플리케이션</li>\n<li>동적 필드를 처리하는 애플리케이션</li>\n<li>수백만 테라바이트 정도의 대용량 데이터를 처리할 수 있는 애플리케이션</li>\n</ul>\n<p>다음은 Column Family Database의 성능 표입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113298465-d40beb00-9336-11eb-8c64-8752cb98d1eb.png\" alt=\"Column Family Database Trend Chart\"></p>\n<p>일반적으로 Hbase와 Cassandra가 많이 쓰입니다. 다만, Hbase는 성능이 높으나 시스켐 복잡도와 Learning Curve의 문제로 인해 Cassandra가 더 보편적으로 선호됩니다.</p>\n<h3 id=\"graph-database\"><a href=\"#graph-database\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Graph Database</h3>\n<p>Graph Database는 Graph 이론을 활용한 것이며, Node(노드)들과 Relationship(관계)로 구성된 개념입니다. 노드는 Key-Value 값을 가지고 있고 노드는 하나 이상의 레이블을 구성할 수 있습니다.</p>\n<p>Graph Database는 다음의 특징을 가집니다.</p>\n<ul>\n<li>간단하고 직관적인 데이터 모델을 가집니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113299571-fb16ec80-9337-11eb-9b17-b42ce16c51d0.png\" alt=\"image\"></p>\n<p>Graph Database는 다음과 같은 종류가 있습니다.</p>\n<ul>\n<li><strong>Neo4j</strong></li>\n<li>Titan</li>\n<li>AllegroGraph</li>\n</ul>\n<p>Graph Database는 일반적으로 아래의 경우에서 많이 사용합니다.</p>\n<ul>\n<li>지식 그래프나 소셜 그래프</li>\n<li>자격 증명 그래프</li>\n<li>사기 탐지 및 추천 엔진</li>\n<li>생명 과학 분야</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://jaemunbro.medium.com/nosql-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%8A%B9%EC%84%B1-%EB%B9%84%EA%B5%90-c9abe1b2838c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NoSQL 데이터베이스별 특징</a></li>\n<li><a href=\"https://velog.io/@hanblueblue/%EB%B2%88%EC%97%AD-NoSQL-vs-Relational-Databases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NoSQL vs Relational Database</a></li>\n<li><a href=\"https://velog.io/@hanblueblue/%EB%B2%88%EC%97%AD-NoSQL-vs-Relational-Databases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DB, RDBMS VS NoSQL</a></li>\n<li><a href=\"https://blogs.perficient.com/2017/07/18/to-know-more-about-nosql-counchdb-vs-couchbase/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Couchbase VS CouchDB</a></li>\n<li><a href=\"https://couplewith.tistory.com/entry/Graph-DB-%EC%99%80-RDBMS-%ED%8A%B8%EB%9E%9C%EB%93%9C-3%EB%B6%80-%EA%B7%B8%EB%9E%98%ED%94%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%A2%85%EB%A5%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphDB</a></li>\n</ul>\n"}}]}}},"context":{}}