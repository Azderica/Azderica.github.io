{"hash":"cc9098dd8346e1418adf53ab8b5e8ea790bc2d53","data":{"tag":{"title":"Nginx","belongsTo":{"edges":[{"node":{"title":"[Network] NGINX란?","path":"/00-network-nginx/","date":"14. January 2021","timeToRead":3,"description":"NGINX에 대해 작성합니다.","content":"<h1 id=\"nginx란\"><a href=\"#nginx%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nginx란.</h1>\n<h2 id=\"nignx의-정의\"><a href=\"#nignx%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nignx의 정의.</h2>\n<p>Nginx는 가벼움과 높은 성능을 목표로 하는 웹서버 소프트웨어입니다.</p>\n<p>이러한 Nginx는 트래픽이 많은 웹사이트를 위해 확장성을 위해 설계한 비동기 이벤트 기반 구조를 가지고 있습니다.</p>\n<p>일반적으로 <strong>웹 서버, 리버스 프록시 및 메일 프록시</strong> 기능을 가집니다.</p>\n<br/>\n<h2 id=\"apache-vs-nginx\"><a href=\"#apache-vs-nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Apache VS Nginx</h2>\n<p>주로 Nginx는 Apache 서버와 비교를 하는데, 현재는 Nginx가 1위를 차지하고 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104517057-bd5bcf00-5638-11eb-8e24-859c5bf2ee88.png\" alt=\"server-rank\"></p>\n<blockquote>\n<p>Apache</p>\n</blockquote>\n<ul>\n<li>쓰레드 / 프로세스 기반 구조로 요청 하나당 쓰레드 하나가 처리하는 구조입니다.</li>\n<li>사용자가 많으면 많은 쓰레드가 생성되고, 메모리와 CPU 낭비가 심합니다.</li>\n</ul>\n<blockquote>\n<p>Nginx</p>\n</blockquote>\n<ul>\n<li>비동기 Event-Driven 기반의 구조입니다.</li>\n<li>다수의 연결을 효과적으로 처리가능합니다.</li>\n<li>대부분의 코어 모듈이 Apache보다 적은 리소스로 더 빠르게 동작가능합니다.</li>\n<li>더 작은 쓰레드로 클라이언트의 요청들을 처리 가능합니다.</li>\n</ul>\n<p>Apache와 Nginx의 가장 큰 차이는 Thread 방식과 Event-drive의 차이입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104517420-4bd05080-5639-11eb-92a5-dc3f78cc5891.png\" alt=\"Thread-VS-Event-Driven\"></p>\n<p>다음 그림처럼 쓰레드 기반은 하나의 커넥션 당 하나의 쓰레드를 사용하지만, Event-driven 방식은 여러 커넥션을 모두 Event-Handler를 통해 비동기 방식으로 처리해서 먼저 처리되는 것부터 로직이 진행됩니다.</p>\n<br/>\n<h2 id=\"nginx-활용\"><a href=\"#nginx-%ED%99%9C%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nginx 활용</h2>\n<p>Nginx은 다음과 같은 기능으로 사용할 수 있습니다.</p>\n<ul>\n<li>\n<p>HTTP Server</p>\n<ul>\n<li>정적 파일을 처리하는 web server의 역할을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p>Reverse proxy server</p>\n<ul>\n<li>클라이언트의 요청을 Application server에 배분합니다.</li>\n<li>클라이언트 80포트 요청을 8080, 8081 등 여러 Application server로 보내줍니다.</li>\n<li>각 application server에 요청을 배분해서 부하를 분산합니다. (load balancing)</li>\n</ul>\n</li>\n<li>Mail proxy server</li>\n<li>Generic TCP/UDP proxy server</li>\n</ul>\n<br/>\n<h2 id=\"nginx-proxy\"><a href=\"#nginx-proxy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nginx Proxy</h2>\n<p>node.js에서 nginx.conf를 파일을 수정하여 아래처럼 수정하면됩니다.</p>\n<pre class=\"language-conf\"><code class=\"language-conf\">server {\n  listen    81;\n  server_name localhost;\n\n  location / {\n    proxy_pass http://127.0.0.1:3000/;\n  }\n}</code></pre>\n<p>다음과 같이 수정을 하게 되면, 81번 포트로 접속을 해도 3000번 포트의 서버에 접속이 되게됩니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 간략하게 Nginx에 대해 정리해보았습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"http://nginx.org/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://nginx.org/en/</a></li>\n<li><a href=\"https://news.netcraft.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://news.netcraft.com/</a></li>\n<li><a href=\"https://smjeon.dev/etc/nginx/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://smjeon.dev/etc/nginx/</a></li>\n<li><a href=\"https://m.blog.naver.com/jhc9639/220967352282\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://m.blog.naver.com/jhc9639/220967352282</a></li>\n</ul>\n"}}]}}},"context":{}}