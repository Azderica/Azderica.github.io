{"hash":"409256f0cf4ba53e53b5c32326d49aab3f1f64f3","data":{"tag":{"title":"Jwt","belongsTo":{"edges":[{"node":{"title":"[Server] 토큰 기반 인증과 JWT","path":"/00-server-jwt/","date":"25. December 2020","timeToRead":10,"description":" 토큰 기반 인증과 JWT에 대해 알아보겠습니다. ","content":"<h1 id=\"jwt\"><a href=\"#jwt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT</h1>\n<p>최근 업무에서 긴급 이슈가 있었는데, 그 자세한 내용을 설명할 수는 없으나 가장 큰 원인 중 하나는 토큰 이슈였습니다. 그에 따라 오늘 토큰 기반의 인증과 가장 유명한 JWT(Json Web Token)에 대해 정리해볼려고 합니다.</p>\n<br/>\n<h2 id=\"토큰token-기반-인증\"><a href=\"#%ED%86%A0%ED%81%B0token-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>토큰(Token) 기반 인증</h2>\n<p>토큰 기반의 인증은 모던 웹서비스에서 많이 사용됩니다. 특히 API를 사용하는 웹서비스를 개발해야한다면 토큰을 사용하는 방법이 가장 좋습니다.</p>\n<h3 id=\"기존-서버-기반-인증\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EC%84%9C%EB%B2%84-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기존 서버 기반 인증</h3>\n<p>기존의 서버 기반의 인증은 다음과 같은 구조를 가지고 있었습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103119059-06ada400-46b5-11eb-8e01-e1e841b40823.png\" alt=\"서버기반인증\"></p>\n<p>하지만 이러한 서버 기반의 인증은 다음과 같은 문제를 가집니다. (그러나 아직 사용하는 곳도 많습니다.)</p>\n<ul>\n<li>\n<p>세션</p>\n<ul>\n<li>유저가 인증을 할 때, 서버는 이 기록을 서버에 저장합니다. (= 세션)</li>\n<li>로그인 중인 유저가 늘어날 수록 서버의 램이 과부화됩니다. (DB에 저장하면 DB 성능의 무리가 오게됩니다.)</li>\n</ul>\n</li>\n<li>\n<p>확장성</p>\n<ul>\n<li>세션을 사용하는 경우에는 더 많은 트래픽을 감당하기 위해 여러개의 프로세스를 돌리거나, 여러 서버 컴퓨터를 추가하는 것이 어려워집니다.</li>\n</ul>\n</li>\n<li>\n<p>CORS(Cross-Origin Resource Sharing)</p>\n<ul>\n<li>일반적으로 쿠키는 단일 도메인 및 서브 도메인엣만 작동하도록 설계되어 있는데 이러한 쿠키를 여러 도메인에서 관리하는 것은 번거롭습니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"토큰-기반-시스템의-작동-원리\"><a href=\"#%ED%86%A0%ED%81%B0-%EA%B8%B0%EB%B0%98-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>토큰 기반 시스템의 작동 원리.</h4>\n<p>토큰 기반 시스템은 <strong>stateless</strong>(상태를 유지하지 않음) 합니다. 이 덕분에 위에서 발생한 문제들이 해결됩니다.</p>\n<p>토큰 기반 시스템은 다음과 같이 작동합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103119347-4c1ea100-46b6-11eb-9a90-a7fab5edbc1b.png\" alt=\"토큰기반인증\"></p>\n<p>이를 순서로 나타내면 다음과 같습니다.</p>\n<ol>\n<li>유저가 <strong>로그인</strong>을 합니다.</li>\n<li>서버가 <strong>계정정보를 검증</strong>합니다.</li>\n<li>계정 정보가 정확한 경우, 서버측에서 <strong>signed 토큰을 발급</strong>해줍니다.</li>\n<li>클라이언트 측에서는 전달받은 <strong>토큰을 저장</strong>하고, 서버 <strong>요청마다 토큰을 함께 서버에 전달</strong>합니다.</li>\n<li>서버는 <strong>토큰을 검증</strong>하고 <strong>요청에 응답</strong>합니다.</li>\n</ol>\n<h3 id=\"토큰-기반-서비스를-선택하는-이유\"><a href=\"#%ED%86%A0%ED%81%B0-%EA%B8%B0%EB%B0%98-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>토큰 기반 서비스를 선택하는 이유.</h3>\n<p>일반적으로 토큰 기반의 인증 시스템은 다음의 장점을 가집니다.</p>\n<ul>\n<li>\n<p>Stateless 서버</p>\n<ul>\n<li>Stateful 서버 : 클라이언트에게 요청받을때마다, 클라이언트의 상태를 계속 유지합니다. 세션에 로그인 정보 등을 저장하고 계속 활용합니다.</li>\n<li><strong>Stateless 서버</strong> : 상태를 유지 하지 않는 서버. 상태정보를 저장하지 않고, 서버는 클라이언트측에서 들어오는 요청만으로 작업을 진행, 이 경우에는 클라이언트와 서버의 연결고리가 없으므로 <strong>서버의 확장성에서 장점</strong>을 가집니다.</li>\n</ul>\n</li>\n<li>\n<p>모바일 어플리케이션에 적합</p>\n<ul>\n<li>만약에 Android와 IOS에서 작동하는 어플리케이션을 개발할 때, 안전한 API를 만들기 위해서는 쿠키 등은 좋은 해결책이 될 수 없습니다. (쿠키 컨테이너를 사용해야하기 때문에...)</li>\n</ul>\n</li>\n<li>\n<p>인증정보를 다른 어플리케이션으로 전달</p>\n<ul>\n<li>대표적인 서비스로 OAuth 등이 있습니다. 구글이나 페이스북, 카카오톡, 네이버와 같은 소셜 계정을 통해 다른 웹서비스에서도 로그인 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>보안</p>\n<ul>\n<li>토큰 기반의 인증을 통해서 어플리케이션의 보안을 높일 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"토큰-기반-서비스의-장점\"><a href=\"#%ED%86%A0%ED%81%B0-%EA%B8%B0%EB%B0%98-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>토큰 기반 서비스의 장점.</h3>\n<p>따라서 토큰 기반의 서비스는 다음과 같은 장점을 가집니다.</p>\n<ul>\n<li>\n<p>무상태이며 확장성을 가짐</p>\n<ul>\n<li>기존에 설명한 것처럼 많은 리소스 소모를 줄일 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>보안성</p>\n<ul>\n<li>쿠키를 사용하지 않으므로 쿠키 취약점을 방지할 수 있습니다.</li>\n<li>다만 토큰도 취약점이 존재합니다.</li>\n</ul>\n</li>\n<li>\n<p>확장성(Extensibility)</p>\n<ul>\n<li>토큰을 통해 다른 서비스에 권한을 공유함으로서 사업이나 분야를 확장할 수 있습니다.</li>\n<li>토큰에 선택적인 권한만 부여하여 발급할 수도 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>여러 플랫폼 및 도메인</p>\n<ul>\n<li>토큰만 유효하다면 여러 플랫폼과 도메인에서 사용할 수 있습니다.</li>\n<li>서버측 어플리케이션 응답부분에 다음 헤더만 포함하면 <code class=\"language-text\">Access-Control-Allow-Origin: *</code> 서버에서는 쉽게 정리할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>웹 표준 기반</p>\n<ul>\n<li>JWT는 웹 표준에 등록되어 있기 때문에 여러 환경에서 지원이 됩니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"jwtjson-web-token\"><a href=\"#jwtjson-web-token\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT(Json Web Token)</h2>\n<p>그렇다면 메인 디쉬인 JWT(Json Web Token)에 대해 이야기를 해보겠습니다.</p>\n<p><strong>JWT(JSON Web Token)</strong> 은 웹표준(RFC 7519)으로 두 개체에서 JSON 객체를 사용하여 가볍고 자가수용적인 (self-contained) 방식으로 정보를 안정성 있게 전달합니다.</p>\n<p>JSON은 다음과 같은 특징을 유지합니다.</p>\n<ul>\n<li>수많은 프로그래밍 언어에서 지원됩니다. (대부분의 주류 프로그래밍 언어에서 지원)</li>\n<li>\n<p>자가 수용적 (self-contained)</p>\n<ul>\n<li>JWT는 필요한 모든 정보를 가지고 있습니다.</li>\n<li>토큰, 토큰에 대한 기본정보, 전달할 정보, signature 등을 가지고 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>쉽게 전달 될 수 있습니다.</p>\n<ul>\n<li>JWT는 자가수용적으로 두 개체 사이에서 손쉽게 전달된다.</li>\n<li>웹 서버의 경우 HTTP의 헤더에 넣어서 전달할 수 있고, ULR의 파라미터로도 전달 가능합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jwt의-정의\"><a href=\"#jwt%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT의 정의</h3>\n<p>JWT는 <code class=\"language-text\">.</code> 을 구분자로 3가지의 문자열로 되어있습니다. 구조는 다음과 같이 이루어졌습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103124452-24860380-46cb-11eb-827e-b1d02001516f.png\" alt=\"jwt\"></p>\n<p>JWT 토큰을 만들때는 JWT를 담당하는 라이브러리가 자동으로 인코딩 및 해싱 작업을 해줍니다.</p>\n<h4 id=\"헤더\"><a href=\"#%ED%97%A4%EB%8D%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>헤더</h4>\n<p><strong>Header</strong>는 <strong>typ</strong>과 <strong>alg</strong> 의 두가지 정보를 지니고 있습니다.</p>\n<ul>\n<li><strong>typ</strong> : 토큰의 타입을 지정 - JWT</li>\n<li><strong>alg</strong> : 해싱 알고리즘을 지정 - HMAC SHA256이나 RSA가 주로 사용, signature에서 사용</li>\n</ul>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"typ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JWT\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HS256\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>인코딩에 대한 코드 예시입니다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"typ\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"JWT\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"alg\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"HS256\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// encode to base64</span>\n<span class=\"token keyword\">const</span> encodedPayload <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"정보payload\"><a href=\"#%EC%A0%95%EB%B3%B4payload\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정보(payload)</h4>\n<p><strong>payload</strong> 부분에는 토큰에 담을 정보가 있습니다. 여기에 담는 정보의 한 조각을 클레임(<strong>claim</strong>) 이라고 부르며, 이는 <code class=\"language-text\">name/value</code>의 한쌍으로 이뤄져 있습니다.</p>\n<p>클레임은 크게 3가지(등록-registered, 공개-public, 비공개-private)로 분류됩니다.</p>\n<h5 id=\"1-등록된-registered클레임\"><a href=\"#1-%EB%93%B1%EB%A1%9D%EB%90%9C-registered%ED%81%B4%EB%A0%88%EC%9E%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 등록된 (registered)클레임</h5>\n<p>등록된 클레임들은 이름이 이미 정해진 클레임이며, 모두 선택적입니다.</p>\n<ul>\n<li><code class=\"language-text\">iss</code> : 토큰 발급자 (issuer)</li>\n<li><code class=\"language-text\">sub</code> : 토큰 제목 (subject)</li>\n<li><code class=\"language-text\">aud</code> : 토큰 대상자 (audience)</li>\n<li><code class=\"language-text\">exp</code> : 토큰의 만료시간 (expiration), NumericDate</li>\n<li><code class=\"language-text\">nbf</code> : 토큰 활성 날짜</li>\n<li><code class=\"language-text\">iat</code> : 토큰이 발급된 시간, 나이를 확인할 수 있습니다.</li>\n<li><code class=\"language-text\">jti</code> : JWT의 고유 식별자, 중복처리를 방지하기 위해서 사용합니다.</li>\n</ul>\n<h5 id=\"2-공개-public-클레임\"><a href=\"#2-%EA%B3%B5%EA%B0%9C-public-%ED%81%B4%EB%A0%88%EC%9E%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 공개 (public) 클레임</h5>\n<p>공개 클레임들은 충돌이 방지된 이름을 가지고 있습니다. 일반적으로 충돌을 막기 위해 클레임을 URI 형식으로 짓습니다.</p>\n<h5 id=\"3-비공개-private-클레임\"><a href=\"#3-%EB%B9%84%EA%B3%B5%EA%B0%9C-private-%ED%81%B4%EB%A0%88%EC%9E%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 비공개 (private) 클레임</h5>\n<p>등록된 클레임도 아니고 공개된 클레임이 아닙니다. 일반적으로 서버 협의에 사용되는 클레임입니다.</p>\n<p>예제 payload는 다음과 같습니다.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"iss\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"github.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"https://azderica.github.io/is_admin\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"username\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Azderica\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>마찬가지로 위의 코드처럼 encode 할 수 있습니다.</p>\n<h4 id=\"서명signature\"><a href=\"#%EC%84%9C%EB%AA%85signature\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서명(signature)</h4>\n<p>JSON Web Token의 마지막 부분은 서명(signature)입니다. 서명은 헤더의 인코딩 값과 정보의 인코딩 값을 합쳐서 주어진 비밀키로 해쉬를 하여 생성</p>\n<p>서명 부분을 만드는 슈도코드(pseudocode)의 구조는 다음과 같습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</code></pre>\n<p>이렇게 만든 해쉬를 <code class=\"language-text\">base64</code> 형태로 나타냅니다.</p>\n<h3 id=\"jwt는-언제-사용하지\"><a href=\"#jwt%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT는 언제 사용하지?</h3>\n<ul>\n<li>\n<p>회원 인증</p>\n<ul>\n<li>JWT를 사용하는 가장 흔한 시나리오입니다.</li>\n<li>유저가 로그인 시, 서버는 유저의 정보에 기반한 토큰을 발급하여 유저에게 전달하고 이후 요청시 JWT를 포함하여 전달합니다.</li>\n<li>서버측에서 유저의 세션을 유지할 필요가 없어서 리소스를 아낄 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>정보 교류</p>\n<ul>\n<li>JWT는 두 개체 사이에서 안정성있게 정보를 교환하기에 좋은 방법</li>\n<li>정보가 sign이 되어있기 때문에 정보가 조작되지 않았는지를 검증할 수 있음.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>토큰 기반의 인증 시스템과 JWT에 대해 알아보았습니다. </p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://velopert.com/2350\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velopert.com/2350</a></li>\n<li><a href=\"https://velopert.com/2389\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velopert.com/2389</a></li>\n<li><a href=\"http://www.opennaru.com/opennaru-blog/jwt-json-web-token/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.opennaru.com/opennaru-blog/jwt-json-web-token/</a></li>\n</ul>\n"}}]}}},"context":{}}