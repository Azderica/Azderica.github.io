{"hash":"c7c6273426a1f1c25b484e341518249aeec696cd","data":{"tag":{"title":"Inherit","belongsTo":{"edges":[{"node":{"title":"[Java] 자바 상속","path":"/06-java-study/","date":"13. January 2021","timeToRead":8,"description":"자바의 상속에 대해 정리합니다.","content":"<h1 id=\"java-inherit\"><a href=\"#java-inherit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Inherit</h1>\n<p>백기선님의 자바 스터디 6주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>자바 상속의 특징</li>\n<li>super 키워드</li>\n<li>메소드 오버라이딩</li>\n<li>다이나믹 메소드 디스패치 (Dynamic Method Dispatch)</li>\n<li>추상 클래스</li>\n<li>final 키워드</li>\n<li>Object 클래스</li>\n</ul>\n<br/>\n<h2 id=\"자바-상속\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%83%81%EC%86%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 상속</h2>\n<p>상속이란, <strong>부모 클래스의 변수와 메소드를 물려 받는 것</strong>으로 이러한 상속은 코드의 재사용성을 통해 코드의 간결성을 확보해줍니다.</p>\n<p>일반적으로 <code class=\"language-text\">extends</code>라는 키워드를 통해 이루어집니다.</p>\n<h3 id=\"자바-상속의-특징\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%83%81%EC%86%8D%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 상속의 특징</h3>\n<p>자바 상속은 다음의 특징을 가집니다.</p>\n<ul>\n<li>\n<p>Single inheritance</p>\n<ul>\n<li>자바는 단일 상속만 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>Object를 제외한 모든 클래스는 암묵적으로 Object의 서브 클래스입니다.</p>\n<ul>\n<li>자바 계층 구조 최상위에는 java.lang.Object 클래스가 존재합니다.</li>\n</ul>\n</li>\n<li>\n<p>Multi-level inheritance</p>\n<ul>\n<li>자바에서는 상속의 횟수에 제한이 없습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"super-키워드\"><a href=\"#super-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>super 키워드</h2>\n<p>suuper 키워드는 자식클래스가 부모클래스로부터 상속받은 멤버를 사용할 때 사용됩니다.</p>\n<p>부모 생성자를 호출하는 경우를 <code class=\"language-text\">constructor chanining</code> 이라고 불립니다.</p>\n<p>만약에 자식 클래스의 생성자에서 <code class=\"language-text\">super()</code>를 명시적으로 사용하지 않으면, 컴파일러가 부모 클래스의 기본 생성자를 호출하도록 코드를 삽입되며, 만약 부모 클래스에 기본 생성자가 없으면 컴파일 에러가 발생합니다.</p>\n<br/>\n<h2 id=\"메소드-오버라이딩\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 오버라이딩</h2>\n<p><strong>super 클래스가 가지고 있는 메소드를 서브 클래스에서 새롭게 다른 로직으로 정의하고 싶을 때 사용하는 문법</strong>입니다.</p>\n<p><strong>상속관계에 있는 클래스간에 같은 이름의 메서드를 정의하는 문법</strong>을 오버라이딩이라고 합니다. 이러한 오버라이딩 annotation은 생략할 수도 있습니다.</p>\n<p>다음과 같은 규칙을 준수합니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>부모 클래스 instance method</th>\n<th>부모 클래스 static method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>자식 클래스 instance method</td>\n<td>overrides</td>\n<td>compile error</td>\n</tr>\n<tr>\n<td>자식 클래스 static method</td>\n<td>compile error</td>\n<td>hides</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>hides : 부모 클래스의 메소드를 부를 수 없습니다.</li>\n<li>overrides : 오버라이딩 된 메소드의 부모 메소드를 직접적으로 호출할 수 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"메소드-디스패치method-dispatch\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 디스패치(Method Dispatch)</h2>\n<p>메소드 디스패치는 <strong>어떤 메소드를 호출할 지 결정하여 실제로 실행시키는 과정</strong>을 의미합니다.</p>\n<p>메소드 디스패치는 <strong>정적 메소드 디스패치(Static Method Dispatch), 동적 메소드 디스패치(Dynamic Method Dispatch), 더블 디스패치(Double Dispatch)</strong>로 구성됩니다.</p>\n<h3 id=\"정적-메소드-디스패치static-method-dispatch\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98static-method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 메소드 디스패치(Static Method Dispatch)</h3>\n<p>정적 메소드 디스패치는 구현 클래스를 통해 컴파일 시점에서 컴파일러가 어떤 메소드를 호출할지 명확하게 알고 있는 경우, 컴파일 시 생성된 바이트코드에도 정보가 남아있으면 애플리케이션 실행 전에 호출할 메소드를 결정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 스태틱 메소드 디스패치</span>\n        <span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"동적-메소드-디스패치static-method-dispatch\"><a href=\"#%EB%8F%99%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98static-method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동적 메소드 디스패치(Static Method Dispatch)</h3>\n<p>인터페이스나 추상 클래스에 정의된 추상 메소드를 호출하는 경우이며 호출되는 메소드가 런타임 시 동적으로 결정됩니다.</p>\n<p>인터페이스 또는 추상 클래스로 선언하고 구현/상속 받은 하위 클래스이 인스턴스를 생성합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 스태틱 메소드 디스패치</span>\n        <span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>런타임 전에는 컴파일러가 <code class=\"language-text\">Dog</code>가 생성됨을 모름므로 <code class=\"language-text\">Animal</code>이 정의한 <code class=\"language-text\">bark()</code> 메소드만 접근 가능합니다.</p>\n<h3 id=\"더블-디스패치double-dispatch\"><a href=\"#%EB%8D%94%EB%B8%94-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98double-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>더블 디스패치(Double Dispatch)</h3>\n<p>다이나믹 메소드 디스패치가 2번 발생하는 것입니다. 디자인 패턴 중 <strong>방문자 패턴(Visitor Pattern)</strong>과 밀접한 관계를 가지고 있습니다.</p>\n<ul>\n<li>방문자 패턴 : 여러 객체에 대해 각 객체의 동작들을 지정하는 패턴</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dispatch</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Picture</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Facebook</span> <span class=\"token keyword\">implements</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Twitter</span> <span class=\"token keyword\">implements</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> posts <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Picture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>SNS<span class=\"token punctuation\">></span></span> sns <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Facebook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        posts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"추상-클래스\"><a href=\"#%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>추상 클래스</h2>\n<p>츠상클래스는 클래스를 만들기 위한 일종의 설계도로 인스턴스를 생성할 수 없는 클래스입니다. 이를 사용하기 위해서는 반드시 자식 클래스에서 상속을 받아 클래스를 모두 구현해야합니다.</p>\n<p>다음의 형태를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> 클래스이름 <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>추상 클래스는 반드시 하나 이상의 추상 메서드를 포함하고 있으며, 생성자와 멤버변수, 일반 메서드를 가질 수 있습니다.</p>\n<p>다음의 특징을 가집니다.</p>\n<ul>\n<li>자체 인스턴스 생성이 불가능합니다.</li>\n<li>생성자와 멤버 변수, 일반 메서드를 모두 가질 수 있습니다.</li>\n<li>하나 이상의 추상 메서드를 포함합니다.</li>\n</ul>\n<br/>\n<h2 id=\"final-키워드\"><a href=\"#final-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 키워드</h2>\n<p>final 키워드는 엔티티를 한 번만 할당하겠다는 의미로 자바에서는 3가지의 의미로 사용됩니다.</p>\n<h3 id=\"final-변수\"><a href=\"#final-%EB%B3%80%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 변수</h3>\n<p>일반적으로 알고 있는 상수를 의미합니다. 생성자나 대입연산자를 통해 단 한번만 초기화 가능한 변수입니다.</p>\n<h3 id=\"final-메소드\"><a href=\"#final-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 메소드</h3>\n<p>오버라이드하거나 숨길 수 없는 메서드 입니다.</p>\n<h3 id=\"final-클래스\"><a href=\"#final-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 클래스</h3>\n<p>해당 클래스를 상속할 수 없음을 의미합니다. 상속을 할 수 없기 때문에 상속 계층에서 마지막 클래스라는 의미를 지닙니다.</p>\n<br/>\n<h2 id=\"object-클래스\"><a href=\"#object-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object 클래스</h2>\n<p><code class=\"language-text\">java.lang.Object</code> 클래스는 모든 클래스의 최상위 클래스입니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">boolean equals(Object obj)</code></p>\n<ul>\n<li>두 객체가 같은 지 비교합니다.(같으면 true 틀리면 false)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">String toString()</code></p>\n<ul>\n<li>객체의 문자열을 반환합니다</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">protected Object clone()</code></p>\n<ul>\n<li>객체를 복사합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">protected void finalize()</code></p>\n<ul>\n<li>가비지 컬렉션 직전에 객체의 리소스를 정리할때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Class getClass()</code></p>\n<ul>\n<li>객체의 클레스형을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">int hashCode()</code></p>\n<ul>\n<li>객체의 코드값을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void notify()</code></p>\n<ul>\n<li>wait된 스레드 실행을 재개할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void notifyAll()</code></p>\n<ul>\n<li>wait된 모든 스레드 실행을 재개할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void wait()</code></p>\n<ul>\n<li>스레드를 일시적으로 중지할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void wait(long timeout)</code>, <code class=\"language-text\">void wait(long timeout, int nanos)</code></p>\n<ul>\n<li>주어진 시간만큼 스레드를 일시적으로 중지할 때 호출합니다.</li>\n</ul>\n</li>\n</ul>\n<p>모든 클래스는 정의할 때부터 명시적으로 java.lang.Object 클래스를 상속 받게 됩니다. 따라서 위의 함수들은 어떤 클래스에서도 호출이 가능합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/</a></li>\n<li><a href=\"https://velog.io/@roeniss/%EC%9E%90%EB%B0%94-%EA%B8%B0%EC%B4%88%EC%A7%80%EC%8B%9D-%EC%A0%95%EB%A6%AC#6%EC%A3%BC%EC%B0%A8--%EC%83%81%EC%86%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@roeniss/%EC%9E%90%EB%B0%94-%EA%B8%B0%EC%B4%88%EC%A7%80%EC%8B%9D-%EC%A0%95%EB%A6%AC#6%EC%A3%BC%EC%B0%A8--%EC%83%81%EC%86%8D</a></li>\n<li><a href=\"https://blog.naver.com/swoh1227/222181505425\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/swoh1227/222181505425</a></li>\n<li><a href=\"https://leemoono.tistory.com/20\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leemoono.tistory.com/20</a></li>\n<li><a href=\"https://github.com/mongzza/java-study/blob/main/study/6%EC%A3%BC%EC%B0%A8.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/mongzza/java-study/blob/main/study/6%EC%A3%BC%EC%B0%A8.md</a></li>\n<li><a href=\"https://roeldowney.tistory.com/486\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://roeldowney.tistory.com/486</a></li>\n</ul>\n"}}]}}},"context":{}}