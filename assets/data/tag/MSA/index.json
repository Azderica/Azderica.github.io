{"hash":"7b056bf5bb97ab72db0df8d9d80ca9ef32b474be","data":{"tag":{"title":"MSA","belongsTo":{"edges":[{"node":{"title":"[Architecture] MSA : Istio 개념 잡기","path":"/00-architecture-istio/","date":"2. February 2021","timeToRead":10,"description":"Istio 패턴에 대해 정리합니다.","content":"<h1 id=\"istio\"><a href=\"#istio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio</h1>\n<h2 id=\"istio의-정의\"><a href=\"#istio%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio의 정의</h2>\n<p>Istio는 <strong>애플리케이션 네트워크 기능을 유연하고 쉽게 자동화할 수 있는 투명한 언어 독립적인 방법을 제공하는 현대화된 서비스 네트워킹 레이어인 서비스 메시</strong>입니다. 클라우드 기반 애플리케이션을 구성하는 다양한 마이크로 서비스르르 관리하는데 널리 사용되는 솔루션이며 마이크로 서비스가 서로 통신하고 데이터를 공유하는 방법을 지원합니다.</p>\n<p>Istio를 통해서 느슨하게 결합된 마이크로 서비스를 통해 앱을 어셈블하고, 새로운 클라우드 기반 앱을 관리할 수 있습니다. 또한 <strong>서비스 코드 변경 없이 로드배런싱, 서비스 간 인증, 모니터링 등을 적용해서 마이크로 서비스를 쉽게 관리</strong>할 수 있습니다.</p>\n<p>Istio는 애플리케이션 코드를 변경할 필요 없이 서비스 간 트래픽 흐름을 관리하고 액세스 정책을 적용하여 원격 분석 데이터를 집계합니다. 또한 기존의 분산형 애플리케이션에 투명하게 레이어하여 배포 복잡성을 완화시킵니다.</p>\n<h3 id=\"service-mesh-란\"><a href=\"#service-mesh-%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Service Mesh</code> 란?</h3>\n<ul>\n<li>애플리케이션의 다양한 부분들이 서로의 데이터를 공유하는 방식을 제어하는 방법입니다.</li>\n<li>좀 더 자세하게 이야기 한다면, API 등을 사용해서 마이크로 서비스간 통신을 안전하고, 빠르고, 신뢰할 수 있게 만들기 위해 설계된 전용 인프라 계층입니다.</li>\n<li>Service Discovery, Load Balancing, Dynamic Request Routing, Circuit Breacking, Retry and Timeout, TLS, Distributed Tracing, Metric 수집, Access Control, A/B Testing 기능 등을 지원합니다.</li>\n</ul>\n<br/>\n<h2 id=\"istio-service-mesh의-장점\"><a href=\"#istio-service-mesh%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio Service Mesh의 장점</h2>\n<h3 id=\"일관된-서비스-네트워킹-달성\"><a href=\"#%EC%9D%BC%EA%B4%80%EB%90%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9-%EB%8B%AC%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>일관된 서비스 네트워킹 달성</h3>\n<p>네트워킹 운영자는 개발자 오버헤드를 추가하지 않고도 모든 서비스의 네트워킹을 일관성 있게 관리할 수 있습니다.</p>\n<h3 id=\"istio-이점을-통해-서비스-보호\"><a href=\"#istio-%EC%9D%B4%EC%A0%90%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B3%B4%ED%98%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio 이점을 통해 서비스 보호</h3>\n<p>보안 운영자는 인증, 승인, 암호화를 비롯한 서비스 간 보안을 쉽게 구현할 수 있습니다.</p>\n<h3 id=\"애플리케이션-성능-향상\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>애플리케이션 성능 향상</h3>\n<p>Canary Rollout(새로운 버전 모델 배포시, 소규모 사용자에게 먼저 제공함으로서 위험을 빠르게 감지하는 배포 전략)과 같은 권장사항을 구현하고 애플리케이션을 심도 있게 파악하여 성능을 개선하기 위해 집중해야하는 부분을 파악할 수 있습니다.</p>\n<br/>\n<h2 id=\"istio의-구조\"><a href=\"#istio%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio의 구조</h2>\n<p>마이크로 서비스 간의 모든 네트워크 통신을 담당할 수 잇는 프록시인 Envoy를 사이드카 패턴으로 마이크로 서비스들에 배포한 다음, 프록시들의 설정 값 저장 및 관리/감독을 수행하고, 프록시들에 설정값을 전달하는 컨트롤러를 수행합니다.</p>\n<p>그후 각각의 마이크로 서비스에 사이드카 패턴으로 배포된 Envoy 프록시를 <code class=\"language-text\">데이터 플레인(Data Plane)</code> 이라고 하며, 이를 컨트롤 하는 부분이 <code class=\"language-text\">컨트롤 플레인(Control Plane)</code>이라고 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106528740-981dfa80-652c-11eb-95e7-fd408293b65e.png\" alt=\"Istio-Architecture\"></p>\n<p>구성요소를 좀 더 자세하게 설명하면 다음과 같습니다.</p>\n<h3 id=\"data-plane-데이터-플레인\"><a href=\"#data-plane-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%8C%EB%A0%88%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Plane (데이터 플레인)</h3>\n<p>실제 데이터 트래픽이 돌아다니는 영역입니다. Envoy Proxy 세트로 구성되어 있습니다.</p>\n<h4 id=\"envoy\"><a href=\"#envoy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Envoy</h4>\n<p>Envoy는 사이드카 방식으로 각각의 마이크로서비스에 배포되어 서비스로 들어오고 나가는 모든 트래픽을 통제합니다. Envoy를 통해서 서비스를 호출할 때 호출하는 서비스의 IP주소는 파일럿에 저당된 엔드포인트 정보를 활용합니다.</p>\n<p>Istio는 Envoy의 <strong>동적 서비스 디스커버리, 로드밸런싱, TLS 인증서 처리, HTTP/2, gRPC 프록시, 서킷브레이커, 헬스체크, 실패 삽입, 많은 메트릭 등의 기능을 사용</strong>할 수 있습니다.</p>\n<p>사이드카 방식을 사용하기 때문에 기존 컨테이너나 코드를 재사용할 필요없이 그대로 사용가능합니다.</p>\n<h3 id=\"control-plane-컨트롤-플레인\"><a href=\"#control-plane-%EC%BB%A8%ED%8A%B8%EB%A1%A4-%ED%94%8C%EB%A0%88%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Control Plane (컨트롤 플레인)</h3>\n<p>트래픽 경로를 설정하고 관리하는 용도로 사용합니다.</p>\n<p>Istio1.4 버전까지는 <strong>파일럿(Pilot), 믹서(Mixer), 시타델(Citadel), 갤리(Galley)</strong> 로 구성되어 있었으나 Istio1.5버전부터 4개의 모듈이 <strong>Istiod</strong> 라는 하나의 모듈로 통합되었습니다.</p>\n<h4 id=\"mixer\"><a href=\"#mixer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mixer</h4>\n<ul>\n<li>서비스 매쉬 엑세스 컨트롤 및 정책 관리 수행합니다.</li>\n<li>Envoy와 다른 서비스에서 모니터링 지표 수집합니다.</li>\n</ul>\n<h4 id=\"pilot\"><a href=\"#pilot\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pilot</h4>\n<ul>\n<li>Envoy 설정 관리를 수행하는 모듈입니다.</li>\n<li>Envoy가 호출하는 서비스의 주소를 얻을 수 잇는 Service Discovery 기능을 제공합니다.</li>\n<li>서비스 트래픽 라우팅 기능 제공합니다.</li>\n<li>서비스 안정성을 위해 서비스 간 호출시 Time out, Retry, Circuit Breaker(서킷 브레이커)같은 기능들을 제공합니다.</li>\n</ul>\n<h4 id=\"citadel\"><a href=\"#citadel\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Citadel</h4>\n<ul>\n<li>보안 관련 기능을 수행하는 모듈입니다.</li>\n<li>사용자 인증을 통해서 서비스/앤드 유저 간의 인증을 강화합니다.</li>\n<li>TLS(SSL)을 이용하여 통신 암호화와 인증서 관리를 할 수 있습니다.</li>\n</ul>\n<h4 id=\"galley\"><a href=\"#galley\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Galley</h4>\n<ul>\n<li>Istio 설정을 Validation, Ingestion, Processing, Distribution 하는 역할을 합니다.</li>\n<li>즉, Istio의 구성 및 설정을 검증하고 배포 관리를 진행합니다.</li>\n</ul>\n<h4 id=\"istiod\"><a href=\"#istiod\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istiod</h4>\n<p>Istio 1.5 이상 버전에서 제공되며 서비스 디스커버리, 설정관리, 인증관리 등을 수행합니다.</p>\n<ul>\n<li>트래픽 동작을 제어하는 라우팅 규칙을 Envoy 전용 설정으로 변환하고 마이크로 서비스에 사이드카 방식으로 Envoy를 배포합니다.</li>\n<li>Envoy 설정 변경을 통해 서비스 메시 트래픽을 제어합니다.</li>\n<li>내장된 Identity나 Credential Management(증명 관리)을 통해서 강력한 서비스 간 인증 및 사용자 인증 기능을 지원합니다.</li>\n<li>인증 기관의 역할을 수행하, 데이터 플레인에서 안전한 mTLS 통신을 허용하는 인증서를 생성합니다.</li>\n</ul>\n<br/>\n<h2 id=\"istio의-장점\"><a href=\"#istio%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio의 장점</h2>\n<p>Istio를 통해서 분산형 애플리케이션을 대규모로 제공할 수 있습니다. 아래와 같은 장점이 있습니다.</p>\n<h3 id=\"안전한-클라우드-기반-앱\"><a href=\"#%EC%95%88%EC%A0%84%ED%95%9C-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EA%B8%B0%EB%B0%98-%EC%95%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>안전한 클라우드 기반 앱</h3>\n<p>Istio는 기본적인 보안 통신 채널을 제공하며 대규모 서비스 통신의 인증(Authentication), 권한부여(Authorization), 암호화(Encryption) 등을 통해서 애플리케이션 수준에서 보안을 강화할 수 있습니다.</p>\n<h3 id=\"효율적인-트래픽-관리\"><a href=\"#%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%ED%8A%B8%EB%9E%98%ED%94%BD-%EA%B4%80%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>효율적인 트래픽 관리</h3>\n<p>Istio는 간편한 규칙(Rule) 설정과 트래픽 라우팅(Traffic Routing) 기능을 통해서 서비스 간의 트래픽 흐름과 API 호출을 제어할 수 있습니다. 또한 서킷 브레이커(Circuit Breaker), 타임아웃(Timeout), Retry 등의 기능과 같은 서비스 레벨의 속성 구성을 단순화 할 수 있습니다.</p>\n<p>이를 바탕으로 트래픽을 분할하여 A/B Test, Canary Rollout, Staged Rollout과 같은 작업을 쉽게 설정할 수 있습니다.</p>\n<p>트래픽에 대한 더 나은 가시성과 독창적인 장애 복구 기능을 통해서 문제가 발생하기 전에 문제를 발견하고 서비스 호출을 안정화 시킬 수 있습니다.</p>\n<h3 id=\"서비스-메시-모니터링\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A9%94%EC%8B%9C-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 메시 모니터링</h3>\n<p>Istio의 Tracing(트레이싱), Monitoring(모니터링), Logging(로깅) 기능으로 서비스 성능이 업스트림에 미치는 영향을 자세히 파악할 수 있습니다. 또한 서비스 성능이 업스트림이나 다운 스트림에 어떤 영향을 끼치는 지 파악할 수 있습니다. 또한 맞춤형 대시보드를 통해서 모든 서비스 성능을 보기 좋고, 다른 프로세스에 미치는 영향을 확인할 수 있습니다.</p>\n<h3 id=\"kubenetes-및-가상-머신을-통한-간편한-배포\"><a href=\"#kubenetes-%EB%B0%8F-%EA%B0%80%EC%83%81-%EB%A8%B8%EC%8B%A0%EC%9D%84-%ED%86%B5%ED%95%9C-%EA%B0%84%ED%8E%B8%ED%95%9C-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubenetes 및 가상 머신을 통한 간편한 배포</h3>\n<p>Istio는 컨테이너 및 가상 머신을 포함하여 기존과 최신 워크로드 모두에 대해 가시성과 네트워크 제어를 제공합니다.</p>\n<p>즉, Istio는 플랫폼에 독립적입니다.</p>\n<h3 id=\"고급-기능을-통해-부하-분산-최소화\"><a href=\"#%EA%B3%A0%EA%B8%89-%EA%B8%B0%EB%8A%A5%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%B6%80%ED%95%98-%EB%B6%84%EC%82%B0-%EC%B5%9C%EC%86%8C%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>고급 기능을 통해 부하 분산 최소화</h3>\n<p>클라이언트 기반 라우팅, Canary Rollout과 같은 고급 기능과 함께 모든 트래픽에 자동화된 부하 분산을 사용할 수 있습니다.</p>\n<h3 id=\"정책-시행\"><a href=\"#%EC%A0%95%EC%B1%85-%EC%8B%9C%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정책 시행</h3>\n<p>액세스 제어, 비율 제한, 할당량을 지원하는 플러그인 가능한 정책 레이어 및 구성 API를 사용하여 정책을 시행할 수 있습니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>Istio에 대해 내용을 정리했습니다. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://twofootdog.tistory.com/78\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://twofootdog.tistory.com/78</a></li>\n<li><a href=\"https://www.redhat.com/ko/topics/microservices/what-is-istio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.redhat.com/ko/topics/microservices/what-is-istio</a></li>\n<li><a href=\"https://cloud.google.com/learn/what-is-istio?hl=ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cloud.google.com/learn/what-is-istio?hl=ko</a></li>\n<li><a href=\"https://arisu1000.tistory.com/27865\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://arisu1000.tistory.com/27865</a></li>\n</ul>\n"}},{"node":{"title":"[Architecture] MSA : CQRS 패턴이란","path":"/02-architecture-msa/","date":"23. December 2020","timeToRead":7,"description":" CQRS 패턴에 대해 정리합니다.","content":"<h1 id=\"msa--cqrs-패턴의-정의과-종류\"><a href=\"#msa--cqrs-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98%EA%B3%BC-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA : CQRS 패턴의 정의과 종류</h1>\n<p>지난 시간에는 MSA와 MSA 패턴 중, SAGA 패턴에 대해 알아보았습니다.</p>\n<ul>\n<li><a href=\"Azderica.github.io/00-architecture-msa/\">MSA 개념 잡기</a></li>\n<li><a href=\"Azderica.github.io/01-architecture-msa/\">MSA : SAGA 패턴</a></li>\n</ul>\n<br/>\n<h2 id=\"cqrs-패턴이란\"><a href=\"#cqrs-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CQRS 패턴이란.</h2>\n<p>CQRS 패턴이란 Command and Query Responsibility Segregation의 약자입니다. 이를 해석하면 <strong>명령과 쿼리의 역할을 구분</strong>한다는 것입니다. 즉, Command (<strong>C</strong>reate, Insert, <strong>U</strong>pdate, <strong>D</strong>elete)와 쿼리(Select - <strong>R</strong>ead)의 책임을 분리하는 의미를 가집니다.</p>\n<br/>\n<h2 id=\"cqrs가-왜-필요한가요\"><a href=\"#cqrs%EA%B0%80-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CQRS가 왜 필요한가요?</h2>\n<p>전통적인 CRUD 아키텍처 기반에서 Application을 개발 및 운영하다가 보면, 자연스럽게 <strong>Domain Model의 복잡도가 증가하고 그에 따라 유지보수의 비용이 증가하고 Domain model은 설계의 방향과 다르게 변질</strong>됩니다. 특히 요즘처럼 고급화된 UX, 어려워진 Business, 자주 변하는 요구사항에서 이러한 Model을 설계하는 것은 어려워졌습니다.</p>\n<p>이러한 흐름에서 확인해보니, 대부분의 정책이나 제약은 데이터 변경(C, U, D)에서 처리되고, 데이터 조회(R) 작업은 단순 데이터 조회인데, 동일 Domain Model로 처리하면 필요하지 않은 Domain 속성들로 인해 <strong>복잡도가 증가</strong>합니다.</p>\n<p>따라서 이 문제를 해결하기위해서 <strong>명령을 처리하는 책임</strong>과 <strong>조회를 처리하는 책임</strong>을 <strong>분리</strong>하는 해법을 찾았고 이 방법이 CQRS입니다.</p>\n<br/>\n<h2 id=\"cqrs의-종류\"><a href=\"#cqrs%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CQRS의 종류</h2>\n<blockquote>\n<p>전통적인 CRUD 시스템.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103001594-b0cfe380-4570-11eb-8166-ab5f026e534a.png\" alt=\"original-crud\"></p>\n<p>기존의 전통적인 CRUD 시스템은 다음 그림과 같은 계층 구조를 지니고 있습니다. 이에 CQRS 패턴을 적용하기 위한 방법으로 크게 최소 <strong>3가지 방법</strong>이 있습니다.</p>\n<h3 id=\"1-simple-cqrs-architecture\"><a href=\"#1-simple-cqrs-architecture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Simple CQRS architecture</h3>\n<p>이는 단일 Data Store에 Command Query Model을 분리된 계층으로 나누는 방식입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103002233-df9a8980-4571-11eb-9156-a6d3675bc07b.png\" alt=\"Simple CQRS architecture\"></p>\n<p>해당 그림처럼 Database(RDBMS)는 분리하지 않고 <strong>기존 구조를 유지하고 Model Layer 부분과 Command와 Query Model로 분리</strong>하는 수준으로 간단하게 적용할 수 있습니다.</p>\n<h4 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점.</h4>\n<ul>\n<li>훨씬 단순하게 구현 및 적용할 수 있습니다.</li>\n</ul>\n<h4 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점.</h4>\n<ul>\n<li>동일한 Database 사용에 따른 성능상 문제점은 개선하지 못합니다.</li>\n</ul>\n<h3 id=\"2-cqrs-with-separated-persistance-mechanisms\"><a href=\"#2-cqrs-with-separated-persistance-mechanisms\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. CQRS with separated persistance mechanisms</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103002567-79facd00-4572-11eb-8d8a-723176ff0e35.png\" alt=\"CQRS with separated persistance mechanisms\"></p>\n<p>해당 방법은 Command용 Database와 Query용 Database를 분리하고 별도의 Broker를 통해서 이 둘간의 Data를 동기화 처리하는 방식입니다. 이 경우에는 데이터를 조회하려는 서비스들은 서비스에 맞는 저장소를 선택할 수 있기 때문에 polyglot 구조로 구성할 수도 있습니다. 이 경우에는 각각의 Model에 맞게 저장소(RDBMS, NOSQL, Cache)를 튜닝해서 사용할 수 있습니다.</p>\n<ul>\n<li><strong>polyglot</strong> 이란? 다수의 Database를 혼용하여 사용하는 것입니다.</li>\n</ul>\n<h4 id=\"장점-1\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점</h4>\n<ul>\n<li>Simple CQRS 에서 거론되는 Database 사용에 발생하는 성능 관점의 문제를 해결할 수 있습니다.</li>\n</ul>\n<h4 id=\"단점-1\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점</h4>\n<ul>\n<li>동기화 처리를 위한 Broker의 가용성과 신뢰도가 보장이 되어야합니다.</li>\n</ul>\n<h3 id=\"3-eventsouring-model\"><a href=\"#3-eventsouring-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. EventSouring Model</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103003262-ceeb1300-4573-11eb-8591-f4ceb1a7312e.png\" alt=\"EventSouring Model\"></p>\n<p>해당 방법은 이벤트 소싱(Event Sourcing)을 적용한 구조입니다.</p>\n<p><strong>이벤트 소싱</strong>이란 <strong>Application 내의 모든 Activity를 이벤트로 전환해서 이벤트 스트림(Event Stream)을 별도의 Database에 저장하는 방식</strong>을 의미합니다. EvensSourcing Model이란 이벤트 스트림을 저장하는 Database에는 오직 데이터 추가만 가능하고 계속적으로 쌓이는 데이터를 구체화시키는 시점에서 그때까지 구축된 데이터를 바탕으로 조회 대상 데이터를 작성하는 방법을 의미합니다. 즉, Application 내의 상태 변경을 이력으로 관리하는 패턴의 발전된 형태로 이해하면 됩니다.</p>\n<p>이벤트 소싱의 이벤트 스트림은 오직 추가만 가능하고, 필요로 하는 시점에 구체화 단계를 가지게 되고 이 처리과정이 CQRS의 모델 분리 관점에서 잘 맞기 때문에 주로 선택한다.</p>\n<p><strong>CQRS 패턴에 이벤트 소싱은 필수가 아니지만 이벤트 소싱에는 CQRS가 필요합니다.</strong></p>\n<br/>\n<h2 id=\"cqrs의-이점\"><a href=\"#cqrs%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CQRS의 이점.</h2>\n<ul>\n<li>\n<p>독립적인 크기 조정</p>\n<ul>\n<li>CQRS를 통해 읽기 및 쓰기의 워크로드를 독립적으로 확장할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>최적화된 데이터 스키마</p>\n<ul>\n<li>읽기 쪽에서는 쿼리에 최적화된 슼니마를 사용하고 쓰기에서는 업데이트에 최적화된 스키마를 사용할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>보안</p>\n<ul>\n<li>올바른 도메인 엔터티만 데이터에 쓰기를 수행할 수 있는지 쉽게 확인 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>유연한 모델 생성</p>\n<ul>\n<li>대부분의 복잡한 비즈니스 논리는 쓰기 모델로 이동시키고 읽기모델은 상대적으로 간단하게 정리하여 유지가능하고 유연한 모델을 만들 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>단순한 쿼리</p>\n<ul>\n<li>읽기 데이터베이스에서 구체화된 뷰를 저장하여 쿼리 시 복잡한 조인을 방지할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>이전의 게시글과 오늘 게시글을 통해서 <strong>CQRS 패턴은 Database의 성능을 올리기 위해서 적용된 패턴</strong>이고 <strong>SAGA 패턴은 MSA환경에서의 데이터 일관성을 유지하기 위해 제안된 방법</strong>으로 이해하였습니다.</p>\n<p>MSA에 대해 좀 더 공부해야하는 부분이나, 추가적으로 공부를 해야하는 부분이 있다면 다시 정리해보겠습니다. 회사 업무에서는 MSA 구조를 사용하는 일은 아직 없지만, 혹시라도 이후에 적용하게 되었을 때를 대비학는 의미 + 개인적인 호기심으로 글을 정리했습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.popit.kr/cqrs-eventsourcing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.popit.kr/cqrs-eventsourcing/</a></li>\n<li><a href=\"https://docs.microsoft.com/ko-kr/azure/architecture/patterns/cqrs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.microsoft.com/ko-kr/azure/architecture/patterns/cqrs</a></li>\n<li><a href=\"https://engineering-skcc.github.io/microservice%20outer%20achitecture/inner-architecture-cqrs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engineering-skcc.github.io/microservice%20outer%20achitecture/inner-architecture-cqrs/</a></li>\n<li><a href=\"https://code-masterjung.tistory.com/80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://code-masterjung.tistory.com/80</a></li>\n</ul>\n"}},{"node":{"title":"[Architecture] MSA : SAGA 패턴이란","path":"/01-architecture-msa/","date":"22. December 2020","timeToRead":7,"description":" SAGA 패턴에 대해 정리합니다.","content":"<h1 id=\"msa--saga-패턴의-정의과-종류\"><a href=\"#msa--saga-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98%EA%B3%BC-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA : SAGA 패턴의 정의과 종류</h1>\n<p>이전에 MSA 개념에 대해 잡아보았습니다. 오늘은 MSA를 듣다보면 꼭 듣게 되는 SAGA 패턴에 대해 공부해보겠습니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/00-architecture-msa/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MSA 개념 잡기</a></li>\n</ul>\n<br/>\n<h2 id=\"들어가기-앞서서\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>들어가기 앞서서.</h2>\n<p>기존의 Monolithic와 MSA 아키텍처에 대해서는 이전 게시글에서 정리했습니다. 오늘은 좀 더 MSA에 대해 이야기할려고 합니다. MSA 아키텍처를 구성하기 어려운 이유 중 하나는 <strong>트랜적션</strong> 의 문제입니다.</p>\n<p>기존의 Monolithic 환경에서는 DBMS가 기본적으로 제공해주는 트랜잭선 기능을 통해서 데이터 commit이나 rollback을 통해서 일관성있게 관리하였습니다. 그러나 Applcation 과 DB가 분산되면서 해당 트랜잭션 처리를 단일 DBMS에서 제공하는 기능으로는 해결할 수 없습니다.</p>\n<h3 id=\"대안--two-phase-commit\"><a href=\"#%EB%8C%80%EC%95%88--two-phase-commit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대안 : Two-Phase Commit?</h3>\n<p>여러 서비스 간에 데이터 일관성을 유지하기 위해서 전통적인 방법인 Two-Phase commit 과 같은 방법을 사용했습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102893652-4f8f0e00-44a5-11eb-9f1a-f4d3508e6c97.png\" alt=\"two-phase commit\"></p>\n<p>다만 이 방법은 하나의 서비스가 장애가 있는 경우나 각각의 서비스에 동시에 Rocking이 걸리게 되면 성능의 문제가 발생하기 때문에 비효율적입니다. 더나아가 각각의 서비스가 다른 instance에 있기 때문에 이를 통제하는데 어려움이 있습니다.</p>\n<blockquote>\n<p>트랜잭션이란?</p>\n</blockquote>\n<p>트랜잭션이란 데이터베이스의 상태를 변화시키기 위해서 수행하는 작업의 단위를 의미합니다. 트랜잭션은 4가지의 특성(원자성, 일관성, 독립성, 지속성)을 지켜야합니다. 이에 대해 상세하게 다루기에는 주제에 너무 벗어난 주제이기 때문에 다른 게시글로 정리하겠습니다.</p>\n<br/>\n<h2 id=\"saga-패턴의-정의\"><a href=\"#saga-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SAGA 패턴의 정의</h2>\n<p>위의 문제를 해결하기 위해서 SAGA 패턴이 등장했습니다.</p>\n<p>SAGA 패턴이란 <strong>마이크로서비스들끼리 이벤트를 주고 받아 특정 마이크로서비스에서의 작업이 실패하면 이전까지의 작업이 완료된 마이크서비스들에게 보상 (complemetary) 이벤트를 소싱함으로써 분산 환경에서 원자성(atomicity)을 보장</strong>하는 패턴입니다.</p>\n<p>이를 그림으로 표현하면 다음과 같습니다. SAGA 패턴의 이벤트 성공 시는 다음과 같이 동작합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102894284-33d83780-44a6-11eb-9cb0-1c526edd5642.png\" alt=\"saga-pattern-success\"></p>\n<p>SAGA 패턴의 이벤트 실패 시는 다음과 같이 실패 이벤트를 주어 처리합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102894291-35a1fb00-44a6-11eb-93bf-2371f322c99c.png\" alt=\"saga-pattern-fail\"></p>\n<p>해당 SAGA 패턴의 핵심은 <strong>트랜잭션의 관리주체가 DBMS에 있는 것이 아닌 Application</strong>에 있습니다. Application이 분산되어 있을때는 각 Applicatin은 하위에 존재하는 DB는 local 트랜잭션만 담당합니다.</p>\n<p>즉, 각각의 Application의 트랜잭션 요청의 실패로 인한 Rollback 처리(보상 트랜잭션)은 Application에서 구현합니다.</p>\n<p>이러한 과정을 통해서 순차적으로 트랜잭션이 처리되며, 마지막 트랜잭션이 끝났을 때 데이터가 완전히 영속되었음을 확인하고 종료합니다. 이 방법을 통해서 최종 일관성(Eventually Consistency)를 달성할 수 있습니다.</p>\n<br/>\n<h2 id=\"saga-패턴의-종류\"><a href=\"#saga-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SAGA 패턴의 종류</h2>\n<p>일반적으로 SAGA 패턴은 크게 2가지로 나누어집니다. 하나는 <strong>Choreography based SAGA pattern</strong>이고 다른 하나는 <strong>Orchestration based SAGA pattern</strong>입니다.</p>\n<h3 id=\"choreography-based-saga-pattern\"><a href=\"#choreography-based-saga-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Choreography based SAGA pattern</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102895303-ccbb8280-44a7-11eb-8b80-8b87630db5f5.png\" alt=\"Choreography-Based Saga Success\"></p>\n<p>Choreography-based Saga 패턴은 보유한 서비스 내의 Local 트랜잭션을 관리하며 트랜잭션이 종료하게 되면 완료 Event를 발행합니다. 만약 그 다음 수행해야할 트랜잭션이 있으면 해당 트랜잭션을 수행해야하는 App으로 이벤트를 보내고, 해당 App은 완료 Event를 수신받고 다음 작업을 진행합니다. 이를 순차적으로 수행합니다. 이때 Event는 Kafka와 같은 메시지 큐를 통해서 비동기 방식으로 전달할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102895310-cf1ddc80-44a7-11eb-9941-de72656dd3a8.png\" alt=\"Choreography-Based Saga Fail\"></p>\n<p>Choreography-base Saga 패턴에서는 각 App별로 트랜잭션을 관리하는 로직이 있습니다. 이를 통해서 중간에 트랜잭션이 실패하면 해당 트랜잭션 취소 처리를 실패한 App에서 보상 Event를 발행해서 Rollback 처리를 시도합니다.</p>\n<h4 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점</h4>\n<ul>\n<li>구성하기 편합니다.</li>\n</ul>\n<h4 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점</h4>\n<ul>\n<li>운영자 입장에서 트랜잭션의 현재 상태를 확인하기 어렵습니다.</li>\n</ul>\n<h3 id=\"orchestration-based-saga-pattern\"><a href=\"#orchestration-based-saga-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Orchestration based SAGA pattern</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102895290-c927fb80-44a7-11eb-88ee-8f08ec4b2c21.png\" alt=\"Orchestration-Based Saga Success\"></p>\n<p>Orchestration-Based Saga 패턴은 트랜잭션 처리를 위해 Saga 인스턴스(Manager)가 별도로 존재합니다. 트랜잭션에 관여하는 모든 App은 Manager에 의해 점진적으로 트랜잭션을 수행하며 결과를 Manager에게 전달하게 되고, 비지니스 로직상 마지막 트랜잭션이 끝나면 Manager를 종료해서 전체 트랜잭션 처리를 종료합니다. 만약 중간에 실패하게 되면 Manager에서 보상 트랜잭션을 발동하여 일관성을 유지합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102895323-d47b2700-44a7-11eb-9bc1-2c46cf517c06.png\" alt=\"Orchestration-Based Saga Fail\"></p>\n<p>해당 Orchestration-Based Saga 패턴은 모든 관리를 Manager가 호출하기 때문에 분산트랜잭션의 중앙 집중화가 이루어집니다.</p>\n<h4 id=\"장점-1\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점</h4>\n<ul>\n<li>서비스간의 복잡성이 줄어들어서 구현 및 테스트가 쉬워집니다.</li>\n<li>트랜잭션의 현재 상태를 Manager가 알고 있으므로 롤백을 하기 쉽습니다.</li>\n</ul>\n<h4 id=\"단점-1\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점</h4>\n<ul>\n<li>관리를 해야하는 Orchestrator 서비스가 추가되어야하기 때문에 인프라 구현이 복잡해집니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>MSA 아키텍처 중 가장 유명한 SAGA 패턴에 대해 알아보았습니다. 다만 항상 SAGA 패턴이 좋다고는 볼 수 없습니다. 비지니스 로직상 트랜잭션 처리가 반드시 필요한 경우에만 사용하는 것이 좋습니다. 그렇지 않으면 여러곳에서 트랜잭션 처리 지옥을 경험할 수 있기 때문에 필요한 곳에서만 사용할 수 있도록 비지니스 로직을 설계하고 사용하는 것이 좋습니다.</p>\n<p>다음 게시글에서는 CQRS 패턴에 대해서 정리해보겠습니다. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://jjeongil.tistory.com/1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jjeongil.tistory.com/1100</a></li>\n<li><a href=\"https://cla9.tistory.com/22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cla9.tistory.com/22</a></li>\n<li><a href=\"https://velog.io/@dvmflstm/SAGA-pattern%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%84%EC%82%B0-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@dvmflstm/SAGA-pattern%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%84%EC%82%B0-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0</a></li>\n<li><a href=\"https://ichi.pro/ko/maikeulo-seobiseu-akitegcheo-saga-paeteon-ilan-mueos-imyeo-eolmana-jung-yohabnikka-94512583990635\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ichi.pro/ko/maikeulo-seobiseu-akitegcheo-saga-paeteon-ilan-mueos-imyeo-eolmana-jung-yohabnikka-94512583990635</a></li>\n</ul>\n"}},{"node":{"title":"[Architecture] MSA 개념 잡기","path":"/00-architecture-msa/","date":"21. December 2020","timeToRead":4,"description":" 마이크로 서비스 아키텍처에 대한 개념을 정리합니다 ","content":"<h1 id=\"microservice-architecture\"><a href=\"#microservice-architecture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Microservice Architecture</h1>\n<p>크게 아키텍처는 Monolithic Architecture과 Microservice Architecture 등으로 구성됩니다. 그러나 많은 회사들이 Monolithic 아키텍처의 단점으로 인해 MSA 아키텍처로 넘어가기 위해 노력하려고 합니다. 오늘은 그 차이에 대해 정리하고, 그 개념에 대해 정리해볼려고 합니다.</p>\n<br/>\n<h2 id=\"msa의-등장\"><a href=\"#msa%EC%9D%98-%EB%93%B1%EC%9E%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA의 등장</h2>\n<p>MSA는 microservice architecture의 약자로서, <strong>하나의 큰 어플리케이션을 여러개의 작은 어플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처</strong> 입니다.</p>\n<h3 id=\"기존-monolithic의-한계\"><a href=\"#%EA%B8%B0%EC%A1%B4-monolithic%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기존 Monolithic의 한계</h3>\n<blockquote>\n<p>왜 필요할까요?</p>\n</blockquote>\n<p>기존의 서비스는 Monolithic Architecture의 구조를 가지고 있었습니다. </p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102787038-cebc0d80-43e3-11eb-9a67-829adb6ebe51.png\" alt=\"monolithic-vs-msa\"></p>\n<p>Monolithic Architecture은 소프트웨어의 모든 구성요소가 한 프로젝트에 통합되어 있는 서비스입니다. 현재 많은 회사들의 소프트웨어가 <strong>레거시</strong> 또는 필요로 인해서 Monolithic 형태로 구현되어 있습니다.</p>\n<p>소규모의 프로젝트에서는 Monolithic 형태는 간단하며, 유지보수가 편하기 때문에 선호됩니다.</p>\n<p>그러나 일정 규모 이상을 넘어가면 Monolithic은 많은 한계점에 봉착합니다.</p>\n<ul>\n<li>전체 시스템 구조 파악의 문제</li>\n<li>빌드 시간 및 테스트, 배포 시간의 급증</li>\n<li>서비스의 특정 부분만 scale-out을 하기 어렵습니다.</li>\n<li><strong>부분의 장애가 전체 서비스의 장애로 이어질 수도 있습니다.</strong></li>\n</ul>\n<p>이러한 이유로 인해서, MSA가 등장하게 되었습니다.</p>\n<br/>\n<h2 id=\"msa의-정의\"><a href=\"#msa%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA의 정의</h2>\n<p>MSA의 핵심은 <strong>small services, each running in its own process</strong> + <strong>independently deployable</strong> 으로 표현할 수 있습니다.</p>\n<p>이를 번역한다면, <strong>스스로 돌아갈 수 있는 서비스</strong>와 <strong>독립적인 배포 기능</strong>입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102787740-e8118980-43e4-11eb-8760-c52424630810.png\" alt=\"architecture-diff\"></p>\n<p>soa를 추가해서 좀 더 자세하게 보자면.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/102787984-4474a900-43e5-11eb-8a27-4e60f3aecfca.png\" alt=\"architecture-diff-2\"></p>\n<p>다음과 같이 구성됩니다.</p>\n<br/>\n<h2 id=\"msa의-장단점\"><a href=\"#msa%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA의 장단점</h2>\n<h3 id=\"msa의-장점\"><a href=\"#msa%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA의 장점</h3>\n<h4 id=\"1-배포\"><a href=\"#1-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 배포</h4>\n<ul>\n<li>서비스 별 개별 배포가 가능합니다. (배포 시 전체 서비스의 중단이 없습니다.)</li>\n<li>요구사항을 반영하여 빠르게 배포 가능합니다.</li>\n</ul>\n<h4 id=\"2-확장\"><a href=\"#2-%ED%99%95%EC%9E%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 확장</h4>\n<ul>\n<li>특정 서비스에 대한 확장성이 유리합니다. (scale-out)</li>\n<li>클라우드 사용 시 적합합니다.</li>\n</ul>\n<h4 id=\"3-장애-해결error-handling\"><a href=\"#3-%EC%9E%A5%EC%95%A0-%ED%95%B4%EA%B2%B0error-handling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 장애 해결(Error Handling)</h4>\n<ul>\n<li>일부 장애가 전체 서비스로 확장될 가능성이 적습니다.</li>\n<li>부분적으로 발생하는 장애에 대해 격리가 수월합니다.</li>\n</ul>\n<h4 id=\"4-그-외\"><a href=\"#4-%EA%B7%B8-%EC%99%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 그 외</h4>\n<ul>\n<li>새로운 기술을 적용하기 유연합니다.</li>\n<li>서비스를 polyglot(여러 언어를 사용하여)하게 개발 및 운영할 수 있습니다.</li>\n</ul>\n<h3 id=\"msa의-단점\"><a href=\"#msa%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA의 단점</h3>\n<h4 id=\"1-성능-이슈\"><a href=\"#1-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 성능 이슈</h4>\n<ul>\n<li>서비스 간 호출 시 API를 사용하므로, 통신 비용이나 Latency에 대해 이슈가 존재합니다. 다만 일반적으로 Monolithic에서 MSA로 넘어오는 이유가 Monolithic으로 더이상 성능적인 한계에 봉착했을 때 넘어오는 느낌이 있습니다...</li>\n<li>최근 우아한 테크 컨퍼런스에서는 이벤트 발행을 통해서 해당 부분을 해결했다고 했는데 이부분은 한번 참고해서 보면 좋을 듯 합니다.</li>\n</ul>\n<h4 id=\"2-테스트--트랜잭션\"><a href=\"#2-%ED%85%8C%EC%8A%A4%ED%8A%B8--%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 테스트 / 트랜잭션</h4>\n<ul>\n<li>서비스가 분리되어 있어 테스트와 트랜잭션의 복잡도가 증가합니다.</li>\n<li>많은 자원이 필요합니다.</li>\n</ul>\n<h4 id=\"3-데이터-관리\"><a href=\"#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B4%80%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 데이터 관리</h4>\n<ul>\n<li>데이터가 여러서비스에 분산되어 조회하기 어렵습니다.</li>\n<li>데이터를 관리하기 어렵습니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>간단하게 MSA에 대해 개념을 잡았습니다. 다음에는 이 MSA에 대한 개념을 바탕으로 SAGA 패턴과 CQRS 패턴에 대해 작성하겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://velog.io/@tedigom/MSA-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-1-MSA%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90-3sk28yrv0e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@tedigom/MSA-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-1-MSA%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90-3sk28yrv0e</a></li>\n<li><a href=\"https://www.samsungsds.com/kr/insights/msa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.samsungsds.com/kr/insights/msa.html</a></li>\n</ul>\n"}}]}}},"context":{}}