{"hash":"314c4422387ef2cae421ff768d6b6746d38a40d1","data":{"tag":{"title":"DI","belongsTo":{"edges":[{"node":{"title":"[Spring] Autowired 와 private final의 차이","path":"/00-spring-injection/","date":"17. July 2021","timeToRead":1,"description":"의존성 주입을 사용하기 위해 Autowired 어노테이션과, private final 사용의 차이점에 대해 정리합니다.","content":"<h1 id=\"autowired-와-private-final의-차이\"><a href=\"#autowired-%EC%99%80-private-final%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Autowired 와 private final의 차이</h1>\n<p>스프링을 개발하다보면, Autowired와 private final을 사용해서 의존성을 주입합니다. 다만, 이에 대한 차이점에 대해 의문이 존재했습니다.</p>\n<h2 id=\"필드-주입과-생성자-주입\"><a href=\"#%ED%95%84%EB%93%9C-%EC%A3%BC%EC%9E%85%EA%B3%BC-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A3%BC%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>필드 주입과 생성자 주입</h2>\n<h3 id=\"field-injection-필드-주입\"><a href=\"#field-injection-%ED%95%84%EB%93%9C-%EC%A3%BC%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Field Injection (필드 주입)</h3>\n<p>필드에 <code class=\"language-text\">@Autowired</code> 어노테이션을 붙여주면 자동으로 의존성이 주입됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestRepository</span> testRepository<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"constructor-based-di-생성자-기반-di\"><a href=\"#constructor-based-di-%EC%83%9D%EC%84%B1%EC%9E%90-%EA%B8%B0%EB%B0%98-di\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Constructor Based DI (생성자 기반 DI)</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TestRepository</span> testRepository<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 생략하고 @AllArgsConstructor 어노테이션 사용해도 됩니다.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestRepository</span> testRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>testRepository <span class=\"token operator\">=</span> testRepository<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"생성자-주입-방법이-더-좋은-이유\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A3%BC%EC%9E%85-%EB%B0%A9%EB%B2%95%EC%9D%B4-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성자 주입 방법이 더 좋은 이유</h2>\n<ul>\n<li>\n<p>순환 참조를 방지할 수 있습니다.</p>\n<ul>\n<li>순환 참조 발생 시, 애플리케이션이 구동되지 않습니다.</li>\n</ul>\n</li>\n<li>\n<p>테스트에 용이합니다.</p>\n<ul>\n<li>단순 POJO를 이용한 테스트 코드를 만들 수 있습니다.</li>\n</ul>\n</li>\n<li>코드의 품질을 높일 수 있습니다.</li>\n<li>\n<p>불변성을 얻을 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">final</code>을 사용할 수 있습니다.</li>\n<li>실행 중에 객체가 변하는 것을 막을 수 있습니다.</li>\n</ul>\n</li>\n<li>오류를 방지할 수 있습니다.</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/63259116/what-is-the-difference-between-using-autowired-annotation-and-private-final\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Autowired VS private final</a></li>\n<li><a href=\"https://deinum.biz/2020-07-28-Dependency-Injection/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dependency Injection in Java</a></li>\n<li><a href=\"https://life-with-coding.tistory.com/433\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Autowired 와 DI</a></li>\n<li><a href=\"https://madplay.github.io/post/why-constructor-injection-is-better-than-field-injection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">생성자 주입이 Autowired 보다 권장하는 이유</a></li>\n</ul>\n"}}]}}},"context":{}}