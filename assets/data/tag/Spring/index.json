{"hash":"a48ca53256831608b767e7c070d0a68a0cbdb4b7","data":{"tag":{"title":"Spring","belongsTo":{"edges":[{"node":{"title":"[Java] JPA에 대해 정리하기","path":"/00-java-jpa/","date":"22. March 2021","timeToRead":5,"description":"JPA에 대해 정리합니다. ","content":"<h1 id=\"jpa\"><a href=\"#jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA</h1>\n<p>오늘은 앞으로 공부할 QueryDsl, Jooq 등의 개념을 공부하기 위해서 앞서 가장 기본적인 내용을 정리합니다.</p>\n<h2 id=\"jpa-개념\"><a href=\"#jpa-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 개념</h2>\n<p>JPA는 <strong>Java Persistence API</strong> 의 약자로서, RDBMS와 OOP 객체 사이의 불일치에서 오는 패러다임을 해결하기 위해서 만들어졌습니다. 이러한 JPA는 ORM(Object-Relational Mapping) 기술입니다.</p>\n<h3 id=\"orm\"><a href=\"#orm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ORM?</h3>\n<p>ORM이란 Object Relational Mapping, 객체-관계 매핑의 줄임말입니다.</p>\n<p>좀 더 풀어 설명하자면 OOP의 객체 구현 클래스와 RDBMS에서 사용하는 테이블을 자동으로 매핑하는 것을 의미합니다. 이 때, 클래스와 테이블은 서로 기존부터 호환 가능성을 두고 만들어진 것이 아니므로 불일치가 발생하는데 이를 ORM을 통해서 객체 간의 관계를 바탕으로 SQL문을 자동으로 생성하여 불일치를 해결합니다. 이 방법을 통해서 SQL문을 짤 필요없이 객체를 통해 간접적으로 데이터베이스를 조작할 수 있습니다.</p>\n<p>이를 이미지로 나타내면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/111995242-0ca00d80-8b5c-11eb-9662-7f60f1dfc0c7.png\" alt=\"image\"></p>\n<p>좀 더 자세한 ORM은 다른 글에서 따로 정리하겠습니다.</p>\n<h3 id=\"그래서-jpa를-좀-더-설명하자면\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-jpa%EB%A5%BC-%EC%A2%80-%EB%8D%94-%EC%84%A4%EB%AA%85%ED%95%98%EC%9E%90%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그래서 JPA를 좀 더 설명하자면.</h3>\n<p>앞서 이야기 나온 ORM 기술을 구현하기 위해 나온 프레임워크가 Hibernate이고, 그 외에도 다른 프레임워크(CoCobase, TopLink) 등이 등장했습니다. 이러한 ORM 구현 프레임워크에 대한 <strong>표준화</strong>가 필요하게 되었는데 이가 바로 JPA입니다.</p>\n<p>JPA는 어플리케이션과 DBMS 사이의 인터페이스 역할을 해주기 때문에. 개발자는 JPA 인터페이스에 맞춰우 구현되어 있는 기능을 사용하면 됩니다.</p>\n<p>이를 잘 표현한 이미지는 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/111996259-2b52d400-8b5d-11eb-8fdb-1f6a91096d4c.png\" alt=\"image\"></p>\n<p>다음과 같이, 개발자는 SQL를 직접 사용할 필요없이 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"jpa-동작-과정\"><a href=\"#jpa-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 동작 과정</h2>\n<p>JPA는 다음과 같이 동작합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/112302631-a394d300-8cde-11eb-8c1e-3693ae32a978.png\" alt=\"image\"></p>\n<p>JPA는 애플리케이션과 JDBC 사이에서 동작합니다.</p>\n<ul>\n<li>개발자가 JPA 사용시, JPA 내부에서 JDBC API를 사용하여 SQL을 호출하고 DB와 통신합니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpa를-사용해야하는-이유\"><a href=\"#jpa%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA를 사용해야하는 이유?</h2>\n<h3 id=\"1-sql-중심-개발---객체-중심-개발\"><a href=\"#1-sql-%EC%A4%91%EC%8B%AC-%EA%B0%9C%EB%B0%9C---%EA%B0%9D%EC%B2%B4-%EC%A4%91%EC%8B%AC-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. SQL 중심 개발 -> 객체 중심 개발</h3>\n<p>SQL 중심의 개발 문제를 해결합니다.</p>\n<p>SQL 중심의 개발 문제는 다음과 같습니다.</p>\n<ul>\n<li>지루한 코드가 반복됩니다.</li>\n<li>객체 지향과 RDB 간의 패러다임이 불일치됩니다.</li>\n<li>객체 지향은 상속 관계를 지원합니다.</li>\n<li>모델링 과정에서의 문제를 해결합니다.</li>\n<li>\n<p>객체 그래프 탐색에서의 문제를 해결합니다.</p>\n<ul>\n<li>SQL 중심 개발은 객체 그래프를 탐색할 수 없습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-생산성\"><a href=\"#2-%EC%83%9D%EC%82%B0%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 생산성</h3>\n<ul>\n<li>JPA을 사용함으로서 <code class=\"language-text\">java.collection</code>처럼 편하게 사용가능합니다.</li>\n<li>\n<p>간단한 CRUD를 제공합니다.</p>\n<ul>\n<li><code class=\"language-text\">jpa.persist</code>, <code class=\"language-text\">find</code>, <code class=\"language-text\">set~</code>, <code class=\"language-text\">jpa.remove</code></li>\n</ul>\n</li>\n<li>수정이 간단합니다.</li>\n</ul>\n<h3 id=\"3-유지보수\"><a href=\"#3-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 유지보수</h3>\n<ul>\n<li>기존처럼 모든 SQL을 수정할 필요가 없습니다.</li>\n<li>JPA에서는 필드만 추가하고, SQL은 JPA가 처리합니다.</li>\n</ul>\n<h3 id=\"4-패러다임-불일치의-해결\"><a href=\"#4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-%EB%B6%88%EC%9D%BC%EC%B9%98%EC%9D%98-%ED%95%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 패러다임 불일치의 해결</h3>\n<ul>\n<li>상속, 연관관계, 객체 그래프 탐색, 비교와 같은 패러다임의 불일치 문제를 해결해줍니다.</li>\n</ul>\n<h3 id=\"5-성능적-이슈\"><a href=\"#5-%EC%84%B1%EB%8A%A5%EC%A0%81-%EC%9D%B4%EC%8A%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 성능적 이슈</h3>\n<ul>\n<li>JPA는 애플리케이션과 데이터베이스 사이에서 다양한 성능 최적화 기능을 제공합니다.</li>\n<li>Ex. 동일 데이터 find로 2번 접근하는 경우, 재사용을 통해서 사용합니다.</li>\n</ul>\n<h3 id=\"6-데이터-접근-추상화와-벤더-독립성\"><a href=\"#6-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC-%EC%B6%94%EC%83%81%ED%99%94%EC%99%80-%EB%B2%A4%EB%8D%94-%EB%8F%85%EB%A6%BD%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 데이터 접근 추상화와 벤더 독립성</h3>\n<ul>\n<li>애플리케이션은 처음 선택한 데이터베이스 기술에 종속되고 다른 데이터베이스로 변경하기 어렵습니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpa-사용-방법\"><a href=\"#jpa-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 사용 방법</h2>\n<p>다음과 같은 메소드 들이 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">flush()</code></p>\n<ul>\n<li>Persistence Context의 변경 내용을 데이터베이스에 반영합니다.</li>\n<li>일반적으로는 직접 사용하지는 않고, 자바 애플리케이션에서 커밋 명령이 들어왔을 때 자동으로 실행됩니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">detach()</code></p>\n<ul>\n<li>특정 Entity를 준영속 상태(영속 컨텍스트의 관리를 받지않음)로 바꿉니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">clear()</code></p>\n<ul>\n<li>Persistence Context를 초기화합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">close()</code></p>\n<ul>\n<li>Persistence Context를 종료합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">merge()</code></p>\n<ul>\n<li>준영속 상태의 엔티티 특징</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">find()</code></p>\n<ul>\n<li>식별자 값을 통해 Entity를 찾습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">persist()</code></p>\n<ul>\n<li>생성도니 Entity를 Persistence Context와 DB에 저장합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">remove()</code></p>\n<ul>\n<li>식별자 값을 통해 Entity를 삭제합니다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://spring.io/projects/spring-data-jpa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Data JPA Doc</a></li>\n<li><a href=\"https://tinkerbellbass.tistory.com/24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 기본 개념</a></li>\n<li><a href=\"https://doublesprogramming.tistory.com/257\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 기본 개념 2</a></li>\n<li><a href=\"https://blog.woniper.net/255\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA란 무엇인가</a></li>\n<li><a href=\"http://okminseok.blogspot.com/2019/09/jpa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 코드 없이 적는 기본 개념</a></li>\n<li><a href=\"https://geonlee.tistory.com/207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM의 장단점</a></li>\n<li><a href=\"https://gmlwjd9405.github.io/2019/08/04/what-is-jpa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA란</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 자바 POJO란","path":"/00-java-pojo/","date":"15. February 2021","timeToRead":10,"description":"자바 POJO개념에 대해 정리합니다.","content":"<h1 id=\"pojoplain-object-java-object\"><a href=\"#pojoplain-object-java-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO(Plain Object Java Object)</h1>\n<p>오늘은 자바나 스프링 프레임워크에서 주로 사용하는 POJO에 대한 개념을 정리합니다.</p>\n<br/>\n<h2 id=\"pojo-란\"><a href=\"#pojo-%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO 란?</h2>\n<p>POJO란 <strong>Plain Old Java Object</strong>의 약자로서, 오래된 방식의 간단한 자바 오브젝트라는 말로 해석할 수 있습니다. 이를 다른 말로 표현하자면, Java EE 등의 무거운 프레임워크 들을 사용하게 되면서 해당 프레임워크에 종속된 \"무거운\" 객체를 사용함에 대해 이를 반발해서 사용되게 된 용어입니다.</p>\n<p>2009년에 마틴 파울러, 레베카 파슨스, 조시 맥켄지에 의해 만들어졌습니다. 아래는 POJO에 대한 기원입니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">&quot;We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it&#39;s caught on very nicely.&quot;\n\n우리는 왜 사람들이 자기들 시스템에 일반적인 오브젝트를 사용하는 것에 반대하는지 궁금했고, 그 이유는 단순한 오브젝트에 멋진 이름이 없기 때문이라고 결론을 지었습니다. 그래서 우리는 멋진 이름을 지었고, 매우 인기를 얻었습니다.</code></pre>\n<p>\"POJO\"라는 용어는 주요 Java 오브젝트 모델, 컨벤션 또는 프레임워크를 따르지 않는 Java 오브젝트를 의미합니다.</p>\n<p>예를 들자면, 다음과 같습니다. ORM 기술을 적용하기 위해 ORM 프레임 워크인 Hibernate을 사용하기 위해 이를 직접 의존하는 경우 POJO가 아니게됩니다. 이를 사용하기 위해서는 <strong>JPA라는 특정 표준 인터페이스를 통해서 사용해야합니다. (스프링의 PSA로 이야기할 수 있습니다.)</strong></p>\n<br/>\n<h2 id=\"pojo의-정의\"><a href=\"#pojo%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO의 정의</h2>\n<p>앞서 설명한 POJO를 좀 더 자세하게 설명하면 다음과 같이 설명할 수 있습니다.</p>\n<p>이상적인 POJO는 Java 언어 규약에 의해 강제된 것 이외의 제한에 구속되지 않는 Java 오브젝트입니다.</p>\n<p>따라서 POJO는 다음과 같은 것을 하면 안됩니다.</p>\n<ul>\n<li>미리 지정된 클래스를 extends하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>미리 정의된 인터페이스를 implement하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span> <span class=\"token keyword\">implements</span> javax<span class=\"token punctuation\">.</span>ejb<span class=\"token punctuation\">.</span><span class=\"token class-name\">EntityBean</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>미리 정의된 Annotation을 포함하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@javax</span><span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span><span class=\"token class-name\">Entity</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 기술적인 어려움과 다른 이유로 인해서 POJO-compliant은 기술된 많은 소프트웨어 제품이나 프레임워크들은 실제로 미리 정의된 Annotation을 제대로 동작하는 기능을 구현하기 위해 필요합니다.</p>\n<p>이와 같은 것들의 특징은 Annotation을 추가하기 전에는 POJO이고 Annotation이 제거된다면 POJO 상태로 되돌아간다면, 이를 POJO로 간주할 수 있습니다.</p>\n<br/>\n<h2 id=\"pojo에-대한-다양한-이야기\"><a href=\"#pojo%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO에 대한 다양한 이야기.</h2>\n<h3 id=\"javabeans\"><a href=\"#javabeans\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaBeans</h3>\n<p>JavaBean은 특별한 POJO의 변형으로 이야기 할 수 있습니다. JavaBean은 <code class=\"language-text\">Serializable</code> 인터페이스를 상속받고, 인수가 없는 생성자를 가지며 <code class=\"language-text\">getter/setter</code> 메소드를 사용하여서 속성에 액세스할 수 있습니다. 이러한 규칙을 통해서 JavaBeans에 대해 간단한 참조를 사용할 수 있습니다.</p>\n<p>이러한 방법을 통해서 프레임워크에서는 Bean의 정확한 유형을 알 필요없이 사용할 수 있습니다. 다만 JavaBeans가 완전히 구현되는 경우에는 <code class=\"language-text\">Serializable</code>를 구현해야기 때문에 POJO 모델을 약간 깨트릴 수도 있습니다. 하지만 이는 큰 부담이 되지는 않습니다.</p>\n<p>POJO를 구현한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> someProperty<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSomeProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> someProperty<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSomeProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> someProperty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someProperty <span class=\"token operator\">=</span> someProperty<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"ejbenterprise-javabeans\"><a href=\"#ejbenterprise-javabeans\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EJB(Enterprise JavaBeans)</h3>\n<p>기업의 IT 시스템의 요구사항이 늘어나고 기초적인 JDK로는 한계가 있어서 EJB 기술이 등장하였습니다. EJB의 경우에 아래의 문제를을 해결하기 위해 등장했습니다.</p>\n<ul>\n<li>기업의 업무 복잡도가 증가함에 따라 비지니스 로직이 복잡해졌습니다.</li>\n<li>사용자의 처리의 요구를 빠르고 안정이고 확장 가능한 형태로 유지하기 위해 필요한 로우레벨의 기술적인 처리요구가 필요합니다. (트랜잭션 처리, 상태 관리, 멀티스레딩, 리소스 풀링, 보안 등)</li>\n</ul>\n<p>다만 <strong>EJB의 경우에는 현실적이지 않고 과도한 엔지니어링으로 실패</strong>했습니다. EJB는 필요한 것이 많고, 복잡하며 컨테이너 밖에서는 정상적으로 동작하지 않았습니다.</p>\n<p>특히, <strong>EJB 스펙을 따르는 비지니스 오브젝트들은 객체지향적인 특징과 장점을 포기해야합니다.</strong> EJB는 상속과 다형성 등을 사용할 수 없고, 간단한 기능 하나를 위해서 많은 인터페이스와 EJB 의존적인 상속을 해야했습니다.</p>\n<p>EJB는 <strong>형편없는 생산성과 느린 성능, 불필요한 기술적인 복잡도, 과도한 스펙 등의 문제</strong>로 인해 POJO 방식으로 돌아가게 됩니다.</p>\n<br/>\n<h2 id=\"pojo-프레임워크\"><a href=\"#pojo-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO 프레임워크</h2>\n<p>POJO를 사용하는 장점과 EJB의 문제를 해결하고, 엔터프라이즈 서비스와 기술을 사용할 수 있게 하는 프레임워크입니다. 많은 POJO 프레임워크가 있지만 그중에 손에 꼽히는 것은 Hibernate와 Spring입니다.</p>\n<p>Hibernate는 Persistence 기술과 오브젝트-관계형 DB 매핑을 순수한 POJO를 이용해서 사용할 수 있게 만드는 POJO 기반의 <strong>퍼스스턴스 프레임워크(Persistence Framework)</strong> 입니다.</p>\n<p>스프링은 앤터프라이즈 서비스들을 POJO 기반으로 만든 비지니스 오브젝트로 사용할 수 있게 합니다. 대표적인 기술로 선언적인 트랜잭션과 보안이 있습니다. 또한 오브젝트 컨테이너를 제공해서 인스턴스들의 라이프사이클을 관리하고, OOP를 더 OOP답게 쓸수 있게 해주는 AOP 기술을 적용하여 POJO 개발을 더 쉽게 만들어줍니다.</p>\n<ul>\n<li>Persistence Framework : 데이터의 저장, 조회, 변경, 삭제를 다루는 클래스 및 설정 파일들의 집합입니다. 퍼시스턴스 프레임워크를 사용하면 JDBC 프로그래밍의 복잡함이나 번거로움 없이 간단한 작업만으로 데이터베이스와 연동되는 시스템을 빠르게 개발할 수 있으며 안정적인 구동도 보장합니다.</li>\n</ul>\n<br/>\n<h2 id=\"pojo를-지향해야하는-이유\"><a href=\"#pojo%EB%A5%BC-%EC%A7%80%ED%96%A5%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO를 지향해야하는 이유</h2>\n<p>POJO 프로그래밍의 목적은 <strong>자바의 객체지향적인 특징을 살려 비지니스 로직에 충실한 개발이 가능하도록 하는 것입니다.</strong> 또한 복잡한 요구조건을 가진 엔터프라이즈 개발의 필요조건을 충족시킬 수 있도록 POJO 기반의 프레임워크를 적절히 이용하는 것이 요구됩니다. 단순히 POJO 프레임워크를 사용하는 것이 아니라 그에 대한 여러 기준을 준수해야합니다.</p>\n<ul>\n<li>\n<p>객체지향적인 설계원칙에 충실하도록 개발</p>\n<ul>\n<li>POJO의 자바 오브젝트는 객체지향언어로서 자바 오브젝트의 특징을 가져야합니다.</li>\n<li>반복적인 템플릿 구조와 테스트하기 힘든 구조, 확장이나 재활용이 어려움이 있으면 안됩니다.</li>\n</ul>\n</li>\n<li>\n<p>테스트 코드를 잘 작성했는지</p>\n<ul>\n<li><strong>수정-빌드-배포-테스트</strong>의 사이클을 유지하는 것은 EJB와 같은 문제를 가지고 있습니다.</li>\n<li>잘 만들어진 POJO는 자동화된 테스트 코드 작성이 편리합니다,</li>\n<li>반복적으로 테스트를 실행할 수 있으므로 코드 검증과 품질 향상에 유리합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rich-domain-model\"><a href=\"#rich-domain-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rich Domain Model</h3>\n<p>POJO의 자바 오브젝트가 가진 기본적인 특징은 하나의 오브젝트 안에 상태(State)와 행위(Behavior)을 모두 가지고 있습니다. 즉, <strong>인스턴스 변수</strong>와 <strong>로직을 가진 메소드</strong>가 있습니다.</p>\n<p>객체지향 원리에 충실하게 도메인 모델을 만드는 것을 풍성한 도메인 모델(Rich Domain Model)이라고 이야기합니다.</p>\n<h3 id=\"올바른-pojo-프로그래밍\"><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-pojo-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>올바른 POJO 프로그래밍</h3>\n<p>앞서 이야기했듯이 POJO를 잘 사용하면 최소한의 코드와 좋은 코드를 만들 수 있습니다. 특히 가장 중요한 내용은 반드시 <strong>자동화된 테스트 코드를 개발하는 것입니다. 이를 통해 만들어진 테스트 코드는 지속적인 변화에 유현하게 대응할 수 있습니다.</strong></p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Plain_old_Java_object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Plain_old_Java_object</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Jakarta_Enterprise_Beans\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Jakarta_Enterprise_Beans</a></li>\n<li><a href=\"http://bywoong.com/post/832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://bywoong.com/post/832</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%8B%9C%EC%8A%A4%ED%84%B4%EC%8A%A4_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%8B%9C%EC%8A%A4%ED%84%B4%EC%8A%A4_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC</a></li>\n<li><a href=\"https://velog.io/@dion/what-is-POJO\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@dion/what-is-POJO</a></li>\n<li><a href=\"https://siyoon210.tistory.com/120\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://siyoon210.tistory.com/120</a></li>\n<li><a href=\"https://happyer16.tistory.com/entry/POJOplain-old-java-object%EB%9E%80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://happyer16.tistory.com/entry/POJOplain-old-java-object%EB%9E%80</a></li>\n<li><a href=\"https://jobc.tistory.com/121\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jobc.tistory.com/121</a></li>\n</ul>\n"}},{"node":{"title":"[Spring] 스프링 AOP 개념 이해햐기","path":"/00-spring-api/","date":"13. February 2021","timeToRead":8,"description":" Spring AOP에 대한 정리입니다.","content":"<h1 id=\"aop\"><a href=\"#aop\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AOP</h1>\n<p>스프링에 대해서 공부를 하면, 꼭 알게되는 프로그래밍 기법으로 AOP 개념이\n있습니다. 오늘은 이 AOP에 대해 정리합니다.</p>\n<p>AOP는 Spring의 핵심 개념 중 하나로서, DI가 애플리케이션 모듈간의 결합도를 낮춰준다면, AOP는 애플리케이션 전체에 걸쳐 사용되는 기능을 재사용하도록 지원합니다.</p>\n<br/>\n<h2 id=\"aop란\"><a href=\"#aop%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AOP란.</h2>\n<p>AOP는 Aspect-Oriented Programming의 약자로서, 번역하면 <strong>관점 지향 프로그래밍</strong>입니다.</p>\n<p>관점 지향은 <strong>어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하는 것</strong>입니다. 모듈화란 어떤 공통된 로직이나 기능을 하나의 단위로 묶는 것을 설명합니다.</p>\n<p>이를 좀 더 정리하자면 다음과 같이 표현할 수 있습니다. <strong>핵심적인 관점은 적용하려고 하는 핵심 비지니스 로직</strong>이 되며 부가적인 관점은 핵심 로직을 실행하기 위해 행해지는 데이터베이스 연결, 로깅, 파일 입출력 등이 있습니다.</p>\n<p>AOP에서는 <strong>각 관점을 기준으로 로직을 모듈화</strong>합니다. 이는 코드를 부분적으로 나누어서 모듈화하겠다는 의미를 가집니다. 이때 소스 코드에서 다른 부분에 계속 반복되는 코드를 발견할 수 있는데 이를 Crosscutting Concerns(흩어진 관심사)라고 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107846114-999ccc00-6e24-11eb-8ed9-f0690267b6a9.png\" alt=\"what-is-aop\"></p>\n<p>다음 그림처럼 <strong>흩어진 관심사를 Aspect로 모듈화하고 핵심적인 비지니스 로직에서 분리해서 재사용 하는 것이 AOP의 목적</strong>입니다.</p>\n<br/>\n<h2 id=\"aop의-주요-개념\"><a href=\"#aop%EC%9D%98-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AOP의 주요 개념</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107846262-a1a93b80-6e25-11eb-824a-b91953e9ffda.png\" alt=\"aop-component\"></p>\n<ul>\n<li>\n<p><strong>Aspect</strong></p>\n<ul>\n<li>흩어진 관심사(Crosscutting Concerns)를 모듈화 한 것</li>\n<li>주로 부가기능을 모듈화합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Target</strong></p>\n<ul>\n<li>Aspect를 적용하는 곳</li>\n<li>Ex) 클래스, 메소드 등</li>\n</ul>\n</li>\n<li>\n<p><strong>Advice</strong></p>\n<ul>\n<li>실질적으로 어떤 일을 해야할지에 대한 것</li>\n<li>실질적인 부가기능을 담은 구현체입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>JointPoint</strong></p>\n<ul>\n<li>Advice가 적용될 위치나 끼어들 수 있는 지점입니다.</li>\n<li>메서드 진입 시점이나, 생성사 호출 시점, 필드에서 값을 꺼내올 때 등의 다양한 시점에서 적용가능합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>PointCut</strong></p>\n<ul>\n<li>JointPoint의 상세한 스펙을 정의했습니다.</li>\n<li>구체적으로 Advice가 실행될 지점을 정할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Proxy</strong></p>\n<ul>\n<li>타켓을 감싸서 타켓의 요청을 대신 받아주는 랩핑(Wrapping) 오프젝트입니다.</li>\n<li>호출자에서 타켓 호출시 타켓이 아닌 타켓을 감싸는 프록시가 호출되며 타켓 메소드 실행전에 선처리, 실행후, 후처리를 실행시키도록 구성되어 있습니다.</li>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/107846340-5c393e00-6e26-11eb-8778-9ca7eeae3abc.png\" alt=\"proxy\"></li>\n</ul>\n</li>\n<li>\n<p><strong>Introduction</strong></p>\n<ul>\n<li>타켓 클래스에 코드 변경없이 신규 메소드나 멤버 변수를 추가하는 기능입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Weaving</strong></p>\n<ul>\n<li>지정된 객체에 애스팩트를 적용해서 새로운 프록시 객체를 생성하는 과정을 의미합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"aop의-특징\"><a href=\"#aop%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AOP의 특징</h2>\n<ul>\n<li>접근 제어 및 부가기능을 추가하기 위해서 프록시 패턴 기반의 AOP 구현체, 프록시 객체를 사용합니다.</li>\n<li>\n<p>모든 AOP 기능을 제공하는 것이 아닌 스프링 IoC와 연동하여 엔터프라이즈 애플리케이션에서 가장 흔한 문제에 대한 해결책을 지원하는 것이 목적입니다.</p>\n<ul>\n<li>Ex) 중복코드, 프록시 클래스 작성의 번거로움, 객체들 간 관계 복잡도의 증가 등의 문제등이 있습니다.</li>\n</ul>\n</li>\n<li>스프링 빈에만 AOP를 적용 가능합니다.</li>\n</ul>\n<h2 id=\"코드에서-aop-적용\"><a href=\"#%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-aop-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드에서 AOP 적용</h2>\n<p>코드에서 <code class=\"language-text\">@AOP</code>를 사용하기 위해서는 다음과 같은 의존성을 추가해야합니다.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>해당 의존성을 추가하고 코드에 다음과 같이 사용할 수 있습니다.</p>\n<h3 id=\"경로-사용\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>경로 사용</h3>\n<p>다음과 같이 <code class=\"language-text\">@Aspect</code> 어노테이션을 붙여 클래스가 Aspect를 나타내는 클래스임을 명시하고 <code class=\"language-text\">@Component</code>를 붙여 스프링의 빈으로 등록합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerfAspect</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.myepark..*.EventService.*(..))\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">logPerf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> begin <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> retVal <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 메서드 호출 자체를 감쌈</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> retVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">@Around</code> 어노테이션은 타멧 메서드를 감싸서 특정 Advice를 실행한다는 의미를 가집니다. <code class=\"language-text\">execution(* com.myepark..*.EventService.*(..))</code>는 아래의 패키지 경로의 <code class=\"language-text\">EventService</code> 객체의 모든 메서드에 Aspect를 적용한다는 의미를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EventService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">deleteEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 인터페이스를 구현한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleEventService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EventService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Published an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Delete an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationRunner</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">EventService</span> eventService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationArguments</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        eventService<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eventService<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eventService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>출력 결과는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Created</span> an event\n<span class=\"token number\">1003</span>\n<span class=\"token class-name\">Published</span> an event\n<span class=\"token number\">1000</span>\n<span class=\"token class-name\">Delete</span> an event\n<span class=\"token number\">0</span></code></pre>\n<h3 id=\"특정-어노테이션-사용\"><a href=\"#%ED%8A%B9%EC%A0%95-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>특정 어노테이션 사용</h3>\n<p>특정 어노테이션을 통해서 다음과 같이 표현할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerfAspect</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(PerLogging)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">logPerf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> begin <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> retVal <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 메서드 호출 자체를 감쌈</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> retVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">PerLogging</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용해서 앞의 서비스를 구현한다면.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleEventService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EventService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@PerLogging</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PerLogging</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Published an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PerLogging</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Delete an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">@PerLogging</code> 어노테이션이 붙은 메서드가 똑같이 Aspect가 적용된 것을 확인할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Created</span> an event\n<span class=\"token number\">1003</span>\n<span class=\"token class-name\">Published</span> an event\n<span class=\"token number\">1000</span>\n<span class=\"token class-name\">Delete</span> an event\n<span class=\"token number\">0</span></code></pre>\n<h3 id=\"스프링-빈의-모든-메소드에-적용\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%98-%EB%AA%A8%EB%93%A0-%EB%A9%94%EC%86%8C%EB%93%9C%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 빈의 모든 메소드에 적용</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerfAspect</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean(simpleEventService)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">logPerf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> begin <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> retVal <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 메서드 호출 자체를 감쌈</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> retVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 선언하면 SimpleEventService의 모든 메소드에 적용이 가능합니다.</p>\n<h3 id=\"around-이외의-aspect-실행-시점\"><a href=\"#around-%EC%9D%B4%EC%99%B8%EC%9D%98-aspect-%EC%8B%A4%ED%96%89-%EC%8B%9C%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Around</code> 이외의 Aspect 실행 시점</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">@Before</code> : 이전</p>\n<ul>\n<li>Advice 타켓 메소드가 호출되기 전에 어드바이스 기능을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@After</code> : 이후</p>\n<ul>\n<li>타켓 메스드의 결과에 관계없이 타켓 메소드가 완료되면 Advice 기능을 수행합니다.</li>\n<li>성공이나 예외 등 관계없이 동작합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@AfterReturning</code> : 정상적인 반환 이후</p>\n<ul>\n<li>타켓 메소드가 성공적으로 결과값을 반환 후에 Advice 기능을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@AfterThrowing</code> : 예외 발생 이후</p>\n<ul>\n<li>타켓 메소드가 수행 중 예외를 던지게 되면 Advice 기능을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Around</code> : 메소드 실행 전후</p>\n<ul>\n<li>Advice가 타켓 메소드를 감싸서 타켓 메소드 호출전과 후에 어드바이스 기능을 수행합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>AOP에 대한 정리입니다. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><strong><a href=\"https://engkimbs.tistory.com/746\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engkimbs.tistory.com/746</a></strong></li>\n<li><a href=\"https://velog.io/@max9106/Spring-AOP%EB%9E%80-93k5zjsm95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@max9106/Spring-AOP%EB%9E%80-93k5zjsm95</a></li>\n<li><a href=\"https://hongku.tistory.com/114\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hongku.tistory.com/114</a></li>\n<li><a href=\"https://jojoldu.tistory.com/71\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jojoldu.tistory.com/71</a></li>\n</ul>\n"}},{"node":{"title":"[Springboot] 스프링부트 Poi 사용하기","path":"/00-springboot-poi/","date":"8. February 2021","timeToRead":4,"description":" Springboot Poi에 대한 간단한 실습입니다. ","content":"<h1 id=\"springboot에서-poi-사용\"><a href=\"#springboot%EC%97%90%EC%84%9C-poi-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot에서 POI 사용</h1>\n<p>오늘은 간단하게 POI에 대한 개념을 정리하고, Apache POI를 사용한 간단한 샘플 코드를 보겠습니다.</p>\n<br/>\n<h2 id=\"apache-poi란\"><a href=\"#apache-poi%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Apache POI란.</h2>\n<p>아파치 POI는 아파치 소프트웨어 재단에서 만든 라이브러리로서 <strong>MS Office 파일 포맷을 순수 자바 언어로서 읽고 쓰는 기능을 제공</strong>합니다.</p>\n<p>엑셀(xlsx), 피피티(ppt) 등을 제공합니다.</p>\n<br/>\n<h2 id=\"poi를-적용한-간단한-코드\"><a href=\"#poi%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POI를 적용한 간단한 코드</h2>\n<p><a href=\"https://shinsunyoung.tistory.com/71\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 링크</a>에 있는 코드를 따라했습니다.</p>\n<p>엑셀 파일을 읽어서 웹으로 보여주는 간단한 서비스입니다.</p>\n<h3 id=\"프로젝트-구성\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로젝트 구성</h3>\n<p>프로젝트 구성은 다음과 같습니다.</p>\n<blockquote>\n<p>프로젝트 간략하게 보기.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107708264-8f84ab80-6d06-11eb-9425-85840ccfb64b.png\" alt=\"project-layer\"></p>\n<p>간단한 서비스이므로 다음과 같이 구성하였습니다.</p>\n<blockquote>\n<p>build.gradle</p>\n</blockquote>\n<pre class=\"language-gradle\"><code class=\"language-gradle\">plugins {\n  id 'org.springframework.boot' version '2.4.2'\n  id 'io.spring.dependency-management' version '1.0.11.RELEASE'\n  id 'java'\n}\n\ngroup = 'com.myepark'\nversion = '0.0.1-SNAPSHOT'\nsourceCompatibility = '11'\n\nconfigurations {\n  compileOnly {\n    extendsFrom annotationProcessor\n  }\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'\n  implementation 'org.springframework.boot:spring-boot-starter-web'\n  compileOnly 'org.projectlombok:lombok'\n\n  compile group: 'org.apache.poi', name: 'poi', version: '3.11'\n  compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.11'\n  compile group: 'commons-io', name: 'commons-io', version: '2.4'\n\n  developmentOnly 'org.springframework.boot:spring-boot-devtools'\n  annotationProcessor 'org.projectlombok:lombok'\n  testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n\ntest {\n  useJUnitPlatform()\n}</code></pre>\n<blockquote>\n<p>excel sample</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>번호</th>\n<th>이름</th>\n<th>이메일</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Hello</td>\n<td>test@test.com</td>\n</tr>\n</tbody>\n</table>\n<p>다음과 같이 데이터가 xlsx파일에 저장되어 있습니다.</p>\n<h3 id=\"컨트롤러\"><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>컨트롤러</h3>\n<blockquote>\n<p>ExcelData</p>\n</blockquote>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Setter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Getter</span> <span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExcelData</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Excel의 데이터 형태입니다.</p>\n<blockquote>\n<p>ExcelController</p>\n</blockquote>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FilenameUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>poi<span class=\"token punctuation\">.</span>hssf<span class=\"token punctuation\">.</span>usermodel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HSSFWorkbook</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>poi<span class=\"token punctuation\">.</span>ss<span class=\"token punctuation\">.</span>usermodel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Row</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>poi<span class=\"token punctuation\">.</span>ss<span class=\"token punctuation\">.</span>usermodel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Sheet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>poi<span class=\"token punctuation\">.</span>ss<span class=\"token punctuation\">.</span>usermodel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Workbook</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>poi<span class=\"token punctuation\">.</span>xssf<span class=\"token punctuation\">.</span>usermodel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">XSSFWorkbook</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Model</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PostMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>multipart<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MultipartFile</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExcelController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/excel\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"excel\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/excel/read\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">readExcel</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ExcelData</span><span class=\"token punctuation\">></span></span> dataList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> extension <span class=\"token operator\">=</span> <span class=\"token class-name\">FilenameUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>extension<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xlsx\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>extension<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"엑셀파일만 업로드 해주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Workbook</span> workbook <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extension<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xlsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            workbook <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSSFWorkbook</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extension<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            workbook <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HSSFWorkbook</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Sheet</span> worksheet <span class=\"token operator\">=</span> workbook<span class=\"token punctuation\">.</span><span class=\"token function\">getSheetAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> worksheet<span class=\"token punctuation\">.</span><span class=\"token function\">getPhysicalNumberOfRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\">Row</span> row <span class=\"token operator\">=</span> worksheet<span class=\"token punctuation\">.</span><span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">ExcelData</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExcelData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">getCell</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumericCellValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 실수</span>\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span><span class=\"token function\">getCell</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStringCellValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 문자열</span>\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span><span class=\"token function\">getCell</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStringCellValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 논리</span>\n\n            dataList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"datas\"</span><span class=\"token punctuation\">,</span> dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"excelList\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"웹\"><a href=\"#%EC%9B%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>웹</h3>\n<p>Thymeleaf을 사용한 코드입니다.</p>\n<blockquote>\n<p>excel.html</p>\n</blockquote>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xhtml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>엑셀 업로드<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span>\n      <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{/excel/read}<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multipart/form-data<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>제출<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>다음 form을 통해서 file을 입력 받습니다.</p>\n<blockquote>\n<p>excelList.html</p>\n</blockquote>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xhtml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n      <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>table table-striped<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>#<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>이름<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>이메일<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>each</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data : ${datas}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${data.num}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${data.name}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${data.email}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>해당 웹 페이지를 통해서 데이터를 확인합니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>간단한 샘플 코드를 통해서 poi가 어떻게 동작하는지를 이해했습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://shinsunyoung.tistory.com/71\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shinsunyoung.tistory.com/71</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%95%84%ED%8C%8C%EC%B9%98_POI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.wikipedia.org/wiki/%EC%95%84%ED%8C%8C%EC%B9%98_POI</a></li>\n</ul>\n"}},{"node":{"title":"[Spring] Spring Cloud Zuul 공부","path":"/00-spring-zuul/","date":"6. February 2021","timeToRead":9,"description":"Spring cloud zuul을 적용하기 위해 공부하는 내용입니다.","content":"<h1 id=\"spring-cloud-zuul\"><a href=\"#spring-cloud-zuul\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Cloud Zuul</h1>\n<p>기존 회사 프로젝트에서 사용하는 도메인에 대해 API Gateway 생성에 대한 필요성이 대두되었다. 그래서 그 프로젝트를 진행하기 전에 한번 공부해볼려고 한다.</p>\n<br/>\n<h2 id=\"먼저-api-gateway에-대해\"><a href=\"#%EB%A8%BC%EC%A0%80-api-gateway%EC%97%90-%EB%8C%80%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>먼저 API Gateway에 대해</h2>\n<p>Microservice Architecture(MSA)에서 언급되는 컴포넌트 중 하나이며, 모든 클라이언트 요청에 대한 end point를 통합하는 서버입니다. 일종의 프록시 서버처럼 동작하며 인증 및 권한, 모니터링, 로깅 등의 추가적인 기능이 있습니다.</p>\n<p>MSA는 도메인별 데이터를 저장하고 도메인별로 하나 이상의 서버가 따로 존재합니다. 한 서비스에 한개 이상의 서버가 존재하기 때문에 해당 서버를 사용하는 클라이언트 입장에서는 다수의 end point가 생기므로, 이 end point를 변경했을 때 관리하기가 힘듭니다.그래서 MSA 환경에서 서비스에 대한 도메인인 하나로 통합할 수 있는 API Gateway가 필요합니다.</p>\n<p><strong>API Gateway를 사용하면 통합적으로 end point와 Rest api를 관리할 수 있으며, 모든 클라이언트는 각 서비스의 end point 대신 API Gateway로 요청을 전달</strong>합니다. 이후 API Gateway는 사용자가 설정한 라우팅 설정에 따라 각 end point로 클라이언트를 대리하여 요청하고 응답을 받으면 클라이언트에게 전달하는 프록시 역할을 수행합니다.</p>\n<br/>\n<h2 id=\"netflix-zuul을-선택한-이유\"><a href=\"#netflix-zuul%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Netflix Zuul을 선택한 이유.</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107103975-2236cd80-6863-11eb-9494-07470230b9c0.png\" alt=\"Netflix-zuul-usage\"></p>\n<p>앞서 API Gateway에 대해 개념을 인지하고, 이를 사용하기 제일 좋은 오픈소스 프로젝트는 Netflix zuul로 볼 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">Zuul is the front door for all requests from devices and web sites to the backend of the Netflix streaming application. As an edge service application, Zuul is built to enable dynamic routing, monitoring, resiliency and security. It also has the ability to route requests to multiple Amazon Auto Scaling Groups as appropriate.</code></pre>\n<ul>\n<li><a href=\"https://github.com/Netflix/zuul/wiki\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처 : Netflix zuul wiki</a></li>\n</ul>\n<p>Zuul에 대한 공식 설명글입니다. 목적을 보면, 라우팅과 모니터링, 복원 및 보안을 지원하도록 설계되어 있습니다.</p>\n<br/>\n<h2 id=\"netflix-zuul에-대해-좀-더-자세하게\"><a href=\"#netflix-zuul%EC%97%90-%EB%8C%80%ED%95%B4-%EC%A2%80-%EB%8D%94-%EC%9E%90%EC%84%B8%ED%95%98%EA%B2%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Netflix Zuul에 대해 좀 더 자세하게.</h2>\n<p>클라이언트 요청은 많은 트래픽과 다양한 요청이 들어오기 때문에 운영에서 다양한 이슈와 문제가 발생합니다. zuul은 이러한 상황에 신속하게 대응합니다. groovy 언어로 작성된 다양한 형태의 Filter를 제공하고, Filter에 기능을 정의해이슈 발생시 적절한 Filter을 추가함으로서 이슈를 해결할 수 있습니다.</p>\n<h3 id=\"netflix-filter-기능\"><a href=\"#netflix-filter-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Netflix Filter 기능</h3>\n<ul>\n<li>\n<p>Authentication and Security</p>\n<ul>\n<li>클라이언트 요청 시, 각 리소스에 대한 인증 확인하고 만족시키지 않으면 거부합니다,</li>\n</ul>\n</li>\n<li>\n<p>Insights and Monitoring</p>\n<ul>\n<li>의미있는 데이터 및 통계를 제공합니다.</li>\n</ul>\n</li>\n<li>\n<p>Dynamic Routing</p>\n<ul>\n<li>필요에 따라 요청을 다른 클러스터로 동적 라우팅합니다.</li>\n</ul>\n</li>\n<li>\n<p>Stress Testing</p>\n<ul>\n<li>성능 측정을 위해 점차적으로 클러스터 트래픽을 증가시킵니다.</li>\n</ul>\n</li>\n<li>\n<p>Load Shedding</p>\n<ul>\n<li>각 유형의 요청에 대해 용량을 할당하고, 초과 요청을 제한합니다.</li>\n</ul>\n</li>\n<li>Static Response handling -클러스테엇 오는 응답을 대신하여 API Gateway에서 응답을 처리합니다.</li>\n</ul>\n<h3 id=\"netflix-core-architecture\"><a href=\"#netflix-core-architecture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Netflix Core Architecture</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107103592-940e1780-6861-11eb-9a76-6f86651c1a47.png\" alt=\"Zuul-Core-Architecture\"></p>\n<p>요청은 크게 4가지의 필터로 구성됩니다.</p>\n<ul>\n<li>\n<p>Pre filter</p>\n<ul>\n<li>Origin으로 라우팅되기전에 실행됩니다.</li>\n<li>요청 인증, Origin 서버 선택, 디버그 정보 로깅 등이 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Routing filter</p>\n<ul>\n<li>요청을 Origin으로 Routing하는 작업을 수행합니다.</li>\n<li>Apache HttpClient나 Netflix Ribbon을 사용해서 HTTP 요청을 작성하고 전송합니다.</li>\n</ul>\n</li>\n<li>\n<p>Post filter</p>\n<ul>\n<li>요청이 Origin으로 라우팅된 후 실행됩니다.</li>\n<li>응답에 표준 HTTP 헤더를 추가하고 통계 및 메트릭을 수집합니다.</li>\n</ul>\n</li>\n<li>\n<p>Error filter</p>\n<ul>\n<li>다른 단계에서 오류 발생시 실행됩니다.</li>\n</ul>\n</li>\n</ul>\n<p>이를 그림으로 나타내면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107104961-61671d80-6867-11eb-8eb0-f1e2ae87cf14.png\" alt=\"zuul-filter\"></p>\n<h3 id=\"zuul-components\"><a href=\"#zuul-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Zuul Components</h3>\n<p>zuul은 다음과 같은 component로 구성됩니다.</p>\n<p>Zuul 1.x 컴포넌트는 크게 4가지의 components로 구성됩니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">zuul-core</code></p>\n<ul>\n<li>필터를 컴파일하고 실행하는 핵심 기능을 가진 라이브러리</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">zuul-simple-webapp</code></p>\n<ul>\n<li><code class=\"language-text\">zuul-core</code>로 애플리케이션 구축한 예제.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">zuul-netflix</code></p>\n<ul>\n<li>다른 Netflix OSS 구성 요소를 Zuul에 추가합니다.</li>\n<li>Ex) Ribbon</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">zuul-netflix-webapp</code></p>\n<ul>\n<li><code class=\"language-text\">zuul-core</code>와 <code class=\"language-text\">zuul-netflix</code>를 함계 사용하기 쉬운 패키지로 만드는 웹</li>\n</ul>\n</li>\n</ul>\n<p>Zuul 2.x 컴포넌트는 zuul-core와 zuul-sample로만 구성됩니다.</p>\n<ul>\n<li><code class=\"language-text\">zuul-core</code> : zuul 2.0의 기능</li>\n<li><code class=\"language-text\">zuul-sample</code> : zuul 2.0용 샘플 driver application</li>\n</ul>\n<br/>\n<h2 id=\"spring-cloud-zuul-1\"><a href=\"#spring-cloud-zuul-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Cloud Zuul</h2>\n<p>Spring boot에 Netflix OSS를 통합적으로 제공합니다. annotation과 yml 설정으로 쉽게 시작할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107106129-64fda300-686d-11eb-8afd-d3b618d314eb.png\" alt=\"spring-cloud-zuul\"></p>\n<ul>\n<li>\n<p><code class=\"language-text\">RouteLocator</code></p>\n<ul>\n<li>url path에 대한 라우팅을 지정</li>\n<li>요청이 들어오면 어떻게 라우팅할 것인지를 정의합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ZuulHandlerMapping</code></p>\n<ul>\n<li>RouteLocator에 정의된 url path에 zuulController를 매핑합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ZuulController</code></p>\n<ul>\n<li>ZuulServlet을 주입합니다.</li>\n<li>들어오는 모든 요청을 ZuulServlet으로 처리합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ZuulFilterInitializer</code></p>\n<ul>\n<li>filter Map에 정의된 filter를 FilterRegistry에 등록하고 FilterLoader로 로딩합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"시작하기\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>시작하기.</h3>\n<p>먼저 아래와 같이 <code class=\"language-text\">build.gradle</code>에 의존성을 추가합니다.</p>\n<pre class=\"language-gradle\"><code class=\"language-gradle\">implementation(\"org.springframework.cloud:spring-cloud-starter-netflix-zuul:2.1.2.RELEASE\")</code></pre>\n<p>application.yml 파일에 zuul 설정을 추가합니다.</p>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> api<span class=\"token punctuation\">-</span>gateway<span class=\"token punctuation\">-</span>way\n\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n\n<span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n<span class=\"token key atrule\">zuul</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">sensitive-headers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">connect-timeout-millis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600000</span>\n    <span class=\"token key atrule\">socket-timeout-millis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600000</span>\n  <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">foo-api</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /foos/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8081</span>\n      <span class=\"token key atrule\">stripPrefix</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">bar-api</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /bars/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8082</span>\n      <span class=\"token key atrule\">stripPrefix</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre>\n<p>그리고 Zuul을 사용하기 위해 다음과 같이 Annotation을 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableZuulProxy</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZuulApplication</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZuulApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Spring Cloud Zuul은 <code class=\"language-text\">@EnableZuulProxy</code>와 <code class=\"language-text\">@EnableZuulServer</code> 두 종류의 annotation으로 zuul을 구동시킵니다. 다만<code class=\"language-text\">@EnableZuulProxy</code>은 <code class=\"language-text\">@EnableZuulServer</code>에서 <code class=\"language-text\">PreDecorationFilter, RibbonRoutingFilter, SimpleHostRoutingFilter</code>을 추가 시킨 개념입니다.</p>\n<h3 id=\"custom-filter-적용\"><a href=\"#custom-filter-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Filter 적용</h3>\n<p>다음은 ZuulFilter를 상속받아 Filter를 추가합니다..</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ZuulFilter</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">filterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"route\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">filterOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">shouldFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside Route Filter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code class=\"language-text\">filterType()</code> : filter의 type으로 \"pre\", \"route\", \"post\", \"error\", \"static\"을 용도에 따라 return합니다.</li>\n<li><code class=\"language-text\">filterOrder()</code> : type안에서 해당 필터가 실행되는 순서입니다.</li>\n<li><code class=\"language-text\">shouldFilter()</code> : run method를 실행시 true 실행하지 않아도 되면 false를 반환합니다.</li>\n<li><code class=\"language-text\">run()</code> : 실제 filter의 로직을 담당합니다.</li>\n</ul>\n<h3 id=\"예외-처리\"><a href=\"#%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외 처리</h3>\n<p><code class=\"language-text\">Netflix Zuul</code>의 프록시는 Filter 레벨에서 실행됩니다. 필터는 서블릿의 영역으로 Spring MVC의 영역의 여러 레벨에서 발생하는 예외를 처리할 수 있는 <code class=\"language-text\">@ControllerAdvice</code>를 사용할 수 없습니다.</p>\n<p>따라서 <code class=\"language-text\">Whitelabel Error Page</code> 페이지 생성 로직에서 처리할 수 있습니다</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorHandlerController</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ErrorController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> ERROR_MAPPING <span class=\"token operator\">=</span> <span class=\"token string\">\"/error\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> ERROR_MAPPING<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">RequestContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> error <span class=\"token operator\">=</span> <span class=\"token class-name\">ExceptionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRootCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throwable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// zuul.routes.{proxy}.path 에 정의되지 않은 요청일 경우 응답 처리</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOT_FOUND\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>NOT_FOUND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SERVICE_UNAVAILABLE\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>SERVICE_UNAVAILABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 예상되지 않은 오류일 경우 응답 처리</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INTERNAL_SERVER_ERROR\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>INTERNAL_SERVER_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getErrorPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> ERROR_MAPPING<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>라우팅할 프록시가 존재하지 않는 경우 ErrorController로 요청을 처리합니다.</li>\n<li>라우팅할 프록시가 존재하고, 애플리케이션 오류(라우팅 타임아웃 등) 발생 시 <code class=\"language-text\">pre filter &gt; ErrorController &gt; post filter</code> 순서로 요청을 처리합니다.</li>\n<li>라우팅할 프록시가 존재하고, 라우팅이 성공할 시 <code class=\"language-text\">pre filter -&gt; post filter</code> 순으로 요청을 처리합니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>간단하게나마 spring cloud zuul에 대해 정리했습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://netflixtechblog.com/announcing-zuul-edge-service-in-the-cloud-ab3af5be08ee\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://netflixtechblog.com/announcing-zuul-edge-service-in-the-cloud-ab3af5be08ee</a></li>\n<li><a href=\"https://github.com/Netflix/zuul/wiki\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Netflix/zuul/wiki</a></li>\n<li><a href=\"https://jsonobject.tistory.com/464\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jsonobject.tistory.com/464</a></li>\n<li><a href=\"https://sabarada.tistory.com/56\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sabarada.tistory.com/56</a></li>\n<li><a href=\"https://lion-king.tistory.com/entry/Spring-Boot-Spring-Cloud-MSA-4-Zuul%EC%9D%B4%EB%9E%80-%EC%A0%81%EC%9A%A9%EB%B0%A9%EB%B2%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://lion-king.tistory.com/entry/Spring-Boot-Spring-Cloud-MSA-4-Zuul%EC%9D%B4%EB%9E%80-%EC%A0%81%EC%9A%A9%EB%B0%A9%EB%B2%95</a></li>\n<li><a href=\"https://cloud.spring.io/spring-cloud-netflix/multi/multi__router_and_filter_zuul.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cloud.spring.io/spring-cloud-netflix/multi/multi__router_and_filter_zuul.html</a></li>\n<li><a href=\"https://blog.neonkid.xyz/208\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.neonkid.xyz/208</a></li>\n</ul>\n"}},{"node":{"title":"[Java] url-pattern이란","path":"/00-java-urlpattern/","date":"3. November 2020","timeToRead":3,"description":"url-pattern에 대해 정리합니다.","content":"<h1 id=\"java-servlet--url-pattern-이란\"><a href=\"#java-servlet--url-pattern-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Servlet : url-pattern 이란</h1>\n<p>url-pattern은 자바 서블릿 개발을 진행하다보면, 한번은 꼭 보게 되는 것 같다. 그러나, 한번도 제대로 정리해본적이 없어서, 이를 제대로 한 번 알아보고 싶어졌다.</p>\n<br/>\n<h2 id=\"url-pattern의-정의\"><a href=\"#url-pattern%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>url-pattern의 정의</h2>\n<p>서블릿을 생성하고 서블릿을 매핑을 시킨다. 서블릿을 사용하면 주소에 경로가 뜨기 때문에 이는 보안에 굉장히 취약하다. 그래서 특정한 단어로 매핑을 시킨다.</p>\n<p><strong>url-patten은 실제 서블릿 매핑 이름을 의미한다. 서블릿 매핑 시 사용되는 가상의 이름이며 클라이언트가 브라우저에게 요청할 때, 사용할 때는 반드시 '/'(슬래시)로 시작한다.</strong></p>\n<p>서블릿 매핑 이름으로 사용되는 URL 패턴의 종류는 정확히 이름까지 일치하는지, 디렉토리까지 일치하는지, 확장자만 일치하는지로 세가지로 구별된다.</p>\n<br/>\n<h2 id=\"url-pattern의-종류\"><a href=\"#url-pattern%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>url-pattern의 종류</h2>\n<p>url-pattern의 패턴은 3가지로 구성되지만, 이 자리에서는 디렉토리 패턴과 확장자 패턴에 대해 이야기 해보겠습니다. 정확히 일치하는 패턴의 경우는 말 그대로 <code class=\"language-text\">WebServlet(&#39;정확한/주소/URL/패턴&#39;)</code>으로 요청할 때만 실행된다.</p>\n<h3 id=\"디렉토리-패턴\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>디렉토리 패턴</h3>\n<p>디렉토리 패턴은 디렉토리 형태로 서버의 해당 컴포넌트를 찾아서 실행하는 구조입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/98429019-98eaf000-20e7-11eb-9f3f-3de334e29015.png\" alt=\"image\"></p>\n<p>서블릿 코드는 다음과 같이 작성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/*\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestServlet1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Code...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다음 예시 코드는 /test/ 디렉토리로 시작되는 요청에 대해 실행됩니다.</li>\n</ul>\n<h3 id=\"확장자-패턴\"><a href=\"#%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장자 패턴</h3>\n<p>확장자 패턴은 확장자 형태로 서버의 해당 컴포넌트를 찾아서 실행하는 구조입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/98429024-9dafa400-20e7-11eb-840a-0166bf5c0236.png\" alt=\"image\"></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestServlet2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Code...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다음 예시 코드는 매핑 이름에 상관없이 확장자가 .me 이면 실행됩니다.</li>\n</ul>\n<blockquote>\n<p>추가적으로 일반적으로 <code class=\"language-text\">/test/example.me</code>와 같이 요청이 들어온 경우, 앞의 디렉토리 이름을 우선시 하여 <strong>TestServlet1</strong>이 실행되며, <code class=\"language-text\">/없는디렉토리/example.me</code>의 요청의 경우에는 없는 디렉토리이므로 <strong>.me</strong>을 우선시하여 TestServlet2가 실행된다.</p>\n</blockquote>\n<br/>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h2>\n<p>이후에 서블릿이나, 좀 더 상세하게 정리할 수 있는 기회가 되면 정리하겠다.</p>\n<p>최근 업무가 많아져서... 블로그 작성할 시간이 부족해지는 것을 느낀다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://windorsky.tistory.com/entry/%EC%84%9C%EB%B8%94%EB%A6%BF-URL-pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://windorsky.tistory.com/entry/%EC%84%9C%EB%B8%94%EB%A6%BF-URL-pattern</a></li>\n<li><a href=\"https://dololak.tistory.com/740\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dololak.tistory.com/740</a></li>\n<li><a href=\"https://rwd337.tistory.com/34\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rwd337.tistory.com/34</a></li>\n<li><a href=\"https://chrismare.tistory.com/entry/url-pattern-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://chrismare.tistory.com/entry/url-pattern-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4</a></li>\n</ul>\n"}},{"node":{"title":"[Springboot] 스프링부트 MVC - Filter","path":"/01-springboot-mvc/","date":"3. November 2020","timeToRead":4,"description":" Springboot MVC 중 Filter에 대한 설명입니다. ","content":"<h1 id=\"spring-boot-mvc---filter\"><a href=\"#spring-boot-mvc---filter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Boot MVC - Filter</h1>\n<p>HTTP Method 취약점을 제거하는 업무를 하는 중에 기존 코드에서 일부분 수정을 해야하는 법을 알았다. 그중 필터에 대해 알게되었고 HTTP 헤더 정보를 설정, Encoding, XSS, CORS 이슈등을 해결할 수 있다는 점을 알았다.</p>\n<p>이에 대해서 Filter에 대해 공부해야겠다는 생각이 들었다.</p>\n<br/>\n<h2 id=\"filter란\"><a href=\"#filter%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Filter란.</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97983638-ee3dad80-1e18-11eb-95ca-2b249554509b.png\" alt=\"image\"></p>\n<p>다음의 사진과 같습니다.</p>\n<p>서블릿의 ServletContext 기능으로 사용자에 의해 서블릿이 호출 되기 전/후로 사용자 요청/응답의 헤더 정보 등을 검사 및 설정할 수 있습니다.</p>\n<br/>\n<h2 id=\"filter와-interceptor의-차이\"><a href=\"#filter%EC%99%80-interceptor%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Filter와 Interceptor의 차이</h2>\n<ul>\n<li>Filter는 DispatcherServlet 앞에서 먼저 동작하고, Intercepter는 DispatcherServlet에서 Controller(Handler) 사이에서 동작합니다.</li>\n<li>\n<p>Filter</p>\n<ul>\n<li><code class=\"language-text\">웹 어플리케이션의 Context</code>의 기능을 가지고 있다.</li>\n<li>스프링 기능을 활용하기에 어렵다.</li>\n<li>일반적으로 인코딩, CORS, XSS, LOG, 인증, 권한 등을 구현한다..</li>\n</ul>\n</li>\n<li>\n<p>Interceptor</p>\n<ul>\n<li><code class=\"language-text\">스프링의 Spring Context</code>의 기능이며 일종의 빈이다.</li>\n<li>스프링 컨테이너이므로 다른 Bean을 주입해서, 활용성을 높일 수 있다.</li>\n<li>다른 Bean을 활용 가능하기에 인증 및 권한 등을 구현할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"springboot에서-filter를-설정\"><a href=\"#springboot%EC%97%90%EC%84%9C-filter%EB%A5%BC-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot에서 Filter를 설정.</h2>\n<blockquote>\n<p>스프링에서는 웹 어플리케이셔 컨텍스트를 설정할 수 있는 web.xml 파일을 통한 필터를 설정할 수 있다. 그러나 스프링부트는 다르다.</p>\n</blockquote>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>SomeFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>com.somecompany.SomeFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>SomeFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/url/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>paramName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>paramValue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span></code></pre>\n<blockquote>\n<p>스프링 부트는 다음과 같이 설정할 수 있습니다.</p>\n</blockquote>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span> <span class=\"token function\">testFilterRegistration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">FilterRegistrationBean</span> registration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token function\">testFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/url/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">addInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"paramName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"paramValue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testFilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> registration<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Filter</span> <span class=\"token function\">testFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">testFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이처럼 스프링과 스프링 부트의 필터 설정은 다르게 설정됩니다.</p>\n<p>좀 더 스프링 부트의 필터에 대해 알아보자면, 다음과 같습니다. 스프링 부트에서 필터를 사용하는 방법은 크게 두가지로 나눠집니다.</p>\n<h3 id=\"1-filterregistrationbean으로-필터-등록\"><a href=\"#1-filterregistrationbean%EC%9C%BC%EB%A1%9C-%ED%95%84%ED%84%B0-%EB%93%B1%EB%A1%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. FilterRegistrationBean으로 필터 등록</h3>\n<p><code class=\"language-text\">org.springframework.boot.web.servlet</code>의 <code class=\"language-text\">FilterRegistrationBeen</code>을 사용하여, CORSFilter 클래스를 설정파일에서 빈으로 등록하는 방식입니다.</p>\n<ul>\n<li>예시코드는 다음과 같습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestApplication1</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestApplication1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span> <span class=\"token function\">setFilterRegistration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">FilterRegistrationBean</span> filterRegistrationBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// string 여러개를 가변인자로 받는 메소드</span>\n\t\tfilterRegistrationBean<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/filtered/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> filterRegistrationBean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2-webfilter--servletcomponentscan\"><a href=\"#2-webfilter--servletcomponentscan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. @WebFilter + @ServletComponentScan</h3>\n<p>스프링부트에서 지원하는 <code class=\"language-text\">@WebFilter</code> 애너테이션으로 자동 등록 후에 <code class=\"language-text\">@ServletComponentScan</code>을 사용하는 방식이다.</p>\n<p>예시코드는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">@ServletComonentScan 설정</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ServletComponentScan</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestApplication2</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestApplication2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code class=\"language-text\">@WebFilter 설정</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span>urlPatterns <span class=\"token operator\">=</span> <span class=\"token string\">\"/filtered/*\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 1번과 내용이 같습니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 구성할 수 있습니다. 해당 코드와 같이 Springboot에 필터를 설정할 수 있습니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>업무 개발 코드를 추가할 수 없어서 간단하게 정리했습니다. 다음에 업무 상에 시간이 조금 있으면, HTTP Method를 제한하는 코드를 추가적으로 구성해서 올리겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://linked2ev.github.io/gitlog/2019/09/15/springboot-mvc-13-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-MVC-Filter-%EC%84%A4%EC%A0%95/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linked2ev.github.io/gitlog/2019/09/15/springboot-mvc-13-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-MVC-Filter-%EC%84%A4%EC%A0%95/</a></li>\n<li><a href=\"https://qastack.kr/programming/19825946/how-to-add-a-filter-class-in-spring-boot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qastack.kr/programming/19825946/how-to-add-a-filter-class-in-spring-boot</a></li>\n<li><a href=\"https://luvstudy.tistory.com/79\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://luvstudy.tistory.com/79</a></li>\n</ul>\n"}},{"node":{"title":"[Java] DAO, DTO, Repository을 이해하자","path":"/00-java-repositorys/","date":"1. November 2020","timeToRead":5,"description":" dao, dto, repository에 대한 기본적인 내용을 정리합니다. ","content":"<h1 id=\"dao-dto-repository-entity-class를-이해하기\"><a href=\"#dao-dto-repository-entity-class%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DAO, DTO, Repository, Entity Class를 이해하기</h1>\n<p>일반적으로 스프링 프로젝트 파일에 이름을 정할때, DTO, Repository, Entity 등의 이름이 들어가는 것을 알 수 있는데, 좀 더 자세하게 이 정의에 대해서 알고 싶어졌다.</p>\n<p>스프링을 사용한 웹앱의 경우 DAO, DTO, Repository, Entity를 사용하여 데이터를 다루며 스프링부트의 경우 내장 톰캣을 통해 서블릿을 관리하고 이를 컨트롤러에서 각 어노테이션을 통해 매핑한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97795536-b5e87480-1c4a-11eb-9439-89d9558150da.png\" alt=\"image\"></p>\n<br/>\n<h2 id=\"repository\"><a href=\"#repository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Repository</h2>\n<ul>\n<li>MVC 패턴에서 모델에 해당하는 부분으로 POJO로는 접근불가능하다.</li>\n<li>Persistence Layer와 1:1 매칭이 가능하다.</li>\n<li>Java Persistenc API 구현체를 통해서 자바 객체에 접근할 수 있다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberRepository</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">EntityManager</span> em<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드는 JPA 구현체가 Entity Model 객체를 사용해서 DB에 접근한다.</p>\n<blockquote>\n<p>POJO란.</p>\n<ul>\n<li>간단하게 설명하자면, \"getter / setter를 가진 단순한 자바 오프젝트\"이며 의존성이 없고, 테스트도 용이하며 추후 수정이 편리한 오프젝트라고 설명할 수 있을 것 같다/</li>\n<li>좀 더 자세하게 설명하면 더 복잡해서 POJO에 대한 글은 다음에 따로 정리하겠다.</li>\n</ul>\n</blockquote>\n<br/>\n<h2 id=\"daodata-access-object\"><a href=\"#daodata-access-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DAO(Data Access Object)</h2>\n<ul>\n<li>원래 DB의 데이터(필드)와 프로그래밍 언어는 패러다임의 불일치로 인해 사용할 수 없다. 이를 원래 사용할려면 별도의 SQL을 작성해서 SQL을 객체의 필드에 하나씩 매핑하거나 순수한 SQL을 작성하여 사용해야 한다.</li>\n</ul>\n<h3 id=\"entity\"><a href=\"#entity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Entity</h3>\n<ul>\n<li>하지만 별도의 Entity Class를 사용해서 클래스를 테이블과 1:1 매칭할 수 있다. 이러한 Entity Class를 <strong>도메인</strong>이라고 하며 가장 DB와 가까운 클래스이다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// PK</span>\n\n    <span class=\"token annotation punctuation\">@NotEmpty</span>\n    <span class=\"token annotation punctuation\">@NotNull</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span> <span class=\"token comment\">// 내장 타입 임베딩</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@JsonIgnore</span>\n    <span class=\"token annotation punctuation\">@OneToMany</span> <span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span> orders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음은 예시 코드이다.</p>\n<ul>\n<li>Entity의 각 필드는 DB 테이블과 1:1매칭되며 PK를 가진다.</li>\n<li>Entity는 순수한 도메인 로직과 비지니스 로직만 가지고 있어야한다.</li>\n<li>Entity는 DB의 데이터를 전달해주고 Service에서 사용할 비즈니스 로직만을 가져야한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span></code></pre>\n<p>다음 코드는 서비스 계층의 Repository를 사용한 코드이다.</p>\n<br/>\n<h2 id=\"dtodata-transfer-object\"><a href=\"#dtodata-transfer-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DTO(Data Transfer Object)</h2>\n<ul>\n<li>Entity를 통해 DB에서 데이터를 꺼내왔지만 데이터를 접근해야하는 경우 문제가 있다.</li>\n<li>Controller와 Presentation Layer는 클라이언트와 직접 만나며, Entity는 프레젠테이션 계층과 완전히 분리되어야 한다.</li>\n<li>이러한 경우에 DTO를 사용한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberDto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 경우 다음과 같이 DTO를 사용한다.</p>\n<p>특징은 다음과 같다.</p>\n<ul>\n<li>Getter/Setter가 없다.</li>\n<li>Wrapping 된 순수한 데이터 객체</li>\n<li>Entity에 직접 접근하지 않으므로, Entity 변경시, DTO만 변경하면 된다.</li>\n</ul>\n<br/>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h2>\n<p>정리하자면 스프링 프로젝트는 다음과 같은 구조를 가진다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97795536-b5e87480-1c4a-11eb-9439-89d9558150da.png\" alt=\"image\"></p>\n<p>구성은 다음 4개와 같다.</p>\n<h3 id=\"domainentity\"><a href=\"#domainentity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Domain(Entity)</h3>\n<ul>\n<li></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Getter</span> <span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>DB 테이블과 1:1 매칭된다.</li>\n</ul>\n<h3 id=\"repositorydao\"><a href=\"#repositorydao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Repository(DAO)</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberRepository</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">EntityManager</span> em<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>Entity를 통해 데이터를 DB에 저장된다.</li>\n<li>엔티티는 DB의 데이터와 매칭되는 것</li>\n<li>실제 DB에 데이터를 저장하는 건 Repository 클래스의 Entity Manager를 통해 이루어진다</li>\n</ul>\n<h3 id=\"service\"><a href=\"#service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>프레젠테이션(뷰)에서 엔티티에 직접 접근하지않고 비즈니스 로직을 처리할 수 있도록하는 계층이다.</li>\n<li>Repository에 정의된 비즈니스 로직을 처리하거나 엔티티에 접근한다.</li>\n</ul>\n<h3 id=\"controller\"><a href=\"#controller\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Controller</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span> <span class=\"token comment\">// Response + Request</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberApiController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberService</span> memberService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api/v1/members\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemberDto</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">memberV2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre>\n<ul>\n<li>프레젠테이션 계층으로 클라이언트의 요청을 처리한다.</li>\n<li>엔티티는 서비스에 의해 추상화되어 직접 접근 불가능하다.</li>\n<li>서비스에 정의된 비즈니스 로직을 호출한다.</li>\n<li>ResponseBody에 데이터를 담아 반환해준다</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html</a></li>\n<li><a href=\"https://velog.io/@agugu95/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%8C%A8%ED%84%B4%EA%B3%BC-DAO-DTO-Repository\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@agugu95/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%8C%A8%ED%84%B4%EA%B3%BC-DAO-DTO-Repository</a></li>\n<li><a href=\"https://shinsunyoung.tistory.com/42\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shinsunyoung.tistory.com/42</a></li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 테스트 코드 작성하기","path":"/01-springboot-test/","date":"26. October 2020","timeToRead":7,"description":" Springboot Test에 대한 코드입니다. ","content":"<h1 id=\"springboot-테스트-코드\"><a href=\"#springboot-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 테스트 코드</h1>\n<p>대학교 시절, 프론트 위주 개발을 하다가 스프링 개발을 하다보니 가장 어려웠던 점은 테스트 코드를 작성하는 부분이였다.</p>\n<p>테스트 코드를 작성할 때, 여러 어노테이션이 등장하고 이 부분에 대한 개념도 없다는 것을 느끼고 있다. (다음 게시물은 아마 스프링 어노테이션에 대해서 작성할 예정이다.)</p>\n<p>간략하게라도 글을 통해 정리하고, 이후 점차 추가해가는 방향으로 진행해야겠다.</p>\n<br/>\n<h2 id=\"junit\"><a href=\"#junit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit</h2>\n<h3 id=\"junit의-특징\"><a href=\"#junit%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Junit의 특징.</h3>\n<ul>\n<li>JUnit은 자바용 단위 테스트 작성을 위한 표준 프레임워크다.</li>\n<li>xUnit이라는 단위 테스트 프레임워크의 자바 구현물이다.</li>\n<li>테스트 도구이며 외부 테스트 프로그램을 작성해 할 필요 없이 이를 관리해줄 수 있따.</li>\n<li>하나의 jar파일로 되어 있으며 사용법 또한 간단하다</li>\n<li>테스트 결과를 확인하는 것 뿐만 아니라 최적화된 코드를 유추하는 기능도 있어서 성능향상을 기대할 수 있따.</li>\n<li>Test 클래스를 통해 다른 개발자에게 테스트 방법과 클래스 히스토리를 알려줄 수 있다.</li>\n</ul>\n<h3 id=\"junit에서-테스트를-지원하는-어노테이션annotation\"><a href=\"#junit%EC%97%90%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit에서 테스트를 지원하는 어노테이션(Annotation)</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">@Test</code></p>\n<ul>\n<li>@Test 가 선언된 메서드는 테스트를 수행하는 메소드가 된다.</li>\n<li>JUnit은 각각의 테스트가 서로 영향을 주지 않고, 독립적으로 실행됨을 원칙으로 하며, @Test마다 객체를 생성한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Ignore</code></p>\n<ul>\n<li>@Ignore가 선언된 메서드는 테스트를 실행하지 않는다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Before</code></p>\n<ul>\n<li>@Before가 선언된 메서드는 @Test 메서드가 실행되기 전에 반드시 실행된다.</li>\n<li>@Test메서드에서 공통으로 사용하는 코드를 @Before 메서드에 선언하여 사용하면 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@After</code></p>\n<ul>\n<li>@After가 선언된 메서드는 @Test 메서드가 실행된 후 실행된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@BeforeClass</code></p>\n<ul>\n<li>@BeforeClass 어노테이션은 @Test 메서드보다 먼저 한번만 수행되어야 할 경우에 사용된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@AfterClass</code></p>\n<ul>\n<li>@AfterClass 어노테이션은 @Test 메서드보다 나중에 한번만 수행되어야 할 경우에 사용된다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>JUnit4와 Junit5는 테스트 어노테이션이 서로 다르다.</p>\n<p>: 해당글 참고 예정 : <a href=\"https://pureainu.tistory.com/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pureainu.tistory.com/190</a></p>\n</blockquote>\n<h3 id=\"자주-사용하는-junit-메서드\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-junit-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자주 사용하는 JUnit 메서드</h3>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>assertEquals(a,b)</strong></td>\n<td>객체 a, b의 값이 일치하는 지 확인</td>\n</tr>\n<tr>\n<td>assertArrayEquals(a,b)</td>\n<td>배열 a, b의 값이 일치하는 지 확인</td>\n</tr>\n<tr>\n<td>assertSame(a,b)</td>\n<td>객체 a, b가 같은 객체인지를 확인 <br/> 두 객체의 레퍼런스가 동일한지 확인</td>\n</tr>\n<tr>\n<td>assertTrue(a)</td>\n<td>조건 a가 참인가를 확인</td>\n</tr>\n<tr>\n<td><strong>assertNotNull(a)</strong></td>\n<td>객체 a가 null이 아님을 확인</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"springt-test-어노테이션\"><a href=\"#springt-test-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springt-Test 어노테이션</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">@RunWith(SpringJUnit4ClassRunner.class)</code></p>\n<ul>\n<li>@RunWith 어노테이션을 사용함으로써, JUnit에 내장된 러너를 사용하는 대신 어노테이션에 정의된 러너 클래스를 사용</li>\n<li>JUnit 프레임워크의 테스트 실행방법을 확장할 때 사용하는 어노테이션이다.</li>\n<li>@RunWith를 사용하기 위해선 JUnit 실행에 필요한 SpringJUnit4ClassRunner 클래스를 상속받은 @RunWith(SpringRunner.class)를 꼭 붙여서 사용해야 한다.</li>\n<li>@RunWith 어노테이션은 각각의 테스트 별로 객체가 생성되더라도 싱글톤(Singletone)의 ApplicationContext를 보장한다.</li>\n<li>@RunWith 어노테이션은 JUnit4에서 주로 사용하는 것으로 알고 있고, JUnit5의 경우에는 @ExtendWith를 사용한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@ContextConfiguration</code></p>\n<ul>\n<li>스프링 빈(Bean) 설정 파일의 위치를 지정할 때 사용하는 어노테이션이다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Autowired</code></p>\n<ul>\n<li>스프링 DI에서 사용하는 어노테이션이다.</li>\n<li>해당 변수에 자동으로 빈(Bean)을 매핑해준다.</li>\n<li>스프링 빈(Bean) 설정 파일을 읽기 위해 GenericXmlApplicatoinContext를 사용할 필요가 없다</li>\n<li>변수, setter 메서드, 생성자, 일반 메서드에 적용 가능하다.</li>\n<li>의존하는 객체를 주입할 때는 주로 Type을 사용한다.</li>\n<li><property>, <constructer-arg> 태그와 동일한 역할을 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@SpringBootTest</code></p>\n<ul>\n<li>통합 테스트를 제공하는 기본적인 스프링 부트 테스트 어노테이션이다.</li>\n<li>여러 단위의 테스트를 하나의 통합된 테스트로 수행할 때 적합한 어노테이션이다.</li>\n<li>만능 테스트 어노테이션으로 하고 싶은 모든 테스트를 수행할 수 있다.</li>\n<li>애플리케이션에 설정된 빈을 모두 로드하기 때문에 규모가 클 수록 느려지는 단점이 있다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@WebMvcTest</code></p>\n<ul>\n<li>MVC를 위한 테스트 어노테이션이다.</li>\n<li>웹에서 테스트하기 힘든 Controller를 테스트하는 데 적합하고 웹 상의 요청 또는 응답에 대해 테스트할 수 있다.</li>\n<li>@WebMvcTest를 사용하면 MVC 관련 설정인 어노테이션만 불러오기 때문에 @SpringBootTest보다 가벼운 테스트가 가능</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@DataJpaTest</code></p>\n<ul>\n<li>JPA 관련 테스트 설정만 로드하는 어노테이션이다.</li>\n<li>데이터 소스의 설정이 정상적인지 JPA를 사용하여 데이터를 제대로 CRUD 하는지 테스트가 가능하다.</li>\n<li>@Entity 어노테이션을 스캔하여 Spring Data JPA 저장소를 구성한다.</li>\n<li>실제 데이터 베이스 공간을 사용하지 않고, 내장형 데이터 베이스 공간을 사용하여 테스트하기 때문에 JPA 테스트 이후 실제 데이터 베이스가 변경 되었는지 걱정할 필요가 없다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@RestClientTest</code></p>\n<ul>\n<li>REST 관련 테스트를 도와주는 어노테이션이다.</li>\n<li>REST 통신의 데이터 형식으로 주로 사용되는 JSON 형식에 대해서 제대로 응답을 반환하는지 등을 테스트 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Json Test</code></p>\n<ul>\n<li>JSON 테스트를 지원하는 어노테이션이다.</li>\n<li>@JsonTest 어노테이션은 JSON의 직렬화와 역직렬화를 수행하는 라이브러리인 Gson과 Jackson API 테스트를 제공한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>다음과 같이 스프링 테스트에서 사용하는 어노테이션에 대해서 간단하게 정리하였다.</p>\n<p>이후에는 mock과 mockito에 대해서 작성해보아야 겠다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://donghun.dev/Spring-Boot-Test-Keywrod-one\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://donghun.dev/Spring-Boot-Test-Keywrod-one</a></li>\n<li><a href=\"https://epthffh.tistory.com/entry/Junit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%8B%A8%EC%9C%84%ED%85%8C%EC%8A%A4%ED%8A%B8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://epthffh.tistory.com/entry/Junit을-이용한-단위테스트</a></li>\n<li><a href=\"https://shlee0882.tistory.com/202\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shlee0882.tistory.com/202</a></li>\n<li><a href=\"https://pureainu.tistory.com/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pureainu.tistory.com/190</a></li>\n</ul>\n"}},{"node":{"title":"[Springboot API] Springboot with AWS : Springboot 시작하기","path":"/01-springboot-aws/","date":"28. September 2020","timeToRead":1,"description":" 'Springboot AWS'의 첫번째 게시글입니다. ","content":"<h1 id=\"springboot-시작하기\"><a href=\"#springboot-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 시작하기</h1>\n<h2 id=\"intellij\"><a href=\"#intellij\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intellij.</h2>\n<h3 id=\"intellij가-이클립스보다-더-좋은-이유\"><a href=\"#intellij%EA%B0%80-%EC%9D%B4%ED%81%B4%EB%A6%BD%EC%8A%A4%EB%B3%B4%EB%8B%A4-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intellij가 이클립스보다 더 좋은 이유</h3>\n<ul>\n<li>강력한 추천 기능 (Smart Completion)</li>\n<li>다양한 리팩토링과 디버깅 기능</li>\n<li>이클립스 Git에 비해 높은 자유도</li>\n<li>프로젝트 시작시, 인덱싱을 통해 파일을 비롯한 자원들에 대한 빠른 검색 속도</li>\n<li>HTML, CSS, JS, XML에 대한 강력한 기능 지원</li>\n<li>자바, 스프링 부트 버전업에 맞춘 빠른 업데이트 등</li>\n</ul>\n<h3 id=\"좀-더-intellij에-대해-알고-싶은-경우\"><a href=\"#%EC%A2%80-%EB%8D%94-intellij%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>좀 더 Intellij에 대해 알고 싶은 경우.</h3>\n<ul>\n<li><a href=\"http://bit.ly/2zSt3ie\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">젯브레인 한국 사용자 모임</a></li>\n<li><a href=\"https://jojoldu.tistory.com/category/IDE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">책 저자 블로그</a></li>\n<li><a href=\"http://bit.ly/2xZLQHc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">인프런 인텔리제이 가이드</a></li>\n</ul>\n<p>설치는 생략함.</p>\n<p>(추후 작성예정)</p>\n"}},{"node":{"title":"[Springboot API] Springboot REST API : REST API 보안 적용","path":"/05-springboot-restapi/","date":"21. September 2020","timeToRead":7,"description":" 'Springboot REST API'의 다섯번째 게시글입니다. ","content":"<h1 id=\"rest-api-보안-적용\"><a href=\"#rest-api-%EB%B3%B4%EC%95%88-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST API 보안 적용</h1>\n<br/>\n<h2 id=\"account-도메인-추가\"><a href=\"#account-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Account 도메인 추가</h2>\n<h3 id=\"oauth2로-인증을-하려면-일단-account-부터\"><a href=\"#oauth2%EB%A1%9C-%EC%9D%B8%EC%A6%9D%EC%9D%84-%ED%95%98%EB%A0%A4%EB%A9%B4-%EC%9D%BC%EB%8B%A8-account-%EB%B6%80%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2로 인증을 하려면 일단 Account 부터</h3>\n<ul>\n<li>id</li>\n<li>email</li>\n<li>password</li>\n<li>roels</li>\n</ul>\n<h3 id=\"accountroles\"><a href=\"#accountroles\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AccountRoles</h3>\n<ul>\n<li>ADMIN, USER</li>\n</ul>\n<h3 id=\"jpa-맵핑\"><a href=\"#jpa-%EB%A7%B5%ED%95%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 맵핑</h3>\n<ul>\n<li>@Table(“Users”)</li>\n</ul>\n<h3 id=\"jpa-enumeration-collection-mapping\"><a href=\"#jpa-enumeration-collection-mapping\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA enumeration collection mapping</h3>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@ElementCollection</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>EAGER<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccountRole</span><span class=\"token punctuation\">></span></span> roles<span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"event에-owner-추가\"><a href=\"#event%EC%97%90-owner-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event에 owner 추가</h3>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@ManyToOne</span>\n    <span class=\"token class-name\">Account</span> manager<span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"스프링-시큐리티\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티</h2>\n<h3 id=\"스프링-시큐리티-1\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티</h3>\n<ul>\n<li>웹 시큐리티 (Filter 기반 시큐리티)</li>\n<li>메소드 시큐리티</li>\n<li>\n<p>이 둘 다 Security Interceptor를 사용합니다.</p>\n<ul>\n<li>리소스에 접근을 허용할 것이냐 말것이냐를 결정하는 로직이 들어있음.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/93766241-19958000-fc51-11ea-82da-7b4f7b41a230.png\" alt=\"image\"></p>\n<h3 id=\"의존성-추가\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의존성 추가</h3>\n<pre class=\"language-xml\"><code class=\"language-xml\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.security.oauth.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-security-oauth2-autoconfigure<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li>\n<p>테스트 다 깨짐 (401 Unauthorized)</p>\n<ul>\n<li>깨지는 이유는 스프링 부트가 제공하는 스프링 시큐리티 기본 설정 때문.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"예외-테스트\"><a href=\"#%EC%98%88%EC%99%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외 테스트</h2>\n<ol>\n<li>@Test(expected)</li>\n</ol>\n<p>예외 타입만 확인 가능</p>\n<ol start=\"2\">\n<li>try-catch</li>\n</ol>\n<p>예외 타입과 메시지 확인 가능.\n하지만 코드가 다소 복잡.</p>\n<ol start=\"3\">\n<li>@Rule ExpectedException</li>\n</ol>\n<p>코드는 간결하면서 예외 타입과 메시지 모두 확인 가능</p>\n<br/>\n<h2 id=\"스프링-시큐리티-기본-설정\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티 기본 설정</h2>\n<h3 id=\"시큐리티-필터를-적용하기-않음\"><a href=\"#%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%ED%95%84%ED%84%B0%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%95%8A%EC%9D%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>시큐리티 필터를 적용하기 않음...</h3>\n<ul>\n<li>/docs/index.html</li>\n</ul>\n<h3 id=\"로그인-없이-접근-가능\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%97%86%EC%9D%B4-%EC%A0%91%EA%B7%BC-%EA%B0%80%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로그인 없이 접근 가능</h3>\n<ul>\n<li>GET /api/events</li>\n<li>GET /api/events/{id}</li>\n</ul>\n<h3 id=\"로그인-해야-접근-가능\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%95%B4%EC%95%BC-%EC%A0%91%EA%B7%BC-%EA%B0%80%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로그인 해야 접근 가능</h3>\n<ul>\n<li>나머지 다...</li>\n<li>POST /api/events</li>\n<li>PUT /api/events/{id{</li>\n<li>...</li>\n</ul>\n<h3 id=\"스프링-시큐리티-oauth-20\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-oauth-20\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티 OAuth 2.0</h3>\n<ul>\n<li>\n<p>AuthorizationServer: OAuth2 토큰 발행(/oauth/token) 및 토큰 인증(/oauth/authorize)</p>\n<ul>\n<li>Oder 0 (리소스 서버 보다 우선 순위가 높다.)</li>\n</ul>\n</li>\n<li>\n<p>ResourceServer: 리소스 요청 인증 처리 (OAuth 2 토큰 검사)</p>\n<ul>\n<li>Oder 3 (이 값은 현재 고칠 수 없음)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"스프링-시큐리티-설정\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티 설정</h3>\n<ul>\n<li>@EnableWebSecurity</li>\n<li>@EnableGlobalMethodSecurity</li>\n<li>extends WebSecurityConfigurerAdapter</li>\n<li>PasswordEncoder: PasswordEncoderFactories.createDelegatingPassworkEncoder()</li>\n<li>TokenStore: InMemoryTokenStore</li>\n<li>AuthenticationManagerBean</li>\n<li>\n<p>configure(AuthenticationManagerBuidler auth)</p>\n<ul>\n<li>userDetailsService</li>\n<li>passwordEncoder</li>\n</ul>\n</li>\n<li>\n<p>configure(HttpSecurity http)</p>\n<ul>\n<li>/docs/**: permitAll</li>\n</ul>\n</li>\n<li>\n<p>configure(WebSecurty web)</p>\n<ul>\n<li>\n<p>ignore</p>\n<ul>\n<li>/docs/**</li>\n<li>/favicon.ico</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>PathRequest.toStaticResources() 사용하기</li>\n</ul>\n<br/>\n<h2 id=\"스프링-시큐리티-폼-인증-설정\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%ED%8F%BC-%EC%9D%B8%EC%A6%9D-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티 폼 인증 설정</h2>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        http\n            <span class=\"token punctuation\">.</span><span class=\"token function\">anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">mvcMatchers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/api/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>익명 사용자 사용 활성화</li>\n<li>\n<p>폼 인증 방식 활성화</p>\n<ul>\n<li>스프링 시큐리티가 기본 로그인 페이지 제공</li>\n</ul>\n</li>\n<li>\n<p>요청에 인증 적용</p>\n<ul>\n<li>/api 이하 모든 GET 요청에 인증이 필요함. (permitAll()을 사용하여 인증이 필요없이 익명으로 접근이 가능케 할 수 있음)</li>\n<li>그밖에 모은 요청도 인증이 필요함.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-시큐리티-oauth-2-설정--인증-서버-설정\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-oauth-2-%EC%84%A4%EC%A0%95--%EC%9D%B8%EC%A6%9D-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티 OAuth 2 설정 : 인증 서버 설정</h2>\n<pre class=\"language-xml\"><code class=\"language-xml\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-security-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${spring-security.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"토큰-발행-테스트\"><a href=\"#%ED%86%A0%ED%81%B0-%EB%B0%9C%ED%96%89-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>토큰 발행 테스트</h3>\n<ul>\n<li>User</li>\n<li>Client</li>\n<li>\n<p>POST /oauth/token</p>\n<ul>\n<li>HTTP Basic 인증 헤더 (클라이언트 아이디 + 클라이언트 시크릿)</li>\n<li>\n<p>요청 매개변수 (MultiValuMap&#x3C;String, String>)</p>\n<ul>\n<li>grant_type: password</li>\n<li>username</li>\n<li>password</li>\n</ul>\n</li>\n<li>응답에 access_token 나오는지 확인</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"grant-type-password\"><a href=\"#grant-type-password\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Grant Type: Password</h3>\n<ul>\n<li>Granty Type: 토큰 받아오는 방법</li>\n<li>서비스 오너가 만든 클라이언트에서 사용하는 Grant Type</li>\n<li><a href=\"https://developer.okta.com/blog/2018/06/29/what-is-the-oauth2-password-grant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.okta.com/blog/2018/06/29/what-is-the-oauth2-password-grant</a></li>\n</ul>\n<h3 id=\"authorizationserver-설정\"><a href=\"#authorizationserver-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AuthorizationServer 설정</h3>\n<ul>\n<li>@EnableAuthorizationServer</li>\n<li>extends AuthorizationServerConfigurerAdapter</li>\n<li>\n<p>configure(AuthorizationServerSecurityConfigurer security)</p>\n<ul>\n<li>PassswordEncode 설정</li>\n</ul>\n</li>\n<li>\n<p>configure(ClientDetailsServiceConfigurer clients)</p>\n<ul>\n<li>클라이언트 설정</li>\n<li>\n<p>grantTypes</p>\n<ul>\n<li>password</li>\n<li>refresh_token</li>\n</ul>\n</li>\n<li>scopes</li>\n<li>secret / name</li>\n<li>accessTokenValiditySeconds</li>\n<li>refreshTokenValiditySeconds</li>\n</ul>\n</li>\n<li>\n<p>AuthorizationServerEndpointsConfigurer</p>\n<ul>\n<li>tokenStore</li>\n<li>authenticationMaanger</li>\n<li>userDetailsService</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-시큐리티-oauth-2-설정-리소스-서버-설정\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-oauth-2-%EC%84%A4%EC%A0%95-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티 OAuth 2 설정: 리소스 서버 설정</h2>\n<h3 id=\"테스트-수정\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%88%98%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 수정</h3>\n<ul>\n<li>GET을 제외하고 모두 엑세스 토큰을 가지고 요청 하도록 테스트 수정</li>\n</ul>\n<h3 id=\"resourceserver-설정\"><a href=\"#resourceserver-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ResourceServer 설정</h3>\n<ul>\n<li>@EnableResourceServer</li>\n<li>extends ResourceServerConfigurerAdapter</li>\n<li>\n<p>configure(ResourceServerSecurityConfigurer resources)</p>\n<ul>\n<li>리소스 ID</li>\n</ul>\n</li>\n<li>\n<p>configure(HttpSecurity http)</p>\n<ul>\n<li>anonymous</li>\n<li>GET /api/** : permit all</li>\n<li>POST /api/**: authenticated</li>\n<li>PUT /api/**: authenticated</li>\n<li>\n<p>에러 처리</p>\n<ul>\n<li>accessDeniedHandler(OAuth2AccessDeniedHandler())</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"문자열을-외부-설정으로-빼내기\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%EC%99%B8%EB%B6%80-%EC%84%A4%EC%A0%95%EC%9C%BC%EB%A1%9C-%EB%B9%BC%EB%82%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열을 외부 설정으로 빼내기</h2>\n<h3 id=\"기본-유저-만들기\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%9C%A0%EC%A0%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기본 유저 만들기</h3>\n<ul>\n<li>\n<p>ApplicationRunner</p>\n<ul>\n<li>Admin</li>\n<li>User</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"외부-설정으로-기본-유저와-클라이언트-정보-빼내기\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%84%A4%EC%A0%95%EC%9C%BC%EB%A1%9C-%EA%B8%B0%EB%B3%B8-%EC%9C%A0%EC%A0%80%EC%99%80-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%A0%95%EB%B3%B4-%EB%B9%BC%EB%82%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>외부 설정으로 기본 유저와 클라이언트 정보 빼내기</h3>\n<ul>\n<li>@ConfigurationProperties</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-api-점검\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-api-%EC%A0%90%EA%B2%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 API 점검</h2>\n<h3 id=\"토큰-발급-받기\"><a href=\"#%ED%86%A0%ED%81%B0-%EB%B0%9C%EA%B8%89-%EB%B0%9B%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>토큰 발급 받기</h3>\n<ul>\n<li>POST /oauth/token</li>\n<li>\n<p>BASIC authentication 헤더</p>\n<ul>\n<li>client Id(myApp) + client secret(pass)</li>\n</ul>\n</li>\n<li>\n<p>요청 본문 폼</p>\n<ul>\n<li>username: admin@email.com</li>\n<li>password: admin</li>\n<li>grant_type: password</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/94319205-1ab60c80-ffc5-11ea-8fa6-9bcce9e4434a.png\" alt=\"image\"></p>\n<h3 id=\"토큰-갱신하기\"><a href=\"#%ED%86%A0%ED%81%B0-%EA%B0%B1%EC%8B%A0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>토큰 갱신하기</h3>\n<ul>\n<li>POST /oauth/token</li>\n<li>\n<p>BASIC authentication 헤더</p>\n<ul>\n<li>client Id(myApp) + client secret(pass)</li>\n</ul>\n</li>\n<li>\n<p>요청 본문 폼</p>\n<ul>\n<li>token: 처음에 발급받았던 refersh 토큰</li>\n<li>grant_type: refresh_token</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/94319161-06720f80-ffc5-11ea-98cf-d9826e6c834a.png\" alt=\"image\"></p>\n<h3 id=\"이벤트-목록-조회-api\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 목록 조회 API</h3>\n<ul>\n<li>\n<p>로그인 했을 때</p>\n<ul>\n<li>이벤트 생성 링크 제공</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"이벤트-조회\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 조회</h3>\n<ul>\n<li>\n<p>로그인 했을 때</p>\n<ul>\n<li>이벤트 Manager인 경우에는 이벤트 수정 링크 제공</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-시큐리티-현재-사용자\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%ED%98%84%EC%9E%AC-%EC%82%AC%EC%9A%A9%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티 현재 사용자</h2>\n<h3 id=\"securitycontext\"><a href=\"#securitycontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SecurityContext</h3>\n<ul>\n<li>자바 ThreadLocal 기반 구현으로 인증 정보를 담고 있다.</li>\n<li>인증 정보 꺼내는 방법:\n<code class=\"language-text\">Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</code></li>\n</ul>\n<h3 id=\"authenticationprincipal-springsecurityuser-user\"><a href=\"#authenticationprincipal-springsecurityuser-user\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@AuthenticationPrincipal spring.security.User user</h3>\n<ul>\n<li>인증 안한 경우에 null</li>\n<li>인증 한 경우에는 username과 authorities 참조 가능</li>\n</ul>\n<h3 id=\"springsecurityuser를-상속받는-클래스를-구현하면\"><a href=\"#springsecurityuser%EB%A5%BC-%EC%83%81%EC%86%8D%EB%B0%9B%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>spring.security.User를 상속받는 클래스를 구현하면</h3>\n<ul>\n<li>도메인 User를 받을 수 있다.</li>\n<li>@AuthenticationPrincipa <code class=\"language-text\">me.whiteship.user.</code>UserAdapter</li>\n<li>Adatepr.getUser().getId()</li>\n</ul>\n<h3 id=\"spel을-사용하면\"><a href=\"#spel%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpEL을 사용하면</h3>\n<ul>\n<li>@AuthenticationPrincipa(expression=”account”) <code class=\"language-text\">me.whiteship.user.Account</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>PARAMETER<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@AuthenticationPrincipal</span><span class=\"token punctuation\">(</span>expression <span class=\"token operator\">=</span> <span class=\"token string\">\"account\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">CurrentUser</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"커스텀-애노테이션을-만들면\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A0%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%A7%8C%EB%93%A4%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀 애노테이션을 만들면</h3>\n<ul>\n<li>@CurrentUser Account account</li>\n<li>엇? 근데 인증 안하고 접근하면..?</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">expression <span class=\"token operator\">=</span> <span class=\"token string\">\"#this == 'anonymousUser' ? null : account\"</span></code></pre>\n<ul>\n<li>현재 인증 정보가 anonymousUse 인 경우에는 null을 보내고 아니면 “account”를 꺼내준다.</li>\n</ul>\n<h3 id=\"조회-api-개선\"><a href=\"#%EC%A1%B0%ED%9A%8C-api-%EA%B0%9C%EC%84%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>조회 API 개선</h3>\n<ul>\n<li>현재 조회하는 사용자가 owner인 경우에 update 링크 추가 (HATEOAS)</li>\n</ul>\n<h3 id=\"수정-api-개선\"><a href=\"#%EC%88%98%EC%A0%95-api-%EA%B0%9C%EC%84%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>수정 API 개선</h3>\n<ul>\n<li>현재 사용자가 이벤트 owner가 아닌 경우에 403 에러 발생</li>\n</ul>\n<br/>\n<h2 id=\"events-api-개선-출력값-제한하기\"><a href=\"#events-api-%EA%B0%9C%EC%84%A0-%EC%B6%9C%EB%A0%A5%EA%B0%92-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Events API 개선: 출력값 제한하기</h2>\n<h3 id=\"생성-api-개선\"><a href=\"#%EC%83%9D%EC%84%B1-api-%EA%B0%9C%EC%84%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성 API 개선</h3>\n<ul>\n<li>Event owner 설정</li>\n<li>응답에서 owner의 id만 보내 줄 것.</li>\n</ul>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"test 3PISM1Ju\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"test event\"</span><span class=\"token punctuation\">,</span>\n...\n  <span class=\"token property\">\"free\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token property\">\"eventStatus\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"DRAFT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"owner\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"keesun@email.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"password\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"{bcrypt}$2a$10$3z/rHmeYsKpoOQR3aUq38OmZjZNsrGfRZxSnmpLfL3lpLxjD5/JZ6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"roles\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"USER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ADMIN\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<ul>\n<li>JsonSerializer<User> 구현</li>\n<li>@JsonSerialize(using) 설정</li>\n</ul>\n<br/>\n<h2 id=\"깨진-테스트-살펴보기\"><a href=\"#%EA%B9%A8%EC%A7%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨진 테스트 살펴보기</h2>\n<h3 id=\"eventcontrollertestsupdateevent\"><a href=\"#eventcontrollertestsupdateevent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EventControllerTests.updateEvent()</h3>\n<ul>\n<li>깨지는 이유</li>\n<li>해결 방법</li>\n</ul>\n<h3 id=\"eventcontrollertestsgetevent\"><a href=\"#eventcontrollertestsgetevent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EventControllerTests.getEvent()</h3>\n<ul>\n<li>깨지는 이유</li>\n<li>해결 방법</li>\n</ul>\n<h3 id=\"demoapplicationtests\"><a href=\"#demoapplicationtests\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DemoApplicationTests</h3>\n<ul>\n<li>깨지는 이유</li>\n<li>해결 방법</li>\n</ul>\n<br/>\n<h2 id=\"스프링-부트-225-버전으로-업데이트\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-225-%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 2.2.5 버전으로 업데이트</h2>\n<h3 id=\"현재-스프링-부트-최신-권장-버전은-225\"><a href=\"#%ED%98%84%EC%9E%AC-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%B5%9C%EC%8B%A0-%EA%B6%8C%EC%9E%A5-%EB%B2%84%EC%A0%84%EC%9D%80-225\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>현재 스프링 부트 최신 권장 버전은 2.2.5</h3>\n<ul>\n<li><a href=\"https://spring.io/projects/spring-boot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://spring.io/projects/spring-boot</a></li>\n</ul>\n<h3 id=\"스프링-부트-버전을-올리면-바뀔-수-있는-일\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EB%B2%84%EC%A0%84%EC%9D%84-%EC%98%AC%EB%A6%AC%EB%A9%B4-%EB%B0%94%EB%80%94-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 버전을 올리면 바뀔 수 있는 일</h3>\n<ul>\n<li>기본 (자동) 설정 값 변경</li>\n<li>의존성 변경</li>\n<li>기존 애플리케이션의 동작이 바뀌거나 컴파일 에러가 발생할 수 있다.</li>\n</ul>\n<h3 id=\"스프링-부트-22-주요-변화\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-22-%EC%A3%BC%EC%9A%94-%EB%B3%80%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 2.2.* 주요 변화</h3>\n<ul>\n<li>JUnit 4 -> JUnit 5</li>\n<li>스프링 HATEOAS 버전이 올라가면서 스프링 HATEOAS의 API가 바뀌었다.</li>\n</ul>\n<h3 id=\"스프링-hateoas\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-hateoas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 HATEOAS</h3>\n<ul>\n<li>Resource -> EntityModel</li>\n<li>Resources -> CollectionModel</li>\n<li>PagedResrouces -> PagedModel</li>\n<li>ResourceSupport -> RepresentationModel</li>\n<li>assembler.toResource -> assembler.toModel</li>\n<li>org.springframework.hateoas.mvc.ControllerLinkBuilder -> org.springframework.hateoas.server.mvc.WebMvcLinkBuilder</li>\n<li>MediaTypes 중에 (UTF8)인코딩이 들어간 상수 제거.</li>\n</ul>\n<h3 id=\"junit-5\"><a href=\"#junit-5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit 5</h3>\n<ul>\n<li>org.junit -> org.junit.jupiter</li>\n<li>@Ignore -> @Disabled</li>\n<li>@Before, @After -> @BeforeEach, @AfterEach</li>\n<li>@TestDescription (우리가 만든거) -> @DisplayName</li>\n</ul>\n<h3 id=\"스프링-mvc-변경\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-mvc-%EB%B3%80%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 MVC 변경</h3>\n<ul>\n<li>MediaType 중에 (UTF8)인코딩이 들어간 상수 deprecation.</li>\n</ul>\n"}},{"node":{"title":"[Springboot API] Springboot REST API : 이벤트 조회 및 수정 REST API 개발","path":"/04-springboot-restapi/","date":"20. September 2020","timeToRead":2,"description":" 'Springboot REST API'의 네번째 게시글입니다. ","content":"<h1 id=\"이벤트-조회-및-수정-rest-api-개발\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C-%EB%B0%8F-%EC%88%98%EC%A0%95-rest-api-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 조회 및 수정 REST API 개발</h1>\n<br/>\n<h2 id=\"이벤트-목록-조회-api-구현\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C-api-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 목록 조회 API 구현</h2>\n<h3 id=\"페이징-정렬-어떻게-하지\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%95-%EC%A0%95%EB%A0%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>페이징, 정렬 어떻게 하지?</h3>\n<ul>\n<li>스프링 데이터 JPA가 제공하는 Pageable</li>\n</ul>\n<h3 id=\"pageevent에-안에-들어있는-event-들은-리소스로-어떻게-변경할까\"><a href=\"#pageevent%EC%97%90-%EC%95%88%EC%97%90-%EB%93%A4%EC%96%B4%EC%9E%88%EB%8A%94-event-%EB%93%A4%EC%9D%80-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%80%EA%B2%BD%ED%95%A0%EA%B9%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Page<Event>에 안에 들어있는 Event 들은 리소스로 어떻게 변경할까?</h3>\n<ul>\n<li>하나씩 순회하면서 직접 EventResource로 맵핑을 시킬까..</li>\n<li>PagedResourceAssembler<T> 사용하기</li>\n</ul>\n<h3 id=\"테스트-할-때-pageable-파라미터-제공하는-방법\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EB%95%8C-pageable-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 때 Pageable 파라미터 제공하는 방법</h3>\n<ul>\n<li>page: 0부터 시작</li>\n<li>size: 기본값 20</li>\n<li>sort: property,property(,ASC|DESC)</li>\n</ul>\n<h3 id=\"테스트-할-것\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>Event 목록 Page 정보와 함께 받기</p>\n<ul>\n<li>content[0].id 확인</li>\n<li>pageable 경로 확인</li>\n</ul>\n</li>\n<li>\n<p>Sort과 Paging 확인</p>\n<ul>\n<li>30개를 만들고, 10개 사이즈로 두번째 페이지 조회하면 이전, 다음 페이지로 가는 링크가 있어야 한다.</li>\n<li>이벤트 이름순으로 정렬하기</li>\n<li>page 관련 링크</li>\n</ul>\n</li>\n<li>\n<p>Event를 EventResource로 변환해서 받기</p>\n<ul>\n<li>각 이벤트 마다 self</li>\n</ul>\n</li>\n<li>\n<p>링크 확인</p>\n<ul>\n<li>self</li>\n<li>profile</li>\n<li>(create)</li>\n</ul>\n</li>\n<li>문서화</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-조회-api\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 조회 API</h2>\n<h3 id=\"테스트-할-것-1\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<p>조회하는 이벤트가 있는 경우 이벤트 리소스 확인</p>\n<ul>\n<li>\n<p>링크</p>\n<ul>\n<li>self</li>\n<li>profile</li>\n<li>(update)</li>\n</ul>\n</li>\n<li>이벤트 데이터</li>\n</ul>\n<p>조회하는 이벤트가 없는 경우 404 응답 확인</p>\n<br/>\n<h2 id=\"이벤트-수정-api\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%88%98%EC%A0%95-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 수정 API</h2>\n<h3 id=\"테스트-할-것-2\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<p>수정하려는 이벤트가 없는 경우 404 NOT_FOUND</p>\n<p>입력 데이터 (데이터 바인딩)가 이상한 경우에 400 BAD_REQUEST</p>\n<p>도메인 로직으로 데이터 검증 실패하면 400 BAD_REQUEST\n(권한이 충분하지 않은 경우에 403 FORBIDDEN)</p>\n<p>정상적으로 수정한 경우에 이벤트 리소스 응답</p>\n<ul>\n<li>200 OK</li>\n<li>링크</li>\n<li>수정한 이벤트 데이터</li>\n</ul>\n<br/>\n<h2 id=\"테스트-코드-리팩토링\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 코드 리팩토링</h2>\n<h3 id=\"여러-컨트롤러-간의-중복-코드-제거하기\"><a href=\"#%EC%97%AC%EB%9F%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EA%B0%84%EC%9D%98-%EC%A4%91%EB%B3%B5-%EC%BD%94%EB%93%9C-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>여러 컨트롤러 간의 중복 코드 제거하기</h3>\n<ul>\n<li>클래스 상속을 사용하는 방법</li>\n<li>@Ignore 애노테이션으로 테스트로 간주되지 않도록 설정</li>\n</ul>\n"}},{"node":{"title":"[Springboot API] Springboot REST API : HATEOAS와 Self-Describtive Message 적용","path":"/03-springboot-restapi/","date":"14. September 2020","timeToRead":5,"description":" 'Springboot REST API'의 세번째 게시글입니다. ","content":"<h1 id=\"hateoas와-self-describtive-message\"><a href=\"#hateoas%EC%99%80-self-describtive-message\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HATEOAS와 Self-Describtive Message</h1>\n<br/>\n<h2 id=\"스프링-hateoas-소개\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-hateoas-%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 HATEOAS 소개</h2>\n<h3 id=\"스프링-hateoas\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-hateoas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 HATEOAS</h3>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-hateoas/docs/current/reference/html/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-hateoas/docs/current/reference/html/</a></li>\n<li>\n<p>링크 만드는 기능</p>\n<ul>\n<li>문자열 가지고 만들기</li>\n<li>컨트롤러와 메소드로 만들기</li>\n</ul>\n</li>\n<li>\n<p>리소스 만드는 기능</p>\n<ul>\n<li>리소스: 데이터 + 링크</li>\n</ul>\n</li>\n<li>\n<p>링크 찾아주는 기능</p>\n<ul>\n<li>Traverson</li>\n<li>LinkDiscoverers</li>\n</ul>\n</li>\n<li>\n<p>링크</p>\n<ul>\n<li>HREF</li>\n<li>\n<p>REL</p>\n<ul>\n<li>self</li>\n<li>profile</li>\n<li>update-event</li>\n<li>query-events</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://user-images.githubusercontent.com/42582516/93029741-704ef880-f658-11ea-8e27-81d626a05ed8.png\" alt=\"image\" style=\"zoom:30%;\" />\n<br/>\n<h2 id=\"스프링-hateoas-적용\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-hateoas-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 HATEOAS 적용</h2>\n<h3 id=\"evnetresource-만들기\"><a href=\"#evnetresource-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EvnetResource 만들기</h3>\n<ul>\n<li>\n<p>extends ResourceSupport의 문제</p>\n<ul>\n<li>@JsonUnwrapped로 해결</li>\n<li>extends Resource<T>로 해결</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"테스트-할-것\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>응답에 HATEOA와 profile 관련 링크가 있는지 확인.</p>\n<ul>\n<li>self (view)</li>\n<li>update (만든 사람은 수정할 수 있으니까)</li>\n<li>events (목록으로 가는 링크)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-rest-docs-소개\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs-%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs 소개</h2>\n<p><a href=\"https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/</a></p>\n<h3 id=\"rest-docs-코딩\"><a href=\"#rest-docs-%EC%BD%94%EB%94%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST Docs 코딩</h3>\n<ul>\n<li>andDo(document(“doc-name”, snippets))</li>\n<li>\n<p>snippets</p>\n<ul>\n<li>links()</li>\n<li>requestParameters() + parameterWithName()</li>\n<li>pathParameters() + parametersWithName()</li>\n<li>requestParts() + partWithname()</li>\n<li>requestPartBody()</li>\n<li>requestPartFields()</li>\n<li>requestHeaders() + headerWithName()</li>\n<li>requestFields() + fieldWithPath()</li>\n<li>responseHeaders() + headerWithName()</li>\n<li>responseFields() + fieldWithPath()</li>\n<li>...</li>\n</ul>\n</li>\n<li>Relaxed*</li>\n<li>\n<p>Processor</p>\n<ul>\n<li>preprocessRequest(prettyPrint())</li>\n<li>preprocessResponse(prettyPrint())</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"constraint\"><a href=\"#constraint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Constraint</h3>\n<p><a href=\"https://github.com/spring-projects/spring-restdocs/blob/v2.0.2.RELEASE/samples/rest-notes-spring-hateoas/src/test/java/com/example/notes/ApiDocumentation.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/spring-projects/spring-restdocs/blob/v2.0.2.RELEASE/samples/rest-notes-spring-hateoas/src/test/java/com/example/notes/ApiDocumentation.java</a></p>\n<br/>\n<h2 id=\"스프링-rest-docs-적용\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs 적용</h2>\n<h3 id=\"rest-docs-자동-설정\"><a href=\"#rest-docs-%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST Docs 자동 설정</h3>\n<ul>\n<li>@AutoConfigureRestDocs</li>\n</ul>\n<h3 id=\"restdocmockmvc-커스터마이징\"><a href=\"#restdocmockmvc-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RestDocMockMvc 커스터마이징</h3>\n<ul>\n<li>RestDocsMockMvcConfigurationCustomizer 구현한 빈 등록</li>\n<li>@TestConfiguration</li>\n</ul>\n<h3 id=\"테스트-할-것-1\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>API 문서 만들기</p>\n<ul>\n<li>요청 본문 문서화</li>\n<li>응답 본문 문서화</li>\n<li>\n<p>링크 문서화</p>\n<ul>\n<li>profile 링크 추가</li>\n</ul>\n</li>\n<li>응답 헤더 문서화</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-rest-docs-링크-req-res-필드와-헤더-문서화\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs-%EB%A7%81%ED%81%AC-req-res-%ED%95%84%EB%93%9C%EC%99%80-%ED%97%A4%EB%8D%94-%EB%AC%B8%EC%84%9C%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs: 링크, (Req, Res) 필드와 헤더 문서화</h2>\n<h3 id=\"요청-필드-문서화\"><a href=\"#%EC%9A%94%EC%B2%AD-%ED%95%84%EB%93%9C-%EB%AC%B8%EC%84%9C%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>요청 필드 문서화</h3>\n<ul>\n<li>requestFields() + fieldWithPath()</li>\n<li>responseFields() + fieldWithPath()</li>\n<li>requestHeaders() + headerWithName()</li>\n<li>responseHedaers() + headerWithName()</li>\n<li>links() + linkWithRel()</li>\n</ul>\n<h3 id=\"테스트-할-것-2\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>API 문서 만들기</p>\n<ul>\n<li>요청 본문 문서화</li>\n<li>응답 본문 문서화</li>\n<li>\n<p>링크 문서화</p>\n<ul>\n<li>self</li>\n<li>query-events</li>\n<li>update-event</li>\n<li>profile 링크 추가</li>\n</ul>\n</li>\n<li>요청 헤더 문서화</li>\n<li>요청 필드 문서화</li>\n<li>응답 헤더 문서화</li>\n<li>응답 필드 문서화</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"relaxed-접두어\"><a href=\"#relaxed-%EC%A0%91%EB%91%90%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Relaxed 접두어</h3>\n<ul>\n<li>장점: 문서 일부분만 테스트 할 수 있다.</li>\n<li>단점: 정확한 문서를 생성하지 못한다.</li>\n</ul>\n<br/>\n<h2 id=\"스프링-rest-docs-문서-빌드\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs-%EB%AC%B8%EC%84%9C-%EB%B9%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs 문서 빌드</h2>\n<h3 id=\"스프링-rest-docs\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs</h3>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/</a></li>\n<li>pom.xml에 메이븐 플러그인 설정</li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\">            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.asciidoctor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>asciidoctor-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.5.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>generate-docs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phase</span><span class=\"token punctuation\">></span></span>prepare-package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phase</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">></span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">></span></span>process-asciidoc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>backend</span><span class=\"token punctuation\">></span></span>html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>backend</span><span class=\"token punctuation\">></span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>doctype</span><span class=\"token punctuation\">></span></span>book<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>doctype</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.restdocs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-restdocs-asciidoctor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.2.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-resources-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>copy-resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phase</span><span class=\"token punctuation\">></span></span>prepare-package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phase</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">></span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">></span></span>copy-resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>outputDirectory</span><span class=\"token punctuation\">></span></span>\n                                ${project.build.outputDirectory}/static/docs\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>outputDirectory</span><span class=\"token punctuation\">></span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span>\n                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">></span></span>\n                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>\n                                        ${project.build.directory}/generated-docs\n                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span>\n                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li>\n<p>템플릿 파일 추가</p>\n<ul>\n<li>src/main/asciidoc/index.adoc</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"문서-생성하기\"><a href=\"#%EB%AC%B8%EC%84%9C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문서 생성하기</h3>\n<ul>\n<li>\n<p>mvn package</p>\n<ul>\n<li>test</li>\n<li>prepare-package :: process-asciidoc</li>\n<li>prepare-package :: copy-resources</li>\n</ul>\n</li>\n<li>\n<p>문서 확인</p>\n<ul>\n<li>/docs/index.html</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"테스트-할-것-3\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>API 문서 만들기</p>\n<ul>\n<li>요청 본문 문서화</li>\n<li>응답 본문 문서화</li>\n<li>\n<p>링크 문서화</p>\n<ul>\n<li>self</li>\n<li>query-events</li>\n<li>update-event</li>\n<li>profile 링크 추가</li>\n</ul>\n</li>\n<li>요청 헤더 문서화</li>\n<li>요청 필드 문서화</li>\n<li>응답 헤더 문서화</li>\n<li>응답 필드 문서화</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"postgresql-적용\"><a href=\"#postgresql-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PostgreSQL 적용</h2>\n<p>테스트 할 때는 계속 H2를 사용해도 좋지만 애플리케이션 서버를 실행할 때 PostgreSQL을 사용하도록 변경하자.</p>\n<p>/scripts.md 참고</p>\n<ol>\n<li>PostgreSQL 드라이버 의존성 추가</li>\n</ol>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.postgresql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>postgresql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<ol start=\"2\">\n<li>도커로 PostgreSQL 컨테이너 실행</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker run --name ndb -p <span class=\"token number\">5432</span>:5432 -e <span class=\"token assign-left variable\">POSTGRES_PASSWORD</span><span class=\"token operator\">=</span>pass -d postgres</code></pre>\n<ol start=\"3\">\n<li>도커 컨테이너에 들어가보기</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -i -t ndb <span class=\"token function\">bash</span>\n<span class=\"token function\">su</span> - postgres\npsql -d postgres -U postgres\n<span class=\"token punctuation\">\\</span>l\n<span class=\"token punctuation\">\\</span>dt</code></pre>\n<ol start=\"4\">\n<li>데이터소스 설정</li>\n</ol>\n<pre class=\"language-xml\"><code class=\"language-xml\">application.properties\nspring.datasource.username=postgres\nspring.datasource.password=pass\nspring.datasource.url=jdbc:postgresql://localhost:5432/postgres\nspring.datasource.driver-class-name=org.postgresql.Driver</code></pre>\n<ol start=\"5\">\n<li>하이버네이트 설정</li>\n</ol>\n<p><strong>application.properties</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\">spring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true\nspring.jpa.properties.hibernate.format_sql=true\nlogging.level.org.hibernate.SQL=DEBUG\nlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE</code></pre>\n<h3 id=\"애플리케이션-설정과-테스트-설정-중복-어떻게-줄일-것인가\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EC%A0%95%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95-%EC%A4%91%EB%B3%B5-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A4%84%EC%9D%BC-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>애플리케이션 설정과 테스트 설정 중복 어떻게 줄일 것인가?</h3>\n<ul>\n<li>프로파일과 @ActiveProfiles 활용</li>\n</ul>\n<p><strong>application-test.properties</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\">spring.datasource.username=sa\nspring.datasource.password=\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driver-class-name=org.h2.Driver\n\nspring.datasource.hikari.jdbc-url=jdbc:h2:mem:testdb\n\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect</code></pre>\n<br/>\n<h2 id=\"인덱스-핸들러-만들기\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%95%B8%EB%93%A4%EB%9F%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인덱스 핸들러 만들기</h2>\n<h3 id=\"인덱스-핸들러\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%95%B8%EB%93%A4%EB%9F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인덱스 핸들러</h3>\n<ul>\n<li>다른 리소스에 대한 링크 제공</li>\n<li>문서화</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResourceSupport</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ResourceSupport</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceSupport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        index<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">linkTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EventController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withRel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"events\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"테스트-컨트롤러-리팩토링\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 컨트롤러 리팩토링</h3>\n<ul>\n<li>중복 코드 제거</li>\n</ul>\n<h3 id=\"에러-리소스\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%A6%AC%EC%86%8C%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>에러 리소스</h3>\n<ul>\n<li>인덱스로 가는 링크 제공</li>\n</ul>\n"}},{"node":{"title":"[Springboot API] Springboot REST API : 이벤트 생성 API 개발","path":"/02-springboot-restapi/","date":"10. September 2020","timeToRead":6,"description":" 'Springboot REST API'의 두번째 게시글입니다. ","content":"<h1 id=\"이벤트-생성-api-개발\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 개발</h1>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--이벤트-api-테스트-클래스-생성\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EC%9D%B4%EB%B2%A4%ED%8A%B8-api-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 이벤트 API 테스트 클래스 생성</h2>\n<h3 id=\"스프링-부트-슬라이스-테스트\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8A%AC%EB%9D%BC%EC%9D%B4%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 슬라이스 테스트</h3>\n<ul>\n<li>\n<p>@WebMvcTest</p>\n<ul>\n<li>MockMvc 빈을 자동 설정 해준다. 따라서 그냥 가져와서 쓰면 됨.</li>\n<li>웹 관련 빈만 등록해 준다. (슬라이스)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mockmvc스프링\"><a href=\"#mockmvc%EC%8A%A4%ED%94%84%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MockMvc스프링</h3>\n<ul>\n<li>MVC 테스트 핵심 클래스</li>\n<li>웹 서버를 띄우지 않고도 스프링 MVC (DispatcherServlet)가 요청을 처리하는 과정을 확인할 수 있기 때문에 컨트롤러 테스트용으로 자주 쓰임.</li>\n</ul>\n<h3 id=\"테스트-할-것입력\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83%EC%9E%85%EB%A0%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것입력</h3>\n<ul>\n<li>\n<p>값들을 전달하면 JSON 응답으로 201이 나오는지 확인.</p>\n<ul>\n<li>Location 헤더에 생성된 이벤트를 조회할 수 있는 URI 담겨 있는지 확인.</li>\n<li>id는 DB에 들어갈 때 자동생성된 값으로 나오는지 확인</li>\n</ul>\n</li>\n<li>\n<p>입력값으로 누가 id나 eventStatus, offline, free 이런 데이터까지 같이 주면?</p>\n<ul>\n<li>Bad_Request로 응답 vs <strong>받기로 한 값 이외는 무시</strong></li>\n</ul>\n</li>\n<li>\n<p>입력 데이터가 이상한 경우 Bad_Request로 응답</p>\n<ul>\n<li>입력값이 이상한 경우 에러</li>\n<li>비즈니스 로직으로 검사할 수 있는 에러</li>\n<li>에러 응답 메시지에 에러에 대한 정보가 있어야 한다.</li>\n</ul>\n</li>\n<li>\n<p>비즈니스 로직 적용 됐는지 응답 메시지 확인</p>\n<ul>\n<li>offline과 free 값 확인</li>\n</ul>\n</li>\n<li>\n<p>응답에 HATEOA와 profile 관련 링크가 있는지 확인.</p>\n<ul>\n<li>self (view)</li>\n<li>update (만든 사람은 수정할 수 있으니까)</li>\n<li>events (목록으로 가는 링크)</li>\n</ul>\n</li>\n<li>\n<p>API 문서 만들기</p>\n<ul>\n<li>요청 문서화</li>\n<li>응답 문서화</li>\n<li>링크 문서화</li>\n<li>profile 링크 추가</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--201-응답-받기\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--201-%EC%9D%91%EB%8B%B5-%EB%B0%9B%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 201 응답 받기</h2>\n<h3 id=\"restcontroller\"><a href=\"#restcontroller\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@RestController</h3>\n<ul>\n<li>@ResponseBody를 모든 메소드에 적용한 것과 동일하다.</li>\n</ul>\n<h3 id=\"responseentity를-사용하는-이유\"><a href=\"#responseentity%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ResponseEntity를 사용하는 이유</h3>\n<ul>\n<li>응답 코드, 헤더, 본문 모두 다루기 편한 API</li>\n</ul>\n<h3 id=\"location-uri-만들기\"><a href=\"#location-uri-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Location URI 만들기</h3>\n<ul>\n<li>HATEOS가 제공하는 linkTo(), methodOn() 사용</li>\n</ul>\n<h3 id=\"객체를-json으로-변환\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-json%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체를 JSON으로 변환</h3>\n<ul>\n<li>ObjectMapper 사용</li>\n</ul>\n<h3 id=\"테스트-할-것\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력값들을 전달하면 JSON 응답으로 201이 나오는지 확인.</p>\n<ul>\n<li>Location 헤더에 생성된 이벤트를 조회할 수 있는 URI 담겨 있는지 확인.</li>\n<li>id는 DB에 들어갈 때 자동생성된 값으로 나오는지 확인</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--eventrepository-구현\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--eventrepository-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : EventRepository 구현</h2>\n<h3 id=\"스프링-데이터-jpa\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 데이터 JPA</h3>\n<ul>\n<li>JpaRepository 상속 받아 만들기</li>\n</ul>\n<h3 id=\"enum을-jpa-맵핑시-주의할-것\"><a href=\"#enum%EC%9D%84-jpa-%EB%A7%B5%ED%95%91%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum을 JPA 맵핑시 주의할 것</h3>\n<ul>\n<li>@Enumerated(EnumType.STRING)</li>\n</ul>\n<h3 id=\"mockbean\"><a href=\"#mockbean\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@MockBean</h3>\n<ul>\n<li>Mockito를 사용해서 mock 객체를 만들고 빈으로 등록해 줌.</li>\n<li>(주의) 기존 빈을 테스트용 빈이 대체 한다.</li>\n</ul>\n<h3 id=\"테스트-할-것-1\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력값들을 전달하면 JSON 응답으로 201이 나오는지 확인.</p>\n<ul>\n<li>Location 헤더에 생성된 이벤트를 조회할 수 있는 URI 담겨 있는지 확인.</li>\n<li>id는 DB에 들어갈 때 자동생성된 값으로 나오는지 확인</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--입력값-제한하기\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 입력값 제한하기</h2>\n<h3 id=\"입력값-제한\"><a href=\"#%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%A0%9C%ED%95%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>입력값 제한</h3>\n<ul>\n<li>id 또는 입력 받은 데이터로 계산해야 하는 값들은 입력을 받지 않아야 한다.</li>\n<li>EventDto 적용</li>\n</ul>\n<h3 id=\"dto---도메인-객체로-값-복사\"><a href=\"#dto---%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EA%B0%92-%EB%B3%B5%EC%82%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DTO -> 도메인 객체로 값 복사</h3>\n<ul>\n<li>ModelMapper</li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.modelmapper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>modelmapper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"통합-테스트로-전환\"><a href=\"#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EC%A0%84%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>통합 테스트로 전환</h3>\n<ul>\n<li>\n<p>@WebMvcTest 빼고 다음 애노테이션 추가</p>\n<ul>\n<li>@SpringBootTest</li>\n<li>@AutoConfigureMockMvc</li>\n</ul>\n</li>\n<li>Repository @MockBean 코드 제거</li>\n</ul>\n<h3 id=\"테스트-할-것-2\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력값으로 누가 id나 eventStatus, offline, free 이런 데이터까지 같이 주면?</p>\n<ul>\n<li>Bad_Request로 응답 vs 받기로 한 값 이외는 무시</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--입력값-이외에-에러-발생\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%9D%B4%EC%99%B8%EC%97%90-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 입력값 이외에 에러 발생</h2>\n<h3 id=\"objectmapper-커스터마이징\"><a href=\"#objectmapper-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ObjectMapper 커스터마이징</h3>\n<ul>\n<li>spring.jackson.deserialization.fail-on-unknown-properties=true</li>\n</ul>\n<h3 id=\"테스트-할-것-3\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력값으로 누가 id나 eventStatus, offline, free 이런 데이터까지 같이 주면?</p>\n<ul>\n<li>Bad_Request로 응답 vs 받기로 한 값 이외는 무시</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--bad-request-처리하기\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--bad-request-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : Bad Request 처리하기</h2>\n<h3 id=\"valid와-bindingresult-또는-errors\"><a href=\"#valid%EC%99%80-bindingresult-%EB%98%90%EB%8A%94-errors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@Valid와 BindingResult (또는 Errors)</h3>\n<ul>\n<li>BindingResult는 항상 @Valid 바로 다음 인자로 사용해야 함. (스프링 MVC)</li>\n<li>@NotNull, @NotEmpty, @Min, @Max, ... 사용해서 입력값 바인딩할 때 에러 확인할 수 있음</li>\n</ul>\n<h3 id=\"도메인-validator-만들기\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-validator-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>도메인 Validator 만들기</h3>\n<ul>\n<li>Validator 인터페이스 없이 만들어도 상관없음</li>\n</ul>\n<h3 id=\"테스트-설명-용-애노테이션-만들기\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EB%AA%85-%EC%9A%A9-%EC%95%A0%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 설명 용 애노테이션 만들기</h3>\n<ul>\n<li>@Target, @Retention</li>\n</ul>\n<h3 id=\"테스트-할-것-4\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력 데이터가 이상한 경우 Bad_Request로 응답</p>\n<ul>\n<li>입력값이 이상한 경우 에러</li>\n<li>비즈니스 로직으로 검사할 수 있는 에러</li>\n<li>에러 응답 메시지에 에러에 대한 정보가 있어야 한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--bad-request-응답-본문-만들기\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--bad-request-%EC%9D%91%EB%8B%B5-%EB%B3%B8%EB%AC%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : Bad Request 응답 본문 만들기</h2>\n<h3 id=\"커스텀-json-serializer-만들기\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-json-serializer-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀 JSON Serializer 만들기</h3>\n<ul>\n<li>extends JsonSerializer<T> (Jackson JSON 제공)</li>\n<li>@JsonComponent (스프링 부트 제공)</li>\n</ul>\n<h3 id=\"bindingerror\"><a href=\"#bindingerror\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>BindingError</h3>\n<ul>\n<li>FieldError 와 GlobalError (ObjectError)가 있음</li>\n<li>objectName</li>\n<li>defaultMessage</li>\n<li>code</li>\n<li>field</li>\n<li>rejectedValue</li>\n</ul>\n<h3 id=\"테스트-할-것-5\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력 데이터가 이상한 경우 Bad_Request로 응답</p>\n<ul>\n<li>입력값이 이상한 경우 에러</li>\n<li>비즈니스 로직으로 검사할 수 있는 에러</li>\n<li><strong>에러 응답 메시지에 에러에 대한 정보가 있어야 한다.</strong></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--비즈니스-로직-적용\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 비즈니스 로직 적용</h2>\n<h3 id=\"테스트-할-것-6\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>비즈니스 로직 적용 됐는지 응답 메시지 확인</p>\n<ul>\n<li>offline과 free 값 확인</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--매개변수를-이용한-테스트\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 매개변수를 이용한 테스트</h2>\n<h3 id=\"테스트-코드-리팩토링\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 코드 리팩토링</h3>\n<ul>\n<li>테스트에서 중복 코드 제거</li>\n<li>매개변수만 바꿀 수 있으면 좋겠는데?</li>\n<li>JUnitParams</li>\n</ul>\n<h3 id=\"junitparams\"><a href=\"#junitparams\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnitParams</h3>\n<ul>\n<li><a href=\"https://github.com/Pragmatists/JUnitParams\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Pragmatists/JUnitParams</a></li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/pl.pragmatists/JUnitParams --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>pl.pragmatists<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>JUnitParams<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n"}},{"node":{"title":"[Springboot API] Springboot REST API : 시작하기","path":"/01-springboot-restapi/","date":"7. September 2020","timeToRead":8,"description":" 'Springboot REST API'의 첫번째 게시글입니다. ","content":"<h1 id=\"springboot-api-시작하기\"><a href=\"#springboot-api-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot API 시작하기.</h1>\n<p><a href=\"https://drive.google.com/file/d/0B-4fgYvMaU-zYVlVUzB2ZnpuRU8ySFVpV2h3ZjRmd096azFN/view\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">강의 자료</a></p>\n<p><a href=\"https://docs.google.com/document/d/1GFo3W6XxqhxDVVqxiSEtqkuVCX93Tdb3xzINRtTIx10/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">수업 자료</a></p>\n<p><a href=\"https://gitlab.com/whiteship/natural\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드</a></p>\n<br/>\n<h2 id=\"rest-api\"><a href=\"#rest-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST API</h2>\n<h3 id=\"api\"><a href=\"#api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API</h3>\n<ul>\n<li><strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface</li>\n</ul>\n<h3 id=\"rest\"><a href=\"#rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST</h3>\n<ul>\n<li><strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer</li>\n<li>인터넷 상의 시스템 간의 상호 운용성(interoperability)을 제공하는 방법중 하나</li>\n<li>시스템 제각각의 독립적인 진화를 보장하기 위한 방법</li>\n<li>REST API: REST 아키텍처 스타일을 따르는 API</li>\n</ul>\n<h3 id=\"rest-아키텍처-스타일-발표-영상-11분\"><a href=\"#rest-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B0%9C%ED%91%9C-%EC%98%81%EC%83%81-11%EB%B6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST 아키텍처 스타일 (<a href=\"https://www.youtube.com/watch?v=RP_f5dMoHFc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">발표 영상</a> 11분)</h3>\n<ul>\n<li>Client-Server</li>\n<li>Stateless</li>\n<li>Cache</li>\n<li><strong>Uniform Interface</strong></li>\n<li>Layered System</li>\n<li>Code-On-Demand (optional)</li>\n</ul>\n<h3 id=\"uniform-interface-발표-영상-11분-40초\"><a href=\"#uniform-interface-%EB%B0%9C%ED%91%9C-%EC%98%81%EC%83%81-11%EB%B6%84-40%EC%B4%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Uniform Interface (발표 영상 11분 40초)</h3>\n<details>\n<summary>상세</summary>\n<div markdown=\"1\">\n<p>Uniform Interface(일관된 인터페이스)란, Resource(URI)에 대한 요청을 통일되고, 한정적으로 수행하는 아키텍처 스타일을 의미합니다. 이것은 요청을 하는 Client가 플랫폼(Android, Ios, Jsp 등) 에 무관하며, 특정 언어나 기술에 종속받지 않는 특징을 의미합니다. 이러한 특징 덕분에 Rest API는 HTTP를 사용하는 모든 플랫폼에서 요청가능하며, Loosely Coupling(느슨한 결함) 형태를 갖게 되었습니다.</p>\n</div>\n</details>\n<ul>\n<li>\n<p>Identification of resources</p>\n<ul>\n<li>리소스가 URI로 식별되면 된다.</li>\n</ul>\n</li>\n<li>\n<p>manipulation of resources through represenations</p>\n<ul>\n<li>리소스를 요청할 때 서버는 리소스를 표현하여 응답한다.</li>\n<li>대표적인 API 예로는 HTML, JSON, XML이 있다.</li>\n<li>\n<p>콘텐츠 협상</p>\n<ul>\n<li>클라이언트가 클라이언트의 요구에 맞는 특정 표현을 요청할 수 있다.</li>\n<li>예를 들어 클라이언트는 리소스의 JSON 표현 또는 리소스의 XML 표현을 요청할 수 있다.</li>\n<li>서버는 그렇게 할 수 있는 경우 이 표현을 제공할 수 있다.</li>\n</ul>\n</li>\n<li>API에서 콘텐츠 협상을 사용하여 여러 클라이언트가 동일한 URL에서 다른 리소스 표현에 액세스할 수 있도록 할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>self-descrive messages</strong></p>\n<ul>\n<li>클라이언트가 resource를 가지고 어떤 일을 수행할때 필요한 모든 데이터가 응답되어야함.</li>\n<li>보통 안에 profile(docs) 링크를 명시하는식으로 구현.</li>\n</ul>\n</li>\n<li>\n<p><strong>hypermedia as the engine of appliaction state (HATEOAS)</strong></p>\n<ul>\n<li>거의 모든 rest api에서 지키지못함.</li>\n<li>어플리케이션의 상태가 하이퍼링크를 통해서 항상 전이가 되어야함.</li>\n<li>스프링에서는 spring-boot-hateoas 패키지로 좀 편하게 구현 가능.</li>\n</ul>\n</li>\n</ul>\n<details>\n<summary>좋은 API 예시(github API)</summary>\n<div markdown=\"1\">\n<pre class=\"language-xml\"><code class=\"language-xml\">{\n  \"timeline_url\": \"https://github.com/timeline\",\n  \"user_url\": \"https://github.com/{user}\",\n  \"current_user_public_url\": \"https://github.com/octocat\",\n  \"current_user_url\": \"https://github.com/octocat.private?token=abc123\",\n  \"current_user_actor_url\": \"https://github.com/octocat.private.actor?token=abc123\",\n  \"current_user_organization_url\": \"\",\n  \"current_user_organization_urls\": [\n    \"https://github.com/organizations/github/octocat.private.atom?token=abc123\"\n  ],\n  \"security_advisories_url\": \"https://github.com/security-advisories\",\n  \"_links\": {\n    \"timeline\": {\n      \"href\": \"https://github.com/timeline\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"user\": {\n      \"href\": \"https://github.com/{user}\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"current_user_public\": {\n      \"href\": \"https://github.com/octocat\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"current_user\": {\n      \"href\": \"https://github.com/octocat.private?token=abc123\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"current_user_actor\": {\n      \"href\": \"https://github.com/octocat.private.actor?token=abc123\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"current_user_organization\": {\n      \"href\": \"\",\n      \"type\": \"\"\n    },\n    \"current_user_organizations\": [\n      {\n        \"href\": \"https://github.com/organizations/github/octocat.private.atom?token=abc123\",\n        \"type\": \"application/atom+xml\"\n      }\n    ],\n    \"security_advisories\": {\n      \"href\": \"https://github.com/security-advisories\",\n      \"type\": \"application/atom+xml\"\n    }\n  }\n}</code></pre>\n</div>\n</details>\n<h3 id=\"두-문제를-좀-더-자세히-살펴보자-발표-영상-37분-50초\"><a href=\"#%EB%91%90-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%A2%80-%EB%8D%94-%EC%9E%90%EC%84%B8%ED%9E%88-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90-%EB%B0%9C%ED%91%9C-%EC%98%81%EC%83%81-37%EB%B6%84-50%EC%B4%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>두 문제를 좀 더 자세히 살펴보자. (발표 영상 37분 50초)</h3>\n<ul>\n<li>\n<p>Self-descriptive message</p>\n<ul>\n<li>메시지 스스로 메시지에 대한 설명이 가능해야 한다.</li>\n<li>서버가 변해서 메시지가 변해도 클라이언트는 그 메시지를 보고 해석이 가능하다.</li>\n<li>확장 가능한 커뮤니케이션</li>\n</ul>\n</li>\n<li>\n<p>HATEOAS</p>\n<ul>\n<li>하이퍼미디어(링크)를 통해 애플리케이션 상태 변화가 가능해야 한다.</li>\n<li>링크 정보를 동적으로 바꿀 수 있다. (Versioning 할 필요 없이!)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"self-descriptive-message-해결-방법\"><a href=\"#self-descriptive-message-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Self-descriptive message 해결 방법</h3>\n<ul>\n<li>방법 1: 미디어 타입을 정의하고 IANA에 등록하고 그 미디어 타입을 리소스 리턴할 때 Content-Type으로 사용한다.</li>\n<li>\n<p>방법 2: profile 링크 헤더를 추가한다. (발표 영상 41분 50초)</p>\n<ul>\n<li><a href=\"http://test.greenbytes.de/tech/tc/httplink/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">브라우저들이 아직 스팩 지원을 잘 안해</a></li>\n<li>대안으로 <a href=\"http://stateless.co/hal_specification.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HAL</a>의 링크 데이터에 <a href=\"https://tools.ietf.org/html/draft-wilde-profile-link-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">profile 링크</a> 추가</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hateoas-해결-방법\"><a href=\"#hateoas-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HATEOAS 해결 방법</h3>\n<ul>\n<li>\n<p>방법1: 데이터에 링크 제공</p>\n<ul>\n<li>링크를 어떻게 정의할 것인가? HAL</li>\n</ul>\n</li>\n<li>방법2: 링크 헤더나 Location을 제공</li>\n</ul>\n<br/>\n<h2 id=\"event-rest-api\"><a href=\"#event-rest-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>“Event” REST API</h2>\n<blockquote>\n<p><a href=\"https://gitlab.com/whiteship/natural\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">참고 자료</a></p>\n</blockquote>\n<p>이벤트 등록, 조회 및 수정 API</p>\n<h3 id=\"get-apievents\"><a href=\"#get-apievents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GET /api/events</h3>\n<h4 id=\"이벤트-목록-조회-rest-api-로그인-안-한-상태\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C-rest-api-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%95%88-%ED%95%9C-%EC%83%81%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 목록 조회 REST API (로그인 안 한 상태)</h4>\n<ul>\n<li>\n<p>응답에 보여줘야 할 데이터</p>\n<ul>\n<li>이벤트 목록</li>\n<li>\n<p>링크</p>\n<ul>\n<li>self</li>\n<li>profile: 이벤트 목록 조회 API 문서로 링크</li>\n<li>get-an-event: 이벤트 하나 조회하는 API 링크</li>\n<li>next: 다음 페이지 (optional)</li>\n<li>prev: 이전 페이지 (optional)</li>\n</ul>\n</li>\n<li>\n<p>문서?</p>\n<ul>\n<li>스프링 REST Docs로 만들 예정</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"이벤트-목록-조회-rest-api-로그인-한-상태\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C-rest-api-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%95%9C-%EC%83%81%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 목록 조회 REST API (로그인 한 상태)</h4>\n<ul>\n<li>\n<p>응답에 보여줘야 할 데이터</p>\n<ul>\n<li>이벤트 목록</li>\n<li>\n<p>링크</p>\n<ul>\n<li>self</li>\n<li>profile: 이벤트 목록 조회 API 문서로 링크</li>\n<li>get-an-event: 이벤트 하나 조회하는 API 링크</li>\n<li><strong>create-new-event: 이벤트를 생성할 수 있는 API 링크</strong></li>\n<li>next: 다음 페이지 (optional)</li>\n<li>prev: 이전 페이지 (optional)</li>\n</ul>\n</li>\n<li>\n<p>로그인 한 상태???? (stateless라며..)</p>\n<ul>\n<li>아니, 사실은 Bearer 헤더에 유효한 AccessToken이 들어있는 경우!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"post-apievents\"><a href=\"#post-apievents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POST /api/events</h3>\n<ul>\n<li>이벤트 생성</li>\n</ul>\n<h3 id=\"get-apieventsid\"><a href=\"#get-apieventsid\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GET /api/events/{id}</h3>\n<ul>\n<li>이벤트 하나 조회</li>\n</ul>\n<h3 id=\"put-apieventsid\"><a href=\"#put-apieventsid\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PUT /api/events/{id}</h3>\n<ul>\n<li>이벤트 수정</li>\n</ul>\n<br/>\n<h2 id=\"events-api-사용-예제\"><a href=\"#events-api-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Events API 사용 예제</h2>\n<ol>\n<li>\n<p>(토큰 없이) 이벤트 목록 조회</p>\n<ul>\n<li>create 안 보임</li>\n</ul>\n</li>\n<li>access token 발급 받기 (A 사용자 로그인)</li>\n<li>\n<p>(유효한 A 토큰 가지고) 이벤트 목록 조회</p>\n<ul>\n<li>create event 보임</li>\n</ul>\n</li>\n<li>(유효한 A 토큰 가지고) 이벤트 만들기</li>\n<li>\n<p>(토큰 없이) 이벤트 조회</p>\n<ul>\n<li>update 링크 안 보임</li>\n</ul>\n</li>\n<li>\n<p>(유효한 A 토큰 가지고) 이벤트 조회</p>\n<ul>\n<li>update 링크 보임</li>\n</ul>\n</li>\n<li>access token 발급 받기 (B 사용자 로그인)</li>\n<li>\n<p>(유효한 B 토큰 가지고) 이벤트 조회</p>\n<ul>\n<li>update 안 보임</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"rest-api-테스트-클라이언트-애플리케이션\"><a href=\"#rest-api-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST API 테스트 클라이언트 애플리케이션</h3>\n<ul>\n<li>\n<p>크롬 플러그인</p>\n<ul>\n<li>Restlet</li>\n</ul>\n</li>\n<li>\n<p>애플리케이션</p>\n<ul>\n<li>Postman</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-부트-프로젝트-만들기\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 프로젝트 만들기</h2>\n<h3 id=\"추가할-의존성\"><a href=\"#%EC%B6%94%EA%B0%80%ED%95%A0-%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>추가할 의존성</h3>\n<ul>\n<li>Web</li>\n<li>JPA</li>\n<li>HATEOAS</li>\n<li>REST Docs</li>\n<li>H2</li>\n<li>PostgreSQL</li>\n<li>Lombok</li>\n</ul>\n<h3 id=\"자바-버전-11로-시작\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%B2%84%EC%A0%84-11%EB%A1%9C-%EC%8B%9C%EC%9E%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 버전 11로 시작</h3>\n<ul>\n<li>자바는 여전히 무료다.</li>\n</ul>\n<h3 id=\"스프링-부트-핵심-원리\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 핵심 원리</h3>\n<ul>\n<li>의존성 설정 (pom.xml)</li>\n<li>자동 설정 (@EnableAutoConfiguration)</li>\n<li>내장 웹 서버 (의존성과 자동 설정의 일부)</li>\n<li>독립적으로 실행 가능한 JAR (pom.xml의 플러그인)</li>\n</ul>\n<h2 id=\"event-생성-api-구현-비즈니스-로직\"><a href=\"#event-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event 생성 API 구현: 비즈니스 로직</h2>\n<h3 id=\"event-생성-api\"><a href=\"#event-%EC%83%9D%EC%84%B1-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event 생성 API</h3>\n<ul>\n<li>\n<p>다음의 입력 값을 받는다.</p>\n<ul>\n<li>name</li>\n<li>description</li>\n<li>beginEnrollmentDateTime</li>\n<li>closeEnrollmentDateTime</li>\n<li>beginEventDateTime</li>\n<li>endEventDateTime</li>\n<li>location (optional) 이게 없으면 온라인 모임</li>\n<li>basePrice (optional)</li>\n<li>maxPrice (optional)</li>\n<li>limitOfEnrollment</li>\n</ul>\n</li>\n</ul>\n<p>basePrice와 maxPrice 경우의 수와 각각의 로직\n| basePrice | maxPrice | |\n| --------- | -------- | ------------------------------------------------------------ |\n| 0 | 100 | 선착순 등록 |\n| 0 | 0 | 무로 |\n| 100 | 0 | 무제한 경매 (높은 금액 낸 사람이 등록) |\n| 100 | 200 | 제한가 선착순 등록<br /><br />처음부터 200을 낸 사람은 선 등록<br /><br />100을 내고 등록할 수 있으나 더 많이 낸 사람에 의해 밀려날 수 있음. |</p>\n<ul>\n<li>\n<p>결과값</p>\n<ul>\n<li>id</li>\n<li>name</li>\n<li>...</li>\n<li>eventStatus: DRAFT, PUBLISHED, ENROLLMENT_STARTED, ...</li>\n<li>offline</li>\n<li>free</li>\n<li>\n<p>_links</p>\n<ul>\n<li>profile (for the self-descriptive message)</li>\n<li>self</li>\n<li>publish</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"event-생성-api-구현-event-도메인-구현\"><a href=\"#event-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84-event-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event 생성 API 구현: Event 도메인 구현</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> beginEnrollmentDateTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> closeEnrollmentDateTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> beginEventDateTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> endEventDateTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> location<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (optional) 이게 없으면 온라인 모임</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> basePrice<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (optional)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> maxPrice<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (optional)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> limitOfEnrollment<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>추가 필드</p>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> offline<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> free<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EventStatus</span> eventStatus <span class=\"token operator\">=</span> <span class=\"token class-name\">EventStatus</span><span class=\"token punctuation\">.</span>DRAFT<span class=\"token punctuation\">;</span></code></pre>\n<p>EventStatus ENUM 추가</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EventStatus</span> <span class=\"token punctuation\">{</span>\n\n    DRAFT<span class=\"token punctuation\">,</span> PUBLISHED<span class=\"token punctuation\">,</span> BEGAN_ENROLLMEND<span class=\"token punctuation\">,</span> CLOSED_ENROLLMENT<span class=\"token punctuation\">,</span> STARTED<span class=\"token punctuation\">,</span> ENDED\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>롬복 애노테이션 추가</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span> <span class=\"token annotation punctuation\">@Setter</span> <span class=\"token annotation punctuation\">@EqualsAndHashCode</span><span class=\"token punctuation\">(</span>of <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Builder</span> <span class=\"token annotation punctuation\">@NoArgsConstructor</span> <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span></code></pre>\n<ul>\n<li>왜 @EqualsAndHasCode에서 of를 사용하는가</li>\n<li>왜 @Builder를 사용할 때 @AllArgsConstructor가 필요한가</li>\n<li>@Data를 쓰지 않는 이유</li>\n<li>애노테이션 줄일 수 없나</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 운영하기","path":"/05-springboot-utilizing/","date":"5. September 2020","timeToRead":2,"description":" 'Springboot 활용하기'의 다섯번째 게시글입니다. ","content":"<h1 id=\"springboot-운영하기\"><a href=\"#springboot-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 운영하기</h1>\n<p>스프링 부트는 애플리케이션 운영 환경에서 유용한 기능을 제공한다. 스프링 부트가 제공하는 엔드포인트와 메트릭스 그리고 그 데이터를 활용하는 모니터링 기능에 대해 알아보기.</p>\n<br/>\n<h2 id=\"spring-actuator\"><a href=\"#spring-actuator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Actuator</h2>\n<h3 id=\"스프링부트-actuator-소개\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-actuator-%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링부트 Actuator 소개</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints</a></p>\n<ul>\n<li>의존성 추가</li>\n<li>spring-boot-starter-actuator</li>\n</ul>\n<h4 id=\"애플리케이션의-각종-정보를-확인할-수-있는-endpoints\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EA%B0%81%EC%A2%85-%EC%A0%95%EB%B3%B4%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-endpoints\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>애플리케이션의 각종 정보를 확인할 수 있는 Endpoints</h4>\n<ul>\n<li>다양한 Endpoints 제공.</li>\n<li>JMX 또는 HTTP를 통해 접근 가능 함.</li>\n<li>shutdown을 제외한 모든 Endpoint는 기본적으로 활성화 상태.</li>\n<li>\n<p>활성화 옵션 조정</p>\n<ul>\n<li>management.endpoints.enabled-by-default=false</li>\n<li>management.endpoint.info.enabled=true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jmx와-http\"><a href=\"#jmx%EC%99%80-http\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JMX와 HTTP</h3>\n<h4 id=\"jconsole-사용하기\"><a href=\"#jconsole-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JConsole 사용하기</h4>\n<ul>\n<li>프로젝트 돌린 이후에, console 창에 <code class=\"language-text\">jconsole</code>이라고 입력하면 된다.</li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/jmx/mbeans/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/jmx/mbeans/</a></li>\n<li><a href=\"https://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html</a></li>\n</ul>\n<h4 id=\"visualvm-사용하기\"><a href=\"#visualvm-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>VisualVM 사용하기</h4>\n<ul>\n<li><a href=\"https://visualvm.github.io/download.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://visualvm.github.io/download.html</a></li>\n</ul>\n<h4 id=\"http-사용하기\"><a href=\"#http-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 사용하기</h4>\n<ul>\n<li>/actuator</li>\n<li>health와 info를 제외한 대부분의 Endpoint가 기본적으로 비공개 상태</li>\n<li>\n<p>공개 옵션 조정</p>\n<ul>\n<li>\n<p><code class=\"language-text\">management.endpoints.web.exposure.include=*</code></p>\n<ul>\n<li>단 이는, 위험함.</li>\n<li>spring securtiy를 적용하는 것도 한 방법.</li>\n</ul>\n</li>\n<li>management.endpoints.web.exposure.exclude=env,beans</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"스프링-부트-어드민\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%96%B4%EB%93%9C%EB%AF%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 어드민</h3>\n<ul>\n<li>아래는 반드시 스프링 security를 해야한다. 너무 민감한 정보들이 많다.</li>\n</ul>\n<p><a href=\"https://github.com/codecentric/spring-boot-admin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/codecentric/spring-boot-admin</a> 스프링 부트 Actuator UI 제공 어드민 서버 설정</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>de.codecentric<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-admin-starter-server<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n@EnableAdminServer</code></pre>\n<ul>\n<li>2.0.1 에서 안되서 버전을 2.2.4로 버전업 시켰다.(client도 마찬가지로 진행하였음)</li>\n</ul>\n<p>클라이언트 설정</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>de.codecentric<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-admin-starter-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\nspring.boot.admin.client.url=http://localhost:8080\nmanagement.endpoints.web.exposure.include=*</code></pre>\n<br/>\n<h2 id=\"스프링-마무리\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 마무리</h2>\n<h3 id=\"스프링-부트-원리\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%9B%90%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 원리</h3>\n<ul>\n<li>의존성 관리</li>\n<li>자동 설정</li>\n<li>내장 웹 서버</li>\n<li>JAR 패키징</li>\n</ul>\n<h3 id=\"스프링-부트-활용\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%ED%99%9C%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 활용</h3>\n<ul>\n<li>스프링 부트 핵심 기능</li>\n<li>다양한 기술 연동</li>\n</ul>\n<h3 id=\"스프링-부트-운영\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%9A%B4%EC%98%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 운영</h3>\n<ul>\n<li>Actuator</li>\n<li>스프링 부트 어드민</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 활용하기 - 4","path":"/04-springboot-utilizing/","date":"4. September 2020","timeToRead":2,"description":" 'Springboot 활용하기'의 네번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기4\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B04\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 활용하기4</h1>\n<br/>\n<h2 id=\"스프링-시큐리티\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티</h2>\n<h3 id=\"starter-security\"><a href=\"#starter-security\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Starter-Security</h3>\n<h4 id=\"스프링-시큐리티-1\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티</h4>\n<p>Tip)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addViewControllers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewControllerRegistry</span> registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 기능없이 뷰로만 보내면, 이렇게 하면된다.</span>\n    registry<span class=\"token punctuation\">.</span><span class=\"token function\">addViewController</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>웹 시큐리티</li>\n<li>메소드 시큐리티</li>\n<li>\n<p>다양한 인증 방법 지원</p>\n<ul>\n<li>LDAP, 폼 인증, Basic 인증, OAuth, ...</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"스프링-부트-시큐리티-자동-설정\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 시큐리티 자동 설정</h4>\n<ul>\n<li>SecurityAutoConfiguration</li>\n<li>UserDetailsServiceAutoConfiguration</li>\n<li>\n<p>spring-boot-starter-security</p>\n<ul>\n<li>스프링 시큐리티 5.* 의존성 추가</li>\n</ul>\n</li>\n<li>모든 요청에 인증이 필요함.</li>\n<li>\n<p>기본 사용자 생성</p>\n<ul>\n<li>Username: user</li>\n<li>Password: 애플리케이션을 실행할 때 마다 랜덤 값 생성 (콘솔에 출력 됨.)</li>\n<li>spring.security.user.name</li>\n<li>spring.security.user.password</li>\n</ul>\n</li>\n<li>\n<p>인증 관련 각종 이벤트 발생</p>\n<ul>\n<li>DefaultAuthenticationEventPublisher 빈 등록</li>\n<li>다양한 인증 에러 핸들러 등록 가능</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"스프링-부트-시큐리티-테스트\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 시큐리티 테스트</h4>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html</a></li>\n</ul>\n<h3 id=\"시큐리티-설정-커스터마이징\"><a href=\"#%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%84%A4%EC%A0%95-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>시큐리티 설정 커스터마이징</h3>\n<h4 id=\"웹-시큐리티-설정\"><a href=\"#%EC%9B%B9-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>웹 시큐리티 설정</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebSecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n       http<span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">.</span><span class=\"token function\">httpBasic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"userdetailsservie-구현\"><a href=\"#userdetailsservie-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>UserDetailsServie 구현</h4>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-authentication-userdetailsservice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-authentication-userdetailsservice</a></li>\n</ul>\n<h4 id=\"passwordencoder-설정-및-사용\"><a href=\"#passwordencoder-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PasswordEncoder 설정 및 사용</h4>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#core-services-password-encoding\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#core-services-password-encoding</a></li>\n</ul>\n<br/>\n<h2 id=\"스프링-rest-클라이언트\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST 클라이언트</h2>\n<h3 id=\"resttemplate와-webclient\"><a href=\"#resttemplate%EC%99%80-webclient\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RestTemplate와 WebClient</h3>\n<h4 id=\"resttemplate\"><a href=\"#resttemplate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RestTemplate</h4>\n<ul>\n<li>\n<p>Blocking I/O 기반의 Synchronous API</p>\n<ul>\n<li>동기, <code class=\"language-text\">.getForObjet({url})</code> 사용</li>\n</ul>\n</li>\n<li>RestTemplateAutoConfiguration</li>\n<li>프로젝트에 spring-web 모듈이 있다면 RestTemplateBuilder를 빈으로 등록해 줍니다.</li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#rest-client-access\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#rest-client-access</a></li>\n</ul>\n<h4 id=\"webclient\"><a href=\"#webclient\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WebClient</h4>\n<ul>\n<li>\n<p>Non-Blocking I/O 기반의 Asynchronous API</p>\n<ul>\n<li>비동기, <code class=\"language-text\">.subscribe(s -&gt; {});</code> 사용</li>\n</ul>\n</li>\n<li>WebClientAutoConfiguration</li>\n<li>프로젝트에 spring-webflux 모듈이 있다면 WebClient.Builder를 빈으로 등록해 줍니다.</li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-client\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-client</a></li>\n</ul>\n<h3 id=\"커스터마이징\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스터마이징</h3>\n<h4 id=\"resttemplate-1\"><a href=\"#resttemplate-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RestTemplate</h4>\n<ul>\n<li>기본으로 java.net.HttpURLConnection 사용.</li>\n<li>\n<p>커스터마이징</p>\n<ul>\n<li>로컬 커스터마이징</li>\n<li>\n<p>글로벌 커스터마이징</p>\n<ul>\n<li>RestTemplateCustomizer</li>\n<li>빈 재정의</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"webclient-1\"><a href=\"#webclient-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WebClient</h4>\n<ul>\n<li>기본으로 Reactor Netty의 HTTP 클라이언트 사용.</li>\n<li>\n<p>커스터마이징</p>\n<ul>\n<li>로컬 커스터마이징</li>\n<li>\n<p>글로벌 커스터마이징</p>\n<ul>\n<li>WebClientCustomizer</li>\n<li>빈 재정의</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"그-외\"><a href=\"#%EA%B7%B8-%EC%99%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그 외.</h2>\n<h3 id=\"그밖의-다양한-기술\"><a href=\"#%EA%B7%B8%EB%B0%96%EC%9D%98-%EB%8B%A4%EC%96%91%ED%95%9C-%EA%B8%B0%EC%88%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그밖의 다양한 기술</h3>\n<h4 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h4>\n<p>: <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle</a></p>\n<ul>\n<li>캐시</li>\n<li>메시징</li>\n<li>Validation</li>\n<li>이메일 전송</li>\n<li>JTA</li>\n<li>스프링 인티그레이션</li>\n<li>스프링 세션</li>\n<li>JMX</li>\n<li>웹소켓</li>\n<li>코틀린</li>\n<li>...</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 활용하기 - 3","path":"/03-springboot-utilizing/","date":"30. August 2020","timeToRead":6,"description":" 'Springboot 활용하기'의 세번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기3\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B03\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 활용하기3</h1>\n<br/>\n<h2 id=\"스프링-데이터\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 데이터</h2>\n<h3 id=\"소개\"><a href=\"#%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>소개</h3>\n<table>\n<thead>\n<tr>\n<th><strong>SQL DB</strong></th>\n<th><strong>NoSQL</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>- 인메모리 데이터베이스 지원</td>\n<td>- Redis (Key/Value)</td>\n</tr>\n<tr>\n<td>- DataSource 설정</td>\n<td>- MongoDB (Document)</td>\n</tr>\n<tr>\n<td>- DBCP 설정</td>\n<td>- Neo4J (Graph)</td>\n</tr>\n<tr>\n<td>- JDBC 사용하기</td>\n<td>- Gemfire (IMDG)</td>\n</tr>\n<tr>\n<td>- 스프링 데이터 JPA 사용하기</td>\n<td>- Solr (Search)</td>\n</tr>\n<tr>\n<td>- jOOQ 사용하기</td>\n<td>- Elasticsearch (Search &#x26; Analytics)</td>\n</tr>\n<tr>\n<td>- 데이터베이스 초기화</td>\n<td>- Cassandra</td>\n</tr>\n<tr>\n<td>- 데이터베이스 마이그레이션 툴 연동하기</td>\n<td>- CouchbaseLDAP</td>\n</tr>\n<tr>\n<td></td>\n<td>- InfluxDB</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"인메모리-데이터베이스\"><a href=\"#%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인메모리 데이터베이스</h3>\n<p>지원하는 인-메모리 데이터베이스</p>\n<ul>\n<li><strong>H2 (추천, 콘솔 때문에...)</strong></li>\n<li>HSQL</li>\n<li>Derby</li>\n</ul>\n<p>Spring-JDBC가 클래스패스에 있으면 자동 설정이 필요한 빈을 설정 해줍니다.</p>\n<ul>\n<li>\n<ul>\n<li>DataSource</li>\n<li>JdbcTemplate</li>\n</ul>\n</li>\n</ul>\n<p>인-메모리 데이터베이스 기본 연결 정보 확인하는 방법</p>\n<ul>\n<li>URL: “testdb”</li>\n<li>username: “sa”</li>\n<li>password: “”</li>\n</ul>\n<p>H2 콘솔 사용하는 방법</p>\n<ul>\n<li>spring-boot-devtools를 추가하거나...</li>\n<li>spring.h2.console.enabled=true 만 추가.</li>\n<li>/h2-console로 접속 (이 path도 바꿀 수 있음)</li>\n</ul>\n<p>실습 코드</p>\n<ul>\n<li>CREATE TABLE USER (ID INTEGER NOT NULL, name VARCHAR(255), PRIMARY KEY (id))</li>\n<li>INSERT INTO USER VALUES (1, ‘keesun’)</li>\n</ul>\n<h3 id=\"mysql\"><a href=\"#mysql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL</h3>\n<h4 id=\"지원하는-dbcp\"><a href=\"#%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-dbcp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>지원하는 DBCP</h4>\n<ol>\n<li>\n<p><a href=\"https://github.com/brettwooldridge/HikariCP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HikariCP</a> (기본)</p>\n<ol>\n<li><a href=\"https://github.com/brettwooldridge/HikariCP#frequently-used\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/brettwooldridge/HikariCP#frequently-used</a></li>\n</ol>\n</li>\n<li><a href=\"https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tomcat CP</a></li>\n<li><a href=\"https://commons.apache.org/proper/commons-dbcp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Commons DBCP2</a></li>\n</ol>\n<h4 id=\"dbcp-설정\"><a href=\"#dbcp-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DBCP 설정</h4>\n<ul>\n<li><strong>spring.datasource.hikari.*</strong></li>\n<li>spring.datasource.tomcat.*</li>\n<li>spring.datasource.dbcp2.*</li>\n</ul>\n<h4 id=\"mysql-커넥터-의존성-추가\"><a href=\"#mysql-%EC%BB%A4%EB%84%A5%ED%84%B0-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL 커넥터 의존성 추가</h4>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"mysql-추가-도커-사용\"><a href=\"#mysql-%EC%B6%94%EA%B0%80-%EB%8F%84%EC%BB%A4-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL 추가 (도커 사용)</h4>\n<ul>\n<li>docker run -p 3306:3306 --name <strong>mysql_boot</strong> -e MYSQL_ROOT_PASSWORD=<strong>1</strong> -e MYSQL_DATABASE=<strong>springboot</strong> -e MYSQL_USER=<strong>keesun</strong> -e MYSQL_PASSWORD=<strong>pass</strong> -d mysql</li>\n<li>docker exec -i -t mysql_boot bash</li>\n<li>mysql -u root -p</li>\n</ul>\n<h4 id=\"mysql용-datasource-설정\"><a href=\"#mysql%EC%9A%A9-datasource-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL용 Datasource 설정</h4>\n<ul>\n<li>spring.datasource.url=jdbc:mysql://localhost:3306/springboot?useSSL=false</li>\n<li>spring.datasource.username=keesun</li>\n<li>spring.datasource.password=pass</li>\n</ul>\n<h4 id=\"mysql-접속시-에러\"><a href=\"#mysql-%EC%A0%91%EC%86%8D%EC%8B%9C-%EC%97%90%EB%9F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL 접속시 에러</h4>\n<p>MySQL 5.* 최신 버전 사용할 때</p>\n<table>\n<thead>\n<tr>\n<th>문제</th>\n<th>Sat Jul 21 11:17:59 PDT 2018 WARN: Establishing SSL connection without server's identity verification is not recommended. <strong>According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set.</strong> For compliance with existing applications not using SSL the <strong>verifyServerCertificate property is set to 'false'</strong>. You need either to explicitly disable SSL by setting <strong>useSSL=false</strong>, or set <strong>useSSL=true and provide truststore</strong> for server certificate verification.</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>해결</td>\n<td>jdbc:mysql:/localhost:3306/springboot?<strong>useSSL=false</strong></td>\n</tr>\n</tbody>\n</table>\n<p>MySQL 8.* 최신 버전 사용할 때</p>\n<table>\n<thead>\n<tr>\n<th>문제</th>\n<th>com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>해결</td>\n<td>jdbc:mysql:/localhost:3306/springboot?useSSL=false&#x26;<strong>allowPublicKeyRetrieval=true</strong></td>\n</tr>\n</tbody>\n</table>\n<p>MySQL 라이센스 (GPL) 주의</p>\n<ul>\n<li>MySQL 대신 MariaDB 사용 검토</li>\n<li>소스 코드 공개 의무 여부 확인</li>\n</ul>\n<h3 id=\"postgresql\"><a href=\"#postgresql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PostgreSQL</h3>\n<h4 id=\"의존성-추가\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의존성 추가</h4>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.postgresql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>postgresql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"postgresql-설치-및-서버-실행-docker\"><a href=\"#postgresql-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89-docker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PostgreSQL 설치 및 서버 실행 (docker)</h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker run -p <span class=\"token number\">5432</span>:5432 -e <span class=\"token assign-left variable\">POSTGRES_PASSWORD</span><span class=\"token operator\">=</span>pass -e <span class=\"token assign-left variable\">POSTGRES_USER</span><span class=\"token operator\">=</span>keesun -e <span class=\"token assign-left variable\">POSTGRES_DB</span><span class=\"token operator\">=</span>springboot --name postgres_boot -d postgres\n\ndocker <span class=\"token builtin class-name\">exec</span> -i -t postgres_boot <span class=\"token function\">bash</span>\n\n<span class=\"token function\">su</span> - postgres\n\npsql springboot\n\n데이터베이스 조회\n<span class=\"token punctuation\">\\</span>list\n\n테이블 조회\n<span class=\"token punctuation\">\\</span>dt\n\n쿼리\nSELECT * FROM account<span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"postgresql-경고-메시지\"><a href=\"#postgresql-%EA%B2%BD%EA%B3%A0-%EB%A9%94%EC%8B%9C%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PostgreSQL 경고 메시지</h4>\n<p>경고 : <code class=\"language-text\">org.postgresql.jdbc.PgConnection.createClob() is not yet implemented</code> 해결 : <code class=\"language-text\">spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true</code></p>\n<h3 id=\"spring-data-jpa-소개\"><a href=\"#spring-data-jpa-%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring-Data-JPA 소개</h3>\n<h4 id=\"ormobject-relational-mapping과-jpajava-persistence-api\"><a href=\"#ormobject-relational-mapping%EA%B3%BC-jpajava-persistence-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ORM(Object-Relational Mapping)과 JPA(Java Persistence API)</h4>\n<ul>\n<li>ORM: 객체와 릴레이션을 맵핑할 때 발생하는 개념적 불일치를 해결하는 프레임워크</li>\n<li><a href=\"http://hibernate.org/orm/what-is-an-orm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://hibernate.org/orm/what-is-an-orm/</a></li>\n<li>JPA: ORM을 위한 자바 (EE) 표현</li>\n</ul>\n<p>스프링 데이터 JPA</p>\n<ul>\n<li>Repository 빈 자동 생성</li>\n<li>쿼리 메소드 자동 구현</li>\n<li>@EnableJpaRepositories(스프링 부트가 자동으로 설정 해줌.)</li>\n<li>SDJ -> JPA -> Hibernate -> Datasource</li>\n</ul>\n<h3 id=\"spring-data-jpa-연동\"><a href=\"#spring-data-jpa-%EC%97%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring-Data-JPA 연동</h3>\n<p>스프링 데이터 JPA 의존성 추가</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-jpa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>스프링 데이터 JPA 사용하기</p>\n<ul>\n<li>@Entity 클래스 만들기</li>\n<li>Repository 만들기</li>\n</ul>\n<p>스프링 데이터 리파지토리 테스트 만들기</p>\n<ul>\n<li>H2 DB를 테스트 의존성에 추가하기</li>\n<li>@DataJpaTest (슬라이스 테스트) 작성</li>\n</ul>\n<h3 id=\"데이터베이스-초기화\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데이터베이스 초기화</h3>\n<p>JPA를 사용한 데이터베이스 초기화</p>\n<ul>\n<li>spring.jpa.hibernate.ddl-auto</li>\n<li>spring.jpa.generate-dll=true로 설정 해줘야 동작함.</li>\n</ul>\n<p>SQL 스크립트를 사용한 데이터베이스 초기화</p>\n<ul>\n<li>schema.sql 또는 schema-\\${platform}.sql</li>\n<li>data.sql 또는 data-\\${platform}.sql</li>\n<li>\\${platform} 값은 spring.datasource.platform 으로 설정 가능.</li>\n</ul>\n<h3 id=\"데이터베이스-마이그레이션\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데이터베이스 마이그레이션</h3>\n<blockquote>\n<p>Flyway와 Liquibase가 대표적인데, 지금은 Flyway를 사용하겠습니다.</p>\n</blockquote>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#howto-execute-flyway-database-migrations-on-startup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#howto-execute-flyway-database-migrations-on-startup</a></p>\n<p>의존성 추가</p>\n<ul>\n<li>org.flywaydb:flyway-core</li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.flywaydb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flyway-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>마이그레이션 디렉토리</p>\n<ul>\n<li>db/migration 또는 db/migration/{vendor}</li>\n<li>spring.flyway.locations로 변경 가능</li>\n</ul>\n<p>마이그레이션 파일 이름</p>\n<ul>\n<li>V숫자__이름.sql</li>\n<li>V는 꼭 대문자로.</li>\n<li>숫자는 순차적으로 (타임스탬프 권장)</li>\n<li>숫자와 이름 사이에 언더바 두 개.</li>\n<li>이름은 가능한 서술적으로.</li>\n</ul>\n<h3 id=\"redis\"><a href=\"#redis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Redis</h3>\n<p>캐시, 메시지 브로커, 키/밸류 스토어 등으로 사용 가능.</p>\n<ul>\n<li>\n<p>의존성 추가</p>\n<ul>\n<li>spring-boot-starter-data-redis</li>\n</ul>\n</li>\n<li>\n<p>Redis 설치 및 실행 (도커)</p>\n<ul>\n<li>\n<p>docker run -p 6379:6379 --name redis_boot -d redis</p>\n<ul>\n<li>6379는 기본설정이라, 따로 설정안해도 잘돌아간다.</li>\n</ul>\n</li>\n<li>docker exec -i -t redis_boot redis-cli</li>\n</ul>\n</li>\n<li>\n<p>스프링 데이터 Redis</p>\n<ul>\n<li><a href=\"https://projects.spring.io/spring-data-redis/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://projects.spring.io/spring-data-redis/</a></li>\n<li>StringRedisTemplate 또는 RedisTemplate</li>\n<li>extends CrudRepository(JPA 레퍼지토리 처럼 사용)</li>\n</ul>\n</li>\n<li>\n<p>Redis 주요 커맨드</p>\n<ul>\n<li><a href=\"https://redis.io/commands\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redis.io/commands</a></li>\n<li>keys *</li>\n<li>get {key}</li>\n<li>hgetall {key}</li>\n<li>hget {key} {column}</li>\n</ul>\n</li>\n<li>\n<p>커스터마이징</p>\n<ul>\n<li>spring.redis.*</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mongodb\"><a href=\"#mongodb\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MongoDB</h3>\n<p>MongoDB는 JSON 기반의 도큐먼트 데이터베이스입니다.</p>\n<ul>\n<li>\n<p>의존성 추가</p>\n<ul>\n<li>spring-boot-starter-data-mongodb</li>\n</ul>\n</li>\n<li>\n<p>MongoDB 설치 및 실행 (도커)</p>\n<ul>\n<li>docker run -p 27017:27017 --name mongo_boot -d mongo</li>\n<li>docker exec -i -t mongo_boot bash</li>\n<li>mongo</li>\n</ul>\n</li>\n<li>\n<p>스프링 데이터 몽고DB</p>\n<ul>\n<li>MongoTemplate</li>\n<li>MongoRepository</li>\n<li>\n<p>내장형 MongoDB (테스트용)</p>\n<ul>\n<li>de.flapdoodle.embed:de.flapdoodle.embed.mongo</li>\n</ul>\n</li>\n<li>@DataMongoTest</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"neo4j\"><a href=\"#neo4j\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Neo4j</h3>\n<p>Neo4j는 노드간의 연관 관계를 영속화하는데 유리한 그래프 데이터베이스 입니다.</p>\n<ul>\n<li>\n<p>의존성 추가</p>\n<ul>\n<li>spring-boot-starter-data-neo4j</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li>\n<p>Neo4j 설치 및 실행 (도커)</p>\n<ul>\n<li>docker run -p 7474:7474 -p 7687:7687 -d --name noe4j_boot neo4j</li>\n<li><a href=\"http://localhost:7474/browser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:7474/browser</a></li>\n</ul>\n</li>\n<li>\n<p>스프링 데이터 Neo4J</p>\n<ul>\n<li>Neo4jTemplate (Deprecated)</li>\n<li>SessionFactory</li>\n<li>Neo4jRepository</li>\n</ul>\n</li>\n<li>에러 발생하는 데, 참고할 링크 : <a href=\"https://www.inflearn.com/questions/6023\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.inflearn.com/questions/6023</a></li>\n</ul>\n<h3 id=\"정리\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정리</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-sql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-sql</a></p>\n"}},{"node":{"title":"[Springboot] Springboot 활용하기 - 2","path":"/02-springboot-utilizing/","date":"20. August 2020","timeToRead":5,"description":" 'Springboot 활용하기'의 두번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기2\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B02\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 활용하기2</h1>\n<br/>\n<h2 id=\"스프링-웹-mvc\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9B%B9-mvc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 웹 MVC</h2>\n<h3 id=\"소개\"><a href=\"#%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>소개</h3>\n<p>스프링 웹 MVC</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#spring-web</a>\n스프링 부트 MVC</li>\n<li>자동 설정으로 제공하는 여러 기본 기능 (앞으로 살펴볼 예정)\n스프링 MVC 확장</li>\n<li>@Configuration + WebMvcConfigurer\n스프링 MVC 재정의</li>\n<li>@Configuration + @EnableWebMvc</li>\n</ul>\n<h3 id=\"httpmessageconverters\"><a href=\"#httpmessageconverters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HttpMessageConverters</h3>\n<p><a href=\"https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-config-message-converters\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-config-message-converters</a> HTTP 요청 본문을 객체로 변경하거나, 객체를 HTTP 응답 본문으로 변경할 때 사용 {“username”:”keesun”, “password”:”123”} &#x3C;-> User</p>\n<ul>\n<li>@ReuqestBody</li>\n<li>@ResponseBody</li>\n</ul>\n<h3 id=\"viewresolve\"><a href=\"#viewresolve\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ViewResolve</h3>\n<p>스프링 부트</p>\n<ul>\n<li>뷰 리졸버 설정 제공</li>\n<li>HttpMessageConvertersAutoConfiguration</li>\n</ul>\n<p>XML 메시지 컨버터 추가하기</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>dataformat<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>jackson<span class=\"token operator\">-</span>dataformat<span class=\"token operator\">-</span>xml<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.9</span><span class=\"token number\">.6</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></code></pre>\n<h3 id=\"정적-리소스-지원\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A7%80%EC%9B%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 리소스 지원</h3>\n<p>정적 리소스 맵핑 “ /**”</p>\n<ul>\n<li>\n<p>기본 리소스 위치</p>\n<ul>\n<li>classpath:/static</li>\n<li>classpath:/public</li>\n<li>classpath:/resources/</li>\n<li>classpath:/META-INF/resources</li>\n<li>예) “/hello.html” => /static/hello.html</li>\n<li>spring.mvc.static-path-pattern: 맵핑 설정 변경 가능</li>\n<li>spring.mvc.static-locations: 리소스 찾을 위치 변경 가능</li>\n</ul>\n</li>\n<li>Last-Modified 헤더를 보고 304 응답을 보냄.</li>\n<li>\n<p>ResourceHttpRequestHandler가 처리함.</p>\n<ul>\n<li>WebMvcConfigurer의 addRersourceHandlers로 커스터마이징 할 수 있음</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addResourceHandlers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceHandlerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/m/**\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:/m/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">setCachePeriod</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"웹-jar\"><a href=\"#%EC%9B%B9-jar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>웹 JAR</h3>\n<p>웹JAR 맵핑 “ /webjars/**”</p>\n<ul>\n<li>\n<p>버전 생략하고 사용하려면</p>\n<ul>\n<li>webjars-locator-core 의존성 추가</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"/webjars/jquery/dist/jquery.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>script<span class=\"token punctuation\">></span></span>\n   $<span class=\"token punctuation\">(</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ready!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>\n<h3 id=\"index-페이지와-파비콘\"><a href=\"#index-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%99%80-%ED%8C%8C%EB%B9%84%EC%BD%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>index 페이지와 파비콘</h3>\n<p>웰컴 페이지</p>\n<ul>\n<li>index.html 찾아 보고 있으면 제공.</li>\n<li>index.템플릿 찾아 보고 있으면 제공.</li>\n<li>둘 다 없으면 에러 페이지.</li>\n</ul>\n<p>파비콘</p>\n<ul>\n<li>favicon.ico</li>\n<li>파이콘 만들기 <a href=\"https://favicon.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://favicon.io/</a></li>\n<li>\n<p>파비콘이 안 바뀔 때?</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2208933/how-do-i-force-a-favicon-refresh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/2208933/how-do-i-force-a-favicon-refresh</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"thymeleaf\"><a href=\"#thymeleaf\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thymeleaf</h3>\n<p>스프링 부트가 자동 설정을 지원하는 템플릿 엔진</p>\n<ul>\n<li>FreeMarker</li>\n<li>Groovy</li>\n<li>Thymeleaf</li>\n<li>Mustache</li>\n</ul>\n<p><strong>JSP를 권장하지 않는 이유</strong></p>\n<ul>\n<li>JAR 패키징 할 때는 동작하지 않고, WAR 패키징 해야 함.</li>\n<li>Undertow는 JSP를 지원하지 않음.</li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-jsp-limitations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-jsp-limitations</a></li>\n</ul>\n<p>Thymeleaf 사용하기</p>\n<ul>\n<li><a href=\"https://www.thymeleaf.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.thymeleaf.org/</a></li>\n<li><a href=\"https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html</a></li>\n<li>의존성 추가: spring-boot-starter-thymeleaf</li>\n<li>템플릿 파일 위치: /src/main/resources/template/</li>\n<li>예제: <a href=\"https://github.com/thymeleaf/thymeleafexamples-stsm/blob/3.0-master/src/main/webapp/WEB-INF/templates/seedstartermng.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/thymeleaf/thymeleafexamples-stsm/blob/3.0-master/src/main/webapp/WEB-INF/templates/seedstartermng.html</a></li>\n</ul>\n<h3 id=\"htmlunit\"><a href=\"#htmlunit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HtmlUnit</h3>\n<p>HTML 템플릿 뷰 테스트를 보다 전문적으로 하자.</p>\n<ul>\n<li><a href=\"http://htmlunit.sourceforge.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://htmlunit.sourceforge.net/</a></li>\n<li>\n<p><a href=\"http://htmlunit.sourceforge.net/gettingStarted.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://htmlunit.sourceforge.net/gettingStarted.html</a></p>\n<ul>\n<li>코드를 가져올 수 있고 폼을 받아올 수 있고, 브라우저인척도 되고, 비교할 수 있음</li>\n<li>다양한 예시가 있음.</li>\n</ul>\n</li>\n<li>의존성 추가</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>seleniumhq<span class=\"token punctuation\">.</span>selenium<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>htmlunit<span class=\"token operator\">-</span>driver<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>net<span class=\"token punctuation\">.</span>sourceforge<span class=\"token punctuation\">.</span>htmlunit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>htmlunit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></code></pre>\n<ul>\n<li>단. 해당 코드로는 안되서 dependency 버전을 새로 선언해주었다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>seleniumhq<span class=\"token punctuation\">.</span>selenium<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>htmlunit<span class=\"token operator\">-</span>driver<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span><span class=\"token number\">2.52</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>net<span class=\"token punctuation\">.</span>sourceforge<span class=\"token punctuation\">.</span>htmlunit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>htmlunit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n   <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.43</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></code></pre>\n<ul>\n<li>@Autowire WebClient</li>\n</ul>\n<h3 id=\"exceptionhandler\"><a href=\"#exceptionhandler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ExceptionHandler</h3>\n<p>스프링 @MVC 예외 처리 방법</p>\n<ul>\n<li>@ControllerAdvice</li>\n<li>@ExceptionHandler</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://localhost:8080/</code></pre>\n<p>스프링 부트가 제공하는 기본 예외 처리기</p>\n<ul>\n<li>\n<p>BasicErrorController</p>\n<ul>\n<li>HTML과 JSON 응답 지원</li>\n</ul>\n</li>\n<li>\n<p>커스터마이징 방법</p>\n<ul>\n<li>ErrorController 구현</li>\n</ul>\n</li>\n</ul>\n<p>커스텀 에러 페이지</p>\n<ul>\n<li>상태 코드 값에 따라 에러 페이지 보여주기</li>\n<li>src/main/resources/static|template/error/</li>\n<li>404.html</li>\n<li>5xx.html</li>\n<li>ErrorViewResolver 구현</li>\n</ul>\n<h3 id=\"spring-hateoas\"><a href=\"#spring-hateoas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring HATEOAS</h3>\n<h4 id=\"hypermedia-as-the-engine-of-application-state\"><a href=\"#hypermedia-as-the-engine-of-application-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hypermedia As The Engine Of Application State</h4>\n<ul>\n<li>서버: 현재 리소스와 연관된 링크 정보를 클라이언트에게 제공한다.</li>\n<li>클라이언트: 연관된 링크 정보를 바탕으로 리소스에 접근한다.</li>\n<li>\n<p>연관된 링크 정보</p>\n<ul>\n<li>Relation</li>\n<li>Hypertext Reference)</li>\n</ul>\n</li>\n<li>spring-boot-starter-hateoas 의존성 추가</li>\n<li><a href=\"https://spring.io/understanding/HATEOAS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://spring.io/understanding/HATEOAS</a></li>\n<li><a href=\"https://spring.io/guides/gs/rest-hateoas/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://spring.io/guides/gs/rest-hateoas/</a></li>\n<li><a href=\"https://docs.spring.io/spring-hateoas/docs/current/reference/html/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-hateoas/docs/current/reference/html/</a></li>\n</ul>\n<p>아래에 있는 2개를 크게 제공한다라고 보면 된다.</p>\n<p>ObjectMapper 제공</p>\n<ul>\n<li>spring.jackson.*</li>\n<li>Jackson2ObjectMapperBuilder</li>\n</ul>\n<p>LinkDiscovers 제공</p>\n<ul>\n<li>클라이언트 쪽에서 링크 정보를 Rel 이름으로 찾을때 사용할 수 있는 XPath 확장 클래스</li>\n</ul>\n<h3 id=\"cors\"><a href=\"#cors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS</h3>\n<p>SOP과 CORS</p>\n<ul>\n<li>\n<p>Single-Origin Policy</p>\n<ul>\n<li>같은 origin에만 요청을 보낼 수 있다.</li>\n<li>기본적으로 제공되어 있음.</li>\n</ul>\n</li>\n<li>\n<p>Cross-Origin Resource Sharing</p>\n<ul>\n<li>서로 다른 origin끼리 resourse를 제어할 수 있게 하는 정책</li>\n</ul>\n</li>\n<li>\n<p><strong>Origin?</strong></p>\n<ul>\n<li>URI 스키마 (http, https)</li>\n<li>hostname (whiteship.me, localhost)</li>\n<li>포트 (8080, 18080)</li>\n<li>이 3개가 조합된 것이 origin이라고 이해하자.</li>\n</ul>\n</li>\n</ul>\n<p>스프링 MVC @CrossOrigin</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-cors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-cors</a></li>\n<li>@Controller나 @RequestMapping에 추가하거나</li>\n<li>WebMvcConfigurer 사용해서 글로벌 설정</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 활용하기 - 1","path":"/01-springboot-utilizing/","date":"3. August 2020","timeToRead":8,"description":" 'Springboot 활용하기'의 첫번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 활용하기</h1>\n<table>\n<thead>\n<tr>\n<th>스프링 부트 핵심 기능</th>\n<th>각종 기술 연동</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SpringApplication</td>\n<td>스프링 웹 MVC</td>\n</tr>\n<tr>\n<td>외부설정</td>\n<td>스프링 웹 MVC</td>\n</tr>\n<tr>\n<td>프로파일</td>\n<td>스프링 데이터</td>\n</tr>\n<tr>\n<td>로깅</td>\n<td>스프링 시큐리티</td>\n</tr>\n<tr>\n<td>테스트</td>\n<td>REST API 클라이언트</td>\n</tr>\n<tr>\n<td>Spring-Dev-Tools</td>\n<td>다루지 않은 내용들</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"springapplication\"><a href=\"#springapplication\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpringApplication</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-spring-application\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-spring-application</a></p>\n<p>Tip) 자동 설정이 되지않을때나 궁금할때는 디버그를 보면 확인할 수 있다.</p>\n<ul>\n<li>\n<p>기본 로그 레벨 INFO</p>\n<ul>\n<li>뒤에로깅수업때자세히살펴볼예정</li>\n</ul>\n</li>\n<li>FailureAnalyzer</li>\n<li>\n<p>배너</p>\n<ul>\n<li>banner.txt | gif | jpg | png</li>\n<li>classpath 또는 spring.banner.location</li>\n<li>\\${spring-boot.version} 등의 변수를 사용할 수 있음.</li>\n<li>Banner 클래스 구현하고 SpringApplication.setBanner()로 설정 가능.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">SpringApplication</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringinitApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">setBanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">,</span> sourceClass<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Spring Boot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>\n<p>배너끄는방법</p>\n<ul>\n<li>SpringApplicationBuilder로 빌더 패턴 사용 가능</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">SprintApplicationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringinitApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-applicatio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-applicatio</a> n.html#boot-features-application-events-and-listeners</p>\n<ul>\n<li>\n<p>ApplicationEvent 등록</p>\n<ul>\n<li>\n<p>ApplicationContext를 만들기 전에 사용하는 리스너는 @Bean으로 등록할 수 없다.</p>\n<ul>\n<li>SpringApplication.addListners()</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// SampleListner</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleListner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApplicationStartedEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationStartedEvent</span> applicationStartedEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=======================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Application is starting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=======================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Application</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 작성시. Spring 이 빌드될 때 찍히는 거 볼 수 있다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>WebApplicationType 설정</p>\n<p>WebApplicationType은 Servlet, Reactive, None 등이 있는데 이걸로 돌아간다.</p>\n<p>둘 다 없으면 None으로 돌려야하고, 두개다 있으면 Servlet으로 돌아간다. Reactive로 하고 싶으면 따로 작성해야한다.</p>\n</li>\n<li>\n<p>애플리케이션 아규먼트 사용하기</p>\n<ul>\n<li>ApplicationArguments를 빈으로 등록해 주니까 가져다 쓰면 됨.</li>\n</ul>\n<p>argument에 생성자가 하나면 Bean을 생성할 때 자동으로 해준다.</p>\n</li>\n<li>\n<p>애플리케이션 실행한 뒤 뭔가 실행하고 싶을 때</p>\n<ul>\n<li>ApplicationRunner (추천) 또는 CommandLineRunner</li>\n<li>\n<p>순서 지정 가능 @Order</p>\n<p>숫자가 높을수록 우선순위가 높은 것.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"외부-설정\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>외부 설정</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config</a></p>\n<h3 id=\"사용할-수-있는-외부-설정\"><a href=\"#%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%99%B8%EB%B6%80-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>사용할 수 있는 외부 설정</h3>\n<ul>\n<li>properties</li>\n<li>YAML</li>\n<li>환경변수</li>\n<li>커맨드 라인 아규먼트</li>\n</ul>\n<h3 id=\"프로퍼티-우선-순위\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로퍼티 우선 순위</h3>\n<p>위에 있을수록 높음.</p>\n<ol>\n<li>유저 홈 디렉토리에 있는 spring-boot-dev-tools.properties</li>\n<li>테스트에 있는 @TestPropertySource</li>\n<li>@SpringBootTest 애노테이션의 properties 애트리뷰트</li>\n<li>커맨드 라인 아규먼트</li>\n<li>SPRING_APPLICATION_JSON (환경 변수 또는 시스템 프로티) 에 들어있는 프로퍼티</li>\n<li>ServletConfig 파라미터</li>\n<li>ServletContext 파라미터</li>\n<li>java:comp/env JNDI 애트리뷰트</li>\n<li>System.getProperties() 자바 시스템 프로퍼티</li>\n<li>OS 환경 변수</li>\n<li>RandomValuePropertySource</li>\n<li>JAR 밖에 있는 특정 프로파일용 application properties</li>\n<li>JAR 안에 있는 특정 프로파일용 application properties</li>\n<li>JAR 밖에 있는 application properties</li>\n<li>JAR 안에 있는 application properties</li>\n<li>@PropertySource</li>\n<li>기본 프로퍼티 (SpringApplication.setDefaultProperties)</li>\n</ol>\n<p>application.properties 우선 순위 (높은게 낮은걸 덮어 씁니다.)</p>\n<blockquote>\n<p>위에 있는게 이김.</p>\n</blockquote>\n<ol>\n<li>file:./config/</li>\n<li>file:./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ol>\n<p>랜덤값 설정하기</p>\n<ul>\n<li>\\${random.*}</li>\n</ul>\n<p>플레이스 홀더</p>\n<blockquote>\n<p>인풋텍스트나 아레아 등에서 안내 문구를 삽입해 주는 기능 + 클릭하면 사라지는 아주 좋은 기능</p>\n</blockquote>\n<ul>\n<li>name = keesun</li>\n<li>fullName = \\${name} baik</li>\n</ul>\n<h3 id=\"타입-세이프-프로퍼티\"><a href=\"#%ED%83%80%EC%9E%85-%EC%84%B8%EC%9D%B4%ED%94%84-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입-세이프 프로퍼티</h3>\n<p>타입-세이프 프로퍼티 <code class=\"language-text\">@ConfigurationProperties</code></p>\n<ul>\n<li>여러 프로퍼티를 묶어서 읽어올 수 있음</li>\n<li>\n<p>빈으로등록해서다른빈에주입할수있음</p>\n<ul>\n<li>@EnableConfigurationProperties</li>\n<li>@Component</li>\n<li>@Bean</li>\n</ul>\n</li>\n<li>\n<p>융통성 있는 바인딩</p>\n<ul>\n<li>context-path (케밥)</li>\n<li>context_path (언드스코어)</li>\n<li>contextPath (캐멀)</li>\n<li>CONTEXTPATH</li>\n</ul>\n</li>\n<li>\n<p>프로퍼티 타입 컨버전</p>\n<ul>\n<li>@DurationUnit</li>\n</ul>\n</li>\n<li>\n<p>프로퍼티 값 검증</p>\n<ul>\n<li>@Validated</li>\n<li>JSR-303 (@NotNull, ...)</li>\n</ul>\n</li>\n<li>메타정보생성</li>\n<li>\n<p>@Value</p>\n<ul>\n<li>SpEL 을 사용할 수 있지만...</li>\n<li>위에 있는 기능들은 전부 사용 못합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"프로파일\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로파일</h3>\n<ul>\n<li>\n<p>@Profile 애노테이션은 어디에?</p>\n<ul>\n<li>@Configuration</li>\n<li>@Component</li>\n</ul>\n</li>\n<li>\n<p>어떤 프로파일을 활성화 할 것인가?</p>\n<ul>\n<li>spring.profiles.active</li>\n</ul>\n</li>\n<li>\n<p>어떤 프로파일을 추가할 것인가?</p>\n<ul>\n<li>spring.profiles.include</li>\n</ul>\n</li>\n<li>\n<p>프로파일용 프로퍼티</p>\n<ul>\n<li>application-{profile}.properties</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"로깅\"><a href=\"#%EB%A1%9C%EA%B9%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로깅</h2>\n<p>로깅 퍼사드 VS 로거</p>\n<blockquote>\n<p>로깅 퍼사드의 장점은 로거를 자신들이 원하는 거를 사용할 수 있는 점</p>\n</blockquote>\n<ul>\n<li><strong>Commons Logging</strong>, SLF4j</li>\n<li>JUL, Log4J2, <strong>Logback</strong> (최종적으로는 Logback으로 왔다.)</li>\n</ul>\n<p>스프링 5에 로거 관련 변경 사항</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/overview.html#overview-logging\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/overview.html#overview-logging</a></li>\n<li>\n<p>Spring-JCL</p>\n<ul>\n<li>Commons Logging -> SLF4j or Log4j2</li>\n<li>pom.xml에 exclusion 안해도 됨.</li>\n</ul>\n</li>\n</ul>\n<p>스프링 부트 로깅</p>\n<ul>\n<li>기본 포맷</li>\n<li>--debug (일부 핵심 라이브러리만 디버깅 모드로)</li>\n<li>--trace (전부 다 디버깅 모드로)</li>\n<li>컬러 출력: spring.output.ansi.enabled</li>\n<li>파일 출력: logging.file 또는 logging.path</li>\n<li>로그 레벨 조정: logging.level.패지키 = 로그 레벨</li>\n</ul>\n<h3 id=\"커스터마이징\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스터마이징</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html</a> : 커스텀 로그 설정 파일 사용하기</p>\n<p>Logback: logback-spring.xml - 기본적으로는 이거 사용을 추천</p>\n<p>Log4J2: log4j2-spring.xml</p>\n<p>JUL (비추): logging.properties</p>\n<p>Logback extension</p>\n<ul>\n<li>프로파일 <springProfile name=”프로파일”></li>\n<li>Environment 프로퍼티 <springProperty></li>\n</ul>\n<p>로거를 Log4j2로 변경하기</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging</a></p>\n<br/>\n<h2 id=\"테스트\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing</a></p>\n<p>시작은 일단 spring-boot-starter-test를 추가하는 것 부터</p>\n<ul>\n<li>test 스콥으로 추가.</li>\n</ul>\n<p>@SpringBootTest</p>\n<ul>\n<li>@RunWith(SpringRunner.class)랑 같이 써야 함.</li>\n<li>빈 설정 파일은 설정을 안해주나? 알아서 찾습니다. (@SpringBootApplication)</li>\n<li>\n<p>webEnvironment</p>\n<ul>\n<li>MOCK: mock servlet environment. 내장 톰캣 구동 안 함.</li>\n<li>RANDON_PORT, DEFINED_PORT: 내장 톰캣 사용 함.</li>\n<li>NONE: 서블릿 환경 제공 안 함.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// TEST Code</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">myepark<span class=\"token punctuation\">.</span>ebaykorea<span class=\"token punctuation\">.</span>springtestdemo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AutoConfigureMockMvc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcRequestBuilders</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultHandlers</span><span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MockMvcResultMatchers</span><span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WebEnvironment</span><span class=\"token punctuation\">.</span>MOCK<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@AutoConfigureMockMvc</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringtestdemoApplicationTests</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello myepark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andDo</span><span class=\"token punctuation\">(</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>@MockBean</p>\n<ul>\n<li>ApplicationContext에 들어있는 빈을 Mock으로 만든 객체로 교체 함.</li>\n<li>모든 @Test 마다 자동으로 리셋.</li>\n</ul>\n<p>슬라이스 테스트</p>\n<ul>\n<li>레이어 별로 잘라서 테스트하고 싶을 때 (빈을 다 체크하고 싶지 않을때)</li>\n<li>@JsonTest</li>\n<li>@WebMvcTest</li>\n<li>@WebFluxTest</li>\n<li>@DataJpaTest</li>\n<li>...</li>\n</ul>\n<p>스프링 테스트</p>\n<ul>\n<li>\n<p><strong>OutputCapture</strong></p>\n<ul>\n<li>Log에 찍히는 모든 output를 캡쳐한다.</li>\n<li>ex) <code class=\"language-text\">assertThat(outputCapture.toString()).contains(&quot;holoman&quot;).contains(&quot;skip&quot;);</code></li>\n</ul>\n</li>\n<li>TestPropertyValues</li>\n<li>TestRestTemplate</li>\n<li>ConfigFileApplicationContextInitializer</li>\n</ul>\n<h3 id=\"spring-boot-devtools\"><a href=\"#spring-boot-devtools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Boot Devtools</h3>\n<ul>\n<li>캐시 설정을 개발 환경에 맞게 변경.</li>\n<li>\n<p>클래스패스에 있는 파일이 변경 될 때마다 자동으로 재시작.</p>\n<ul>\n<li>\n<p>직접 껐다 켜는거 (cold starts)보다 빠른다. 왜?</p>\n<ul>\n<li>class 로더를 2개를 사용해서...</li>\n</ul>\n</li>\n<li>릴로딩 보다는 느리다. (JRebel 같은건 아님)</li>\n<li>리스타트 하고 싶지 않은 리소스는? spring.devtools.restart.exclude</li>\n<li>리스타트 기능 끄려면? spring.devtools.restart.enabled = false</li>\n</ul>\n</li>\n<li>\n<p>라이브 릴로드? 리스타트 했을 때 브라우저 자동 리프레시 하는 기능</p>\n<ul>\n<li>브라우저 플러그인 설치해야 함.</li>\n<li>라이브 릴로드 서버 끄려면? spring.devtools.liveload.enabled = false</li>\n</ul>\n</li>\n<li>\n<p>글로벌 설정</p>\n<ul>\n<li>\n<p>~/.spring-boot-devtools.properties</p>\n<ul>\n<li>1순위 외부 설정, 우선순위가 가장 높음</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>리모트 애플리케이션</p>\n<ul>\n<li>원격에서 할 수 있는데. 추천은 안함(복잡함, 보안적 측면 문제)</li>\n</ul>\n</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 이해하기","path":"/02-springboot-starter/","date":"9. July 2020","timeToRead":10,"description":" 'Springboot 시작하기'의 두 번째 게시글입니다. ","content":"<h1 id=\"springboot-이해하기\"><a href=\"#springboot-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 이해하기</h1>\n<br/>\n<h2 id=\"의존성-관리-이해\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EB%A6%AC-%EC%9D%B4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의존성 관리 이해</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-dependency-management\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-dependency-management</a></p>\n<p>의존성으로 다 정의가 되어있어서 적게 신경을 써도 된다는 것은 큰 장점입니다.</p>\n<p>또한 parent를 바꿔서 dependency를 줄 수 있습니다. 만약에 parent를 못바꾸는 상항이면 dependencyManagement에 dependency를 주는 방법이 있습니다.</p>\n<p>일반적으로는 <strong>parent를 설정</strong>하여 <strong>dependency를 주는 것이 중요</strong>합니다.</p>\n<p>의존성 관리 기능을 최대한 사용하는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"의존성-관리-응용\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EB%A6%AC-%EC%9D%91%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의존성 관리 응용</h2>\n<ul>\n<li>버전을 관리해주는 의존성을 추가 (자동으로 버전 관리)</li>\n<li>버전 관리 안해주는 의존성 추가 (추가적으로 버전을 체크해줘야 함)</li>\n<li>\n<p>기존 의존성 버전 변경하기</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring.version</span><span class=\"token punctuation\">></span></span>5.0.6.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring.version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></code></pre>\n</li>\n<li><a href=\"https://mvnrepository.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mvnrepository.com/</a></li>\n</ul>\n<p>버전을 관리해주는 version이 있으면 자동으로 spring boot 가 처리를 해주지만,\nversion이 없으면 따로 버전을 관리해줘야합니다.(다른 버전으로 처리가 안되는 경우가 발생할 수 있음. )</p>\n<h2 id=\"자동-설정-이해\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95-%EC%9D%B4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자동 설정 이해</h2>\n<ul>\n<li><code class=\"language-text\">@EnableAutoConfiguration</code> (<code class=\"language-text\">@SpringBootApplication</code> 안에 숨어 있음)</li>\n<li>\n<p>빈(Bean)은 두단계로 나눠서읽혀집니다.</p>\n<ul>\n<li>1단계: <code class=\"language-text\">@ComponentScan</code></li>\n<li>2단계: <code class=\"language-text\">@EnableAutoConfiguration</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@ComponentScan</code> -<code class=\"language-text\">@Component</code></p>\n<ul>\n<li><code class=\"language-text\">@Configuration @Repository @Service @Controller @RestController</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@EnableAutoConfiguration</code></p>\n<ul>\n<li>\n<p>spring.factories</p>\n<ul>\n<li>org.springframework.boot.autoconfigure.EnableAutoConfigu ration</li>\n</ul>\n</li>\n<li><code class=\"language-text\">@Configuration</code></li>\n<li><code class=\"language-text\">@ConditionalOnXxxYyyZzz</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>대부분 이 방법으로 진행하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootConfiguration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span>\n<span class=\"token comment\">// @EnableAutoConfiguration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SpringApplication</span> application <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        application<span class=\"token punctuation\">.</span><span class=\"token function\">setWebApplicationType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationType</span><span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        application<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// SpringApplication.run(Application.class, args);</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위와 같이 돌릴 수도 있습니다. 그러나 다음과 같이 하게된다면 Web 처리는 못하는 단점이 있습니다.</p>\n<h3 id=\"componentscan\"><a href=\"#componentscan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@ComponentScan</h3>\n<p>자기 밑에 있는 모든 Component를 찾아서 Bin으로 등록시킵니다. (자기 자신 포함, 다른 패키지는 안됩니다.)</p>\n<h3 id=\"enableautoconfiguration\"><a href=\"#enableautoconfiguration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@EnableAutoConfiguration</h3>\n<p><code class=\"language-text\">: Maven: org.springframework.boot:spring-boot-autoconfiguration:2.3.1.REALSE\\spring-boot-autoconfigure-2.3.1.RELEASE.jar\\META-INF\\spring.factories</code></p>\n<p>자기 밑에 있는 모든 메타파일을 찾아준다. 위의 링크에서 EnableAutoConfiguration이 있는데 아래에 있는 모든 링크를 다 추가해준다.</p>\n<h3 id=\"configuration\"><a href=\"#configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuration</h3>\n<p>Bean을 등록하는 java 설정파일입니다.</p>\n<p><code class=\"language-text\">Maven: org.springframework.boot:spring-boot-autoconfiguration:2.3.1.REALSE\\spring-boot-autoconfigure-2.3.1.RELEASE.jar\\org.springframework.boot.autoconfigure\\web\\servlet\\WebMvcAutoConfiguration</code></p>\n<p>에 들어가보면 Bean이 있을 때와 없을때를 구분해줍니다.</p>\n<p><code class=\"language-text\">autoConfiguartion</code> 를 설정하면 수많은 bean이 생성이 되고 적용이 됩니다.</p>\n<br/>\n<h2 id=\"자동-설정-만들기-starter와-autoconfigure\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95-%EB%A7%8C%EB%93%A4%EA%B8%B0-starter%EC%99%80-autoconfigure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자동 설정 만들기. Starter와 AutoConfigure</h2>\n<p>유용한 단축키 :</p>\n<ul>\n<li><code class=\"language-text\">command + N</code> : get, set, toString() 등을 제공</li>\n<li><code class=\"language-text\">command + opt + L</code> : 줄 정렬</li>\n</ul>\n<p>AutoConfigure은 흠.. 현재 Process terminated 상태. => 나중에 하기</p>\n<p>문제는 Bean을 등록할려고 하는데 두가지 페이스. component scan 이 먼저 적용됩니다.\n두번째 페이스가 auto configuration인데 첫번째를 두번째 애가 덮어쓴거다.</p>\n<p>이거를 해결하는 방법은 아래와 같습니다.</p>\n<br/>\n<h2 id=\"자동-설정-만들기-configurationproperties\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95-%EB%A7%8C%EB%93%A4%EA%B8%B0-configurationproperties\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자동 설정 만들기. @ConfigurationProperties</h2>\n<p><strong>덮어쓰기 방지하기</strong></p>\n<ul>\n<li>@ConditionalOnMissingBean : 이 타입의 Bean이 없는 경우만 이 Bean을 등록하는 의미입니다.</li>\n</ul>\n<p><strong>빈 재정의 수고덜기</strong></p>\n<ul>\n<li>@ConfigurationProperties(“holoman”)</li>\n<li>@EnableConfigurationProperties(HolomanProperties)</li>\n<li>프로퍼티 키값 자동 완성</li>\n</ul>\n<p><code class=\"language-text\">src\\main\\resource\\application.properties</code> 파일을 만들어서 해당 파일에 다음과 같이 선언하면 이후에 사용하기 편해집니다.</p>\n<ul>\n<li>holoman.name = {쓰고 싶은 글, ex name}</li>\n<li>holoman.how-long = {쓰고 싶은 숫자. ex 10}</li>\n</ul>\n<p>또한 src\\main\\java\\me.whiteship\\HolomanProperties.class를 만들어서 name이랑 how-long에 대해 Get 이랑 set 다 정의하고 HolomanConfiguration에서</p>\n<p>@EnableConfigurationProperties(HolomanProperties)와 같이 선언해서 하기</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>​org.springframework.boot​<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>​spring-boot-configuration-processor​<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>​true​<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"내장-서블릿-컨테이너\"><a href=\"#%EB%82%B4%EC%9E%A5-%EC%84%9C%EB%B8%94%EB%A6%BF-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>내장 서블릿 컨테이너</h2>\n<ul>\n<li>\n<p>스프링 부트는 서버가 아니다. 그저 툴이라고 생각하자</p>\n<ul>\n<li>톰캣 객체 생성</li>\n<li>포트 선정</li>\n<li>톰캣에 컨텍스트 추가</li>\n<li>서블릿 만들기</li>\n<li>톰캣에 서블릿 추가</li>\n<li>컨텍스트에 서블릿 맵핑</li>\n<li>톰캣 실행 및 대기</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">LifecycleException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Tomcat</span> tomcat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tomcat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttomcat<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> tomcat<span class=\"token punctuation\">.</span><span class=\"token function\">addContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">HttpServlet</span> servlet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">PrintWriter</span> writer <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;html>&lt;head>&lt;title>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey, Tomcat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/title>&lt;/head>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;body>&lt;h1>Hello Tomcat&lt;/h1>&lt;/body>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/html>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">String</span> servletName <span class=\"token operator\">=</span> <span class=\"token string\">\"helloServlet\"</span><span class=\"token punctuation\">;</span>\n\t\ttomcat<span class=\"token punctuation\">.</span><span class=\"token function\">addServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> servletName<span class=\"token punctuation\">,</span> servlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">addServletMappingDecoded</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> servletName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\ttomcat<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttomcat<span class=\"token punctuation\">.</span><span class=\"token function\">getServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre>\n<p>다음은 예제 코드. 이게 다 Spring boot에서 해주는거구나로 이해하기</p>\n<ul>\n<li>\n<p>이 모든 과정을 보다 상세히 또 유연하고 설정하고 실행해주는게 바로 스프링 부트의 자동 설정</p>\n<ul>\n<li>\n<p>ServletWebServerFactoryAutoConfiguration (서블릿 웹 서버 생성)</p>\n<ul>\n<li>TomcatServletWebServerFactoryCustomizer(서버 커스터마이징)</li>\n</ul>\n</li>\n<li>\n<p>DispatcherServletAutoConfiguration</p>\n<ul>\n<li>서블릿 만들고 등록</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"내장-웹-서버-응용--컨테이너와-포트\"><a href=\"#%EB%82%B4%EC%9E%A5-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%9D%91%EC%9A%A9--%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-%ED%8F%AC%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>내장 웹 서버 응용 : 컨테이너와 포트</h2>\n<p>다음과 같이 자동으로 쓰는 tomcat 대신 jetty를 쓸 수도 있다.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-api.version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-api.version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- Exclude the Tomcat dependency --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- Use Jetty instead --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-jetty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>해당 글에서 <dependencies></dependencies>를 안주면 에러가 나서. 에러 처리해주었음.</p>\n<ul>\n<li>다른 서블릿 컨테이너로 변경</li>\n<li>웹서버사용하지않기</li>\n<li>\n<p>포트</p>\n<ul>\n<li>server.port</li>\n<li>랜덤포트</li>\n<li>ApplicationListner<ServletWebServerInitializedEvent></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"내장-웹-서버-응용--https-http2\"><a href=\"#%EB%82%B4%EC%9E%A5-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%9D%91%EC%9A%A9--https-http2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>내장 웹 서버 응용 : HTTPS, HTTP2</h2>\n<p>추가 공부 자료\n<a href=\"https://opentutorials.org/course/228/4894\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://opentutorials.org/course/228/4894</a>\n<a href=\"https://gist.github.com/keesun/f93f0b83d7232137283450e08a53c4fd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gist.github.com/keesun/f93f0b83d7232137283450e08a53c4fd</a></p>\n<p>application.properties</p>\n<pre class=\"language-xml\"><code class=\"language-xml\">server.ssl.key-store: keystore.p12\nserver.ssl.key-store-password: 123456\nserver.ssl.keyStoreType: PKCS12\nserver.ssl.keyAlias: tomcat</code></pre>\n<p>generate-keystore.sh</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">keytool -genkey\n  -alias tomcat\n  -storetype PKCS12\n  -keyalg RSA\n  -keysize <span class=\"token number\">2048</span>\n  -keystore keystore.p12\n  -validity <span class=\"token number\">4000</span></code></pre>\n<ul>\n<li>\n<p>HTTPS 설정하기</p>\n<ul>\n<li>키스토어 만들기</li>\n<li>HTTP는 못쓰네?</li>\n</ul>\n</li>\n<li>\n<p>HTTP 커넥터는 코딩으로 설정하기</p>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-boot/tree/v2.0.3.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/spring-projects/spring-boot/tree/v2.0.3.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors</a></li>\n</ul>\n</li>\n<li>\n<p>HTTP2 설정</p>\n<ul>\n<li>server.http2.enable</li>\n<li>사용하는 서블릿 컨테이너 마다 다름</li>\n</ul>\n</li>\n</ul>\n<p>pom.xml</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-tomcatb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-undertow<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>application.properties</p>\n<pre class=\"language-xml\"><code class=\"language-xml\">server.ssl.key-store: keystore.p12\nserver.ssl.key-store-password: 123456\nserver.ssl.keyStoreType: PKCS12\nserver.ssl.keyAlias: spring\nserver.port=8443\nserver.http2.enabled=true</code></pre>\n<p>http2를 사용할려면 꼭 <code class=\"language-text\">server.http2.enabled</code> 을 true로 해주어야한다.</p>\n<br/>\n<h2 id=\"톰캣-http2\"><a href=\"#%ED%86%B0%EC%BA%A3-http2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>톰캣 HTTP2</h2>\n<p>pom.xml</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.reporting.outputEncoding</span><span class=\"token punctuation\">></span></span>UT-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.reporting.outputEncoding</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tomcat.version</span><span class=\"token punctuation\">></span></span>9.0.18<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tomcat.version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>여기에 추가적으로 Project Setting에 Project에 version과, module을 맞춰줘야한다.\n그렇게 진행하면. 문제없이 http2로 돌아가는 것을 확인할 수 있다.</p>\n<ul>\n<li>JDK9와 Tomcat 9+ 추천</li>\n<li>\n<p>그이하는아래링크참고</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html#howto-configure-http2-tomcat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html#howto-configure-http2-tomcat</a></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"독립적으로-실행-가능한-jar\"><a href=\"#%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89-%EA%B0%80%EB%8A%A5%ED%95%9C-jar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>독립적으로 실행 가능한 JAR</h2>\n<ul>\n<li>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html</a></p>\n<ul>\n<li>JAR 파일 하나로 실행 가능, 이걸로 앱이 돌아간다. - mvn package를 하면 실행 가능한 JAR 파일 “하나가\" 생성 됨.</li>\n<li>spring-maven-plugin이 해주는 일 (패키징)</li>\n<li>\n<p>과거 “uber” jar 를 사용</p>\n<ul>\n<li>모든 클래스 (의존성 및 애플리케이션)를 하나로 압축하는 방법</li>\n<li>\n<p>뭐가 어디에서 온건지 알 수가 없음</p>\n<ul>\n<li>무슨 라이브러리를 쓰는건지..</li>\n</ul>\n</li>\n<li>내용은 다르지만 이름이 같은 파일은 또 어떻게?</li>\n</ul>\n</li>\n<li>\n<p>스프링 부트의 전략</p>\n<ul>\n<li><strong>내장 JAR</strong> : 기본적으로 자바에는 내장 JAR를 로딩하는 표준적인 방법이 없음.</li>\n<li>애플리케이션 클래스와 라이브러리 위치 구분</li>\n<li>org.springframework.boot.loader.jar.JarFile을 사용해서 내장 JAR를 읽는다.</li>\n<li>org.springframework.boot.loader.Launcher를 사용해서 실행한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-부트-원리-정리\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%9B%90%EB%A6%AC-%EC%A0%95%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 원리 정리</h2>\n<ul>\n<li>\n<p>의존성 관리</p>\n<ul>\n<li>이것만 넣어도 이만큼이나 다 알아서 가져오네?</li>\n</ul>\n</li>\n<li>\n<p><strong>자동 설정</strong></p>\n<ul>\n<li>@EnableAutoConfiguration이 뭘 해주는지 알겠어.</li>\n</ul>\n</li>\n<li>\n<p>내장 웹 서버</p>\n<ul>\n<li>아 스프링 부트가 서버가 아니라 내장 서버를 실행하는 거군.</li>\n</ul>\n</li>\n<li>\n<p>독립적으로 실행 가능한 JAR</p>\n<ul>\n<li>spring-boot-maven 플러그인이 이런걸 해주는구나..</li>\n</ul>\n</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 시작하기","path":"/01-springboot-stater/","date":"7. July 2020","timeToRead":1,"description":" 'Springboot 시작하기'의 첫번째 게시글입니다. ","content":"<h1 id=\"springboot-시작하기\"><a href=\"#springboot-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 시작하기</h1>\n<br/>\n<h2 id=\"개발환경-세팅하기\"><a href=\"#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>개발환경 세팅하기</h2>\n<h3 id=\"brew-download\"><a href=\"#brew-download\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>brew download</h3>\n<pre class=\"language-shell\"><code class=\"language-shell\">/bin/bash -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class=\"token variable\">)</span></span>\"</span></code></pre>\n<h3 id=\"maven-download\"><a href=\"#maven-download\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>maven download</h3>\n<pre class=\"language-shell\"><code class=\"language-shell\">brew <span class=\"token function\">install</span> maven</code></pre>\n<p>maven 설치</p>\n<h3 id=\"java-download\"><a href=\"#java-download\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>java download</h3>\n<pre class=\"language-shell\"><code class=\"language-shell\">brew cask <span class=\"token function\">install</span> java</code></pre>\n<p>Oracle에 들어갈 필요 없이 mac 유저라면 편하게 사용가능</p>\n<br/>\n<h2 id=\"시작하기\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>시작하기</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위는 Application.java</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#getting-started-maven-installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#getting-started-maven-installation</a></p>\n<h2 id=\"springboot-project-만드는-방법\"><a href=\"#springboot-project-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot Project 만드는 방법</h2>\n<p>스프링부트 프로젝트를 생성하는 방법은 크게 두가지로 나눠집니다.</p>\n<ol>\n<li>Intellij에서 새로운 프로젝트를 생성하는 방법</li>\n<li>start.spring.io 에서 프로젝트를 만들어서 다운받는 방법\n<a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://start.spring.io/</a></li>\n</ol>\n<h2 id=\"springboot-project-구조\"><a href=\"#springboot-project-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot Project 구조</h2>\n<p>document의 위치는 다음과 같습니다.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-structuring-your-code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-structuring-your-code</a></p>\n<p>핵심은 default Package를 사용하는 것입니다.</p>\n<p>메인 프로젝트의 경우에는 메이븐 기본 프로젝트 구조와 동일합니다.</p>\n<ul>\n<li>소스 코드 (src\\main\\java)</li>\n<li>소스 리소스 (src\\main\\resource)</li>\n<li>테스트 코드 (src\\test\\java)</li>\n<li>테스트 리소스 (src\\test\\resource)</li>\n</ul>\n<p>메인 애플리케이션 위치합니다.</p>\n<ul>\n<li>기본 패키지</li>\n</ul>\n"}}]}}},"context":{}}