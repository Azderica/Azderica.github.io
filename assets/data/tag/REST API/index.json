{"hash":"fc6e29a67ddc38efe16f045a3de184da00f36a74","data":{"tag":{"title":"REST API","belongsTo":{"edges":[{"node":{"title":"[Springboot API] Springboot REST API : 이벤트 조회 및 수정 REST API 개발","path":"/springboot-api-springboot-rest-api-rest-api/","date":"20. September 2020","timeToRead":2,"description":" 'Springboot REST API'의 네번째 게시글입니다. ","content":"<h1 id=\"이벤트-조회-및-수정-rest-api-개발\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C-%EB%B0%8F-%EC%88%98%EC%A0%95-rest-api-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 조회 및 수정 REST API 개발</h1>\n<br/>\n<h2 id=\"이벤트-목록-조회-api-구현\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C-api-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 목록 조회 API 구현</h2>\n<h3 id=\"페이징-정렬-어떻게-하지\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%95-%EC%A0%95%EB%A0%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>페이징, 정렬 어떻게 하지?</h3>\n<ul>\n<li>스프링 데이터 JPA가 제공하는 Pageable</li>\n</ul>\n<h3 id=\"pageevent에-안에-들어있는-event-들은-리소스로-어떻게-변경할까\"><a href=\"#pageevent%EC%97%90-%EC%95%88%EC%97%90-%EB%93%A4%EC%96%B4%EC%9E%88%EB%8A%94-event-%EB%93%A4%EC%9D%80-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%80%EA%B2%BD%ED%95%A0%EA%B9%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Page<Event>에 안에 들어있는 Event 들은 리소스로 어떻게 변경할까?</h3>\n<ul>\n<li>하나씩 순회하면서 직접 EventResource로 맵핑을 시킬까..</li>\n<li>PagedResourceAssembler<T> 사용하기</li>\n</ul>\n<h3 id=\"테스트-할-때-pageable-파라미터-제공하는-방법\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EB%95%8C-pageable-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 때 Pageable 파라미터 제공하는 방법</h3>\n<ul>\n<li>page: 0부터 시작</li>\n<li>size: 기본값 20</li>\n<li>sort: property,property(,ASC|DESC)</li>\n</ul>\n<h3 id=\"테스트-할-것\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>Event 목록 Page 정보와 함께 받기</p>\n<ul>\n<li>content[0].id 확인</li>\n<li>pageable 경로 확인</li>\n</ul>\n</li>\n<li>\n<p>Sort과 Paging 확인</p>\n<ul>\n<li>30개를 만들고, 10개 사이즈로 두번째 페이지 조회하면 이전, 다음 페이지로 가는 링크가 있어야 한다.</li>\n<li>이벤트 이름순으로 정렬하기</li>\n<li>page 관련 링크</li>\n</ul>\n</li>\n<li>\n<p>Event를 EventResource로 변환해서 받기</p>\n<ul>\n<li>각 이벤트 마다 self</li>\n</ul>\n</li>\n<li>\n<p>링크 확인</p>\n<ul>\n<li>self</li>\n<li>profile</li>\n<li>(create)</li>\n</ul>\n</li>\n<li>문서화</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-조회-api\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A1%B0%ED%9A%8C-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 조회 API</h2>\n<h3 id=\"테스트-할-것-1\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<p>조회하는 이벤트가 있는 경우 이벤트 리소스 확인</p>\n<ul>\n<li>\n<p>링크</p>\n<ul>\n<li>self</li>\n<li>profile</li>\n<li>(update)</li>\n</ul>\n</li>\n<li>이벤트 데이터</li>\n</ul>\n<p>조회하는 이벤트가 없는 경우 404 응답 확인 </p>\n<br/>\n<h2 id=\"이벤트-수정-api\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%88%98%EC%A0%95-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 수정 API</h2>\n<h3 id=\"테스트-할-것-2\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<p>수정하려는 이벤트가 없는 경우 404 NOT_FOUND</p>\n<p>입력 데이터 (데이터 바인딩)가 이상한 경우에 400 BAD_REQUEST</p>\n<p>도메인 로직으로 데이터 검증 실패하면 400 BAD_REQUEST\n(권한이 충분하지 않은 경우에 403 FORBIDDEN)</p>\n<p>정상적으로 수정한 경우에 이벤트 리소스 응답</p>\n<ul>\n<li>200 OK</li>\n<li>링크</li>\n<li>수정한 이벤트 데이터</li>\n</ul>\n<br/>\n<h2 id=\"테스트-코드-리팩토링\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 코드 리팩토링</h2>\n<h3 id=\"여러-컨트롤러-간의-중복-코드-제거하기\"><a href=\"#%EC%97%AC%EB%9F%AC-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EA%B0%84%EC%9D%98-%EC%A4%91%EB%B3%B5-%EC%BD%94%EB%93%9C-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>여러 컨트롤러 간의 중복 코드 제거하기</h3>\n<ul>\n<li>클래스 상속을 사용하는 방법</li>\n<li>@Ignore 애노테이션으로 테스트로 간주되지 않도록 설정</li>\n</ul>\n"}},{"node":{"title":"[Springboot API] Springboot REST API : HATEOAS와 Self-Describtive Message 적용","path":"/springboot-api-springboot-rest-api-hateoas-self-describtive-message/","date":"14. September 2020","timeToRead":5,"description":" 'Springboot REST API'의 세번째 게시글입니다. ","content":"<h1 id=\"hateoas와-self-describtive-message\"><a href=\"#hateoas%EC%99%80-self-describtive-message\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HATEOAS와 Self-Describtive Message</h1>\n<br/>\n<h2 id=\"스프링-hateoas-소개\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-hateoas-%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 HATEOAS 소개</h2>\n<h3 id=\"스프링-hateoas\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-hateoas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 HATEOAS</h3>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-hateoas/docs/current/reference/html/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-hateoas/docs/current/reference/html/</a></li>\n<li>\n<p>링크 만드는 기능</p>\n<ul>\n<li>문자열 가지고 만들기</li>\n<li>컨트롤러와 메소드로 만들기</li>\n</ul>\n</li>\n<li>\n<p>리소스 만드는 기능</p>\n<ul>\n<li>리소스: 데이터 + 링크</li>\n</ul>\n</li>\n<li>\n<p>링크 찾아주는 기능</p>\n<ul>\n<li>Traverson</li>\n<li>LinkDiscoverers</li>\n</ul>\n</li>\n<li>\n<p>링크</p>\n<ul>\n<li>HREF</li>\n<li>\n<p>REL</p>\n<ul>\n<li>self</li>\n<li>profile</li>\n<li>update-event</li>\n<li>query-events</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://user-images.githubusercontent.com/42582516/93029741-704ef880-f658-11ea-8e27-81d626a05ed8.png\" alt=\"image\" style=\"zoom:30%;\" />\n<br/>\n<h2 id=\"스프링-hateoas-적용\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-hateoas-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 HATEOAS 적용</h2>\n<h3 id=\"evnetresource-만들기\"><a href=\"#evnetresource-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EvnetResource 만들기</h3>\n<ul>\n<li>\n<p>extends ResourceSupport의 문제</p>\n<ul>\n<li>@JsonUnwrapped로 해결</li>\n<li>extends Resource<T>로 해결</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"테스트-할-것\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>응답에 HATEOA와 profile 관련 링크가 있는지 확인.</p>\n<ul>\n<li>self (view)</li>\n<li>update (만든 사람은 수정할 수 있으니까)</li>\n<li>events (목록으로 가는 링크)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-rest-docs-소개\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs-%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs 소개</h2>\n<p><a href=\"https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/</a></p>\n<h3 id=\"rest-docs-코딩\"><a href=\"#rest-docs-%EC%BD%94%EB%94%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST Docs 코딩</h3>\n<ul>\n<li>andDo(document(“doc-name”, snippets))</li>\n<li>\n<p>snippets</p>\n<ul>\n<li>links()</li>\n<li>requestParameters() + parameterWithName()</li>\n<li>pathParameters() + parametersWithName()</li>\n<li>requestParts() + partWithname()</li>\n<li>requestPartBody()</li>\n<li>requestPartFields()</li>\n<li>requestHeaders() + headerWithName()</li>\n<li>requestFields() + fieldWithPath()</li>\n<li>responseHeaders() + headerWithName()</li>\n<li>responseFields() + fieldWithPath()</li>\n<li>...</li>\n</ul>\n</li>\n<li>Relaxed*</li>\n<li>\n<p>Processor</p>\n<ul>\n<li>preprocessRequest(prettyPrint())</li>\n<li>preprocessResponse(prettyPrint())</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"constraint\"><a href=\"#constraint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Constraint</h3>\n<p><a href=\"https://github.com/spring-projects/spring-restdocs/blob/v2.0.2.RELEASE/samples/rest-notes-spring-hateoas/src/test/java/com/example/notes/ApiDocumentation.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/spring-projects/spring-restdocs/blob/v2.0.2.RELEASE/samples/rest-notes-spring-hateoas/src/test/java/com/example/notes/ApiDocumentation.java</a></p>\n<br/>\n<h2 id=\"스프링-rest-docs-적용\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs 적용</h2>\n<h3 id=\"rest-docs-자동-설정\"><a href=\"#rest-docs-%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST Docs 자동 설정</h3>\n<ul>\n<li>@AutoConfigureRestDocs</li>\n</ul>\n<h3 id=\"restdocmockmvc-커스터마이징\"><a href=\"#restdocmockmvc-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RestDocMockMvc 커스터마이징</h3>\n<ul>\n<li>RestDocsMockMvcConfigurationCustomizer 구현한 빈 등록</li>\n<li>@TestConfiguration</li>\n</ul>\n<h3 id=\"테스트-할-것-1\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>API 문서 만들기</p>\n<ul>\n<li>요청 본문 문서화</li>\n<li>응답 본문 문서화</li>\n<li>\n<p>링크 문서화</p>\n<ul>\n<li>profile 링크 추가</li>\n</ul>\n</li>\n<li>응답 헤더 문서화</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-rest-docs-링크-req-res-필드와-헤더-문서화\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs-%EB%A7%81%ED%81%AC-req-res-%ED%95%84%EB%93%9C%EC%99%80-%ED%97%A4%EB%8D%94-%EB%AC%B8%EC%84%9C%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs: 링크, (Req, Res) 필드와 헤더 문서화</h2>\n<h3 id=\"요청-필드-문서화\"><a href=\"#%EC%9A%94%EC%B2%AD-%ED%95%84%EB%93%9C-%EB%AC%B8%EC%84%9C%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>요청 필드 문서화</h3>\n<ul>\n<li>requestFields() + fieldWithPath()</li>\n<li>responseFields() + fieldWithPath()</li>\n<li>requestHeaders() + headerWithName()</li>\n<li>responseHedaers() + headerWithName()</li>\n<li>links() + linkWithRel()</li>\n</ul>\n<h3 id=\"테스트-할-것-2\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>API 문서 만들기</p>\n<ul>\n<li>요청 본문 문서화</li>\n<li>응답 본문 문서화</li>\n<li>\n<p>링크 문서화</p>\n<ul>\n<li>self</li>\n<li>query-events</li>\n<li>update-event</li>\n<li>profile 링크 추가</li>\n</ul>\n</li>\n<li>요청 헤더 문서화</li>\n<li>요청 필드 문서화</li>\n<li>응답 헤더 문서화</li>\n<li>응답 필드 문서화</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"relaxed-접두어\"><a href=\"#relaxed-%EC%A0%91%EB%91%90%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Relaxed 접두어</h3>\n<ul>\n<li>장점: 문서 일부분만 테스트 할 수 있다.</li>\n<li>단점: 정확한 문서를 생성하지 못한다.</li>\n</ul>\n<br/>\n<h2 id=\"스프링-rest-docs-문서-빌드\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs-%EB%AC%B8%EC%84%9C-%EB%B9%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs 문서 빌드</h2>\n<h3 id=\"스프링-rest-docs\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-docs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST Docs</h3>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/</a></li>\n<li>pom.xml에 메이븐 플러그인 설정</li>\n</ul>\n<pre><code class=\"language-xml\">            &#x3C;plugin>\n                &#x3C;groupId>org.asciidoctor&#x3C;/groupId>\n                &#x3C;artifactId>asciidoctor-maven-plugin&#x3C;/artifactId>\n                &#x3C;version>1.5.3&#x3C;/version>\n                &#x3C;executions>\n                    &#x3C;execution>\n                        &#x3C;id>generate-docs&#x3C;/id>\n                        &#x3C;phase>prepare-package&#x3C;/phase>\n                        &#x3C;goals>\n                            &#x3C;goal>process-asciidoc&#x3C;/goal>\n                        &#x3C;/goals>\n                        &#x3C;configuration>\n                            &#x3C;backend>html&#x3C;/backend>\n                            &#x3C;doctype>book&#x3C;/doctype>\n                        &#x3C;/configuration>\n                    &#x3C;/execution>\n                &#x3C;/executions>\n                &#x3C;dependencies>\n                    &#x3C;dependency>\n                        &#x3C;groupId>org.springframework.restdocs&#x3C;/groupId>\n                        &#x3C;artifactId>spring-restdocs-asciidoctor&#x3C;/artifactId>\n                        &#x3C;version>2.0.2.RELEASE&#x3C;/version>\n                    &#x3C;/dependency>\n                &#x3C;/dependencies>\n            &#x3C;/plugin>\n            &#x3C;plugin>\n                &#x3C;artifactId>maven-resources-plugin&#x3C;/artifactId>\n                &#x3C;version>2.7&#x3C;/version>\n                &#x3C;executions>\n                    &#x3C;execution>\n                        &#x3C;id>copy-resources&#x3C;/id>\n                        &#x3C;phase>prepare-package&#x3C;/phase>\n                        &#x3C;goals>\n                            &#x3C;goal>copy-resources&#x3C;/goal>\n                        &#x3C;/goals>\n                        &#x3C;configuration>\n                            &#x3C;outputDirectory>\n                                ${project.build.outputDirectory}/static/docs\n                            &#x3C;/outputDirectory>\n                            &#x3C;resources>\n                                &#x3C;resource>\n                                    &#x3C;directory>\n                                        ${project.build.directory}/generated-docs\n                                    &#x3C;/directory>\n                                &#x3C;/resource>\n                            &#x3C;/resources>\n                        &#x3C;/configuration>\n                    &#x3C;/execution>\n                &#x3C;/executions>\n            &#x3C;/plugin>\n</code></pre>\n<ul>\n<li>\n<p>템플릿 파일 추가</p>\n<ul>\n<li>src/main/asciidoc/index.adoc</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"문서-생성하기\"><a href=\"#%EB%AC%B8%EC%84%9C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문서 생성하기</h3>\n<ul>\n<li>\n<p>mvn package</p>\n<ul>\n<li>test</li>\n<li>prepare-package :: process-asciidoc</li>\n<li>prepare-package :: copy-resources</li>\n</ul>\n</li>\n<li>\n<p>문서 확인</p>\n<ul>\n<li>/docs/index.html</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"테스트-할-것-3\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>API 문서 만들기</p>\n<ul>\n<li>요청 본문 문서화</li>\n<li>응답 본문 문서화</li>\n<li>\n<p>링크 문서화</p>\n<ul>\n<li>self</li>\n<li>query-events</li>\n<li>update-event</li>\n<li>profile 링크 추가</li>\n</ul>\n</li>\n<li>요청 헤더 문서화</li>\n<li>요청 필드 문서화</li>\n<li>응답 헤더 문서화</li>\n<li>응답 필드 문서화</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"postgresql-적용\"><a href=\"#postgresql-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PostgreSQL 적용</h2>\n<p>테스트 할 때는 계속 H2를 사용해도 좋지만 애플리케이션 서버를 실행할 때 PostgreSQL을 사용하도록 변경하자.</p>\n<p>/scripts.md 참고</p>\n<ol>\n<li>PostgreSQL 드라이버 의존성 추가</li>\n</ol>\n<pre><code class=\"language-xml\">&#x3C;dependency>\n    &#x3C;groupId>org.postgresql&#x3C;/groupId>\n    &#x3C;artifactId>postgresql&#x3C;/artifactId>\n&#x3C;/dependency>\n</code></pre>\n<ol start=\"2\">\n<li>도커로 PostgreSQL 컨테이너 실행</li>\n</ol>\n<pre><code class=\"language-bash\">docker run --name ndb -p 5432:5432 -e POSTGRES_PASSWORD=pass -d postgres\n</code></pre>\n<ol start=\"3\">\n<li>도커 컨테이너에 들어가보기</li>\n</ol>\n<pre><code class=\"language-bash\">docker exec -i -t ndb bash\nsu - postgres\npsql -d postgres -U postgres\n\\l\n\\dt\n</code></pre>\n<ol start=\"4\">\n<li>데이터소스 설정</li>\n</ol>\n<pre><code class=\"language-xml\">application.properties\nspring.datasource.username=postgres\nspring.datasource.password=pass\nspring.datasource.url=jdbc:postgresql://localhost:5432/postgres\nspring.datasource.driver-class-name=org.postgresql.Driver\n</code></pre>\n<ol start=\"5\">\n<li>하이버네이트 설정</li>\n</ol>\n<p><strong>application.properties</strong></p>\n<pre><code class=\"language-xml\">spring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true\nspring.jpa.properties.hibernate.format_sql=true\nlogging.level.org.hibernate.SQL=DEBUG\nlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE\n</code></pre>\n<h3 id=\"애플리케이션-설정과-테스트-설정-중복-어떻게-줄일-것인가\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EC%A0%95%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95-%EC%A4%91%EB%B3%B5-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A4%84%EC%9D%BC-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>애플리케이션 설정과 테스트 설정 중복 어떻게 줄일 것인가?</h3>\n<ul>\n<li>프로파일과 @ActiveProfiles 활용</li>\n</ul>\n<p><strong>application-test.properties</strong></p>\n<pre><code class=\"language-xml\">spring.datasource.username=sa\nspring.datasource.password=\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driver-class-name=org.h2.Driver\n\nspring.datasource.hikari.jdbc-url=jdbc:h2:mem:testdb\n\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect\n</code></pre>\n<br/>\n<h2 id=\"인덱스-핸들러-만들기\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%95%B8%EB%93%A4%EB%9F%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인덱스 핸들러 만들기</h2>\n<h3 id=\"인덱스-핸들러\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%95%B8%EB%93%A4%EB%9F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인덱스 핸들러</h3>\n<ul>\n<li>다른 리소스에 대한 링크 제공</li>\n<li>문서화</li>\n</ul>\n<pre><code class=\"language-java\">@GetMapping(\"/api\")\n    public ResourceSupport root() {\n        ResourceSupport index = new ResourceSupport();\n        index.add(linkTo(EventController.class).withRel(\"events\"));\n        return index;\n    }\n</code></pre>\n<h3 id=\"테스트-컨트롤러-리팩토링\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 컨트롤러 리팩토링</h3>\n<ul>\n<li>중복 코드 제거</li>\n</ul>\n<h3 id=\"에러-리소스\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%A6%AC%EC%86%8C%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>에러 리소스</h3>\n<ul>\n<li>인덱스로 가는 링크 제공</li>\n</ul>\n"}},{"node":{"title":"[Springboot API] Springboot REST API : 이벤트 생성 API 개발","path":"/springboot-api-springboot-rest-api-api/","date":"10. September 2020","timeToRead":6,"description":" 'Springboot REST API'의 두번째 게시글입니다. ","content":"<h1 id=\"이벤트-생성-api-개발\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 개발</h1>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--이벤트-api-테스트-클래스-생성\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EC%9D%B4%EB%B2%A4%ED%8A%B8-api-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 이벤트 API 테스트 클래스 생성</h2>\n<h3 id=\"스프링-부트-슬라이스-테스트\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8A%AC%EB%9D%BC%EC%9D%B4%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 슬라이스 테스트</h3>\n<ul>\n<li>\n<p>@WebMvcTest</p>\n<ul>\n<li>MockMvc 빈을 자동 설정 해준다. 따라서 그냥 가져와서 쓰면 됨.</li>\n<li>웹 관련 빈만 등록해 준다. (슬라이스)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mockmvc스프링\"><a href=\"#mockmvc%EC%8A%A4%ED%94%84%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MockMvc스프링</h3>\n<ul>\n<li>MVC 테스트 핵심 클래스</li>\n<li>웹 서버를 띄우지 않고도 스프링 MVC (DispatcherServlet)가 요청을 처리하는 과정을 확인할 수 있기 때문에 컨트롤러 테스트용으로 자주 쓰임.</li>\n</ul>\n<h3 id=\"테스트-할-것입력\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83%EC%9E%85%EB%A0%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것입력</h3>\n<ul>\n<li>\n<p>값들을 전달하면 JSON 응답으로 201이 나오는지 확인.</p>\n<ul>\n<li>Location 헤더에 생성된 이벤트를 조회할 수 있는 URI 담겨 있는지 확인.</li>\n<li>id는 DB에 들어갈 때 자동생성된 값으로 나오는지 확인</li>\n</ul>\n</li>\n<li>\n<p>입력값으로 누가 id나 eventStatus, offline, free 이런 데이터까지 같이 주면?</p>\n<ul>\n<li>Bad_Request로 응답 vs <strong>받기로 한 값 이외는 무시</strong></li>\n</ul>\n</li>\n<li>\n<p>입력 데이터가 이상한 경우 Bad_Request로 응답</p>\n<ul>\n<li>입력값이 이상한 경우 에러</li>\n<li>비즈니스 로직으로 검사할 수 있는 에러</li>\n<li>에러 응답 메시지에 에러에 대한 정보가 있어야 한다.</li>\n</ul>\n</li>\n<li>\n<p>비즈니스 로직 적용 됐는지 응답 메시지 확인</p>\n<ul>\n<li>offline과 free 값 확인</li>\n</ul>\n</li>\n<li>\n<p>응답에 HATEOA와 profile 관련 링크가 있는지 확인.</p>\n<ul>\n<li>self (view)</li>\n<li>update (만든 사람은 수정할 수 있으니까)</li>\n<li>events (목록으로 가는 링크)</li>\n</ul>\n</li>\n<li>\n<p>API 문서 만들기</p>\n<ul>\n<li>요청 문서화</li>\n<li>응답 문서화</li>\n<li>링크 문서화</li>\n<li>profile 링크 추가</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--201-응답-받기\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--201-%EC%9D%91%EB%8B%B5-%EB%B0%9B%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 201 응답 받기</h2>\n<h3 id=\"restcontroller\"><a href=\"#restcontroller\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@RestController</h3>\n<ul>\n<li>@ResponseBody를 모든 메소드에 적용한 것과 동일하다.</li>\n</ul>\n<h3 id=\"responseentity를-사용하는-이유\"><a href=\"#responseentity%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ResponseEntity를 사용하는 이유</h3>\n<ul>\n<li>응답 코드, 헤더, 본문 모두 다루기 편한 API</li>\n</ul>\n<h3 id=\"location-uri-만들기\"><a href=\"#location-uri-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Location URI 만들기</h3>\n<ul>\n<li>HATEOS가 제공하는 linkTo(), methodOn() 사용</li>\n</ul>\n<h3 id=\"객체를-json으로-변환\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-json%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체를 JSON으로 변환</h3>\n<ul>\n<li>ObjectMapper 사용</li>\n</ul>\n<h3 id=\"테스트-할-것\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력값들을 전달하면 JSON 응답으로 201이 나오는지 확인.</p>\n<ul>\n<li>Location 헤더에 생성된 이벤트를 조회할 수 있는 URI 담겨 있는지 확인.</li>\n<li>id는 DB에 들어갈 때 자동생성된 값으로 나오는지 확인</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--eventrepository-구현\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--eventrepository-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : EventRepository 구현</h2>\n<h3 id=\"스프링-데이터-jpa\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 데이터 JPA</h3>\n<ul>\n<li>JpaRepository 상속 받아 만들기</li>\n</ul>\n<h3 id=\"enum을-jpa-맵핑시-주의할-것\"><a href=\"#enum%EC%9D%84-jpa-%EB%A7%B5%ED%95%91%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EA%B2%83\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum을 JPA 맵핑시 주의할 것</h3>\n<ul>\n<li>@Enumerated(EnumType.STRING)</li>\n</ul>\n<h3 id=\"mockbean\"><a href=\"#mockbean\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@MockBean</h3>\n<ul>\n<li>Mockito를 사용해서 mock 객체를 만들고 빈으로 등록해 줌.</li>\n<li>(주의) 기존 빈을 테스트용 빈이 대체 한다.</li>\n</ul>\n<h3 id=\"테스트-할-것-1\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력값들을 전달하면 JSON 응답으로 201이 나오는지 확인.</p>\n<ul>\n<li>Location 헤더에 생성된 이벤트를 조회할 수 있는 URI 담겨 있는지 확인.</li>\n<li>id는 DB에 들어갈 때 자동생성된 값으로 나오는지 확인</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--입력값-제한하기\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 입력값 제한하기</h2>\n<h3 id=\"입력값-제한\"><a href=\"#%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%A0%9C%ED%95%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>입력값 제한</h3>\n<ul>\n<li>id 또는 입력 받은 데이터로 계산해야 하는 값들은 입력을 받지 않아야 한다.</li>\n<li>EventDto 적용</li>\n</ul>\n<h3 id=\"dto---도메인-객체로-값-복사\"><a href=\"#dto---%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EA%B0%92-%EB%B3%B5%EC%82%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DTO -> 도메인 객체로 값 복사</h3>\n<ul>\n<li>ModelMapper</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;dependency>\n            &#x3C;groupId>org.modelmapper&#x3C;/groupId>\n            &#x3C;artifactId>modelmapper&#x3C;/artifactId>\n            &#x3C;version>2.3.1&#x3C;/version>\n&#x3C;/dependency>\n</code></pre>\n<h3 id=\"통합-테스트로-전환\"><a href=\"#%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EC%A0%84%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>통합 테스트로 전환</h3>\n<ul>\n<li>\n<p>@WebMvcTest 빼고 다음 애노테이션 추가</p>\n<ul>\n<li>@SpringBootTest</li>\n<li>@AutoConfigureMockMvc</li>\n</ul>\n</li>\n<li>Repository @MockBean 코드 제거</li>\n</ul>\n<h3 id=\"테스트-할-것-2\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력값으로 누가 id나 eventStatus, offline, free 이런 데이터까지 같이 주면?</p>\n<ul>\n<li>Bad_Request로 응답 vs 받기로 한 값 이외는 무시  </li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--입력값-이외에-에러-발생\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%9D%B4%EC%99%B8%EC%97%90-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 입력값 이외에 에러 발생</h2>\n<h3 id=\"objectmapper-커스터마이징\"><a href=\"#objectmapper-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ObjectMapper 커스터마이징</h3>\n<ul>\n<li>spring.jackson.deserialization.fail-on-unknown-properties=true</li>\n</ul>\n<h3 id=\"테스트-할-것-3\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력값으로 누가 id나 eventStatus, offline, free 이런 데이터까지 같이 주면?</p>\n<ul>\n<li>Bad_Request로 응답 vs 받기로 한 값 이외는 무시</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--bad-request-처리하기\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--bad-request-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : Bad Request 처리하기</h2>\n<h3 id=\"valid와-bindingresult-또는-errors\"><a href=\"#valid%EC%99%80-bindingresult-%EB%98%90%EB%8A%94-errors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@Valid와 BindingResult (또는 Errors)</h3>\n<ul>\n<li>BindingResult는 항상 @Valid 바로 다음 인자로 사용해야 함. (스프링 MVC)</li>\n<li>@NotNull, @NotEmpty, @Min, @Max, ... 사용해서 입력값 바인딩할 때 에러 확인할 수 있음</li>\n</ul>\n<h3 id=\"도메인-validator-만들기\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-validator-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>도메인 Validator 만들기</h3>\n<ul>\n<li>Validator 인터페이스 없이 만들어도 상관없음</li>\n</ul>\n<h3 id=\"테스트-설명-용-애노테이션-만들기\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EB%AA%85-%EC%9A%A9-%EC%95%A0%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 설명 용 애노테이션 만들기</h3>\n<ul>\n<li>@Target, @Retention</li>\n</ul>\n<h3 id=\"테스트-할-것-4\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력 데이터가 이상한 경우 Bad_Request로 응답</p>\n<ul>\n<li>입력값이 이상한 경우 에러</li>\n<li>비즈니스 로직으로 검사할 수 있는 에러</li>\n<li>에러 응답 메시지에 에러에 대한 정보가 있어야 한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--bad-request-응답-본문-만들기\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--bad-request-%EC%9D%91%EB%8B%B5-%EB%B3%B8%EB%AC%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : Bad Request 응답 본문 만들기</h2>\n<h3 id=\"커스텀-json-serializer-만들기\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-json-serializer-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀 JSON Serializer 만들기</h3>\n<ul>\n<li>extends JsonSerializer<T> (Jackson JSON 제공)</li>\n<li>@JsonComponent (스프링 부트 제공)</li>\n</ul>\n<h3 id=\"bindingerror\"><a href=\"#bindingerror\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>BindingError</h3>\n<ul>\n<li>FieldError 와 GlobalError (ObjectError)가 있음</li>\n<li>objectName</li>\n<li>defaultMessage</li>\n<li>code</li>\n<li>field</li>\n<li>rejectedValue</li>\n</ul>\n<h3 id=\"테스트-할-것-5\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>입력 데이터가 이상한 경우 Bad_Request로 응답</p>\n<ul>\n<li>입력값이 이상한 경우 에러</li>\n<li>비즈니스 로직으로 검사할 수 있는 에러</li>\n<li><strong>에러 응답 메시지에 에러에 대한 정보가 있어야 한다.</strong></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--비즈니스-로직-적용\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 비즈니스 로직 적용</h2>\n<h3 id=\"테스트-할-것-6\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EA%B2%83-6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 할 것</h3>\n<ul>\n<li>\n<p>비즈니스 로직 적용 됐는지 응답 메시지 확인</p>\n<ul>\n<li>offline과 free 값 확인</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"이벤트-생성-api-구현--매개변수를-이용한-테스트\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84--%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 생성 API 구현 : 매개변수를 이용한 테스트</h2>\n<h3 id=\"테스트-코드-리팩토링\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 코드 리팩토링</h3>\n<ul>\n<li>테스트에서 중복 코드 제거</li>\n<li>매개변수만 바꿀 수 있으면 좋겠는데?</li>\n<li>JUnitParams</li>\n</ul>\n<h3 id=\"junitparams\"><a href=\"#junitparams\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnitParams</h3>\n<ul>\n<li><a href=\"https://github.com/Pragmatists/JUnitParams\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Pragmatists/JUnitParams</a></li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;!-- https://mvnrepository.com/artifact/pl.pragmatists/JUnitParams -->\n&#x3C;dependency>\n    &#x3C;groupId>pl.pragmatists&#x3C;/groupId>\n    &#x3C;artifactId>JUnitParams&#x3C;/artifactId>\n    &#x3C;version>1.1.1&#x3C;/version>\n    &#x3C;scope>test&#x3C;/scope>\n&#x3C;/dependency>\n</code></pre>\n"}},{"node":{"title":"[Springboot API] Springboot REST API : 시작하기","path":"/springboot-api-springboot-rest-api/","date":"7. September 2020","timeToRead":8,"description":" 'Springboot REST API'의 첫번째 게시글입니다. ","content":"<h1 id=\"springboot-api-시작하기\"><a href=\"#springboot-api-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot API 시작하기.</h1>\n<p><a href=\"https://drive.google.com/file/d/0B-4fgYvMaU-zYVlVUzB2ZnpuRU8ySFVpV2h3ZjRmd096azFN/view\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">강의 자료</a></p>\n<p><a href=\"https://docs.google.com/document/d/1GFo3W6XxqhxDVVqxiSEtqkuVCX93Tdb3xzINRtTIx10/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">수업 자료</a></p>\n<p><a href=\"https://gitlab.com/whiteship/natural\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드</a></p>\n<br/>\n<h2 id=\"rest-api\"><a href=\"#rest-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST API</h2>\n<h3 id=\"api\"><a href=\"#api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API</h3>\n<ul>\n<li><strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface</li>\n</ul>\n<h3 id=\"rest\"><a href=\"#rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST</h3>\n<ul>\n<li><strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer</li>\n<li>인터넷 상의 시스템 간의 상호 운용성(interoperability)을 제공하는 방법중 하나</li>\n<li>시스템 제각각의 독립적인 진화를 보장하기 위한 방법</li>\n<li>REST API: REST 아키텍처 스타일을 따르는 API</li>\n</ul>\n<h3 id=\"rest-아키텍처-스타일-발표-영상-11분\"><a href=\"#rest-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B0%9C%ED%91%9C-%EC%98%81%EC%83%81-11%EB%B6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST 아키텍처 스타일 (<a href=\"https://www.youtube.com/watch?v=RP_f5dMoHFc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">발표 영상</a> 11분)</h3>\n<ul>\n<li>Client-Server</li>\n<li>Stateless</li>\n<li>Cache</li>\n<li><strong>Uniform Interface</strong></li>\n<li>Layered System</li>\n<li>Code-On-Demand (optional)</li>\n</ul>\n<h3 id=\"uniform-interface-발표-영상-11분-40초\"><a href=\"#uniform-interface-%EB%B0%9C%ED%91%9C-%EC%98%81%EC%83%81-11%EB%B6%84-40%EC%B4%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Uniform Interface (발표 영상 11분 40초)</h3>\n<details>\n<summary>상세</summary>\n<div markdown=\"1\">\n<p>Uniform Interface(일관된 인터페이스)란, Resource(URI)에 대한 요청을 통일되고, 한정적으로 수행하는 아키텍처 스타일을 의미합니다. 이것은 요청을 하는 Client가 플랫폼(Android, Ios, Jsp 등) 에 무관하며, 특정 언어나 기술에 종속받지 않는 특징을 의미합니다. 이러한 특징 덕분에 Rest API는 HTTP를 사용하는 모든 플랫폼에서 요청가능하며, Loosely Coupling(느슨한 결함) 형태를 갖게 되었습니다.</p>\n</div>\n</details>\n<ul>\n<li>\n<p>Identification of resources</p>\n<ul>\n<li>리소스가 URI로 식별되면 된다.</li>\n</ul>\n</li>\n<li>\n<p>manipulation of resources through represenations</p>\n<ul>\n<li>리소스를 요청할 때 서버는 리소스를 표현하여 응답한다.</li>\n<li>대표적인 API 예로는 HTML, JSON, XML이 있다. </li>\n<li>\n<p>콘텐츠 협상</p>\n<ul>\n<li>클라이언트가 클라이언트의 요구에 맞는 특정 표현을 요청할 수 있다. </li>\n<li>예를 들어 클라이언트는 리소스의 JSON 표현 또는 리소스의 XML 표현을 요청할 수 있다. </li>\n<li>서버는 그렇게 할 수 있는 경우 이 표현을 제공할 수 있다.</li>\n</ul>\n</li>\n<li>API에서 콘텐츠 협상을 사용하여 여러 클라이언트가 동일한 URL에서 다른 리소스 표현에 액세스할 수 있도록 할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>self-descrive messages</strong></p>\n<ul>\n<li>클라이언트가 resource를 가지고 어떤 일을 수행할때 필요한 모든 데이터가 응답되어야함.</li>\n<li>보통 안에 profile(docs) 링크를 명시하는식으로 구현.</li>\n</ul>\n</li>\n<li>\n<p><strong>hypermedia as the engine of appliaction state (HATEOAS)</strong></p>\n<ul>\n<li>거의 모든 rest api에서 지키지못함. </li>\n<li>어플리케이션의 상태가 하이퍼링크를 통해서 항상 전이가 되어야함. </li>\n<li>스프링에서는 spring-boot-hateoas 패키지로 좀 편하게 구현 가능.</li>\n</ul>\n</li>\n</ul>\n<details>\n<summary>좋은 API 예시(github API)</summary>\n<div markdown=\"1\">\n<pre><code class=\"language-xml\">{\n  \"timeline_url\": \"https://github.com/timeline\",\n  \"user_url\": \"https://github.com/{user}\",\n  \"current_user_public_url\": \"https://github.com/octocat\",\n  \"current_user_url\": \"https://github.com/octocat.private?token=abc123\",\n  \"current_user_actor_url\": \"https://github.com/octocat.private.actor?token=abc123\",\n  \"current_user_organization_url\": \"\",\n  \"current_user_organization_urls\": [\n    \"https://github.com/organizations/github/octocat.private.atom?token=abc123\"\n  ],\n  \"security_advisories_url\": \"https://github.com/security-advisories\",\n  \"_links\": {\n    \"timeline\": {\n      \"href\": \"https://github.com/timeline\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"user\": {\n      \"href\": \"https://github.com/{user}\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"current_user_public\": {\n      \"href\": \"https://github.com/octocat\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"current_user\": {\n      \"href\": \"https://github.com/octocat.private?token=abc123\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"current_user_actor\": {\n      \"href\": \"https://github.com/octocat.private.actor?token=abc123\",\n      \"type\": \"application/atom+xml\"\n    },\n    \"current_user_organization\": {\n      \"href\": \"\",\n      \"type\": \"\"\n    },\n    \"current_user_organizations\": [\n      {\n        \"href\": \"https://github.com/organizations/github/octocat.private.atom?token=abc123\",\n        \"type\": \"application/atom+xml\"\n      }\n    ],\n    \"security_advisories\": {\n      \"href\": \"https://github.com/security-advisories\",\n      \"type\": \"application/atom+xml\"\n    }\n  }\n}\n</code></pre>\n</div>\n</details>\n<h3 id=\"두-문제를-좀-더-자세히-살펴보자-발표-영상-37분-50초\"><a href=\"#%EB%91%90-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%A2%80-%EB%8D%94-%EC%9E%90%EC%84%B8%ED%9E%88-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90-%EB%B0%9C%ED%91%9C-%EC%98%81%EC%83%81-37%EB%B6%84-50%EC%B4%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>두 문제를 좀 더 자세히 살펴보자. (발표 영상 37분 50초)</h3>\n<ul>\n<li>\n<p>Self-descriptive message</p>\n<ul>\n<li>메시지 스스로 메시지에 대한 설명이 가능해야 한다.</li>\n<li>서버가 변해서 메시지가 변해도 클라이언트는 그 메시지를 보고 해석이 가능하다.</li>\n<li>확장 가능한 커뮤니케이션</li>\n</ul>\n</li>\n<li>\n<p>HATEOAS</p>\n<ul>\n<li>하이퍼미디어(링크)를 통해 애플리케이션 상태 변화가 가능해야 한다.</li>\n<li>링크 정보를 동적으로 바꿀 수 있다. (Versioning 할 필요 없이!)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"self-descriptive-message-해결-방법\"><a href=\"#self-descriptive-message-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Self-descriptive message 해결 방법</h3>\n<ul>\n<li>방법 1: 미디어 타입을 정의하고 IANA에 등록하고 그 미디어 타입을 리소스 리턴할 때 Content-Type으로 사용한다.</li>\n<li>\n<p>방법 2: profile 링크 헤더를 추가한다. (발표 영상 41분 50초)</p>\n<ul>\n<li><a href=\"http://test.greenbytes.de/tech/tc/httplink/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">브라우저들이 아직 스팩 지원을 잘 안해</a></li>\n<li>대안으로 <a href=\"http://stateless.co/hal_specification.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HAL</a>의 링크 데이터에 <a href=\"https://tools.ietf.org/html/draft-wilde-profile-link-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">profile 링크</a> 추가</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hateoas-해결-방법\"><a href=\"#hateoas-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HATEOAS 해결 방법</h3>\n<ul>\n<li>\n<p>방법1: 데이터에 링크 제공</p>\n<ul>\n<li>링크를 어떻게 정의할 것인가? HAL</li>\n</ul>\n</li>\n<li>방법2: 링크 헤더나 Location을 제공</li>\n</ul>\n<br/>\n<h2 id=\"event-rest-api\"><a href=\"#event-rest-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>“Event” REST API</h2>\n<blockquote>\n<p><a href=\"https://gitlab.com/whiteship/natural\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">참고 자료</a></p>\n</blockquote>\n<p>이벤트 등록, 조회 및 수정 API</p>\n<h3 id=\"get-apievents\"><a href=\"#get-apievents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GET /api/events</h3>\n<h4 id=\"이벤트-목록-조회-rest-api-로그인-안-한-상태\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C-rest-api-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%95%88-%ED%95%9C-%EC%83%81%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 목록 조회 REST API (로그인 안 한 상태)</h4>\n<ul>\n<li>\n<p>응답에 보여줘야 할 데이터</p>\n<ul>\n<li>이벤트 목록</li>\n<li>\n<p>링크</p>\n<ul>\n<li>self</li>\n<li>profile: 이벤트 목록 조회 API 문서로 링크</li>\n<li>get-an-event: 이벤트 하나 조회하는 API 링크</li>\n<li>next: 다음 페이지 (optional)</li>\n<li>prev: 이전 페이지 (optional)</li>\n</ul>\n</li>\n<li>\n<p>문서?</p>\n<ul>\n<li>스프링 REST Docs로 만들 예정</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"이벤트-목록-조회-rest-api-로그인-한-상태\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C-rest-api-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%95%9C-%EC%83%81%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 목록 조회 REST API (로그인 한 상태)</h4>\n<ul>\n<li>\n<p>응답에 보여줘야 할 데이터</p>\n<ul>\n<li>이벤트 목록</li>\n<li>\n<p>링크</p>\n<ul>\n<li>self</li>\n<li>profile: 이벤트 목록 조회 API 문서로 링크</li>\n<li>get-an-event: 이벤트 하나 조회하는 API 링크</li>\n<li><strong>create-new-event: 이벤트를 생성할 수 있는 API 링크</strong></li>\n<li>next: 다음 페이지 (optional)</li>\n<li>prev: 이전 페이지 (optional)</li>\n</ul>\n</li>\n<li>\n<p>로그인 한 상태???? (stateless라며..)</p>\n<ul>\n<li>아니, 사실은 Bearer 헤더에 유효한 AccessToken이 들어있는 경우!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"post-apievents\"><a href=\"#post-apievents\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POST /api/events</h3>\n<ul>\n<li>이벤트 생성</li>\n</ul>\n<h3 id=\"get-apieventsid\"><a href=\"#get-apieventsid\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GET /api/events/{id}</h3>\n<ul>\n<li>이벤트 하나 조회</li>\n</ul>\n<h3 id=\"put-apieventsid\"><a href=\"#put-apieventsid\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PUT /api/events/{id}</h3>\n<ul>\n<li>이벤트 수정</li>\n</ul>\n<br/>\n<h2 id=\"events-api-사용-예제\"><a href=\"#events-api-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Events API 사용 예제</h2>\n<ol>\n<li>\n<p>(토큰 없이) 이벤트 목록 조회</p>\n<ul>\n<li>create 안 보임</li>\n</ul>\n</li>\n<li>access token 발급 받기 (A 사용자 로그인)</li>\n<li>\n<p>(유효한 A 토큰 가지고) 이벤트 목록 조회</p>\n<ul>\n<li>create event 보임</li>\n</ul>\n</li>\n<li>(유효한 A 토큰 가지고) 이벤트 만들기</li>\n<li>\n<p>(토큰 없이) 이벤트 조회</p>\n<ul>\n<li>update 링크 안 보임</li>\n</ul>\n</li>\n<li>\n<p>(유효한 A 토큰 가지고) 이벤트 조회</p>\n<ul>\n<li>update 링크 보임</li>\n</ul>\n</li>\n<li>access token 발급 받기 (B 사용자 로그인)</li>\n<li>\n<p>(유효한 B 토큰 가지고) 이벤트 조회</p>\n<ul>\n<li>update 안 보임</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"rest-api-테스트-클라이언트-애플리케이션\"><a href=\"#rest-api-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST API 테스트 클라이언트 애플리케이션</h3>\n<ul>\n<li>\n<p>크롬 플러그인</p>\n<ul>\n<li>Restlet</li>\n</ul>\n</li>\n<li>\n<p>애플리케이션</p>\n<ul>\n<li>Postman</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-부트-프로젝트-만들기\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 프로젝트 만들기</h2>\n<h3 id=\"추가할-의존성\"><a href=\"#%EC%B6%94%EA%B0%80%ED%95%A0-%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>추가할 의존성</h3>\n<ul>\n<li>Web</li>\n<li>JPA</li>\n<li>HATEOAS</li>\n<li>REST Docs</li>\n<li>H2</li>\n<li>PostgreSQL</li>\n<li>Lombok</li>\n</ul>\n<h3 id=\"자바-버전-11로-시작\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%B2%84%EC%A0%84-11%EB%A1%9C-%EC%8B%9C%EC%9E%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 버전 11로 시작</h3>\n<ul>\n<li>자바는 여전히 무료다.</li>\n</ul>\n<h3 id=\"스프링-부트-핵심-원리\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 핵심 원리</h3>\n<ul>\n<li>의존성 설정 (pom.xml)</li>\n<li>자동 설정 (@EnableAutoConfiguration)</li>\n<li>내장 웹 서버 (의존성과 자동 설정의 일부)</li>\n<li>독립적으로 실행 가능한 JAR (pom.xml의 플러그인)</li>\n</ul>\n<h2 id=\"event-생성-api-구현-비즈니스-로직\"><a href=\"#event-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event 생성 API 구현: 비즈니스 로직</h2>\n<h3 id=\"event-생성-api\"><a href=\"#event-%EC%83%9D%EC%84%B1-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event 생성 API</h3>\n<ul>\n<li>\n<p>다음의 입력 값을 받는다.</p>\n<ul>\n<li>name</li>\n<li>description</li>\n<li>beginEnrollmentDateTime</li>\n<li>closeEnrollmentDateTime</li>\n<li>beginEventDateTime</li>\n<li>endEventDateTime</li>\n<li>location (optional) 이게 없으면 온라인 모임</li>\n<li>basePrice (optional) </li>\n<li>maxPrice (optional)</li>\n<li>limitOfEnrollment</li>\n</ul>\n</li>\n</ul>\n<p>basePrice와 maxPrice 경우의 수와 각각의 로직\n| basePrice | maxPrice |                                                              |\n| --------- | -------- | ------------------------------------------------------------ |\n| 0         | 100      | 선착순 등록                                                  |\n| 0         | 0        | 무로                                                         |\n| 100       | 0        | 무제한 경매 (높은 금액 낸 사람이 등록)                       |\n| 100       | 200      | 제한가 선착순 등록<br /><br />처음부터 200을 낸 사람은 선 등록<br /><br />100을 내고 등록할 수 있으나 더 많이 낸 사람에 의해 밀려날 수 있음. |</p>\n<ul>\n<li>\n<p>결과값</p>\n<ul>\n<li>id</li>\n<li>name</li>\n<li>...</li>\n<li>eventStatus: DRAFT, PUBLISHED, ENROLLMENT_STARTED, ...</li>\n<li>offline</li>\n<li>free</li>\n<li>\n<p>_links</p>\n<ul>\n<li>profile (for the self-descriptive message)</li>\n<li>self </li>\n<li>publish</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"event-생성-api-구현-event-도메인-구현\"><a href=\"#event-%EC%83%9D%EC%84%B1-api-%EA%B5%AC%ED%98%84-event-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event 생성 API 구현: Event 도메인 구현</h2>\n<pre><code class=\"language-java\">public class Event {\n\n    private String name;\n    private String description;\n    private LocalDateTime beginEnrollmentDateTime;\n    private LocalDateTime closeEnrollmentDateTime;\n    private LocalDateTime beginEventDateTime;\n    private LocalDateTime endEventDateTime;\n    private String location; // (optional) 이게 없으면 온라인 모임\n    private int basePrice; // (optional)\n    private int maxPrice; // (optional)\n    private int limitOfEnrollment;\n\n}\n</code></pre>\n<p>추가 필드</p>\n<pre><code class=\"language-java\">    private Integer id;\n    private boolean offline;\n    private boolean free;\n    private EventStatus eventStatus = EventStatus.DRAFT;\n</code></pre>\n<p>EventStatus ENUM 추가</p>\n<pre><code class=\"language-java\">public enum EventStatus {\n\n    DRAFT, PUBLISHED, BEGAN_ENROLLMEND, CLOSED_ENROLLMENT, STARTED, ENDED\n\n}\n</code></pre>\n<p>롬복 애노테이션 추가</p>\n<pre><code class=\"language-java\">@Getter @Setter @EqualsAndHashCode(of = \"id\")\n@Builder @NoArgsConstructor @AllArgsConstructor\npublic class Event {\n</code></pre>\n<ul>\n<li>왜 @EqualsAndHasCode에서 of를 사용하는가</li>\n<li>왜 @Builder를 사용할 때 @AllArgsConstructor가 필요한가</li>\n<li>@Data를 쓰지 않는 이유</li>\n<li>애노테이션 줄일 수 없나</li>\n</ul>\n"}}]}}},"context":{}}