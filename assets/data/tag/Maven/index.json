{"hash":"2da2f9fb86556a6671af8373577c513293e504aa","data":{"tag":{"title":"Maven","belongsTo":{"edges":[{"node":{"title":"[Springboot] Maven과 Gradle로 바꾸기","path":"/02-springboot-gradle/","date":"23. October 2020","timeToRead":2,"description":" 지난 글에 이어Maven을 Gradle로 바꾸는 내용을 설명합니다. ","content":"<h1 id=\"maven에서-gradle로-변경하기\"><a href=\"#maven%EC%97%90%EC%84%9C-gradle%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Maven에서 Gradle로 변경하기.</h1>\n<p>이전글 : <a href=\"https://../backend/2020/10/14/backend-spring-maven-gradle-diff/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Maven과 Gradle의 차이</a></p>\n<p>바꿔야하는 지에 대해서는 각자 다양한 이유(성능 문제, 업무 요청, 등등) 다양한 이유가 있을 것으로 판단된다.</p>\n<p>그렇다면 실질적으로 어떻게 Maven 프로젝트를 Gradle로 바꿀 수 있을까?</p>\n<br/>\n<h2 id=\"순서\"><a href=\"#%EC%88%9C%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>순서</h2>\n<p>macOS를 대상으로 진행합니다. (windows는 다른 좋은글이 많아서...)</p>\n<h3 id=\"1-gradle-설치\"><a href=\"#1-gradle-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. gradle 설치</h3>\n<p>gradle 자동 설치 (수동 설치는 <a href=\"https://gradle.org/gradle-download/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gradle.org/gradle-download/</a>)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> gradle</code></pre>\n<h3 id=\"2-pomxml을-buildgradle로-변환\"><a href=\"#2-pomxml%EC%9D%84-buildgradle%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. pom.xml을 build.gradle로 변환</h3>\n<p>프로젝트 폴더에 있는 pom.xml을 build.gradle로 변환한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">gradle init --type pom</code></pre>\n<h3 id=\"3-buildgradle를-프로젝트에-맞춰-수정\"><a href=\"#3-buildgradle%EB%A5%BC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EB%A7%9E%EC%B6%B0-%EC%88%98%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. build.gradle를 프로젝트에 맞춰 수정</h3>\n<p>프로젝트 요구사항에 맞춰서 build.gradle 파일을 수정한다.</p>\n<p>mvnrepostiroy : <a href=\"https://mvnrepository.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mvnrepository.com/</a></p>\n<p>위 링크에서 필요한 파일을 받아서 수정하면 좋을 듯하다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>만약에 회사 업무가 아닌 오픈소스로 구성된 프로젝트라면 잘 진행될 것이다.</p>\n<p>회사 프로젝트의 경우에는 회사에서 사용하는 라이브러리나 플러그인이 다를 것이기 때문에 약간의 삽질이 필요한 듯하다.</p>\n<p>다음 글에서는 <code class=\"language-text\">build.gradle</code>에서 <code class=\"language-text\">compile</code>과 <code class=\"language-text\">implementation</code>의 차이에 대해서, 또한 다른 요소에 대한 분석 글을 작성해야겠다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://kimpaper.github.io/2016/07/14/gradle/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kimpaper.github.io/2016/07/14/gradle/</a></li>\n<li><a href=\"https://dynaticy.tistory.com/entry/Maven-Gradle-%EB%B3%80%ED%99%98-pomxml%EB%A1%9C-buildscript-%EB%A7%8C%EB%93%A4%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dynaticy.tistory.com/entry/Maven-Gradle-%EB%B3%80%ED%99%98-pomxml%EB%A1%9C-buildscript-%EB%A7%8C%EB%93%A4%EA%B8%B0</a></li>\n<li><a href=\"https://thecodinglog.github.io/gradle/2019/09/11/install-gradle-in-windows.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://thecodinglog.github.io/gradle/2019/09/11/install-gradle-in-windows.html</a></li>\n</ul>\n"}},{"node":{"title":"[Springboot] Maven과 Gradle의 차이","path":"/01-springboot-gradle/","date":"14. October 2020","timeToRead":5,"description":" Maven과 Gradle에 대한 차이에 대한 글입니다. ","content":"<h1 id=\"maven과-gradle\"><a href=\"#maven%EA%B3%BC-gradle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Maven과 Gradle.</h1>\n<p>최근 회사 업무를 진행하면서 Spring boot 프로젝트 중 하나를 maven에서 gradle로 수정해야하는 일이 발생했다.</p>\n<p>생각해보니, 둘이 다른 것은 알고 있었지만 어떻게 다른가에 대해서는 생각해본적이 없다.</p>\n<p>해당 프로젝트를 진행하면서 둘의 차이를 인지해볼려고 한다. 그리고 왜 바꿔야하는지를 알려고 한다.</p>\n<br/>\n<h2 id=\"maven과-gradle의-차이\"><a href=\"#maven%EA%B3%BC-gradle%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Maven과 Gradle의 차이</h2>\n<h3 id=\"maven\"><a href=\"#maven\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Maven</h3>\n<blockquote>\n<p>자바용 프로젝트 관리 도구, 아파치 Ant의 대안으로 만들어졌다.</p>\n</blockquote>\n<p>특징</p>\n<ul>\n<li>빌드를 쉽게할 수 있다.</li>\n<li><code class=\"language-text\">pom.xml</code>을 이용한 정형화된 빌드 시스템을 사용할 수 있다.</li>\n<li>뛰어난 프로젝트 정보를 제공한다</li>\n<li>개발 가이드 라인을 제공한다</li>\n<li>새로운 기능을 쉽게 설치할 수 있고 업데이트할 수 있다.</li>\n</ul>\n<h3 id=\"gradle\"><a href=\"#gradle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gradle</h3>\n<blockquote>\n<p>Groovy를 이용한 빌드 자동화 시스템이다. Maven 이후에 나왔다.</p>\n<p>Android의 OS 공식 빌드 도구로 사용됩니다.</p>\n</blockquote>\n<p>특징</p>\n<ul>\n<li>Ant처럼 유연한 범용 빌드 도구를 사용한다.</li>\n<li>Maven을 사용할 수 있는 변환 가능 컨벤션 프레임 워크입니다.</li>\n<li>멀티 프로젝트에 사용하기 좋습니다.</li>\n<li>Apache Ivy에 기반을 두어 강력한 의존성 관리를 제공합니다.</li>\n<li>Mavenrhk Ivy 레파지토리를 완전 지원합니다</li>\n<li>원격 저장소나 pom, ivy 파일 없이 연결되는 의존성을 관리하고 지원합니다,</li>\n<li>그루비 문법을 사용합니다.</li>\n<li>빌드를 설명하는 풍부한 도메인 모델을 사용합니다.</li>\n</ul>\n<h3 id=\"maven보다는-gradle을-선택하자\"><a href=\"#maven%EB%B3%B4%EB%8B%A4%EB%8A%94-gradle%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%98%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Maven보다는 Gradle을 선택하자.</h3>\n<p>Gradle이 시기적으로 늦게 나오게 되면서 사용성, 성능 등 뛰어난 스펙을 사용합니다.</p>\n<p>좋은 점을 나열한다면.</p>\n<ul>\n<li>\n<p>Maven처럼 Build라는 동적 요소를 XML을 사용하기에는 어려운 부분이 있습니다.</p>\n<ul>\n<li>설정 내용이 길어지고 가독성이 떨어집니다.</li>\n<li>의존관계가 복잡한 프로젝트 설정에는 부적절합니다.</li>\n<li>상속구조를 이용해 멀티 모듈을 구성해야합니다.</li>\n<li>특정 설정을 소수의 모듈에서 공유하기 위해서는 부모 프로젝트를 생성하여 상속해야합니다.</li>\n</ul>\n</li>\n<li>\n<p>Gradle은 Groovy를 사용하기 때문에, 동적인 빌드는 Groovy 스크립트로 플러그인을 호출하고 직점 코드를 구성할 수 있습니다.</p>\n<ul>\n<li>Configruation Injection(의존성 주입) 방식을 사용해서 공통 모듈을 상속해서 사용하는 단점을 해결합니다.</li>\n<li>설정 주입 시 프로젝트의 조건을 체크할 수 있어서 프로젝트별로 주입되는 설정을 다르게 할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>가장 중요한 것은 규모가 커질수록 속도가 월등하게 빠릅니다.</strong></p>\n<ul>\n<li>\n<p>일반적인 경우</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/95992954-7a3b6580-0e69-11eb-9ebe-4b057e33bd17.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>큰 멀티 프로젝트</p>\n<ul>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/95992968-7f001980-0e69-11eb-99cd-24a17dd14570.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>어떤 방법으로 이러한 차이를 내나면.</p>\n<ul>\n<li>Gradle Daemon은 \"hot\"이라는 정보를 메모리에 저장하여 프로세스에 길게 유지시킵니다.</li>\n<li>다양한 tasks의 타입의 증가하는 input과 output에 새로 실행할 필요가 없습니다.</li>\n<li>incremental compilation을 통해 소스와 클래스의 종속성을 분석하여 변경되는 부분만 다시 컴파일 시킵니다.</li>\n<li>이미 생성된 캐시를 새로 생성하지 않고, 가져옵니다.</li>\n<li>Gradle의 smart class 경로 분석기는 라이브러리가 변경되지않은 경우, 불필요한 컴파일을 방지합니다.</li>\n<li>Java Library 플러그인을 사용해서 종속성을 더 잘 모델링하고 컴파일 클래스 경로를 줄여서 성능을 향상시킵니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>이러한 부분에서 Gradle이 Maven보다 좋은 점을 알 수 있었습니다.</p>\n<p>원래 포스터의 내용은 Gradle에서 Maven으로 수정하는 부분을 작성하는 것이였는데 너무 길어져서 다음 포스팅에 작성할 예정입니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://gradle.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gradle.org/</a></li>\n<li><a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://maven.apache.org/</a></li>\n<li><a href=\"http://egloos.zum.com/kwon37xi/v/4747016\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://egloos.zum.com/kwon37xi/v/4747016</a></li>\n<li><a href=\"https://bkim.tistory.com/13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bkim.tistory.com/13</a></li>\n<li><a href=\"https://okky.tistory.com/179\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://okky.tistory.com/179</a></li>\n</ul>\n"}}]}}},"context":{}}