{"hash":"7b056bf5bb97ab72db0df8d9d80ca9ef32b474be","data":{"tag":{"title":"Generic","belongsTo":{"edges":[{"node":{"title":"[Java] Java Generic","path":"/14-java-study/","date":"28. February 2021","timeToRead":8,"description":"Java Generic에 대해 정리합니다.","content":"<h1 id=\"java-generic\"><a href=\"#java-generic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Generic</h1>\n<p>백기선님의 자바 스터디 14주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>제네릭 사용법</li>\n<li>제네릭 주요 개념 (바운디드 타입, 와일드 카드)</li>\n<li>제네릭 메소드 만들기</li>\n<li>Erasure</li>\n</ul>\n<br/>\n<h2 id=\"자바-제네릭\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭</h2>\n<p>자바 제네릭스는 JDK 1.5에서 처음 도입되었습니다.</p>\n<p>자바의 제네릭은 다양한 타입의 객체를 다루는 메소드나 컬렉션 클래스에 <strong>컴파일 시의 타입 체크(compile-time type check)를 해주는 기능</strong>입니다.</p>\n<p>그래서 다음과 같은 <strong>장점</strong>이 있었습니다.</p>\n<ul>\n<li>\n<p>객체의 타입을 컴파일 시에 체크하기 때문에 <strong>객체의 타입 안정성을 높이고 형변환의 번거로움이 줄어듭니다.</strong></p>\n<ul>\n<li>타입의 안정성이 높다는 것은 의도하지 않은 타입의 객체가 저장되는 것을 막고, 저장된 객체를 꺼내올 때 원래의 타입과 다른 타입으로 잘못 형변환되어 발생할 수 있는 오류를 줄여줍니다.</li>\n</ul>\n</li>\n</ul>\n<p>따라서 <strong>제네릭의 장점</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p><strong>타입의 안정성을 제공합니다.</strong></p>\n<ul>\n<li>컴파일 타임에 타입 체크를 하기 때문에 런타임에서 ClassCastException과 같은 UncheckedException을 보장합니다.</li>\n</ul>\n</li>\n<li>타입체크와 형변환을 생략할 수 있으므로 <strong>코드가 간결</strong>해집니다.</li>\n</ul>\n<h3 id=\"제네릭-클래스-선언\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>제네릭 클래스 선언</h3>\n<p>다음과 같이 클래스가 있을 때,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>아래처럼 제네릭 클래스로 변경할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 <code class=\"language-text\">T</code>를 <strong>타입 변수(type variable)</strong> 라고 합니다.</p>\n<p>이를 사용하면 다음과 같이 사용가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New String data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// output : New String data</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>일반적으로 Type이라는 단어의 첫 스펠링을 따서 T라고 하며, T가 아닌 다른 것을 사용해도 됩니다.</p>\n<p>일반적으로 상황에 맞는 경우의 약자를 사용합니다. 다음과 같은 예제가 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">ArrayList&lt;E&gt;</code></p>\n<ul>\n<li>E 는 Element의 약자입니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Map&lt;K, V&gt;</code></p>\n<ul>\n<li>타입 변수가 여러개인 경우는 콤마로 구분해서 나열합니다.</li>\n<li>K는 Key, V는 Value를 의미합니다.</li>\n</ul>\n</li>\n</ul>\n<p>일반적으로 다음과 같은 타입 매개변수를 주로 사용합니다.</p>\n<ul>\n<li>E(Element), K(Key), N(Number), T(Type), V(Value)</li>\n</ul>\n<br/>\n<h2 id=\"자바-제네릭의-주요-개념\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭의 주요 개념</h2>\n<h3 id=\"자바-제네릭-용어\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%9A%A9%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭 용어</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li><code class=\"language-text\">Data&lt;T&gt;</code> : 제네릭 클래스</li>\n<li><code class=\"language-text\">T</code> : 타입 변수</li>\n<li><code class=\"language-text\">Data</code> : 원시 타입(raw type)</li>\n</ul>\n<h3 id=\"자바-제네릭의-제한\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%A0%9C%ED%95%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭의 제한</h3>\n<p>자바 제네릭은 인스턴스별로 다르게 동작하도록 만들었기 때문에 여러 기능을 제공합니다.</p>\n<p>다만 다음의 특징을 가지고 있습니다.</p>\n<ul>\n<li>\n<p>static 멤버에 타입 변수 T를 사용할 수 없습니다.</p>\n<ul>\n<li><code class=\"language-text\">static T staticItem</code> : 불가능</li>\n</ul>\n</li>\n<li>\n<p>제네릭 타입의 배열을 생성하는 것은 허용하지 않습니다.</p>\n<ul>\n<li><code class=\"language-text\">T[] itemArray</code> : 불가능</li>\n</ul>\n</li>\n<li>\n<p>참조 변수와 생성자 대입된 타입이 일치해야합니다.</p>\n<ul>\n<li><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new Box&lt;Grape&gt;()</code> : 불가능</li>\n<li><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new Box&lt;Apple&gt;()</code> : 가능</li>\n<li>\n<p><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new FruitBox&lt;Apple&gt;()</code> : 가능</p>\n<ul>\n<li><code class=\"language-text\">FruitBox&lt;T&gt; extends Box</code> : 상속인 경우에 한해서 가능합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"바운디드-타입\"><a href=\"#%EB%B0%94%EC%9A%B4%EB%94%94%EB%93%9C-%ED%83%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>바운디드 타입</h3>\n<p>제네릭 타입에서 타입 인자로 사용할 수 있는 타입을 제한하는 경우가 있을 수 있습니다. 이때 <strong>바운디드 타입이 사용</strong>됩나다.</p>\n<p>바운디드 타입 파라미터를 사용하기 위해서는 <code class=\"language-text\">extends</code>를 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>인터페이스를 구현하는 경우에도 <code class=\"language-text\">implements</code>를 사용하지 않으며, <code class=\"language-text\">extends</code>를 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Eatable</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>자식이면서 인터페이스를 같이 구현하는 경우에는 다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Eatable</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"와일드-카드\"><a href=\"#%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>와일드 카드</h3>\n<p>와일드카드는 기호 <code class=\"language-text\">?</code>로 표현을 하며, 와일드 카드는 어떠한 타입도 될 수 있습니다.</p>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">&lt;? extends T&gt;</code> : 와일드 카드의 상한 제한, T와 그 자손들만 가능</li>\n<li><code class=\"language-text\">&lt;? super T&gt;</code> : 와일드 카드의 하한 제한, T와 그 조상들만 가능</li>\n<li><code class=\"language-text\">&lt;?&gt;</code> : 제한이 없으며 모든 타입이 가능합니다. <code class=\"language-text\">&lt;? extends Object&gt;</code>와 동일합니다.</li>\n</ul>\n<h4 id=\"-extends-t-와일드-카드의-상한-제한-예제\"><a href=\"#-extends-t-%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C%EC%9D%98-%EC%83%81%ED%95%9C-%EC%A0%9C%ED%95%9C-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">&lt;? extends T&gt;</code>, 와일드 카드의 상한 제한 예제</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Juicer</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">Juice</span> <span class=\"token function\">makeJuice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> box<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> fruit <span class=\"token operator\">:</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      temp <span class=\"token operator\">+=</span> fruit <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Juice</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"-super-t--와일드-카드의-하한-제한-예제\"><a href=\"#-super-t--%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C%EC%9D%98-%ED%95%98%ED%95%9C-%EC%A0%9C%ED%95%9C-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">&lt;? super T&gt;</code> : 와일드 카드의 하한 제한 예제.</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitComp</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> t1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Fruit</span> t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> t1<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> t2<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"제네릭-메서드\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>제네릭 메서드</h2>\n<p>메서드의 선언부에 제네릭 타입이 선언된 메서드를 제네릭 메서드라고 합니다.</p>\n<p>일반적으로 컬렉션 메소드 <code class=\"language-text\">Collections.sort()</code>와 같은 메소드가 대표적인 제네릭 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span></code></pre>\n<p>다만, 제네릭 메서드와 제네릭 클래스의 매개변수는 별개의 것을 의미합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// T-1</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// T - 2</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// T-1과 T-2는 다릅니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"자바-제네릭-타입의-제거-erasure\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A0%9C%EA%B1%B0-erasure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭 타입의 제거 (Erasure)</h2>\n<p>컴파일러는 제네릭 타입을 이용해서 소스파일을 체크하고, 필요한 곳에 형변환을 넣어주고 제네릭 타입을 제거합니다.</p>\n<p>컴파일된 파일(*.class)에는 제네릭 타입이 없기 때문에 이를 처리해줄 필요가 있습니다. 따라서 이전의 소스코드와의 호환성을 위해서 만들어졌습니다.</p>\n<p>다음의 순으로 진행됩니다.</p>\n<h4 id=\"1-제네릭-타입의-경계를-제거합니다\"><a href=\"#1-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%98-%EA%B2%BD%EA%B3%84%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 제네릭 타입의 경계를 제거합니다.</h4>\n<ul>\n<li><code class=\"language-text\">&lt;T extends Fruit&gt;</code> : Fruit로 치환됩니다.</li>\n<li><code class=\"language-text\">&lt;T&gt;</code> : Object로 치환됩니다.</li>\n</ul>\n<p>AS-IS</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>TO-Be</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"2-제네릭-타입을-제거한-후에-타입이-일치하지-않는-경우-형변환을-추가합니다\"><a href=\"#2-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A0%9C%EA%B1%B0%ED%95%9C-%ED%9B%84%EC%97%90-%ED%83%80%EC%9E%85%EC%9D%B4-%EC%9D%BC%EC%B9%98%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%BD%EC%9A%B0-%ED%98%95%EB%B3%80%ED%99%98%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 제네릭 타입을 제거한 후에 타입이 일치하지 않는 경우, 형변환을 추가합니다.</h4>\n<ul>\n<li>일반적으로 Object 타입으로 변환이 일어나지만, 와일드 카드가 포함시 적절한 타입으로 형변환이 추가됩니다.</li>\n</ul>\n<p>AS-IS</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>TO-Be</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Fruit</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">)</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.notion.so/4735e9a564e64bceb26a1e5d1c261a3d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/4735e9a564e64bceb26a1e5d1c261a3d</a></li>\n<li><a href=\"https://rockintuna.tistory.com/102\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rockintuna.tistory.com/102</a></li>\n<li><a href=\"https://b-programmer.tistory.com/275\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/275</a></li>\n<li><a href=\"https://blog.naver.com/hsm622/222251602836\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/hsm622/222251602836</a></li>\n<li><a href=\"https://sujl95.tistory.com/73\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/73</a></li>\n<li><a href=\"https://redbean88.github.io/study/whiteship-study-14week/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redbean88.github.io/study/whiteship-study-14week/</a></li>\n</ul>\n"}}]}}},"context":{}}