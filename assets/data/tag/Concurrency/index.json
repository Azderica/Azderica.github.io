{"hash":"a494b8b1778660c606708ae3dd5d59774a4a3863","data":{"tag":{"title":"Concurrency","belongsTo":{"edges":[{"node":{"title":"[Java] Effective Java, Concurrency","path":"/10-java-effective-java/","date":"24. May 2021","timeToRead":33,"description":"Effective Java 책 중, ch11. 동시성에 대해 정리합니다.","content":"<h1 id=\"concurrency-동시성\"><a href=\"#concurrency-%EB%8F%99%EC%8B%9C%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Concurrency (동시성)</h1>\n<p>동시성은 여러 활동을 동시에 진행할 수 있습니다. 동시 프로그래밍은 단일 스레드 프로그래밍보다 어렵습니다. 더 많은 문제가 발생할 수 있고 실패를 재현하기 어렵기 때문에 동시성을 피할 수 없습니다. 아래에서는 명확하고 정확하며 잘 문서화 된 동시 프로그래밍을 작성하는데 도움이 되는 자료입니다.</p>\n<h2 id=\"item-78-공유된-변경-가능한-데이터는-동기화해서-사용합니다\"><a href=\"#item-78-%EA%B3%B5%EC%9C%A0%EB%90%9C-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 78. 공유된 변경 가능한 데이터는 동기화해서 사용합니다.</h2>\n<p><code class=\"language-text\">synchronized</code> 키워드는 하나의 스레드가 한번에 방법 또는 블록을 실행함을 보장합니다. 이를 통해서, 어떤 메서드도 객체의 상태가 일관되게 됩니다.</p>\n<p>자바 언어는 long과 double 형을 제외하고는 변수를 읽고 쓰는 것은 원자적입니다. 즉, <strong>동기화 없이 여러 스레드가 같은 변수를 수정하므로 항상 어떤 스레드가 정상적으로 저장한 값을 읽어오는 것을 보장</strong>합니다.</p>\n<p>하지만, 스레드가 필드를 읽을 때 항상 수정이 완전히 반영된 값을 얻는다 보장하지만, 한 스레드가 저장된 값이 다른 스레드에서 보이는가는 보장하지 않습니다. 즉, <strong>스레드 간의 안정적인 통신과 상호 배제를 위해서는 동기화가 필요합니다</strong>.</p>\n<p>이를 표현한 잘못된 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StopThread</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> stopRequested<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Thread</span> backgroundThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopRequested<span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    backgroundThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stopRequested <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드의 경우, 스레드가 <code class=\"language-text\">start</code>되고 1초의 sleep후, 루프가 종료될 것으로 예상되지만 종료되지않습니다. 이는 동기화가 되지 않았기 때문입니다. 즉, 동기화가 없어지면 가상 머신이 아래처럼 수정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 원래 코드</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopRequested<span class=\"token punctuation\">)</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 최적화한 코드</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopRequested<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이는 JVM이 적용하는 <strong>끌어올리기(hoisting, 호이스팅)</strong>이라는 최적화 기법이 사용된 경우이며, 이는 종료되지 않습니다. 그렇기 때문에 아래처럼 고쳐서 지속적으로 동작하도록 할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StopThread</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> stopRequested<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requestStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    stopRequested <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">stopRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> stopRequested<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Thread</span> backgroundThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">stopRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    backgroundThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">requestStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 하면 동기화처리가 되며, 동기화는 읽기와 쓰기 모두 필요합니다. 둘 중 하나만 동기화 하는 경우에는 충준하지 않습니다.</p>\n<h3 id=\"volatile\"><a href=\"#volatile\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>volatile</h3>\n<p>volatile(휘발성)은 배타적 수행과는 상관이 없지만 항상 가장 최근에 저장된 값을 읽어온다. 이론적으로는 CPU 캐시가 아닌 컴퓨터의 메인 메모리로부터 값을 읽어옵니다. 그렇기 때문에 읽기/쓰기 모두가 메인 메모리에서 수행됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> stopThread <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> stopRequested<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Thread</span> backgroundThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopRequested<span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    backgroundThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stopRequested <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드처럼 <code class=\"language-text\">volatile</code>을 사용하면 동기화를 생략할 수 있습니다. 그러나 아래의 경우 처럼 문제가 발생할 수 있기에 조심히 사용해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> nextSerialNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">generateSerialNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nextSerialNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>코드 상으로 증가 연산자(++)는 하나지만 실제로는 volatile 필드에 두 번 접근합니다. 먼저 값을 읽고 그 다음에 1을 증가한 값과 동일한 새로운 값을을 다시 작성합니다. 따라서 두 번째 스레드가 첫 번째 스레드의 연산 사이에 들어와 공유 필드를 읽게되며, 첫번째 스레드와 같은 값을 보게될 것입니다.</p>\n<p>이처럼 잘못된 결과를 계산해내는 오류를 안전 실패(safety failure)라고 합니다. 이 문제는 메서드에 <code class=\"language-text\">synchronized</code>를 붙이고 <code class=\"language-text\">violate</code> 키워드를 공유 필드에서 제거하면 해결됩니다.</p>\n<h3 id=\"atomic-패키지\"><a href=\"#atomic-%ED%8C%A8%ED%82%A4%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>atomic 패키지</h3>\n<p>위의 volatile 보다 더 좋은 방법 중 하나는 <code class=\"language-text\">java.util.concurrent.atomic</code>을 사용하는 것입니다. <code class=\"language-text\">java.util.concurrent.atomic</code>의 패키지에는 락 없이도 thread-safe한 클래스를 제공합니다. <code class=\"language-text\">volatile</code>은 동기화 효과 중 통신쪽만 지원하지만, <strong>패키지는 원자성까지 지원</strong>하며 성능도 다른 동기화 버전에 비해 우수합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicLong</span> nextSerialNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">generateSerialNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nextSerialNum<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"결론적으로\"><a href=\"#%EA%B2%B0%EB%A1%A0%EC%A0%81%EC%9C%BC%EB%A1%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론적으로.</h3>\n<p>가변 데이터를 공유하지 않는 것이 동기화 문제를 피하는 가장 좋은 방법입니다. 즉, <strong>가변 데이터는 단일 스레드에서만 사용하는 것이 좋습니다.</strong> 그리고 이에 대한 문서화를 하는 것이 중요합니다.</p>\n<p>한 스레드가 데이터를 수정한 후에 다른 스레드에 공유할 때는 해당 객체에 공유하는 부분만 동기화해도 됩니다. 다른 스레드에 이런 객체를 건네는 행위를 <code class=\"language-text\">안전 발행(safe publication)</code>이라고 합니다. 클래스 초기화 과정에서 객체를 정적 필드, volatile 필드, final 필드 혹은 보통의 락을 통해 접근하는 필드 그리고 동시성 컬렉션에 저장하면 안전하게 발생할 수 있습니다.</p>\n<p>여러 스레드가 변경 가능한 데이터를 공유할 때 데이터를 읽거나 쓰는 각 스레드는 동기화를 수행하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-79-과도한-동기화는-피합니다\"><a href=\"#item-79-%EA%B3%BC%EB%8F%84%ED%95%9C-%EB%8F%99%EA%B8%B0%ED%99%94%EB%8A%94-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 79. 과도한 동기화는 피합니다.</h2>\n<p>동기화를 하지 않으면 문제가 발생합니다. 하지만 과도한 동기화는 성능 저하, 데드락, 비결정적 동작을 유발할 수 있습니다.</p>\n<h3 id=\"외계인-메서드-alien-method\"><a href=\"#%EC%99%B8%EA%B3%84%EC%9D%B8-%EB%A9%94%EC%84%9C%EB%93%9C-alien-method\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>외계인 메서드 (alien method)</h3>\n<p>이러한 응답 불가 및 안전 문제를 줄이기 위해서는, <strong>동기화된 메서드 또는 블록 내에서 클라이언트에게 제어권을 넘기면 안됩니다.</strong> 즉, 동기화된 영액 내에서 재정의되도록 설계된 메서드 또는 클라이언트가 함수 개체의 형태로 제공하는 메서드를 호출하면 안됩니다. 이러한 <strong>메서드는 무슨 일을 할지 모르기 때문에 예외를 발생시키거나, 교착상태를 만들거나 데이터를 훼손 할 수 있으며 이러한 메서드를 외계인 메서드(<code class=\"language-text\">alien method</code>)라고 합니다.</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Broken - 동기화 된 블록에서 외계인 메서드를 호출한 경우.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObservableSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ForwardingSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ObservableSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SetObserver</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyElementAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer <span class=\"token operator\">:</span> observers<span class=\"token punctuation\">)</span>\n        observer<span class=\"token punctuation\">.</span><span class=\"token function\">added</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> added <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>added<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">notifyElementAdded</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> added<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">|=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Calls notifyElementAdded</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SetObserver</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 관찰 가능한 집합에 요소가 추가 될 때 호출됩니다.</span>\n  <span class=\"token keyword\">void</span> added <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObservableSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> set<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드는 집합에 원소가 추가되면 알림을 받는 관찰자 패턴을 사용한 예제 코드입니다. 해당 코드는 <code class=\"language-text\">addObserver</code> 메서드를 호출해서 알림을 구독하고, <code class=\"language-text\">removeObserver</code> 메서드를 호출해서 구독을 취소합니다.</p>\n<p>이를 통한 잘못된 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\">set<span class=\"token punctuation\">.</span>addObserver <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SetObserver</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> added <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObservableSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>removeObserver <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>위 코드는 <code class=\"language-text\">ConcurrentModificationException</code>가 발생합니다. 해당 경우, 0부터 23까지 출력한 후 자신을 remove하고 종료할 것 같으나, 실제로 실행해보면 0~23까지 출력 후 예외가 발생합니다. 이유는 added 메서드 호출이 일어난 시점이 <code class=\"language-text\">notifyElementAdded</code>가 <code class=\"language-text\">Observer</code>들의 리스트를 순회하는 도중이기 때문입니다.</p>\n<p>added 메서드에서 <code class=\"language-text\">ObservableSet.removeObserver</code> 메서드를 호출하고, 또 여기서 observers.remove 메서드를 호출하는데 여기서 문제가 발생합니다. 즉, 순회하고 있는 리스트에서 원소를 제거하려고하기 때문에 <code class=\"language-text\">notifyElementAdded</code> 메서드에서 수행하는 순회는 동기화 블록 안에 있어 동시 수정이 일어나지는 않지만, 자신이 콜백을 거쳐 되돌아와 수정하는 것은 막을 수 없습니다.</p>\n<p>또 다른 예시로 쓸데없는 백그라운드 스레드를 사용한 케이스를 볼 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 백그라운드 스레드를 불필요하게 사용하는 옵저버</span>\nset<span class=\"token punctuation\">.</span>addObserver <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SetObserver</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> added <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObservableSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span>newSingleThreadExecutor <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        exec<span class=\"token punctuation\">.</span>submit <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span>removeObserver <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> get <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutionException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">InterruptedException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        exec<span class=\"token punctuation\">.</span>shutdown <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>해당 코드는 예외는 발생하지 않지만, deadlock에 빠집니다. 백그라운드 스레드가 <code class=\"language-text\">s.removeObserver</code> 메서드를 호출하면, 메인 스레드가 이미 락을 가지고 있기 때문에 <code class=\"language-text\">Observer</code>을 잠그려 시도하지만 락을 얻을 수 없습니다.</p>\n<p>이러한 외계인 메서드 예제를 정의한 코드를 보면 <code class=\"language-text\">removerObserver</code> 메서드에는 <code class=\"language-text\">synchronized</code> 키워드가 있기 때문에 실행 시 락이 걸립니다. 동시에 메인 스레드는 백그라운드 스레드가 <code class=\"language-text\">Observer</code>를 제거하기만 기다리기 때문에 deadlock에 빠집니다.</p>\n<p>이를 해결하는 방법은 다음과 같습니다.</p>\n<ul>\n<li>외계인 메서드 호출을 동기화 블럭 바깥으로 옮깁니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyElementAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SetObserver</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> snapshot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    snapshot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer <span class=\"token operator\">:</span> snapshot<span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">added</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>더 나은 방법으로는 자바의 <code class=\"language-text\">concurrent collection</code>을 사용하는 방법도 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SetObserver</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyElementAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer <span class=\"token operator\">:</span> observers<span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">added</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위와 같은 <code class=\"language-text\">CopyOnWriteArrayList</code>는 ArrayList를 구현한 클래스로 내부를 변경하는 작업은 항상 깨끗한 복사본을 만들어서 수행하도록 구현되어 있습니다. 내부의 배열은 수정되지 않아, 순회할 때 락이 필요없이 매우 빠릅니다. 다른 용도로 사용되는 경우에는 복사를 매번 해야하기에는 느리지만 수정할 일이 적고 순회만 자주 일어나는 경우, Observer 리스트 용도로는 최적입니다.</p>\n<p>이처럼 과도한 동기화는 병렬로 실행할 기회를 읽고, 모든 코어가 메모리를 일관되게 보기 위한 지연시간이 지연 비용입니다. 또한 JVM으 코드 최적화를 제한하는 것도 고려해야합니다.</p>\n<p>즉, 가변 클래스를 작성할 때는 두가지 선택을 할 수 있습니다.</p>\n<ul>\n<li>\n<p>동기화를 하지 않고 그 클래스를 사용해야하는 클래스가 외부에서 동기화 하는 것</p>\n<ul>\n<li><code class=\"language-text\">java.util</code> 패키지 (vector와 hashtable 제외)</li>\n</ul>\n</li>\n<li>\n<p>동기화를 내부에서 수행해 <code class=\"language-text\">thread-safe</code>한 클래스를 만드는 것</p>\n<ul>\n<li><code class=\"language-text\">java.concurrent</code>패키지</li>\n</ul>\n</li>\n</ul>\n<p>결론적으로 <strong>동기화 영역에서는 작업을 최소한으로 줄이는 것이 중요</strong>합니다. 오래 걸리는 작업이라면 동기화 영역 밖으로 옮기는 방법을 찾아보는 것이 중요합니다. 여러 스레드가 호출할 가능성이 있는 메서드가 정적 필드를 수정한다면 그 필드를 사용하기 전에 반드시 동기화해야합니다.</p>\n<p>가변 클래스를 설계할 때는 스스로 동기화해야할지를 고민해야합니다. 과도한 동기화를 피하는 것이 중요하며 합당한 이유가 있는 경우에만 내부에서 동기화하고 동기화 여부를 문서화합니다.</p>\n<br/>\n<h2 id=\"item-80-스레드보다는-executors-task-stream을-선호합니다\"><a href=\"#item-80-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%B3%B4%EB%8B%A4%EB%8A%94-executors-task-stream%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 80. 스레드보다는 executors, task, stream을 선호합니다.</h2>\n<p>스레드를 직접 다룰 수 있지만, <code class=\"language-text\">concurrent</code> 패키지를 이용하면 간단하게 코드를 작성할 수 있습니다.</p>\n<h3 id=\"executor-framework\"><a href=\"#executor-framework\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Executor Framework</h3>\n<p><code class=\"language-text\">java.util.concurrent</code> 패키지에는 인터페이스 기반의 유연한 태스크 실행 기능을 담은 실행자 프레임워크(Executor Framework)가 있습니다. 예를 들어 옛날에는 작업 큐를 작성하기 위해서 많은 코드를 작성했다면 현재는 간단하게 생성가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 작업 큐 생성</span>\n<span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span>newSingleThreadExecutor <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 작업 큐 실행</span>\nexec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 작업 큐 삭제</span>\nexec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>실행자 프레임워크는 여러 기능을 가지고 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">method</code></th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">get</code></td>\n<td>특정 태스크가 완료되기 까지를 기다림</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">invokeAny</code></td>\n<td>태스크 중 하나가 완료되는 것을 기다림</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">invokeAll</code></td>\n<td>모든 테스크가 종료되는 것을 기다림</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">awaitTermination</code></td>\n<td>실행자 서비스가 종료하기를 기다림</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ExecutorCompletionService</code></td>\n<td>완료된 태스크들의 결과를 차례로 받음</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ScheduledThreadPoolExecutor</code></td>\n<td>태스크를 특정 시간에 혹은 주기적으로 실행함</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><a href=\"https://madplay.github.io/post/prefer-executors-tasks-and-streams-to-threads\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처</a></li>\n</ul>\n<p>둘 이상의 스레드가 대기열의 요청을 처리하도록 하려면 <code class=\"language-text\">ThreadPool</code>을 쓰면 됩니다.</p>\n<p><code class=\"language-text\">Executors.newCachedThreadPool</code>은 가벼운 프로그램을 실행하는 서버에 적합합니다. 요청받은 task를 큐에 쌓지 않고 바로 처리하며, 사용 가능한 스레드가 없다면 즉시 스레드를 생성하여 처리합니다. 그러나 서버가 무겁다면 새로운 task가 도착할 때마다 다른스레드를 생성하기 때문에 최악입니다. 따라서, 무거운 프로덕션 서버에서는 <code class=\"language-text\">Executors.newFixedThreadPool</code>을 선택해서 스레드 개수를 고정하거나 <code class=\"language-text\">ThreadPoolExecutor</code>를 사용하는 것이 좋습니다.</p>\n<p>스레드를 직접 다루는 것은 항상 자제해야합니다. <strong>일반적으로는 스레드를 직접 다루기 보다는 실행자와 프레임워크를 사용하는 것이 중요</strong>합니다. 이렇게 사용하게 되면 작업 단위와 실행 매커니즘을 분리할 수 있습니다. (<code class=\"language-text\">Runnable</code>와 <code class=\"language-text\">Callable</code>)</p>\n<p>자바 7부터는 실행자 프레임워크는 <code class=\"language-text\">fork-join</code> task를 지원합니다. <code class=\"language-text\">ForkJoinTask</code>의 인스턴스는 작은 하위 task로 나눌 수 있고, <code class=\"language-text\">ForkJoinPool</code>을 구성하는 스레드들이 이 task들을 처리하며 일을 먼저 끝낸 스레드가 다른 스레드의 남은 task를 가져와서 대신 처리할 수도 있습니다. 이를 통해서 최대한의 CPU를 사용해서, 높은 처리량과 낮은 지연시간을 달성합니다.</p>\n<br/>\n<h2 id=\"item-81-wait와-notify보다는-동시성-유틸리티를-선호합니다\"><a href=\"#item-81-wait%EC%99%80-notify%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 81. <code class=\"language-text\">wait</code>와 <code class=\"language-text\">notify</code>보다는 동시성 유틸리티를 선호합니다.</h2>\n<p>이제는 <code class=\"language-text\">wait</code>와 <code class=\"language-text\">notify</code>보다 더 고수준이며 편리한 동시성 유틸리티를 사용하는 것이 좋습니다. <code class=\"language-text\">java.util.concurrent</code> 패키지의 고수준 유틸리티는 크게 실행자 프레임워크, 동시성 컬렉션, 동기화 장치로 나눌 수 있습니다.</p>\n<p><code class=\"language-text\">java.util.concurrent</code> 패키지는 고수준의 동시성 유틸리티를 제공합니다. 크게 세가지로 분류하면, <code class=\"language-text\">Executor Framework</code>, <code class=\"language-text\">Concurrent Collections</code>, <code class=\"language-text\">Synchronizers</code>로 나눌 수 있습니다.</p>\n<p>앞에서 <code class=\"language-text\">Executor Framework</code>를 설명했으므로, <code class=\"language-text\">Concurrent Collections</code>과 <code class=\"language-text\">Synchronizers</code>에 대해 설명할 수 있습니다.</p>\n<p><code class=\"language-text\">Concurrent Collections(동시 컬렉션)</code>와 같은 컬렉션 표준 인터페이스는 고성능의 동시성이 구현되어, <code class=\"language-text\">List</code>, <code class=\"language-text\">Queue</code>, <code class=\"language-text\">Map</code>등을 제공합니다. 이러한 구현은 내부적으로 동기화를 관리합니다. 그렇기 때문에 동시성 컬렉션에서 동시성을 제외하는 것은 불가능합니다. (외부에서 Lock을 사용하면 속도가 느려집니다.)</p>\n<p>동시성 컬렉션에서 동시 활동을 제외할 수 없기 때문에 이를 원자적으로 구성할 수 없습니다. 또한 이를 위해 여러 메서드등이 등장했습니다.</p>\n<p>예를 들어 <code class=\"language-text\">Map</code>의 <code class=\"language-text\">putIfAbsent(key, value)</code> 메서드가 대표적인 에시로 키가 없는 경우 매핑을 삽입합니다. 기존 값이 있으면 그 값을 반환하고 없는 경우에는 null을 반환하며, String의 <code class=\"language-text\">intern</code> 메서드를 아래처럼 흉내낼 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConcurrentMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>동기화된 컬렉션보다는 동시성 켈력션을 사용하는 것이 성능에 좋습니다. (Collections의 <code class=\"language-text\">synchronizedMap</code> 보다는 <code class=\"language-text\">ConcurrentHashMap</code>을 사용하는 것이 중요합니다.)</p>\n<p><code class=\"language-text\">Synchronizers</code>를 통하면, 스레드가 다른 스레드를 기다릴 수 있게 해서 서로의 task를 조율할 수 있도록 해줍니다. 대표적으로는 <code class=\"language-text\">CountDownLatch</code>와 <code class=\"language-text\">Semaphore</code>, <code class=\"language-text\">CyclicBarrier</code>, <code class=\"language-text\">Exchanger</code>등이 있습니다. 그외에도 강력한 <code class=\"language-text\">Phaser</code>가 있습니다.</p>\n<p><code class=\"language-text\">CountDownLatch</code>는 하나 이상의 스레드가 또 다른 하나 이상의 스레드 작업이 끝날때까지 기다립니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 동시 실행을 위한 간단한 프레임 워크</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Executor</span> executor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> concurrency<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Runnable</span> action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">CountDownLatch</span> ready <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>concurrency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">CountDownLatch</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">CountDownLatch</span> done  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>concurrency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> concurrency<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      ready<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Tell timer we're ready</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait till peers are ready</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        done<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Tell timer we're done</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  ready<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Wait for all workers to be ready</span>\n  <span class=\"token keyword\">long</span> startNanos <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  start<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// And they're off!</span>\n  done<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Wait for all workers to finish</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startNanos<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드에서 실행자는 concurrency로 지정한 값 만큼 스레드를 생성할 수 있어야합니다. 그렇지 않으면 메스드 수행이 끝나지 않는데 이를 스레드 기아 교착 상태라고 합니다. 또, 시간을 잴 때는 <code class=\"language-text\">System.currentTimeMillis</code>보다는 시스템 시간과 무관한 <code class=\"language-text\">System.nanoTime</code>을 사용하는 것이 좋습니다.</p>\n<p>새로운 코드라면 <code class=\"language-text\">wait</code>, <code class=\"language-text\">notify</code>가 아닌 동시성 유틸리티를 사용해야합니다. 하지만, 이를 사용해야하는 상황이면 반드시 <strong>동기화 영역 안에서만 사용해야하며, 항상 반복문 안에서 사용해야합니다.</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>조건이 충족되지 않은 경우<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    obj<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (락 넣어놓고, 깨어나면 잡습니다.)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 조건이 충족됐을 때의 동작을 수행합니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 반복문은 <code class=\"language-text\">wait</code> 호출 전후로 조건이 만족하는 지를 검사하는 역할을 합니다. 대기전에 조건을 검사하여, 조건이 충족되었다면 <code class=\"language-text\">wait</code>를 건너뛰게 하는 것은 <strong>응답 불가</strong> 상태를 예방하는 것입니다. 조건이 충족되었는데 스레드가 <code class=\"language-text\">notify</code>나 <code class=\"language-text\">notifyAll</code> 메서드로 먼저 호출한 경우 대기 상태로 빠지면 그 스레드를 다시 깨우지 못합니다.</p>\n<p>한편 대기 후에 조건을 검사하여 조건을 충족하지 않았을 때 다시 대기하게 하는 것은 잘못된 값을 계산하는 <strong>안전 실패</strong>를 막기 위한 조치입니다. 그런데 조건이 만족되지 않아도 스레드가 깨어날수 있는 상황이 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">notify</code>를 호출하여 대기 중인 스레드가 깨어나는 사이에 다른 스레드가 락을 거는 경우</li>\n<li>조건이 만족되지 않았으나 실수 혹은 악의적으로 <code class=\"language-text\">notify</code>를 호출하는 경우</li>\n<li>대기 중인 스레드 중 일부만 조건을 충족해도 <code class=\"language-text\">notifyAll</code>로 모든 스레드를 깨우는 경우</li>\n<li>대기 중인 스레드가 드물게 <code class=\"language-text\">notify</code> 없이 깨어나는 경우, 허위 각성(spurious wakeup)이라고 합니다.</li>\n</ul>\n<p>일반적으로는 <code class=\"language-text\">notify</code>보다는 <code class=\"language-text\">notifyAll</code>을 사용하는 것이 안전하며, <code class=\"language-text\">wait</code>는 <code class=\"language-text\">while</code>문 내부에서 호출하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-82-스레드-안전성-수준을-문서화합니다\"><a href=\"#item-82-%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%95%88%EC%A0%84%EC%84%B1-%EC%88%98%EC%A4%80%EC%9D%84-%EB%AC%B8%EC%84%9C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 82. 스레드 안전성 수준을 문서화합니다.</h2>\n<p>문서에서 synchronized 수정자를 찾아서, 메서드가 스레드로부터 안전한지 알 수 있다는 말을 들을 수 있는데 이는 꼭 맞는 말은 아닙니다. 스레드 안전성에서도 어느 정도의 수준인지 나뉘므로 멀티스레드 환경에서도 안전하게 사용하려면 지원하는 스레드 안전성 수준을 명시해야합니다.</p>\n<p>스레드의 안전성 수준을 높은 순서대로 보면 아래와 같습니다.</p>\n<ul>\n<li>\n<p>Immutable (변경 불가능)</p>\n<ul>\n<li>해당 클래스의 인스턴스는 마치 상수와 비슷하기에 외부 동기화가 필요없습니다.</li>\n<li><code class=\"language-text\">String</code>, <code class=\"language-text\">Long</code>, <code class=\"language-text\">BigInteger</code></li>\n</ul>\n</li>\n<li>\n<p>Unconditionally thread-safe (무조건적인 스레드 안전)</p>\n<ul>\n<li>해당 클래스의 인스턴스는 수정될 수 있지만 내부에서도 동기화되어 있어, 별도의 외부 동기화 없이 사용해도 안전합니다.</li>\n<li><code class=\"language-text\">AtomicLong</code>, <code class=\"language-text\">ConcurrentHashMap</code></li>\n</ul>\n</li>\n<li>\n<p>Conditionally thread-safe (조건부 스레드 안전)</p>\n<ul>\n<li>무조건적인 스레드 안전성과 비슷하지만 일부 메서드는 동시에 사용하려면 외부 동기화가 필요합니다.</li>\n<li><code class=\"language-text\">Collection.synchronized</code> 래퍼 메서드가 반환한 컬렉션</li>\n</ul>\n</li>\n<li>\n<p>Not thread-safe (스레드로부터 안전하지 않음)</p>\n<ul>\n<li>해당 클래스의 인스턴스는 수정될 수 있으며 동시에 사용하려면 각각의 메서드 호출을 클라이언트가 선택한 외부 동기화 로직으로 감싸야합니다.</li>\n<li><code class=\"language-text\">ArrayList</code>, <code class=\"language-text\">HashMap</code></li>\n</ul>\n</li>\n<li>\n<p>Thread-hostile (스레드와 적대적)</p>\n<ul>\n<li>외부 동기화를 사용하더라도, 멀티스레드 환경에서 안전하지 않습니다.</li>\n<li>일반저긍로 동시성을 고려하지 않는 클래스입니다.</li>\n</ul>\n</li>\n</ul>\n<p>따라서 동기화에 대한 문서화는 필요합니다. 조건부 스레드에 안전한 클래스는 주의해서 문서화해야합니다. 어떠한 순서로 호출할 때, 외부 동기화 로직이 필요한지 그리고 그 순서대로 호출시 어떤 락을 얻어야하는지를 작성해야합니다.</p>\n<p><code class=\"language-text\">Collections.synchronizedMap</code>의 API 문서는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>synchronizedMap <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>keySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동기화 된 블록에있을 필요가 없습니다.</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nsynchronous <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// s가 아닌 m에서 동기화 중입니다!</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key <span class=\"token operator\">:</span> s<span class=\"token punctuation\">)</span>\n    key<span class=\"token punctuation\">.</span>f <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>반환 타입만으로 알수 없는 경우, 객체에 대한 스레드 안전성을 문서화해야합니다.</p>\n<p>외부에 공개된 락(Lock)을 사용하는 경우, 유연한 코드를 만들 수 있지만 그만한 대가가 따릅니다. 클라이언트가 공개된 락을 통해 서비스 거부 공격(denial-of-service attack)을 수행할 수 있습니다. 이를 방지하려면 비공게 락 객체를 사용해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Private lock 객체 관용구-서비스 거부 공격을 막습니다.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>여기서 lock 멤버를 final로 선언한 이유 중 하나는 우연히 락 객체가 교체되는 상황을 방지합니다. 일반적인 락이나 <code class=\"language-text\">java.util.concurrent.locks</code> 패키지에서 가져온 락이 동일합니다. 이와 같이 구성하면서 하위 클래스에서 동끼화 로직을 깨는 것을 예방할 수 있습니다.</p>\n<p>모든 클래스는 신중하게 표현된 설명이나 스레드 안전성 어노테이션을 통해서 스레드의 안전성을 명확하게 문서화해야합니다. 조건부 스레드나, 스레드에 안전한 케이스 모두 lock을 문서화해야하고, <code class=\"language-text\">private final lock</code>을 사용하는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"item-83-지연-초기화는-신중히-사용합니다\"><a href=\"#item-83-%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0%ED%99%94%EB%8A%94-%EC%8B%A0%EC%A4%91%ED%9E%88-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 83. 지연 초기화는 신중히 사용합니다.</h2>\n<p><code class=\"language-text\">Lazy initialization(지연 초기화)</code>는 값이 필요할 때까지 필드 초기화를 지연하는 행동입니다. 지연 초기화는 주로 최적화이지만, 클래스 및 인스턴스 초기화에서 유해한 순환성을 깨는데 사용할 수도 있습니다.</p>\n<p>지연 초기화는 일종의 양날의 검이기 때문에 필요하지 않으면 수행하지 않는 것이 중요합니다. 지연 초기화된 필드에 액세스하는 비용을 증가시키면서 클래스 초기화 또는 인스턴스 생성 비용을 줄입니다. 따라서 초기화된 필드에 자주 액세스하는지에 따라 성능을 저하시킬 수 있습니다.</p>\n<p>대부분의 경우에 지연 초기화보다는 정상적인 초기화가 좋습니다. 특히, 여러 스레드가 있는 경우에는 지연 초기화가 까다롭습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 인스턴스 필드의 일반 초기화</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">FieldType</span> field <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>지연 초기화가 초기화의 순환성을 깰 것 같으면 <code class=\"language-text\">synchronized</code>를 단 접근자를 이용하는 것이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Lazy initialization of instance field - synchronized accessor</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">FieldType</span> <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    field <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> field<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>성능 때문에 정적 필드를 초기화해야 한다면, <strong>지연 초기화 홀더 클래스</strong>를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FieldHolder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">FieldType</span> field <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">FieldType</span> <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">FieldHolder</span><span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>성능을 위해 인스턴스 필드를 지연 초기화해야하는 경우, <strong>double-check(이중검사)</strong> 관용구를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반드시 volatile 로 선언</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">FieldType</span> <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">FieldType</span> result <span class=\"token operator\">=</span> field<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 첫 번째 검사(락 사용 안함)</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">This</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 두 번째 검사(락 사용)</span>\n      field <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> field<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>반복해서 초기화해도 상관 없는 인스턴스 필드를 지연 초기화할 때가 있는데 이를 때는 두 번째 검사를 생략해도 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반드시 volatile 로 선언</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">FieldType</span> <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">FieldType</span> result <span class=\"token operator\">=</span> field<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    field <span class=\"token operator\">=</span> result <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>만역 field 타입이 <code class=\"language-text\">long</code>이나 <code class=\"language-text\">double</code>이 아닌 다른 기본 타입이면 단일 검사의 필드 선언에서 <code class=\"language-text\">volatile</code>을 없앨 수도 있습니다.</p>\n<p>이를 요약하면 <strong>대부분의 필드를 지연이 아니라 정상적으로 초기화해야합니다</strong>. 성능을 위하거나 유해한 초기화 순환성을 깨기 위해 필드를 느리게 초기화해야하는 경우, 지연 초기화 기술을 사용해야합니다.</p>\n<br/>\n<h2 id=\"item-84-프로그램의-동작을-스레드-스케줄러에-의존하지-않습니다\"><a href=\"#item-84-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9D%84-%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC%EC%97%90-%EC%9D%98%EC%A1%B4%ED%95%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 84. 프로그램의 동작을 스레드 스케줄러에 의존하지 않습니다.</h2>\n<h3 id=\"스레드-스케줄러에-의존하면-안됩니다\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC%EC%97%90-%EC%9D%98%EC%A1%B4%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드 스케줄러에 의존하면 안됩니다.</h3>\n<p>많은 스레드가 실행 가능할 때 스레드 스케줄러는 실행할 스레드와 시간을 결정합니다. 합리적인 운영 체제라면 결정을 공정하게 할려고 하지만 정책은 다를 수 있습니다. 따라서 잘 작성된 프로그램은 이 정책의 세부 사항에 의존하면 안됩니다. 즉, <strong>정확성이나 성능을 위해 스레드 스퀘줄러에 의존하는 프로그램은 이식할 수 없습니다.</strong></p>\n<h3 id=\"성능과-이식성이-좋은-프로그램을-작성합니다\"><a href=\"#%EC%84%B1%EB%8A%A5%EA%B3%BC-%EC%9D%B4%EC%8B%9D%EC%84%B1%EC%9D%B4-%EC%A2%8B%EC%9D%80-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>성능과 이식성이 좋은 프로그램을 작성합니다.</h3>\n<p>실행 가능한 스레드의 평균적인 수가 프로세스의 수보다 과도하게 많아서는 안됩니다. 그래야 스케줄러의 고민이 줄어듭니다. 실행 준비가 된 스레드들은 맡은 작업이 끝낼 때까지계속 실행되도록 만들어야합니다.</p>\n<p>실행 가능한 스레드 수를 적게 유지하려면 각 스레드가 작업을 완료한 후 다음 작업이 생길 때까지 대기하도록 하는 것입니다. 스레드는 당장 처리해야 할 작업이 없다면 실행되서는 안됩니다.</p>\n<p>예를 들어 실행자 프레임워크의 경우, 스레드 풀의 크기를 적절히 설정하고 작업을 짧게 유지하면 됩니다. 다만 너무 작으면 성능이 저하됩니다.</p>\n<h3 id=\"스레드는-절대-busy-wait-상태가-되면-안됩니다\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EB%8A%94-%EC%A0%88%EB%8C%80-busy-wait-%EC%83%81%ED%83%9C%EA%B0%80-%EB%90%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드는 절대 busy-wait 상태가 되면 안됩니다.</h3>\n<p>고유 객체의 상태가 바뀔 때까지 쉬지 않고 검사해서는 안됩니다. 바쁜 대기(busy waiting) 상태는 스레드 스케줄러의 변덕에 취약하며 프로세서에 큰 부하를 줘서 다른 유용한 작업의 양이 줄어듭니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 끔찍한 CountDownLatch 구현 - busy-waits incessantly!</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SlowCountDownLatch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SlowCountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token string\">\" &lt; 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 예제 코드를 수행하다 보면, <code class=\"language-text\">concurrent</code> 패키징 있는 <code class=\"language-text\">CountDownLatch</code>보다 훨씬 더 느린 속도를 볼 수 있습니다. 이와 같이 하나 이상의 스레드가 필요도 없이 실행 가능한 상태인 경우 성능과 이식성이 저하됩니다.</p>\n<p><code class=\"language-text\">Thread.yield</code>는 동작하지 않는 스레드가 대기 상태가 되는 등 다른 스레드에게 실행을 양보하는 것을 의미합니다. 하지만 이 경우 특정 스레드가 cpu를 할당받지 못해 느려질 수 있으므로 <code class=\"language-text\">yield</code> 메서드를 쓰는 것은 피해야합니다.</p>\n<p>이러한 경우는 테스트할 수단도 없으며 성능이 좋아지더라도 이식성은 나빠질 수 있습니다. 차라리 애플리케이션 구조를 바꿔 동시에 실행 가능한 스레드의 개수를 적게 만드는 것이 좋습니다. 스레드 우선 순위를 조절하는 것도 위험합니다. (이는 이식성에서 가장 나쁜 특성입니다.)</p>\n"}},{"node":{"title":"[Akka] Akka이란?","path":"/00-akka-starter/","date":"24. January 2021","timeToRead":6,"description":"Akka에 대한 기본 내용을 정리합니다.","content":"<h1 id=\"akka\"><a href=\"#akka\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Akka</h1>\n<p>회사에서는 주로 사용하는 언어는 C#과 Java인데, 분산처리 환경에 대한 이야기를 보다보면 Akka에 대해 들어보게 됩니다. 그러나 저에게는 너무 생소한 개념이라 한번 정리의 필요성을 느꼈습니다.</p>\n<h2 id=\"akka란\"><a href=\"#akka%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Akka란?</h2>\n<ul>\n<li><strong>JVM 상의 동시성과 분산 어플리케이션을 단순화 하는 오픈 소스 툴킷</strong>입니다.</li>\n<li>동시성을 위해 여러 프로그래밍 모델을 지원하며, Erlang으로부터 영향을 받아서 actor기반의 동시성이 두드러집니다.</li>\n<li>\n<p>Akka는 Java환경 및 .net Framework에서 이용가능하며, Actor 모델은 이제 대부분으 개발플랫폼에서 툴킷형태로 사용가능합니다.</p>\n<ul>\n<li><a href=\"https://doc.akka.io/docs/akka/2.4/scala.html#scala-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Akka Scala Document</a></li>\n<li><a href=\"https://doc.akka.io/docs/akka/2.4/java.html#java-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Akka Java Document</a></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"왜-필요해요\"><a href=\"#%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%B4%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>왜 필요해요?</h2>\n<blockquote>\n<p>Amdahl's Law : 멀티코어를 사용하는 프로그램의 속도는 프로그램 내부에 존재하는 순차적 부분이 사용하는 시간에 의해서 제한됩니다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105619519-ae45ff80-5e36-11eb-9e17-a460356274d3.png\" alt=\"Amdahl&#x27;s Law\"></p>\n<p>동시성 구현을 위해 Thread나 Task를 ExecutorService에 제출하는 코드를 구성하고, 이를 실행하면 여러개의 Thread가 동시에 작업을 합니다. 하지만 코드 중에서는 Thread나 Task를 사용하지 않는 순차적 작업을 진행하는 곳이 존재합니다. 이러한 순차적인 작업의 시간 때문에 프로그램이 낼 수 잇는 속도의 최대치는 정해집니다.</p>\n<p>이러한 문제를 해결하기 위해서 Akka는 곳곳에 존재하는 순차적인 부분을 전부 없애거나 최소한으로 만들기 위해서 사용합니다.</p>\n<br/>\n<h2 id=\"akka의-기술\"><a href=\"#akka%EC%9D%98-%EA%B8%B0%EC%88%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Akka의 기술</h2>\n<h3 id=\"1-actor\"><a href=\"#1-actor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Actor</h3>\n<ul>\n<li>배포, 동시성, 병렬성을 위하 단순하고 높은 수준의 추상화를 제공합니다.</li>\n<li>비동기식, 비차단식, 고성능 메시지 기반의 프로그래밍 모델입니다.</li>\n<li>매우 가벼운 이벤트 기반의 프로세스입니다. (GB당 수백만의 힙 메모리)</li>\n</ul>\n<h3 id=\"2-fault-tolerance-내결함성\"><a href=\"#2-fault-tolerance-%EB%82%B4%EA%B2%B0%ED%95%A8%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Fault Tolerance (내결함성)</h3>\n<ul>\n<li>\"let-it-crash\" 의미가 있는 Supervisor hierarchies(감독 계층구조)를 가집니다.</li>\n<li>Actor 시스템은 여러 JVM을 포괄해서 내결함성 시스템을 제공할 수 있습니다.</li>\n<li>스스로 문제를 해결하고, 멈추지 않는 내결함성이 높은 시스템을 작성하는데 유리합니다.</li>\n</ul>\n<h3 id=\"3-location-transparency-위치-투영성\"><a href=\"#3-location-transparency-%EC%9C%84%EC%B9%98-%ED%88%AC%EC%98%81%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Location Transparency (위치 투영성)</h3>\n<ul>\n<li>Akka의 모든 것은 분산 환경에서 작동하도록 설계되었습니다.</li>\n<li>Actor의 모든 상호작용은 순수한 메시지 전달을 사용하며, 모든 것은 비동기적입니다.</li>\n</ul>\n<h3 id=\"4-persistence-지속성\"><a href=\"#4-persistence-%EC%A7%80%EC%86%8D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Persistence (지속성)</h3>\n<ul>\n<li>Actor가 경험하는 상태 변경은 Actor은 시작하거나 다시 시작할 때 지속할 수 있습니다.</li>\n<li>그렇기 때문에 JVM이 충돌하거나 다른 노드로 마이그레이션된 경우에도 행위자가 자신의 상태를 복구할 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"actor-model\"><a href=\"#actor-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Actor Model</h2>\n<p>Actor Model은 모든 것이 Actor 라는 철학을 가지고 있습니다. 이는 모든 것이 객체라는 객체지향프로그래밍의 철학과 일부 비슷합니다.</p>\n<p>Actor Model은 기본 개념은 아래와 같습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Send a finite number of messages to other actors</code></p>\n<ul>\n<li>다른 Actor에 한정된 개수의 메세지를 보낼 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Create a finite number of new actors</code></p>\n<ul>\n<li>유한한 개수의 Actor를 만들 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Designate the behavior to be used for the next message it receives</code></p>\n<ul>\n<li>다른 Actor가 받을 메세지에 사용할 행동을 지정할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">There is no assumed sequence to the above actions and they could be carried out in parallel.</code></p>\n<ul>\n<li>위에서 언급된 조치는 정해진 순서가 없으며, 동시에 수행될 수 잇습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"akka의-특징\"><a href=\"#akka%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Akka의 특징</h2>\n<ul>\n<li>\n<p>Throughput(처리율)</p>\n<ul>\n<li>암달의 법칙에서 설명하는 순차적인 부분이 차지하는 면적을 최소한으로 줄이면서 프로그램의 전체적인 처리율은 그와 반비례해서 급등합니다.</li>\n</ul>\n</li>\n<li>\n<p>Scale Out</p>\n<ul>\n<li>구성 파일의 내용을 약간 수정함을 통해서 Scale out 할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Modularity</p>\n<ul>\n<li>Akka를 이용하여 클래스나 객체를 중심으로 설계하는 방식에서 Actor 방식으로 바뀌게 됩니다.</li>\n<li>Actor는 서로 완벽하게 독립적이며, 메세지를 주고 받는 방식으로만 통신하기 때문에 <strong>코드의 응집성(coherenece), 느슨한 결합(loosely coupled), 캡슐화(encapsulation)</strong>이 보장됩니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>오늘은 Akka의 개념에 대해 정리했습니다. 아직까지 실무에서 동시성이 필요한 로직을 구성할 일은 크게 없으나 이러한 지식을 알고 있다면 매우 좋을 것 같습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://doc.akka.io/docs/akka/2.4/intro/what-is-akka.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://doc.akka.io/docs/akka/2.4/intro/what-is-akka.html</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Actor_model</a></li>\n<li><a href=\"https://elky84.github.io/2018/06/21/akka/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://elky84.github.io/2018/06/21/akka/</a></li>\n<li><a href=\"https://hamait.tistory.com/657\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hamait.tistory.com/657</a></li>\n<li><a href=\"http://wiki.webnori.com/display/AKKA/Akka-Home\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://wiki.webnori.com/display/AKKA/Akka-Home</a></li>\n<li><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=adaylily&#x26;logNo=221614034610&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://m.blog.naver.com/PostView.nhn?blogId=adaylily&#x26;logNo=221614034610&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F</a></li>\n</ul>\n"}}]}}},"context":{}}