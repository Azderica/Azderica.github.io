{"hash":"a43281d937e690ee41ca21913c539571e0d27905","data":{"tag":{"title":"Type","belongsTo":{"edges":[{"node":{"title":"[Java] 자바 제어문","path":"/04-java-study/","date":"2. January 2021","timeToRead":7,"description":"자바의 제어문에 대해 정리합니다.","content":"<h1 id=\"java-control\"><a href=\"#java-control\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Control</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 4주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>선택문</li>\n<li>반복문</li>\n<li>과제. JUnit 5</li>\n<li>과제. live-study dashboad</li>\n<li>과제. Linked List</li>\n<li>과제. Stack</li>\n<li>과제. ListNode Stack</li>\n<li>과제. Queue</li>\n</ul>\n<p>제어문이란 코드의 실행을 제어하는 구문을 나타냅니다. 대표적으로 선택문과 반복문 등이 있습니다.</p>\n<br/>\n<h2 id=\"선택문\"><a href=\"#%EC%84%A0%ED%83%9D%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>선택문</h2>\n<p>선택문은 일반적으로 if 문과 swtich 문으로 나눠집니다.</p>\n<h3 id=\"if-문\"><a href=\"#if-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>If 문</h3>\n<p>if 문은 다음과 같은 <code class=\"language-text\">if (조건문) {실행조건}</code>의 형태를 가집니다. 좀 더 자세하게 설명을 하기 위해서는 해당 코드를 보면서 설명하겠습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ifExample</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> caseNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>caseNum <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>caseNum <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Others\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음의 경우, caseNum 가 1인 경우, One을 출력하고, caseNum가 2인 경우 Two, 그 외의 경우는 모두 Others가 출력됩니다. if문에서 <code class=\"language-text\">else if</code> 와 <code class=\"language-text\">else</code> 는 없어도 됩니다.</p>\n<h3 id=\"switch-문\"><a href=\"#switch-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Switch 문</h3>\n<p>이와 비슷한 예제문으로 Switch 문이 있습니다. 아래와 같은 형태를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchExample</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> caseNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>caseNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 해당 라인이 없으면, 출력으로 One \\n Two 가 나오게 됩니다.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Others\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 if문과 같이 기능은 똑같은 코드입니다. 마찬가지로 <code class=\"language-text\">default</code>는 생략이 가능합니다. <code class=\"language-text\">break</code>문을 사용하지 않으면, 해당 조건에서 끝나지 않고, 아래의 조건까지 계속 실행됩니다.</p>\n<br/>\n<h2 id=\"반복문\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>반복문</h2>\n<p>반복문은 일반적으로 <code class=\"language-text\">for 문</code>과 <code class=\"language-text\">while 문</code>으로 나눠집니다.</p>\n<h3 id=\"for-문\"><a href=\"#for-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>for 문</h3>\n<p>다음 코드는 구구단의 9단을 예시로 만든 코드입니다. for문은 다음과 같이 <code class=\"language-text\">for(initialization; 종료 조건; 반복 수행){}</code>의 형태를 가지고 있습니다. 특히 처음 for문을 배울 때 신경써야하는 부분은 반복 수행은 마지막에 end state가 만족하지 않는 경우 수행됩니댜.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" * 9 = \"</span> <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"while-문\"><a href=\"#while-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>while 문</h3>\n<p>while 문도 이전 코드의 기능과 같습니다. while문은 다음과 같이 <code class=\"language-text\">while(종료 조건){}</code>의 형태를 구성해야합니다. 마찬가지로 조심해야하는 부분으로 종료 조건이 끝나지 않으면 무한 루프가 발생하여 끝나지 않게됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whileExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" * 9 = \"</span> <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 비슷하게 <code class=\"language-text\">do {} while(종료 조건)</code>의 형태가 있습니다. while문과 기능은 비슷하지만, 반드시 한번은 수행된다는 점이 다릅니다.</p>\n<br/>\n<h2 id=\"junit-5\"><a href=\"#junit-5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit 5</h2>\n<p>이에 관련해서는 기존에 Springboot Test 관련으로 공부한 내용이 있어서, 아래의 글을 참고하면 됩니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/01-springboot-test/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Springboog Test</a></li>\n</ul>\n<br/>\n<h2 id=\"live-study-dashboad\"><a href=\"#live-study-dashboad\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>live-study dashboad</h2>\n<p>요구사항</p>\n<ul>\n<li>깃헙 이슈 1번부터 18번까지 댓글을 순회하며 댓글을 남긴 사용자를 체크 할 것.</li>\n<li>참여율을 계산하세요. 총 18회에 중에 몇 %를 참여했는지 소숫점 두자리가지 보여줄 것.</li>\n<li>Github 자바 라이브러리를 사용하면 편리합니다.</li>\n<li>깃헙 API를 익명으로 호출하는데 제한이 있기 때문에 본인의 깃헙 프로젝트에 이슈를 만들고 테스트를 하시면 더 자주 테스트할 수 있습니다.</li>\n</ul>\n<p>코드는 아래의 링크에 있습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-Java-With-WhiteShip/tree/master/src/main/java/week4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">예제 코드</a></li>\n</ul>\n<br/>\n<h2 id=\"linked-list\"><a href=\"#linked-list\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Linked List</h2>\n<p>요구사항</p>\n<ul>\n<li>LinkedList에 대해 공부하세요.</li>\n<li>정수를 저장하는 ListNode 클래스를 구현하세요.</li>\n<li>ListNode add(ListNode head, ListNode nodeToAdd, int position)를 구현하세요.</li>\n<li>ListNode remove(ListNode head, int positionToRemove)를 구현하세요.</li>\n<li>boolean contains(ListNode head, ListNode nodeTocheck)를 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> nodeToAdd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> target <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> position <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    nodeToAdd<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> nodeToAdd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> nodeToAdd<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> positionToRemove<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> target <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> before <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> positionToRemove <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      before <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n      target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    before<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> nodeTocheck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nodeTocheck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"stack\"><a href=\"#stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stack</h2>\n<p>요구사항</p>\n<ul>\n<li>int 배열을 사용해서 정수를 저장하는 Stack을 구현하세요.</li>\n<li>void push(int data)를 구현하세요.</li>\n<li>int pop()을 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"listnode-stack\"><a href=\"#listnode-stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ListNode Stack</h2>\n<p>요구사항</p>\n<ul>\n<li>ListNode head를 가지고 있는 ListNodeStack 클래스를 구현하세요.</li>\n<li>void push(int data)를 구현하세요.</li>\n<li>int pop()을 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNodeStack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNodeStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> curNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n    curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ListNode</span> curNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> before <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      before <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span>\n      curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    before<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> curNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"queue\"><a href=\"#queue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Queue</h2>\n<p>요구사항</p>\n<ul>\n<li>배열을 사용해서 한번</li>\n<li>ListNode를 사용해서 한번.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<ul>\n<li>배열을 사용한 코드</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayQueue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> queue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>ListNode를 사용한 코드</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNodeQueue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNodeQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n"}},{"node":{"title":"[Java] 자바 연산자","path":"/03-java-study/","date":"1. January 2021","timeToRead":8,"description":"자바가 제공하는 다양한 연산자에 대해 정리합니다.","content":"<h1 id=\"java-operator\"><a href=\"#java-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Operator</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 3주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>산술 연산자</li>\n<li>비트 연산자</li>\n<li>관계 연산자</li>\n<li>논리 연산자</li>\n<li>instanceof</li>\n<li>assignment(=) operator</li>\n<li>화살표(->) 연산자</li>\n<li>3항 연산자</li>\n<li>연산자 우선 순위</li>\n<li>(optional) Java 13. switch 연산자</li>\n</ul>\n<br/>\n<h2 id=\"산술-연산자\"><a href=\"#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>산술 연산자</h2>\n<p>산술 연산자는 크게 4가지로 구성됩니다. 덧셈 연산자, 뺄셈 연산자, 곱셈 연산자, 나머지 연산자로 이루어지며, 이는 일반적인 수학 수식처럼 이해하면 됩니다.</p>\n<h3 id=\"코드-예시\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">calcOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 8</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 15</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1 (실수형이라면 1.666 이지만 정수형이므로 내림으로 1이 나온다.)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"비트-연산자\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>비트 연산자</h2>\n<p>비트 연산은 일반적으로 1과 0으로 이루어지며 0은 거짓, 그 외의 값은 참을 의미합니다. 대표적인 비트 연산자로는 <code class=\"language-text\">~(not), &amp;(and), |(or), ^(xor)</code> 이 있습니다.</p>\n<h3 id=\"not-\"><a href=\"#not-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NOT, ~</h3>\n<table>\n<thead>\n<tr>\n<th>입력</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"and-\"><a href=\"#and-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AND, &#x26;</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"or\"><a href=\"#or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OR,</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"xor-\"><a href=\"#xor-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XOR, ^</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"코드-예시-1\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bitOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001111</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -11</span>\n  <span class=\"token comment\">// 11111111 11111111 11111111 11110101</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">|</span> num2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 15</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00001111</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> num2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 비트 연산을 사용할 수 있습니다. 일반적으로 자주 사용하지는 않으나, 종종 알고리즘을 풀 때 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"관계-연산자\"><a href=\"#%EA%B4%80%EA%B3%84-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>관계 연산자</h2>\n<p>연산자를 중심으로 양쪽의 값이 어떤 관계를 갖는지 확인하는 연산입니다. 관계 연산자로는 <code class=\"language-text\">==, !=, &gt;, &gt;=, &lt;, &lt;=, instance of</code> 가 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>이름</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>같음</td>\n<td>양쪽이 같으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>다름</td>\n<td>양쪽이 다르면 참, 같으면 거짓</td>\n</tr>\n<tr>\n<td>></td>\n<td>보다 큼</td>\n<td>왼쪽이 크면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>>=</td>\n<td>보다 크거나 같음</td>\n<td>왼쪽이 크거나 같으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>&#x3C;</td>\n<td>보다 작음</td>\n<td>왼쪽이 작으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>&#x3C;=</td>\n<td>보다 작거나 같음</td>\n<td>왼쪽이 작거나 같으면 참, 아니면 거짓</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"코드-예시-2\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relationOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">>=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"논리-연산자\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>논리 연산자</h2>\n<p>비트 연산과 비슷하지만, 대상이 boolean 타입의 논리 값입니다. <code class=\"language-text\">!</code>은 논리적인 부정을 의미하고, <code class=\"language-text\">&amp;&amp;(and)</code>와 <code class=\"language-text\">||(or)</code> 연산은 비트 연산자와 비슷한 개념을 가집니다.</p>\n<h3 id=\"코드-예시-3\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relativeOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> boo_true <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> boo_false <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>boo_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">&amp;&amp;</span> boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">||</span> boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">&amp;&amp;</span> boo_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만 신경써야하는 부분은, &#x26;와 &#x26;&#x26;, |과 ||은 <strong>두번째 조건</strong>의 확인이 다릅니다.</p>\n<p>&#x26;&#x26;는 첫번째 조건이 참이 아니면 두번째 조건을 보지않지만, &#x26;는 두번째 조건을 봅니다. 마찬가지로 ||은 첫번째 조건이 참이면 두번째 조건을 확인하지않지만, |은 두번째 조건을 확인합니다.</p>\n<br/>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>instanceof</h2>\n<p><strong>레퍼런스 타입 변수가 레퍼런스 타입의 데이터 티입인지 확인해 보는 연산</strong>입니다. 일반적으로 레퍼런스 타입 변수가 레퍼런스 타입으로 타입 변환이 가능한지 확인하기 위해서 사용합니다.</p>\n<p><code class=\"language-text\">(레퍼런스 타입 변수) instance of (레퍼런스 데이터 타입)</code>의 형태를 가집니다.</p>\n<h3 id=\"코드-예시-4\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> interType<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type2 <span class=\"token keyword\">extends</span> type1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type3 <span class=\"token keyword\">implements</span> interType <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Week3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">instanceOfExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    type1 myType1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    type2 myType2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    type3 myType3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType1 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType2 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType3 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType2 <span class=\"token keyword\">instanceof</span> type2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"assignment-operator\"><a href=\"#assignment-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>assignment(=) operator</h2>\n<p>일반적으로 대입 연산자 혹은 할당 연산자라고 부릅니다. 오른쪽의 피연산자를 왼쪽의 피연산자의 값으로 할당합니다. 따라서, 왼쪽에는 변수, 오른쪽에는 리터럴이나 리터럴이 담긴 변수가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">assignmentOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 <code class=\"language-text\">variable = literal</code>의 형태를 가집니다.</p>\n<p>이외에도 시프트 연산이 존재합니다. 다음과 같은 <code class=\"language-text\">&gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</code>와 같은 시프트 연산이 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shiftOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 80</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 01010000</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 작동합니다. <code class=\"language-text\">&gt;&gt;</code>와 <code class=\"language-text\">&gt;&gt;&gt;</code>의 차이는 오른쪽으로 비트 이동시, 왼쪽에 추가로 넣는 값에 MSB값으로 채우는지 0으로 채우는지의 차이입니다.</p>\n<p><code class=\"language-text\">&gt;&gt;</code>의 경우는 MSB로 부족한 비트값을 채우고, <code class=\"language-text\">&gt;&gt;&gt;</code>은 0으로 부족한 값을 채웁니다.</p>\n<br/>\n<h2 id=\"화살표--연산자\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C--%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>화살표(->) 연산자</h2>\n<p>자바에 람다가 도입하면서 등장하였습니다. 자바 람다에 대해서는 <a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">java lambda</a> 글을 참고하면 됩니다.</p>\n<p>해당 글을 간략하게 정리하자면 화살표 연산자는 <code class=\"language-text\">() -&gt; {}</code> 의 형태를 가지고 있으며, 매개변수를 받아, 메소드(함수)를 실행합니다.</p>\n<br/>\n<h2 id=\"3항-연산자\"><a href=\"#3%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3항 연산자</h2>\n<p>다음과 같은 형태를 지니고 있습니다.이 연산자를 통해서 코드를 짧게 할 수 있습니다.</p>\n<p><code class=\"language-text\">(조건) ? (조건이 참일 시, 실행) : (조건이 거짓일 시, 실행)</code></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">binomialOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"okay\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"okay\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 나타낼 수 있습니다.</p>\n<br/>\n<h2 id=\"연산자-우선-순위\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>연산자 우선 순위</h2>\n<p>연산자의 우선 순위는 다음과 같습니다. 해당 우선순위가 앞에 있을수록 먼저 실행됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>우선순위</th>\n<th>연산자</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code class=\"language-text\">(), []</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code class=\"language-text\">!, ~, ++, --</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code class=\"language-text\">*, /, %</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code class=\"language-text\">+, -</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code class=\"language-text\">&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code class=\"language-text\">&lt;, &lt;=, &gt;, &gt;=</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code class=\"language-text\">=, !=</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code class=\"language-text\">&amp;</code></td>\n</tr>\n<tr>\n<td>9</td>\n<td><code class=\"language-text\">^</code></td>\n</tr>\n<tr>\n<td>10</td>\n<td><code class=\"language-text\">|</code></td>\n</tr>\n<tr>\n<td>11</td>\n<td><code class=\"language-text\">&amp;&amp;</code></td>\n</tr>\n<tr>\n<td>12</td>\n<td><code class=\"language-text\">||</code></td>\n</tr>\n<tr>\n<td>13</td>\n<td><code class=\"language-text\">?:</code></td>\n</tr>\n<tr>\n<td>14</td>\n<td><code class=\"language-text\">=, +=, -=, *=, /=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, ~=</code></td>\n</tr>\n</tbody>\n</table>\n<p>다음과 같은 우선순위를 가지며, 일반적으로 괄호를 잘 쓰는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"java-13-switch-연산자\"><a href=\"#java-13-switch-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 13. switch 연산자</h2>\n<p>switch 문법의 가독성과 실행 속도를 향상 시키기 위해 있는 문법입니다. 자바 13에서의 switch 는 statement가 아닌 operator에 더 가깝고, 이미 처리된 결과를 통해서 해당 연산을 수행합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"c\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Document.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Document.html</a></li>\n<li><a href=\"https://blog.naver.com/hsm622/222150928707\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/hsm622/222150928707</a></li>\n<li><a href=\"https://nipafx.dev/java-13-switch-expressions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nipafx.dev/java-13-switch-expressions/</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 데이터 타입, 변수, 배열","path":"/02-java-study/","date":"31. December 2020","timeToRead":5,"description":"자바 데이터 타입, 변수, 배열을 사용하는 방법을 익힙니다.","content":"<h1 id=\"java-package\"><a href=\"#java-package\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Package</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 2주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>프리미티브 타입 종류와 값의 범위 그리고 기본 값</li>\n<li>프리미티브 타입과 레퍼런스 타입</li>\n<li>리터럴</li>\n<li>변수 선언 및 초기화하는 방법</li>\n<li>변수의 스코프와 라이프타임</li>\n<li>타입 변환, 캐스팅 그리고 타입 프로모션</li>\n<li>1차 및 2차 배열 선언하기</li>\n<li>타입 추론, var</li>\n</ul>\n<br/>\n<h2 id=\"프리미티브-타입-종류와-값의-범위-그리고-기본-값\"><a href=\"#%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85-%EC%A2%85%EB%A5%98%EC%99%80-%EA%B0%92%EC%9D%98-%EB%B2%94%EC%9C%84-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B8%B0%EB%B3%B8-%EA%B0%92\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프리미티브 타입 종류와 값의 범위 그리고 기본 값</h2>\n<p>프리미티브 타입은 <strong>기본 타입</strong>을 의미합니다.</p>\n<p>자바의 기본 타입은 8종류입니다.</p>\n<table>\n<thead>\n<tr>\n<th>타입 종류</th>\n<th>메모리 크기</th>\n<th>값 범위</th>\n<th>기본 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>1byte</td>\n<td>-128 ~ 127</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>1byte</td>\n<td>-32,768 ~ 32,767</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>2byte</td>\n<td>-2,147,483,648 ~ 2,147,483,647</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4byte</td>\n<td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>8byte</td>\n<td>(3.4 X 10^-38) ~ (3.4 X 10^38)</td>\n<td>0.0F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>4byte</td>\n<td>(1.7 X 10^-308) ~ (1.7 X 10^308)</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>8byte</td>\n<td>0 ~ 65,535</td>\n<td>'\\u0000'</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>2byte</td>\n<td>true/false</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"프리미티브-타입과-레퍼런스-타입\"><a href=\"#%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85%EA%B3%BC-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4-%ED%83%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프리미티브 타입과 레퍼런스 타입</h2>\n<h3 id=\"primitive-type\"><a href=\"#primitive-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Primitive type</h3>\n<ul>\n<li>기본 타입</li>\n<li>byte, short, signed/unsigned int, signed/unsigned long, float, double, boolean, char</li>\n<li>not object</li>\n<li><strong>값을 저장</strong>합니다</li>\n</ul>\n<h3 id=\"reference-type\"><a href=\"#reference-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference type</h3>\n<ul>\n<li>참조 타입</li>\n<li>class, interface, enum, array, String type</li>\n<li><strong>주소를 저장</strong>합니다.</li>\n</ul>\n<br/>\n<h2 id=\"리터럴\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>리터럴</h2>\n<ul>\n<li><strong>데이터</strong>를 의미합니다.</li>\n<li>변수의 값이 변하지 않습니다.</li>\n</ul>\n<p>다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> alphabet <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"변수-선언-및-초기화하는-방법\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변수 선언 및 초기화하는 방법</h2>\n<p>일반적으로 초기화하는 방법으로 2가지 방법이 있습니다.</p>\n<h3 id=\"1-변수-선언-후-이후에-초기화\"><a href=\"#1-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%9B%84-%EC%9D%B4%ED%9B%84%EC%97%90-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 변수 선언 후 이후에 초기화</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output : 1</span></code></pre>\n<h3 id=\"2-변수-선언과-동시에-초기화\"><a href=\"#2-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EA%B3%BC-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 변수 선언과 동시에 초기화</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output : 2</span></code></pre>\n<br/>\n<h2 id=\"변수의-스코프와-라이프타임\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%EB%9D%BC%EC%9D%B4%ED%94%84%ED%83%80%EC%9E%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변수의 스코프와 라이프타임</h2>\n<p>프로그램에서 사용되는 변수들은 사용 가능한 범위를 가집니다. 그 범위를 <strong>변수의 스코프</strong>라고 합니다. 변수가 선언된 블럭이 그 변수의 사용 범위입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VarScopeExam</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> globalValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">localScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> localValue <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>globalValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 전체 범위</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// localScope 범위</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// localScope 범위</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"타입-변환-캐스팅-그리고-타입-프로모션\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98-%EC%BA%90%EC%8A%A4%ED%8C%85-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%ED%83%80%EC%9E%85-%ED%94%84%EB%A1%9C%EB%AA%A8%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입 변환, 캐스팅 그리고 타입 프로모션</h2>\n<p>타입 변환은 <strong>하나의 타입을 다른 타입으로 바꾸는 것을 의미</strong>합니다.</p>\n<h3 id=\"primitive-type-1\"><a href=\"#primitive-type-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Primitive type</h3>\n<ul>\n<li>\n<p>Widening type cast : 더 넓은 타입으로 형을 변환합니다.</p>\n<ul>\n<li>ex. int to long, byte to short...</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> value2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<p>Narrow type case : 더 좁은 타입으로의 형을 변환합니다.</p>\n<ul>\n<li>값이 손실될 수 있습니다.</li>\n<li>ex. long to int, short to byte...</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> value <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> value2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"reference-type-1\"><a href=\"#reference-type-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference type</h3>\n<ul>\n<li>Inheritance 관계에서만 가능</li>\n<li>\n<p>Upcast : subclass -> superclass</p>\n<ul>\n<li>모든 subclass는 superclass의 컨텐츠를 가지고 있으므로, superclass 로의 casting이 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>Downcase : superclass -> subclass</p>\n<ul>\n<li>모든 superclass는 subclass의 컨텐츠를 가지고 있지 않을 수 도 있습니다. 그래서 오류가 발생할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"1차-및-2차-배열-선언하기\"><a href=\"#1%EC%B0%A8-%EB%B0%8F-2%EC%B0%A8-%EB%B0%B0%EC%97%B4-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1차 및 2차 배열 선언하기</h2>\n<p>배열 길이를 초과하게 되면, ArrayIndexOutOfBounds 예외가 발생합니다.</p>\n<h3 id=\"1차-배열\"><a href=\"#1%EC%B0%A8-%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1차 배열</h3>\n<ul>\n<li><code class=\"language-text\">타입[] 배열이름 = new 타입[배열길이];</code>의 형태를 가지고 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// number = { 1, 2, 3};</span></code></pre>\n<h3 id=\"2차-배열\"><a href=\"#2%EC%B0%A8-%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2차 배열</h3>\n<ul>\n<li><code class=\"language-text\">타입[][] 배열이름 = new 타입[열 길이][행 길이];</code>의 형태를 가지고 있습니다.</li>\n<li>2차원 배열은 배열 요소로 1차원 배열을 가지는 배열입니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// arr</span>\n<span class=\"token comment\">// {  0,  1,  2 }</span>\n<span class=\"token comment\">// { 10, 11, 12 }</span></code></pre>\n<br/>\n<h2 id=\"타입-추론-var\"><a href=\"#%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0-var\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입 추론, var</h2>\n<p><strong>타입 추론</strong>은 <strong>변수 타입을 명시하지 않고 컴파일러가 데이터 타입이 무엇인지 추론한다는 것을 의미</strong>합니다.</p>\n<p>var</p>\n<ul>\n<li>지역 변수에서만 사용 가능합니다.</li>\n<li>선언과 동시에 반드시 초기화를 해야합니다.</li>\n<li>null 초기화하면 작동하지 않습니다.</li>\n<li>람다 표현식에는 var을 사용할 수 없습니다.</li>\n<li>타입이 없어서 배열에 초기값을 넘겨도 작동하지 않습니다.</li>\n</ul>\n<p>예제코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.naver.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/methods.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/generics/methods.html</a></li>\n<li><a href=\"https://www.baeldung.com/java-type-erasure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-type-erasure</a></li>\n<li><a href=\"https://www.baeldung.com/java-10-local-variable-type-inference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-10-local-variable-type-inference</a></li>\n</ul>\n"}}]}}},"context":{}}