{"hash":"fc6e29a67ddc38efe16f045a3de184da00f36a74","data":{"tag":{"title":"SpringStarter","belongsTo":{"edges":[{"node":{"title":"[Springboot] Springboot 활용하기 - 4","path":"/springboot-springboot-4/","date":"4. September 2020","timeToRead":2,"description":" 'Springboot 활용하기'의 네번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기4\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B04\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 활용하기4</h1>\n<br/>\n<h2 id=\"스프링-시큐리티\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티</h2>\n<h3 id=\"starter-security\"><a href=\"#starter-security\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Starter-Security</h3>\n<h4 id=\"스프링-시큐리티-1\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 시큐리티</h4>\n<p>Tip)</p>\n<pre><code class=\"language-java\">@Override\npublic void addViewControllers(ViewControllerRegistry registry){\n    // 기능없이 뷰로만 보내면, 이렇게 하면된다.\n    registry.addViewController(\"/hello\").setViewName(\"hello\");\n}\n</code></pre>\n<ul>\n<li>웹 시큐리티</li>\n<li>메소드 시큐리티</li>\n<li>\n<p>다양한 인증 방법 지원</p>\n<ul>\n<li>LDAP, 폼 인증, Basic 인증, OAuth, ...</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"스프링-부트-시큐리티-자동-설정\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 시큐리티 자동 설정</h4>\n<ul>\n<li>SecurityAutoConfiguration</li>\n<li>UserDetailsServiceAutoConfiguration</li>\n<li>\n<p>spring-boot-starter-security</p>\n<ul>\n<li>스프링 시큐리티 5.* 의존성 추가</li>\n</ul>\n</li>\n<li>모든 요청에 인증이 필요함.</li>\n<li>\n<p>기본 사용자 생성</p>\n<ul>\n<li>Username: user</li>\n<li>Password: 애플리케이션을 실행할 때 마다 랜덤 값 생성 (콘솔에 출력 됨.)</li>\n<li>spring.security.user.name</li>\n<li>spring.security.user.password</li>\n</ul>\n</li>\n<li>\n<p>인증 관련 각종 이벤트 발생</p>\n<ul>\n<li>DefaultAuthenticationEventPublisher 빈 등록</li>\n<li>다양한 인증 에러 핸들러 등록 가능</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"스프링-부트-시큐리티-테스트\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 시큐리티 테스트</h4>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html</a></li>\n</ul>\n<h3 id=\"시큐리티-설정-커스터마이징\"><a href=\"#%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%84%A4%EC%A0%95-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>시큐리티 설정 커스터마이징</h3>\n<h4 id=\"웹-시큐리티-설정\"><a href=\"#%EC%9B%B9-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>웹 시큐리티 설정</h4>\n<pre><code class=\"language-java\">@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n   @Override\n   protected void configure(HttpSecurity http) throws Exception {\n       http.authorizeRequests()\n               .antMatchers(\"/\", \"/hello\").permitAll()\n               .anyRequest().authenticated()\n               .and()\n           .formLogin()\n               .and()\n           .httpBasic();\n   }\n}\n</code></pre>\n<h4 id=\"userdetailsservie-구현\"><a href=\"#userdetailsservie-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>UserDetailsServie 구현</h4>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-authentication-userdetailsservice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-authentication-userdetailsservice</a></li>\n</ul>\n<h4 id=\"passwordencoder-설정-및-사용\"><a href=\"#passwordencoder-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PasswordEncoder 설정 및 사용</h4>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#core-services-password-encoding\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#core-services-password-encoding</a></li>\n</ul>\n<br/>\n<h2 id=\"스프링-rest-클라이언트\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-rest-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 REST 클라이언트</h2>\n<h3 id=\"resttemplate와-webclient\"><a href=\"#resttemplate%EC%99%80-webclient\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RestTemplate와 WebClient</h3>\n<h4 id=\"resttemplate\"><a href=\"#resttemplate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RestTemplate</h4>\n<ul>\n<li>\n<p>Blocking I/O 기반의 Synchronous API</p>\n<ul>\n<li>동기, <code>.getForObjet({url})</code> 사용</li>\n</ul>\n</li>\n<li>RestTemplateAutoConfiguration</li>\n<li>프로젝트에 spring-web 모듈이 있다면 RestTemplateBuilder를 빈으로 등록해 줍니다.</li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#rest-client-access\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#rest-client-access</a></li>\n</ul>\n<h4 id=\"webclient\"><a href=\"#webclient\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WebClient</h4>\n<ul>\n<li>\n<p>Non-Blocking I/O 기반의 Asynchronous API</p>\n<ul>\n<li>비동기, <code>.subscribe(s -> {});</code> 사용</li>\n</ul>\n</li>\n<li>WebClientAutoConfiguration</li>\n<li>프로젝트에 spring-webflux 모듈이 있다면 WebClient.Builder를 빈으로 등록해 줍니다.</li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-client\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-client</a></li>\n</ul>\n<h3 id=\"커스터마이징\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스터마이징</h3>\n<h4 id=\"resttemplate-1\"><a href=\"#resttemplate-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RestTemplate</h4>\n<ul>\n<li>기본으로 java.net.HttpURLConnection 사용.</li>\n<li>\n<p>커스터마이징</p>\n<ul>\n<li>로컬 커스터마이징</li>\n<li>\n<p>글로벌 커스터마이징</p>\n<ul>\n<li>RestTemplateCustomizer</li>\n<li>빈 재정의</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"webclient-1\"><a href=\"#webclient-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WebClient</h4>\n<ul>\n<li>기본으로 Reactor Netty의 HTTP 클라이언트 사용.</li>\n<li>\n<p>커스터마이징</p>\n<ul>\n<li>로컬 커스터마이징</li>\n<li>\n<p>글로벌 커스터마이징</p>\n<ul>\n<li>WebClientCustomizer</li>\n<li>빈 재정의</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"그-외\"><a href=\"#%EA%B7%B8-%EC%99%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그 외.</h2>\n<h3 id=\"그밖의-다양한-기술\"><a href=\"#%EA%B7%B8%EB%B0%96%EC%9D%98-%EB%8B%A4%EC%96%91%ED%95%9C-%EA%B8%B0%EC%88%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그밖의 다양한 기술</h3>\n<h4 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h4>\n<p>: <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle</a></p>\n<ul>\n<li>캐시</li>\n<li>메시징</li>\n<li>Validation</li>\n<li>이메일 전송</li>\n<li>JTA</li>\n<li>스프링 인티그레이션</li>\n<li>스프링 세션</li>\n<li>JMX</li>\n<li>웹소켓</li>\n<li>코틀린</li>\n<li>...</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 활용하기 - 3","path":"/springboot-springboot-3/","date":"30. August 2020","timeToRead":6,"description":" 'Springboot 활용하기'의 세번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기3\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B03\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 활용하기3</h1>\n<br/>\n<h2 id=\"스프링-데이터\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 데이터</h2>\n<h3 id=\"소개\"><a href=\"#%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>소개</h3>\n<table>\n<thead>\n<tr>\n<th><strong>SQL DB</strong></th>\n<th><strong>NoSQL</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>- 인메모리 데이터베이스 지원</td>\n<td>- Redis (Key/Value)</td>\n</tr>\n<tr>\n<td>- DataSource 설정</td>\n<td>- MongoDB (Document)</td>\n</tr>\n<tr>\n<td>- DBCP 설정</td>\n<td>- Neo4J (Graph)</td>\n</tr>\n<tr>\n<td>- JDBC 사용하기</td>\n<td>- Gemfire (IMDG)</td>\n</tr>\n<tr>\n<td>- 스프링 데이터 JPA 사용하기</td>\n<td>- Solr (Search)</td>\n</tr>\n<tr>\n<td>- jOOQ 사용하기</td>\n<td>- Elasticsearch (Search &#x26; Analytics)</td>\n</tr>\n<tr>\n<td>- 데이터베이스 초기화</td>\n<td>- Cassandra</td>\n</tr>\n<tr>\n<td>- 데이터베이스 마이그레이션 툴 연동하기</td>\n<td>- CouchbaseLDAP</td>\n</tr>\n<tr>\n<td></td>\n<td>- InfluxDB</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"인메모리-데이터베이스\"><a href=\"#%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인메모리 데이터베이스</h3>\n<p>지원하는 인-메모리 데이터베이스 </p>\n<ul>\n<li><strong>H2 (추천, 콘솔 때문에...)</strong></li>\n<li>HSQL</li>\n<li>\n<p>Derby</p>\n<p>Spring-JDBC가 클래스패스에 있으면 자동 설정이 필요한 빈을 설정 해줍니다.</p>\n</li>\n<li>\n<ul>\n<li>DataSource</li>\n<li>JdbcTemplate</li>\n</ul>\n</li>\n</ul>\n<p>인-메모리 데이터베이스 기본 연결 정보 확인하는 방법</p>\n<ul>\n<li>URL: “testdb”</li>\n<li>username: “sa”</li>\n<li>password: “”</li>\n</ul>\n<p>H2 콘솔 사용하는 방법</p>\n<ul>\n<li>spring-boot-devtools를 추가하거나...</li>\n<li>spring.h2.console.enabled=true 만 추가.</li>\n<li>/h2-console로 접속 (이 path도 바꿀 수 있음)</li>\n</ul>\n<p>실습 코드</p>\n<ul>\n<li>CREATE TABLE USER (ID INTEGER NOT NULL, name VARCHAR(255), PRIMARY KEY (id))</li>\n<li>INSERT INTO USER VALUES (1, ‘keesun’)</li>\n</ul>\n<h3 id=\"mysql\"><a href=\"#mysql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL</h3>\n<h4 id=\"지원하는-dbcp\"><a href=\"#%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-dbcp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>지원하는 DBCP</h4>\n<ol>\n<li>\n<p><a href=\"https://github.com/brettwooldridge/HikariCP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HikariCP</a> (기본)</p>\n<ol>\n<li><a href=\"https://github.com/brettwooldridge/HikariCP#frequently-used\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/brettwooldridge/HikariCP#frequently-used</a></li>\n</ol>\n</li>\n<li><a href=\"https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tomcat CP</a></li>\n<li><a href=\"https://commons.apache.org/proper/commons-dbcp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Commons DBCP2</a></li>\n</ol>\n<h4 id=\"dbcp-설정\"><a href=\"#dbcp-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DBCP 설정</h4>\n<ul>\n<li><strong>spring.datasource.hikari.*</strong></li>\n<li>spring.datasource.tomcat.*</li>\n<li>spring.datasource.dbcp2.*</li>\n</ul>\n<h4 id=\"mysql-커넥터-의존성-추가\"><a href=\"#mysql-%EC%BB%A4%EB%84%A5%ED%84%B0-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL 커넥터 의존성 추가</h4>\n<pre><code class=\"language-xml\">&#x3C;dependency>\n   &#x3C;groupId>mysql&#x3C;/groupId>\n   &#x3C;artifactId>mysql-connector-java&#x3C;/artifactId>\n&#x3C;/dependency>\n</code></pre>\n<h4 id=\"mysql-추가-도커-사용\"><a href=\"#mysql-%EC%B6%94%EA%B0%80-%EB%8F%84%EC%BB%A4-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL 추가 (도커 사용)</h4>\n<ul>\n<li>docker run -p 3306:3306 --name <strong>mysql_boot</strong> -e MYSQL_ROOT_PASSWORD=<strong>1</strong> -e MYSQL_DATABASE=<strong>springboot</strong> -e MYSQL_USER=<strong>keesun</strong> -e MYSQL_PASSWORD=<strong>pass</strong> -d mysql</li>\n<li>docker exec -i -t mysql_boot bash</li>\n<li>mysql -u root -p</li>\n</ul>\n<h4 id=\"mysql용-datasource-설정\"><a href=\"#mysql%EC%9A%A9-datasource-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL용 Datasource 설정</h4>\n<ul>\n<li>spring.datasource.url=jdbc:mysql://localhost:3306/springboot?useSSL=false</li>\n<li>spring.datasource.username=keesun</li>\n<li>spring.datasource.password=pass</li>\n</ul>\n<h4 id=\"mysql-접속시-에러\"><a href=\"#mysql-%EC%A0%91%EC%86%8D%EC%8B%9C-%EC%97%90%EB%9F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL 접속시 에러</h4>\n<p>MySQL 5.* 최신 버전 사용할 때</p>\n<table>\n<thead>\n<tr>\n<th>문제</th>\n<th>Sat Jul 21 11:17:59 PDT 2018 WARN: Establishing SSL connection without server's identity verification is not recommended. <strong>According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set.</strong> For compliance with existing applications not using SSL the <strong>verifyServerCertificate property is set to 'false'</strong>. You need either to explicitly disable SSL by setting <strong>useSSL=false</strong>, or set <strong>useSSL=true and provide truststore</strong> for server certificate verification.</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>해결</td>\n<td>jdbc:mysql:/localhost:3306/springboot?<strong>useSSL=false</strong></td>\n</tr>\n</tbody>\n</table>\n<p>MySQL 8.* 최신 버전 사용할 때</p>\n<table>\n<thead>\n<tr>\n<th>문제</th>\n<th>com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>해결</td>\n<td>jdbc:mysql:/localhost:3306/springboot?useSSL=false&#x26;<strong>allowPublicKeyRetrieval=true</strong></td>\n</tr>\n</tbody>\n</table>\n<p>MySQL 라이센스 (GPL) 주의</p>\n<ul>\n<li>MySQL 대신 MariaDB 사용 검토</li>\n<li>소스 코드 공개 의무 여부 확인</li>\n</ul>\n<h3 id=\"postgresql\"><a href=\"#postgresql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PostgreSQL</h3>\n<h4 id=\"의존성-추가\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의존성 추가</h4>\n<pre><code class=\"language-xml\">&#x3C;dependency>\n   &#x3C;groupId>org.postgresql&#x3C;/groupId>\n   &#x3C;artifactId>postgresql&#x3C;/artifactId>\n&#x3C;/dependency>\n</code></pre>\n<h4 id=\"postgresql-설치-및-서버-실행-docker\"><a href=\"#postgresql-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89-docker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PostgreSQL 설치 및 서버 실행 (docker)</h4>\n<pre><code class=\"language-bash\">docker run -p 5432:5432 -e POSTGRES_PASSWORD=pass -e POSTGRES_USER=keesun -e POSTGRES_DB=springboot --name postgres_boot -d postgres\n\ndocker exec -i -t postgres_boot bash\n\nsu - postgres\n\npsql springboot\n\n데이터베이스 조회\n\\list\n\n테이블 조회\n\\dt\n\n쿼리\nSELECT * FROM account;\n</code></pre>\n<h4 id=\"postgresql-경고-메시지\"><a href=\"#postgresql-%EA%B2%BD%EA%B3%A0-%EB%A9%94%EC%8B%9C%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PostgreSQL 경고 메시지</h4>\n<p>경고 : <code>org.postgresql.jdbc.PgConnection.createClob() is not yet implemented</code> 해결 : <code>spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true</code></p>\n<h3 id=\"spring-data-jpa-소개\"><a href=\"#spring-data-jpa-%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring-Data-JPA 소개</h3>\n<h4 id=\"ormobject-relational-mapping과-jpajava-persistence-api\"><a href=\"#ormobject-relational-mapping%EA%B3%BC-jpajava-persistence-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ORM(Object-Relational Mapping)과 JPA(Java Persistence API)</h4>\n<ul>\n<li>ORM: 객체와 릴레이션을 맵핑할 때 발생하는 개념적 불일치를 해결하는 프레임워크</li>\n<li><a href=\"http://hibernate.org/orm/what-is-an-orm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://hibernate.org/orm/what-is-an-orm/</a></li>\n<li>JPA: ORM을 위한 자바 (EE) 표현</li>\n</ul>\n<p>스프링 데이터 JPA</p>\n<ul>\n<li>Repository 빈 자동 생성</li>\n<li>쿼리 메소드 자동 구현</li>\n<li>@EnableJpaRepositories(스프링 부트가 자동으로 설정 해줌.)</li>\n<li>SDJ -> JPA -> Hibernate -> Datasource</li>\n</ul>\n<h3 id=\"spring-data-jpa-연동\"><a href=\"#spring-data-jpa-%EC%97%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring-Data-JPA 연동</h3>\n<p>스프링 데이터 JPA 의존성 추가</p>\n<pre><code class=\"language-xml\">&#x3C;dependency>\n   &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n   &#x3C;artifactId>spring-boot-starter-data-jpa&#x3C;/artifactId>\n&#x3C;/dependency>\n</code></pre>\n<p>스프링 데이터 JPA 사용하기</p>\n<ul>\n<li>@Entity 클래스 만들기</li>\n<li>Repository 만들기</li>\n</ul>\n<p>스프링 데이터 리파지토리 테스트 만들기</p>\n<ul>\n<li>H2 DB를 테스트 의존성에 추가하기</li>\n<li>@DataJpaTest (슬라이스 테스트) 작성</li>\n</ul>\n<h3 id=\"데이터베이스-초기화\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데이터베이스 초기화</h3>\n<p>JPA를 사용한 데이터베이스 초기화</p>\n<ul>\n<li>spring.jpa.hibernate.ddl-auto</li>\n<li>spring.jpa.generate-dll=true로 설정 해줘야 동작함.</li>\n</ul>\n<p>SQL 스크립트를 사용한 데이터베이스 초기화</p>\n<ul>\n<li>schema.sql 또는 schema-${platform}.sql</li>\n<li>data.sql 또는 data-${platform}.sql</li>\n<li>${platform} 값은 spring.datasource.platform 으로 설정 가능.</li>\n</ul>\n<h3 id=\"데이터베이스-마이그레이션\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데이터베이스 마이그레이션</h3>\n<blockquote>\n<p>Flyway와 Liquibase가 대표적인데, 지금은 Flyway를 사용하겠습니다. </p>\n</blockquote>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#howto-execute-flyway-database-migrations-on-startup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#howto-execute-flyway-database-migrations-on-startup</a></p>\n<p>의존성 추가</p>\n<ul>\n<li>org.flywaydb:flyway-core</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;dependency>\n   &#x3C;groupId>org.flywaydb&#x3C;/groupId>\n   &#x3C;artifactId>flyway-core&#x3C;/artifactId>\n&#x3C;/dependency>\n</code></pre>\n<p>마이그레이션 디렉토리</p>\n<ul>\n<li>db/migration 또는 db/migration/{vendor}</li>\n<li>spring.flyway.locations로 변경 가능</li>\n</ul>\n<p>마이그레이션 파일 이름</p>\n<ul>\n<li>V숫자__이름.sql</li>\n<li>V는 꼭 대문자로.</li>\n<li>숫자는 순차적으로 (타임스탬프 권장)</li>\n<li>숫자와 이름 사이에 언더바 두 개.</li>\n<li>이름은 가능한 서술적으로.</li>\n</ul>\n<h3 id=\"redis\"><a href=\"#redis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Redis</h3>\n<p>캐시, 메시지 브로커, 키/밸류 스토어 등으로 사용 가능.</p>\n<ul>\n<li>\n<p>의존성 추가</p>\n<ul>\n<li>spring-boot-starter-data-redis</li>\n</ul>\n</li>\n<li>\n<p>Redis 설치 및 실행 (도커)</p>\n<ul>\n<li>\n<p>docker run -p 6379:6379 --name redis_boot -d redis</p>\n<ul>\n<li>6379는 기본설정이라, 따로 설정안해도 잘돌아간다.</li>\n</ul>\n</li>\n<li>docker exec -i -t redis_boot redis-cli</li>\n</ul>\n</li>\n<li>\n<p>스프링 데이터 Redis</p>\n<ul>\n<li><a href=\"https://projects.spring.io/spring-data-redis/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://projects.spring.io/spring-data-redis/</a></li>\n<li>StringRedisTemplate 또는 RedisTemplate</li>\n<li>extends CrudRepository(JPA 레퍼지토리 처럼 사용)</li>\n</ul>\n</li>\n<li>\n<p>Redis 주요 커맨드</p>\n<ul>\n<li><a href=\"https://redis.io/commands\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redis.io/commands</a></li>\n<li>keys *</li>\n<li>get {key}</li>\n<li>hgetall {key}</li>\n<li>hget {key} {column}</li>\n</ul>\n</li>\n<li>\n<p>커스터마이징</p>\n<ul>\n<li>spring.redis.*</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mongodb\"><a href=\"#mongodb\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MongoDB</h3>\n<p>MongoDB는 JSON 기반의 도큐먼트 데이터베이스입니다.</p>\n<ul>\n<li>\n<p>의존성 추가</p>\n<ul>\n<li>spring-boot-starter-data-mongodb</li>\n</ul>\n</li>\n<li>\n<p>MongoDB 설치 및 실행 (도커)</p>\n<ul>\n<li>docker run -p 27017:27017 --name mongo_boot -d mongo</li>\n<li>docker exec -i -t mongo_boot bash</li>\n<li>mongo</li>\n</ul>\n</li>\n<li>\n<p>스프링 데이터 몽고DB</p>\n<ul>\n<li>MongoTemplate</li>\n<li>MongoRepository</li>\n<li>\n<p>내장형 MongoDB (테스트용)</p>\n<ul>\n<li>de.flapdoodle.embed:de.flapdoodle.embed.mongo</li>\n</ul>\n</li>\n<li>@DataMongoTest</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"neo4j\"><a href=\"#neo4j\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Neo4j</h3>\n<p>Neo4j는 노드간의 연관 관계를 영속화하는데 유리한 그래프 데이터베이스 입니다.</p>\n<ul>\n<li>\n<p>의존성 추가</p>\n<ul>\n<li>spring-boot-starter-data-neo4j</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;dependency>\n            &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n            &#x3C;artifactId>spring-boot-starter&#x3C;/artifactId>\n        &#x3C;/dependency>\n</code></pre>\n<ul>\n<li>\n<p>Neo4j 설치 및 실행 (도커)</p>\n<ul>\n<li>docker run -p 7474:7474 -p 7687:7687 -d --name noe4j_boot neo4j</li>\n<li><a href=\"http://localhost:7474/browser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:7474/browser</a></li>\n</ul>\n</li>\n<li>\n<p>스프링 데이터 Neo4J</p>\n<ul>\n<li>Neo4jTemplate (Deprecated) </li>\n<li>SessionFactory</li>\n<li>Neo4jRepository</li>\n</ul>\n</li>\n<li>에러 발생하는 데, 참고할 링크 : <a href=\"https://www.inflearn.com/questions/6023\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.inflearn.com/questions/6023</a></li>\n</ul>\n<h3 id=\"정리\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정리</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-sql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-sql</a></p>\n"}},{"node":{"title":"[Springboot] Springboot 활용하기 - 2","path":"/springboot-springboot-2/","date":"20. August 2020","timeToRead":5,"description":" 'Springboot 활용하기'의 두번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기2\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B02\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 활용하기2</h1>\n<br/>\n<h2 id=\"스프링-웹-mvc\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9B%B9-mvc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 웹 MVC</h2>\n<h3 id=\"소개\"><a href=\"#%EC%86%8C%EA%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>소개</h3>\n<p>스프링 웹 MVC</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#spring-web\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#spring-web</a>\n스프링 부트 MVC</li>\n<li>자동 설정으로 제공하는 여러 기본 기능 (앞으로 살펴볼 예정)\n스프링 MVC 확장</li>\n<li>@Configuration + WebMvcConfigurer\n스프링 MVC 재정의</li>\n<li>@Configuration + @EnableWebMvc</li>\n</ul>\n<h3 id=\"httpmessageconverters\"><a href=\"#httpmessageconverters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HttpMessageConverters</h3>\n<p><a href=\"https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-config-message-converters\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-config-message-converters</a> HTTP 요청 본문을 객체로 변경하거나, 객체를 HTTP 응답 본문으로 변경할 때 사용 {“username”:”keesun”, “password”:”123”} &#x3C;-> User</p>\n<ul>\n<li>@ReuqestBody</li>\n<li>@ResponseBody</li>\n</ul>\n<h3 id=\"viewresolve\"><a href=\"#viewresolve\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ViewResolve</h3>\n<p>스프링 부트</p>\n<ul>\n<li>뷰 리졸버 설정 제공</li>\n<li>HttpMessageConvertersAutoConfiguration</li>\n</ul>\n<p>XML 메시지 컨버터 추가하기</p>\n<pre><code class=\"language-java\">&#x3C;dependency>\n   &#x3C;groupId>com.fasterxml.jackson.dataformat&#x3C;/groupId>\n   &#x3C;artifactId>jackson-dataformat-xml&#x3C;/artifactId>\n   &#x3C;version>2.9.6&#x3C;/version>\n&#x3C;/dependency>\n</code></pre>\n<h3 id=\"정적-리소스-지원\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A7%80%EC%9B%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 리소스 지원</h3>\n<p>정적 리소스 맵핑 “ /**”</p>\n<ul>\n<li>\n<p>기본 리소스 위치</p>\n<ul>\n<li>classpath:/static</li>\n<li>classpath:/public</li>\n<li>classpath:/resources/</li>\n<li>classpath:/META-INF/resources</li>\n<li>예) “/hello.html” => /static/hello.html</li>\n<li>spring.mvc.static-path-pattern: 맵핑 설정 변경 가능</li>\n<li>spring.mvc.static-locations: 리소스 찾을 위치 변경 가능</li>\n</ul>\n</li>\n<li>Last-Modified 헤더를 보고 304 응답을 보냄.</li>\n<li>\n<p>ResourceHttpRequestHandler가 처리함.</p>\n<ul>\n<li>WebMvcConfigurer의 addRersourceHandlers로 커스터마이징 할 수 있음</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java\">@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n  registry.addResourceHandler(\"/m/**\")\n    .addResourceLocations(\"classpath:/m/\")\n    .setCachePeriod(20);\n</code></pre>\n<h3 id=\"웹-jar\"><a href=\"#%EC%9B%B9-jar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>웹 JAR</h3>\n<p>웹JAR 맵핑 “ /webjars/**”</p>\n<ul>\n<li>\n<p>버전 생략하고 사용하려면</p>\n<ul>\n<li>webjars-locator-core 의존성 추가</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java\">&#x3C;script src=\"/webjars/jquery/dist/jquery.min.js\">&#x3C;/script>\n&#x3C;script>\n   $(function() {\n       console.log(\"ready!\");\n   });\n&#x3C;/script>\n</code></pre>\n<h3 id=\"index-페이지와-파비콘\"><a href=\"#index-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%99%80-%ED%8C%8C%EB%B9%84%EC%BD%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>index 페이지와 파비콘</h3>\n<p>웰컴 페이지</p>\n<ul>\n<li>index.html 찾아 보고 있으면 제공.</li>\n<li>index.템플릿 찾아 보고 있으면 제공.</li>\n<li>둘 다 없으면 에러 페이지.</li>\n</ul>\n<p>파비콘</p>\n<ul>\n<li>favicon.ico</li>\n<li>파이콘 만들기 <a href=\"https://favicon.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://favicon.io/</a></li>\n<li>\n<p>파비콘이 안 바뀔 때?</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2208933/how-do-i-force-a-favicon-refresh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/2208933/how-do-i-force-a-favicon-refresh</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"thymeleaf\"><a href=\"#thymeleaf\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thymeleaf</h3>\n<p>스프링 부트가 자동 설정을 지원하는 템플릿 엔진</p>\n<ul>\n<li>FreeMarker</li>\n<li>Groovy</li>\n<li>Thymeleaf</li>\n<li>Mustache</li>\n</ul>\n<p><strong>JSP를 권장하지 않는 이유</strong></p>\n<ul>\n<li>JAR 패키징 할 때는 동작하지 않고, WAR 패키징 해야 함.</li>\n<li>Undertow는 JSP를 지원하지 않음.</li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-jsp-limitations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-jsp-limitations</a></li>\n</ul>\n<p>Thymeleaf 사용하기</p>\n<ul>\n<li><a href=\"https://www.thymeleaf.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.thymeleaf.org/</a></li>\n<li><a href=\"https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html</a></li>\n<li>의존성 추가: spring-boot-starter-thymeleaf</li>\n<li>템플릿 파일 위치: /src/main/resources/template/</li>\n<li>예제: <a href=\"https://github.com/thymeleaf/thymeleafexamples-stsm/blob/3.0-master/src/main/webapp/WEB-INF/templates/seedstartermng.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/thymeleaf/thymeleafexamples-stsm/blob/3.0-master/src/main/webapp/WEB-INF/templates/seedstartermng.html</a></li>\n</ul>\n<h3 id=\"htmlunit\"><a href=\"#htmlunit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HtmlUnit</h3>\n<p>HTML 템플릿 뷰 테스트를 보다 전문적으로 하자.</p>\n<ul>\n<li><a href=\"http://htmlunit.sourceforge.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://htmlunit.sourceforge.net/</a></li>\n<li>\n<p><a href=\"http://htmlunit.sourceforge.net/gettingStarted.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://htmlunit.sourceforge.net/gettingStarted.html</a></p>\n<ul>\n<li>코드를 가져올 수 있고 폼을 받아올 수 있고, 브라우저인척도 되고, 비교할 수 있음</li>\n<li>다양한 예시가 있음.</li>\n</ul>\n</li>\n<li>의존성 추가</li>\n</ul>\n<pre><code class=\"language-java\">&#x3C;dependency>\n   &#x3C;groupId>org.seleniumhq.selenium&#x3C;/groupId>\n   &#x3C;artifactId>htmlunit-driver&#x3C;/artifactId>\n   &#x3C;scope>test&#x3C;/scope>\n&#x3C;/dependency>\n&#x3C;dependency>\n   &#x3C;groupId>net.sourceforge.htmlunit&#x3C;/groupId>\n   &#x3C;artifactId>htmlunit&#x3C;/artifactId>\n   &#x3C;scope>test&#x3C;/scope>\n&#x3C;/dependency>\n</code></pre>\n<ul>\n<li>단. 해당 코드로는 안되서 dependency 버전을 새로 선언해주었다.</li>\n</ul>\n<pre><code class=\"language-java\">&#x3C;dependency>\n   &#x3C;groupId>org.seleniumhq.selenium&#x3C;/groupId>\n   &#x3C;artifactId>htmlunit-driver&#x3C;/artifactId>\n   &#x3C;scope>2.52.0&#x3C;/scope>\n&#x3C;/dependency>\n&#x3C;dependency>\n   &#x3C;groupId>net.sourceforge.htmlunit&#x3C;/groupId>\n   &#x3C;artifactId>htmlunit&#x3C;/artifactId>\n   &#x3C;version>2.43.0&#x3C;/version>\n&#x3C;/dependency>\n</code></pre>\n<ul>\n<li>@Autowire WebClient</li>\n</ul>\n<h3 id=\"exceptionhandler\"><a href=\"#exceptionhandler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ExceptionHandler</h3>\n<p>스프링 @MVC 예외 처리 방법</p>\n<ul>\n<li>@ControllerAdvice</li>\n<li>@ExceptionHandler</li>\n</ul>\n<pre><code class=\"language-bash\">curl http://localhost:8080/\n</code></pre>\n<p>스프링 부트가 제공하는 기본 예외 처리기</p>\n<ul>\n<li>\n<p>BasicErrorController</p>\n<ul>\n<li>HTML과 JSON 응답 지원</li>\n</ul>\n</li>\n<li>\n<p>커스터마이징 방법</p>\n<ul>\n<li>ErrorController 구현</li>\n</ul>\n</li>\n</ul>\n<p>커스텀 에러 페이지</p>\n<ul>\n<li>상태 코드 값에 따라 에러 페이지 보여주기</li>\n<li>src/main/resources/static|template/error/</li>\n<li>404.html</li>\n<li>5xx.html</li>\n<li>ErrorViewResolver 구현</li>\n</ul>\n<h3 id=\"spring-hateoas\"><a href=\"#spring-hateoas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring HATEOAS</h3>\n<h4 id=\"hypermedia-as-the-engine-of-application-state\"><a href=\"#hypermedia-as-the-engine-of-application-state\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hypermedia As The Engine Of Application State</h4>\n<ul>\n<li>서버: 현재 리소스와 연관된 링크 정보를 클라이언트에게 제공한다.</li>\n<li>클라이언트: 연관된 링크 정보를 바탕으로 리소스에 접근한다.</li>\n<li>\n<p>연관된 링크 정보</p>\n<ul>\n<li>Relation</li>\n<li>Hypertext Reference)</li>\n</ul>\n</li>\n<li>spring-boot-starter-hateoas 의존성 추가</li>\n<li><a href=\"https://spring.io/understanding/HATEOAS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://spring.io/understanding/HATEOAS</a></li>\n<li><a href=\"https://spring.io/guides/gs/rest-hateoas/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://spring.io/guides/gs/rest-hateoas/</a></li>\n<li><a href=\"https://docs.spring.io/spring-hateoas/docs/current/reference/html/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-hateoas/docs/current/reference/html/</a></li>\n</ul>\n<p>아래에 있는 2개를 크게 제공한다라고 보면 된다.</p>\n<p>ObjectMapper 제공</p>\n<ul>\n<li>spring.jackson.*</li>\n<li>Jackson2ObjectMapperBuilder</li>\n</ul>\n<p>LinkDiscovers 제공</p>\n<ul>\n<li>클라이언트 쪽에서 링크 정보를 Rel 이름으로 찾을때 사용할 수 있는 XPath 확장 클래스</li>\n</ul>\n<h3 id=\"cors\"><a href=\"#cors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS</h3>\n<p>SOP과 CORS</p>\n<ul>\n<li>\n<p>Single-Origin Policy</p>\n<ul>\n<li>같은 origin에만 요청을 보낼 수 있다.</li>\n<li>기본적으로 제공되어 있음.</li>\n</ul>\n</li>\n<li>\n<p>Cross-Origin Resource Sharing</p>\n<ul>\n<li>서로 다른 origin끼리 resourse를 제어할 수 있게 하는 정책</li>\n</ul>\n</li>\n<li>\n<p><strong>Origin?</strong></p>\n<ul>\n<li>URI 스키마 (http, https)</li>\n<li>hostname (whiteship.me, localhost)</li>\n<li>포트 (8080, 18080)</li>\n<li>이 3개가 조합된 것이 origin이라고 이해하자.</li>\n</ul>\n</li>\n</ul>\n<p>스프링 MVC @CrossOrigin</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-cors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-cors</a></li>\n<li>@Controller나 @RequestMapping에 추가하거나</li>\n<li>WebMvcConfigurer 사용해서 글로벌 설정</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 활용하기 - 1","path":"/springboot-springboot-1/","date":"3. August 2020","timeToRead":8,"description":" 'Springboot 활용하기'의 첫번째 게시글입니다. ","content":"<h1 id=\"springboot-활용하기\"><a href=\"#springboot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 활용하기</h1>\n<table>\n<thead>\n<tr>\n<th>스프링 부트 핵심 기능</th>\n<th>각종 기술 연동</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SpringApplication</td>\n<td>스프링 웹 MVC</td>\n</tr>\n<tr>\n<td>외부설정</td>\n<td>스프링 웹 MVC</td>\n</tr>\n<tr>\n<td>프로파일</td>\n<td>스프링 데이터</td>\n</tr>\n<tr>\n<td>로깅</td>\n<td>스프링 시큐리티</td>\n</tr>\n<tr>\n<td>테스트</td>\n<td>REST API 클라이언트</td>\n</tr>\n<tr>\n<td>Spring-Dev-Tools</td>\n<td>다루지 않은 내용들</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"springapplication\"><a href=\"#springapplication\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SpringApplication</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-spring-application\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-spring-application</a></p>\n<p>Tip) 자동 설정이 되지않을때나 궁금할때는 디버그를 보면 확인할 수 있다.</p>\n<ul>\n<li>\n<p>기본 로그 레벨 INFO</p>\n<ul>\n<li>뒤에로깅수업때자세히살펴볼예정</li>\n</ul>\n</li>\n<li>FailureAnalyzer</li>\n<li>\n<p>배너</p>\n<ul>\n<li>banner.txt | gif | jpg | png</li>\n<li>classpath 또는 spring.banner.location</li>\n<li>${spring-boot.version} 등의 변수를 사용할 수 있음.</li>\n<li>Banner 클래스 구현하고 SpringApplication.setBanner()로 설정 가능.</li>\n</ul>\n<pre><code class=\"language-java\">SpringApplication app = new SpringApplication(SpringinitApplication.class);\napp.setBanner((environment, sourceClass, out) -> {\n  out.println(\"===========\");\n  out.println(\"Spring Boot\");\n  out.println(\"===========\");\n});\n</code></pre>\n</li>\n<li>\n<p>배너끄는방법 </p>\n<ul>\n<li>SpringApplicationBuilder로 빌더 패턴 사용 가능</li>\n</ul>\n<pre><code class=\"language-java\">new SprintApplicationBuilder()\n    .sources(SpringinitApplication.class)\n    .run(args);\n</code></pre>\n</li>\n</ul>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-applicatio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-applicatio</a> n.html#boot-features-application-events-and-listeners</p>\n<ul>\n<li>\n<p>ApplicationEvent 등록</p>\n<ul>\n<li>\n<p>ApplicationContext를 만들기 전에 사용하는 리스너는 @Bean으로 등록할 수 없다.</p>\n<ul>\n<li>SpringApplication.addListners()</li>\n</ul>\n<pre><code class=\"language-java\">// SampleListner\npublic class SampleListner implements ApplicationListener&#x3C;ApplicationStartedEvent> {\n\n  @Override\n    public void onApplicationEvent(ApplicationStartedEvent applicationStartedEvent){\n      System.out.println(\"=======================\");\n      System.out.println(\"Application is starting\");\n      System.out.println(\"=======================\");\n  }\n}\n\n// Application\n@SpringBootApplication\npublic class Application {\n\n                public static void main(String[] args){\n                    SpringApplication app = new SpringApplication(Application.class);\n                    app.addListeners(new SampleListner());\n                    app.run(args);\n                }\n}\n</code></pre>\n<p>다음과 같이 작성시. Spring 이 빌드될 때 찍히는 거 볼 수 있다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>WebApplicationType 설정</p>\n<p>WebApplicationType은 Servlet, Reactive, None 등이 있는데 이걸로 돌아간다.</p>\n<p>둘 다 없으면 None으로 돌려야하고, 두개다 있으면 Servlet으로 돌아간다. Reactive로 하고 싶으면 따로 작성해야한다.</p>\n</li>\n<li>\n<p>애플리케이션 아규먼트 사용하기</p>\n<ul>\n<li>ApplicationArguments를 빈으로 등록해 주니까 가져다 쓰면 됨. </li>\n</ul>\n<p>argument에 생성자가 하나면 Bean을 생성할 때 자동으로 해준다.</p>\n</li>\n<li>\n<p>애플리케이션 실행한 뒤 뭔가 실행하고 싶을 때</p>\n<ul>\n<li>ApplicationRunner (추천) 또는 CommandLineRunner</li>\n<li>\n<p>순서 지정 가능 @Order</p>\n<p>숫자가 높을수록 우선순위가 높은 것.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"외부-설정\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>외부 설정</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config</a></p>\n<h3 id=\"사용할-수-있는-외부-설정\"><a href=\"#%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%99%B8%EB%B6%80-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>사용할 수 있는 외부 설정</h3>\n<ul>\n<li>properties</li>\n<li>YAML</li>\n<li>환경변수</li>\n<li>커맨드 라인 아규먼트</li>\n</ul>\n<h3 id=\"프로퍼티-우선-순위\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로퍼티 우선 순위</h3>\n<p>위에 있을수록 높음.</p>\n<ol>\n<li>유저 홈 디렉토리에 있는 spring-boot-dev-tools.properties</li>\n<li>테스트에 있는 @TestPropertySource</li>\n<li>@SpringBootTest 애노테이션의 properties 애트리뷰트</li>\n<li>커맨드 라인 아규먼트</li>\n<li>SPRING_APPLICATION_JSON (환경 변수 또는 시스템 프로티) 에 들어있는 프로퍼티</li>\n<li>ServletConfig 파라미터</li>\n<li>ServletContext 파라미터</li>\n<li>java:comp/env JNDI 애트리뷰트</li>\n<li>System.getProperties() 자바 시스템 프로퍼티</li>\n<li>OS 환경 변수</li>\n<li>RandomValuePropertySource</li>\n<li>JAR 밖에 있는 특정 프로파일용 application properties</li>\n<li>JAR 안에 있는 특정 프로파일용 application properties</li>\n<li>JAR 밖에 있는 application properties</li>\n<li>JAR 안에 있는 application properties</li>\n<li>@PropertySource</li>\n<li>기본 프로퍼티 (SpringApplication.setDefaultProperties)</li>\n</ol>\n<p>application.properties 우선 순위 (높은게 낮은걸 덮어 씁니다.)</p>\n<blockquote>\n<p>위에 있는게 이김.</p>\n</blockquote>\n<ol>\n<li>file:./config/</li>\n<li>file:./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ol>\n<p>랜덤값 설정하기</p>\n<ul>\n<li>${random.*}</li>\n</ul>\n<p>플레이스 홀더</p>\n<blockquote>\n<p>인풋텍스트나 아레아 등에서 안내 문구를 삽입해 주는 기능 + 클릭하면 사라지는 아주 좋은 기능</p>\n</blockquote>\n<ul>\n<li>name = keesun</li>\n<li>fullName = ${name} baik</li>\n</ul>\n<h3 id=\"타입-세이프-프로퍼티\"><a href=\"#%ED%83%80%EC%9E%85-%EC%84%B8%EC%9D%B4%ED%94%84-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입-세이프 프로퍼티</h3>\n<p>타입-세이프 프로퍼티 <code>@ConfigurationProperties</code></p>\n<ul>\n<li>여러 프로퍼티를 묶어서 읽어올 수 있음</li>\n<li>\n<p>빈으로등록해서다른빈에주입할수있음</p>\n<ul>\n<li>@EnableConfigurationProperties</li>\n<li>@Component</li>\n<li>@Bean</li>\n</ul>\n</li>\n<li>\n<p>융통성 있는 바인딩</p>\n<ul>\n<li>context-path (케밥)</li>\n<li>context_path (언드스코어)</li>\n<li>contextPath (캐멀)</li>\n<li>CONTEXTPATH</li>\n</ul>\n</li>\n<li>\n<p>프로퍼티 타입 컨버전</p>\n<ul>\n<li>@DurationUnit</li>\n</ul>\n</li>\n<li>\n<p>프로퍼티 값 검증</p>\n<ul>\n<li>@Validated</li>\n<li>JSR-303 (@NotNull, ...)</li>\n</ul>\n</li>\n<li>메타정보생성</li>\n<li>\n<p>@Value</p>\n<ul>\n<li>SpEL 을 사용할 수 있지만...</li>\n<li>위에 있는 기능들은 전부 사용 못합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"프로파일\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로파일</h3>\n<ul>\n<li>\n<p>@Profile 애노테이션은 어디에?</p>\n<ul>\n<li>@Configuration</li>\n<li>@Component</li>\n</ul>\n</li>\n<li>\n<p>어떤 프로파일을 활성화 할 것인가?</p>\n<ul>\n<li>spring.profiles.active</li>\n</ul>\n</li>\n<li>\n<p>어떤 프로파일을 추가할 것인가?</p>\n<ul>\n<li>spring.profiles.include</li>\n</ul>\n</li>\n<li>\n<p>프로파일용 프로퍼티</p>\n<ul>\n<li>application-{profile}.properties</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"로깅\"><a href=\"#%EB%A1%9C%EA%B9%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로깅</h2>\n<p>로깅 퍼사드 VS 로거</p>\n<blockquote>\n<p>로깅 퍼사드의 장점은 로거를 자신들이 원하는 거를 사용할 수 있는 점</p>\n</blockquote>\n<ul>\n<li><strong>Commons Logging</strong>, SLF4j</li>\n<li>JUL, Log4J2, <strong>Logback</strong> (최종적으로는 Logback으로 왔다.)</li>\n</ul>\n<p>스프링 5에 로거 관련 변경 사항</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/overview.html#overview-logging\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/overview.html#overview-logging</a></li>\n<li>\n<p>Spring-JCL</p>\n<ul>\n<li>Commons Logging -> SLF4j or Log4j2</li>\n<li>pom.xml에 exclusion 안해도 됨.</li>\n</ul>\n</li>\n</ul>\n<p>스프링 부트 로깅</p>\n<ul>\n<li>기본 포맷</li>\n<li>--debug (일부 핵심 라이브러리만 디버깅 모드로)</li>\n<li>--trace (전부 다 디버깅 모드로)</li>\n<li>컬러 출력: spring.output.ansi.enabled</li>\n<li>파일 출력: logging.file 또는 logging.path</li>\n<li>로그 레벨 조정: logging.level.패지키 = 로그 레벨</li>\n</ul>\n<h3 id=\"커스터마이징\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스터마이징</h3>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html</a> : 커스텀 로그 설정 파일 사용하기</p>\n<p>Logback: logback-spring.xml - 기본적으로는 이거 사용을 추천</p>\n<p>Log4J2: log4j2-spring.xml</p>\n<p>JUL (비추): logging.properties</p>\n<p>Logback extension</p>\n<ul>\n<li>프로파일 <springProfile name=”프로파일”></li>\n<li>Environment 프로퍼티 <springProperty></li>\n</ul>\n<p>로거를 Log4j2로 변경하기</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging</a>\f</p>\n<br/>\n<h2 id=\"테스트\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing</a></p>\n<p>시작은 일단 spring-boot-starter-test를 추가하는 것 부터</p>\n<ul>\n<li>test 스콥으로 추가.</li>\n</ul>\n<p>@SpringBootTest</p>\n<ul>\n<li>@RunWith(SpringRunner.class)랑 같이 써야 함.</li>\n<li>빈 설정 파일은 설정을 안해주나? 알아서 찾습니다. (@SpringBootApplication)</li>\n<li>\n<p>webEnvironment</p>\n<ul>\n<li>MOCK: mock servlet environment. 내장 톰캣 구동 안 함.</li>\n<li>RANDON_PORT, DEFINED_PORT: 내장 톰캣 사용 함.</li>\n<li>NONE: 서블릿 환경 제공 안 함.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java\">// TEST Code\npackage myepark.ebaykorea.springtestdemo;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)\n@AutoConfigureMockMvc\nclass SpringtestdemoApplicationTests {\n\n    @Autowired\n    MockMvc mockMvc;\n\n    @Test\n    void contextLoads() throws Exception {\n        mockMvc.perform(get(\"/hello\"))\n                .andExpect(status().isOk())\n                .andExpect(content().string(\"hello myepark\"))\n                .andDo(print());\n    }\n\n}\n</code></pre>\n<p>@MockBean</p>\n<ul>\n<li>ApplicationContext에 들어있는 빈을 Mock으로 만든 객체로 교체 함.</li>\n<li>모든 @Test 마다 자동으로 리셋.</li>\n</ul>\n<p>슬라이스 테스트</p>\n<ul>\n<li>레이어 별로 잘라서 테스트하고 싶을 때 (빈을 다 체크하고 싶지 않을때)</li>\n<li>@JsonTest</li>\n<li>@WebMvcTest</li>\n<li>@WebFluxTest</li>\n<li>@DataJpaTest</li>\n<li>...</li>\n</ul>\n<p>스프링 테스트</p>\n<ul>\n<li>\n<p><strong>OutputCapture</strong></p>\n<ul>\n<li>Log에 찍히는 모든 output를 캡쳐한다.</li>\n<li>ex) <code>assertThat(outputCapture.toString()).contains(\"holoman\").contains(\"skip\");</code></li>\n</ul>\n</li>\n<li>TestPropertyValues</li>\n<li>TestRestTemplate</li>\n<li>ConfigFileApplicationContextInitializer</li>\n</ul>\n<h3 id=\"spring-boot-devtools\"><a href=\"#spring-boot-devtools\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Boot Devtools</h3>\n<ul>\n<li>캐시 설정을 개발 환경에 맞게 변경.</li>\n<li>\n<p>클래스패스에 있는 파일이 변경 될 때마다 자동으로 재시작.</p>\n<ul>\n<li>\n<p>직접 껐다 켜는거 (cold starts)보다 빠른다. 왜?</p>\n<ul>\n<li>class 로더를 2개를 사용해서...</li>\n</ul>\n</li>\n<li>릴로딩 보다는 느리다. (JRebel 같은건 아님)</li>\n<li>리스타트 하고 싶지 않은 리소스는? spring.devtools.restart.exclude</li>\n<li>리스타트 기능 끄려면? spring.devtools.restart.enabled = false</li>\n</ul>\n</li>\n<li>\n<p>라이브 릴로드? 리스타트 했을 때 브라우저 자동 리프레시 하는 기능</p>\n<ul>\n<li>브라우저 플러그인 설치해야 함.</li>\n<li>라이브 릴로드 서버 끄려면? spring.devtools.liveload.enabled = false</li>\n</ul>\n</li>\n<li>\n<p>글로벌 설정</p>\n<ul>\n<li>\n<p>~/.spring-boot-devtools.properties </p>\n<ul>\n<li>1순위 외부 설정, 우선순위가 가장 높음</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>리모트 애플리케이션</p>\n<ul>\n<li>원격에서 할 수 있는데. 추천은 안함(복잡함, 보안적 측면 문제)</li>\n</ul>\n</li>\n</ul>\n"}},{"node":{"title":"[Springboot] Springboot 이해하기","path":"/springboot-springboot/","date":"9. July 2020","timeToRead":10,"description":" 'Springboot 시작하기'의 두 번째 게시글입니다. ","content":"<h1 id=\"springboot-이해하기\"><a href=\"#springboot-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot 이해하기</h1>\n<br/>\n<h2 id=\"의존성-관리-이해\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EB%A6%AC-%EC%9D%B4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의존성 관리 이해</h2>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-dependency-management\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-dependency-management</a></p>\n<p>의존성으로 다 정의가 되어있어서 적게 신경을 써도 된다는 것은 큰 장점입니다.</p>\n<p>또한 parent를 바꿔서 dependency를 줄 수 있습니다. 만약에 parent를 못바꾸는 상항이면 dependencyManagement에 dependency를 주는 방법이 있습니다.</p>\n<p>일반적으로는 <strong>parent를 설정</strong>하여 <strong>dependency를 주는 것이 중요</strong>합니다. </p>\n<p>의존성 관리 기능을 최대한 사용하는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"의존성-관리-응용\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EB%A6%AC-%EC%9D%91%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의존성 관리 응용</h2>\n<ul>\n<li>버전을 관리해주는 의존성을 추가 (자동으로 버전 관리)</li>\n<li>버전 관리 안해주는 의존성 추가 (추가적으로 버전을 체크해줘야 함)</li>\n<li>\n<p>기존 의존성 버전 변경하기</p>\n<pre><code class=\"language-xml\">&#x3C;properties>\n    &#x3C;spring.version>5.0.6.RELEASE&#x3C;/spring.version>\n&#x3C;/properties>\n</code></pre>\n</li>\n<li><a href=\"https://mvnrepository.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mvnrepository.com/</a></li>\n</ul>\n<p>버전을 관리해주는 version이 있으면 자동으로 spring boot 가 처리를 해주지만,\nversion이 없으면 따로 버전을 관리해줘야합니다.(다른 버전으로 처리가 안되는 경우가 발생할 수 있음. )</p>\n<h2 id=\"자동-설정-이해\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95-%EC%9D%B4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자동 설정 이해</h2>\n<ul>\n<li><code>@EnableAutoConfiguration</code> (<code>@SpringBootApplication</code> 안에 숨어 있음) </li>\n<li>\n<p>빈(Bean)은 두단계로 나눠서읽혀집니다.</p>\n<ul>\n<li>1단계: <code>@ComponentScan</code></li>\n<li>2단계: <code>@EnableAutoConfiguration</code></li>\n</ul>\n</li>\n<li>\n<p><code>@ComponentScan</code>\n-<code>@Component</code></p>\n<ul>\n<li><code>@Configuration @Repository @Service @Controller @RestController</code></li>\n</ul>\n</li>\n<li>\n<p><code>@EnableAutoConfiguration</code></p>\n<ul>\n<li>\n<p>spring.factories</p>\n<ul>\n<li>org.springframework.boot.autoconfigure.EnableAutoConfigu ration</li>\n</ul>\n</li>\n<li><code>@Configuration</code></li>\n<li><code>@ConditionalOnXxxYyyZzz</code></li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java\">@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args){\n        SpringApplication.run(Application.class, args);\n    }\n}\n</code></pre>\n<p>대부분 이 방법으로 진행하는 것이 좋습니다.</p>\n<pre><code class=\"language-java\">@SpringBootConfiguration\n@ComponentScan\n// @EnableAutoConfiguration\npublic class Application {\n\n    public static void main(String[] args){\n        SpringApplication application = new SpringApplication(Application.class);\n        application.setWebApplicationType(WebApplicationType.NONE);\n        application.run(args);\n\n        // SpringApplication.run(Application.class, args);\n    }\n}\n</code></pre>\n<p>위와 같이 돌릴 수도 있습니다. 그러나 다음과 같이 하게된다면 Web 처리는 못하는 단점이 있습니다.</p>\n<h3 id=\"componentscan\"><a href=\"#componentscan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@ComponentScan</h3>\n<p>자기 밑에 있는 모든 Component를 찾아서 Bin으로 등록시킵니다. (자기 자신 포함, 다른 패키지는 안됩니다.)</p>\n<h3 id=\"enableautoconfiguration\"><a href=\"#enableautoconfiguration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>@EnableAutoConfiguration</h3>\n<p><code>: Maven: org.springframework.boot:spring-boot-autoconfiguration:2.3.1.REALSE\\spring-boot-autoconfigure-2.3.1.RELEASE.jar\\META-INF\\spring.factories</code></p>\n<p>자기 밑에 있는 모든 메타파일을 찾아준다. 위의 링크에서 EnableAutoConfiguration이 있는데 아래에 있는 모든 링크를 다 추가해준다.</p>\n<h3 id=\"configuration\"><a href=\"#configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuration</h3>\n<p>Bean을 등록하는 java 설정파일입니다.</p>\n<p><code>Maven: org.springframework.boot:spring-boot-autoconfiguration:2.3.1.REALSE\\spring-boot-autoconfigure-2.3.1.RELEASE.jar\\org.springframework.boot.autoconfigure\\web\\servlet\\WebMvcAutoConfiguration</code></p>\n<p>에 들어가보면 Bean이 있을 때와 없을때를 구분해줍니다.</p>\n<p><code>autoConfiguartion</code> 를 설정하면 수많은 bean이 생성이 되고 적용이 됩니다.</p>\n<br/>\n<h2 id=\"자동-설정-만들기-starter와-autoconfigure\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95-%EB%A7%8C%EB%93%A4%EA%B8%B0-starter%EC%99%80-autoconfigure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자동 설정 만들기. Starter와 AutoConfigure</h2>\n<p>유용한 단축키 :</p>\n<ul>\n<li><code>command + N</code> : get, set, toString() 등을 제공</li>\n<li><code>command + opt + L</code> : 줄 정렬</li>\n</ul>\n<p>AutoConfigure은 흠.. 현재 Process terminated 상태. => 나중에 하기</p>\n<p>문제는  Bean을 등록할려고 하는데 두가지 페이스. component scan 이 먼저 적용됩니다.\n두번째 페이스가 auto configuration인데 첫번째를 두번째 애가 덮어쓴거다.</p>\n<p>이거를 해결하는 방법은 아래와 같습니다.</p>\n<br/>\n<h2 id=\"자동-설정-만들기-configurationproperties\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95-%EB%A7%8C%EB%93%A4%EA%B8%B0-configurationproperties\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자동 설정 만들기. @ConfigurationProperties</h2>\n<p><strong>덮어쓰기 방지하기</strong> </p>\n<ul>\n<li>@ConditionalOnMissingBean : 이 타입의 Bean이 없는 경우만 이 Bean을 등록하는 의미입니다.</li>\n</ul>\n<p><strong>빈 재정의 수고덜기</strong></p>\n<ul>\n<li>@ConfigurationProperties(“holoman”)</li>\n<li>@EnableConfigurationProperties(HolomanProperties)</li>\n<li>프로퍼티 키값 자동 완성</li>\n</ul>\n<p><code>src\\main\\resource\\application.properties</code> 파일을 만들어서 해당 파일에 다음과 같이 선언하면 이후에 사용하기 편해집니다.</p>\n<ul>\n<li>holoman.name = {쓰고 싶은 글, ex name}</li>\n<li>holoman.how-long = {쓰고 싶은 숫자. ex 10}</li>\n</ul>\n<p>또한 src\\main\\java\\me.whiteship\\HolomanProperties.class를 만들어서 name이랑 how-long에 대해 Get 이랑 set 다 정의하고 HolomanConfiguration에서 </p>\n<p>@EnableConfigurationProperties(HolomanProperties)와 같이 선언해서 하기</p>\n<pre><code class=\"language-xml\"> &#x3C;dependency>\n &#x3C;groupId>​org.springframework.boot​&#x3C;/groupId>\n &#x3C;artifactId>​spring-boot-configuration-processor​&#x3C;/artifactId>\n &#x3C;optional>​true​&#x3C;/optional>\n</code></pre>\n<h2 id=\"내장-서블릿-컨테이너\"><a href=\"#%EB%82%B4%EC%9E%A5-%EC%84%9C%EB%B8%94%EB%A6%BF-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>내장 서블릿 컨테이너</h2>\n<ul>\n<li>\n<p>스프링 부트는 서버가 아니다. 그저 툴이라고 생각하자</p>\n<ul>\n<li>톰캣 객체 생성</li>\n<li>포트 선정</li>\n<li>톰캣에 컨텍스트 추가</li>\n<li>서블릿 만들기</li>\n<li>톰캣에 서블릿 추가</li>\n<li>컨텍스트에 서블릿 맵핑</li>\n<li>톰캣 실행 및 대기</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java\">public static void main(String[] args) throws LifecycleException {\n        Tomcat tomcat = new Tomcat();\n        tomcat.setPort(8080);\n\n        Context context = tomcat.addContext(\"/\", \"/\");\n\n        HttpServlet servlet = new HttpServlet() {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n                PrintWriter writer = resp.getWriter();\n                writer.println(\"&#x3C;html>&#x3C;head>&#x3C;title>\");\n                writer.println(\"Hey, Tomcat\");\n                writer.println(\"&#x3C;/title>&#x3C;/head>\");\n                writer.println(\"&#x3C;body>&#x3C;h1>Hello Tomcat&#x3C;/h1>&#x3C;/body>\");\n                writer.println(\"&#x3C;/html>\");\n            }\n        };\n\n        String servletName = \"helloServlet\";\n        tomcat.addServlet(\"/\", servletName, servlet);\n        context.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n        tomcat.getServer().await();\n    }\n</code></pre>\n<p>다음은 예제 코드. 이게 다 Spring boot에서 해주는거구나로 이해하기</p>\n<ul>\n<li>\n<p>이 모든 과정을 보다 상세히 또 유연하고 설정하고 실행해주는게 바로 스프링 부트의 자동 설정</p>\n<ul>\n<li>\n<p>ServletWebServerFactoryAutoConfiguration (서블릿 웹 서버 생성)</p>\n<ul>\n<li>TomcatServletWebServerFactoryCustomizer(서버 커스터마이징)</li>\n</ul>\n</li>\n<li>\n<p>DispatcherServletAutoConfiguration</p>\n<ul>\n<li>서블릿 만들고 등록</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"내장-웹-서버-응용--컨테이너와-포트\"><a href=\"#%EB%82%B4%EC%9E%A5-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%9D%91%EC%9A%A9--%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-%ED%8F%AC%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>내장 웹 서버 응용 : 컨테이너와 포트</h2>\n<p>다음과 같이 자동으로 쓰는 tomcat 대신 jetty를 쓸 수도 있다.</p>\n<pre><code class=\"language-xml\">&#x3C;properties>\n    &#x3C;servlet-api.version>3.1.0&#x3C;/servlet-api.version>\n&#x3C;/properties>\n&#x3C;dependency>\n    &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n    &#x3C;artifactId>spring-boot-starter-web&#x3C;/artifactId>\n    &#x3C;exclusions>\n        &#x3C;!-- Exclude the Tomcat dependency -->\n        &#x3C;exclusion>\n            &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n            &#x3C;artifactId>spring-boot-starter-tomcat&#x3C;/artifactId>\n        &#x3C;/exclusion>\n    &#x3C;/exclusions>\n&#x3C;/dependency>\n&#x3C;!-- Use Jetty instead -->\n&#x3C;dependency>\n    &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n    &#x3C;artifactId>spring-boot-starter-jetty&#x3C;/artifactId>\n&#x3C;/dependency>\n</code></pre>\n<p>해당 글에서 <dependencies></dependencies>를 안주면 에러가 나서. 에러 처리해주었음.</p>\n<ul>\n<li>다른 서블릿 컨테이너로 변경</li>\n<li>웹서버사용하지않기</li>\n<li>\n<p>포트</p>\n<ul>\n<li>server.port</li>\n<li>랜덤포트</li>\n<li>ApplicationListner<ServletWebServerInitializedEvent></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"내장-웹-서버-응용--https-http2\"><a href=\"#%EB%82%B4%EC%9E%A5-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%9D%91%EC%9A%A9--https-http2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>내장 웹 서버 응용 : HTTPS, HTTP2</h2>\n<p>추가 공부 자료\n<a href=\"https://opentutorials.org/course/228/4894\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://opentutorials.org/course/228/4894</a>\n<a href=\"https://gist.github.com/keesun/f93f0b83d7232137283450e08a53c4fd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gist.github.com/keesun/f93f0b83d7232137283450e08a53c4fd</a></p>\n<p>application.properties</p>\n<pre><code class=\"language-xml\">server.ssl.key-store: keystore.p12\nserver.ssl.key-store-password: 123456\nserver.ssl.keyStoreType: PKCS12\nserver.ssl.keyAlias: tomcat\n</code></pre>\n<p>generate-keystore.sh</p>\n<pre><code class=\"language-bash\">keytool -genkey \n  -alias tomcat \n  -storetype PKCS12 \n  -keyalg RSA \n  -keysize 2048 \n  -keystore keystore.p12 \n  -validity 4000\n</code></pre>\n<ul>\n<li>\n<p>HTTPS 설정하기</p>\n<ul>\n<li>키스토어 만들기</li>\n<li>HTTP는 못쓰네?</li>\n</ul>\n</li>\n<li>\n<p>HTTP 커넥터는 코딩으로 설정하기</p>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-boot/tree/v2.0.3.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/spring-projects/spring-boot/tree/v2.0.3.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors</a></li>\n</ul>\n</li>\n<li>\n<p>HTTP2 설정</p>\n<ul>\n<li>server.http2.enable</li>\n<li>사용하는 서블릿 컨테이너 마다 다름</li>\n</ul>\n</li>\n</ul>\n<p>pom.xml</p>\n<pre><code class=\"language-xml\">&#x3C;dependencies>\n    &#x3C;dependency>\n        &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n        &#x3C;artifactId>spring-boot-starter-web&#x3C;/artifactId>\n        &#x3C;exclusions>\n            &#x3C;exclusion>\n                &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n                &#x3C;artifactId>spring-boot-starter-tomcatb&#x3C;/artifactId>\n            &#x3C;/exclusion>\n        &#x3C;/exclusions>\n    &#x3C;/dependency>\n    \n    &#x3C;dependency>\n        &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n        &#x3C;artifactId>spring-boot-starter-undertow&#x3C;/artifactId>\n    &#x3C;/dependency>\n&#x3C;/dependencies>\n</code></pre>\n<p>application.properties</p>\n<pre><code class=\"language-xml\">server.ssl.key-store: keystore.p12\nserver.ssl.key-store-password: 123456\nserver.ssl.keyStoreType: PKCS12\nserver.ssl.keyAlias: spring\nserver.port=8443\nserver.http2.enabled=true\n</code></pre>\n<p>http2를 사용할려면 꼭 <code>server.http2.enabled</code> 을 true로 해주어야한다.</p>\n<br/>\n<h2 id=\"톰캣-http2\"><a href=\"#%ED%86%B0%EC%BA%A3-http2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>톰캣 HTTP2</h2>\n<p>pom.xml</p>\n<pre><code class=\"language-xml\">&#x3C;properties>\n    &#x3C;project.build.sourceEncoding>UTF-8&#x3C;/project.build.sourceEncoding>\n    &#x3C;project.reporting.outputEncoding>UT-8&#x3C;/project.reporting.outputEncoding>\n    &#x3C;java.version>9&#x3C;/java.version>\n    &#x3C;tomcat.version>9.0.18&#x3C;/tomcat.version>\n&#x3C;/properties>\n\n&#x3C;dependencies>\n    &#x3C;dependency>\n        &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n        &#x3C;artifactId>spring-boot-starter-web&#x3C;/artifactId>\n    &#x3C;/dependency>\n&#x3C;/dependencies>\n\n&#x3C;build>\n    &#x3C;plugins>\n        &#x3C;plugin>\n            &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n            &#x3C;artifactId>spring-boot-maven-plugin&#x3C;/artifactId>\n        &#x3C;/plugin>\n    &#x3C;/plugins>\n&#x3C;/build>\n</code></pre>\n<p>여기에  추가적으로 Project Setting에 Project에 version과, module을 맞춰줘야한다.\n그렇게 진행하면. 문제없이 http2로 돌아가는 것을 확인할 수 있다.</p>\n<ul>\n<li>JDK9와 Tomcat 9+ 추천</li>\n<li>\n<p>그이하는아래링크참고</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html#howto-configure-http2-tomcat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html#howto-configure-http2-tomcat</a></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"독립적으로-실행-가능한-jar\"><a href=\"#%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89-%EA%B0%80%EB%8A%A5%ED%95%9C-jar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>독립적으로 실행 가능한 JAR</h2>\n<ul>\n<li>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html</a> </p>\n<ul>\n<li>JAR 파일 하나로 실행 가능, 이걸로 앱이 돌아간다.  - mvn package를 하면 실행 가능한 JAR 파일 “하나가\" 생성 됨.</li>\n<li>spring-maven-plugin이 해주는 일 (패키징)</li>\n<li>\n<p>과거 “uber” jar 를 사용</p>\n<ul>\n<li>모든 클래스 (의존성 및 애플리케이션)를 하나로 압축하는 방법</li>\n<li>\n<p>뭐가 어디에서 온건지 알 수가 없음</p>\n<ul>\n<li>무슨 라이브러리를 쓰는건지..</li>\n</ul>\n</li>\n<li>내용은 다르지만 이름이 같은 파일은 또 어떻게?</li>\n</ul>\n</li>\n<li>\n<p>스프링 부트의 전략</p>\n<ul>\n<li><strong>내장 JAR</strong> : 기본적으로 자바에는 내장 JAR를 로딩하는 표준적인 방법이 없음.</li>\n<li>애플리케이션 클래스와 라이브러리 위치 구분</li>\n<li>org.springframework.boot.loader.jar.JarFile을 사용해서 내장 JAR를 읽는다.</li>\n<li>org.springframework.boot.loader.Launcher를 사용해서 실행한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"스프링-부트-원리-정리\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%9B%90%EB%A6%AC-%EC%A0%95%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 부트 원리 정리</h2>\n<ul>\n<li>\n<p>의존성 관리</p>\n<ul>\n<li>이것만 넣어도 이만큼이나 다 알아서 가져오네?</li>\n</ul>\n</li>\n<li>\n<p><strong>자동 설정</strong></p>\n<ul>\n<li>@EnableAutoConfiguration이 뭘 해주는지 알겠어.</li>\n</ul>\n</li>\n<li>\n<p>내장 웹 서버</p>\n<ul>\n<li>아 스프링 부트가 서버가 아니라 내장 서버를 실행하는 거군.</li>\n</ul>\n</li>\n<li>\n<p>독립적으로 실행 가능한 JAR</p>\n<ul>\n<li>spring-boot-maven 플러그인이 이런걸 해주는구나..</li>\n</ul>\n</li>\n</ul>\n"}}]}}},"context":{}}