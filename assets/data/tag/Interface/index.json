{"hash":"0cbdbe3ad78e6929600cc32326d49aab3f1f64f3","data":{"tag":{"title":"Interface","belongsTo":{"edges":[{"node":{"title":"[Java] Java Interface","path":"/08-java-study/","date":"8. January 2021","timeToRead":7,"description":"Java Interface에 대해 정리합니다.","content":"<h1 id=\"java-interface\"><a href=\"#java-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Interface</h1>\n<p>백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 8주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>인터페이스 정의하는 방법</li>\n<li>인터페이스 구현하는 방법</li>\n<li>인터페이스 레퍼런스를 통해 구현체를 사용하는 방법</li>\n<li>인터페이스 상속</li>\n<li>인터페이스의 기본 메소드 (Default Method), 자바 8</li>\n<li>인터페이스의 static 메소드, 자바 8</li>\n<li>인터페이스의 private 메소드, 자바 9</li>\n</ul>\n<h2 id=\"인터페이스의-개념과-역할\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%97%AD%ED%95%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 개념과 역할</h2>\n<p>가끔 인터페이스와 추상클래스의 차이에 대해 혼란을 가지고 있는 사람이 있는데, 인터페이스의 가장 큰 특징은 <strong>협업을 위한 기능</strong>이라고 생각합니다. 즉, 가이드 라인이나 규격을 제공해주는 <strong>일종의 설계도</strong>로 이해하면 됩니다.</p>\n<p>이러한 인터페이스는 구현이 없으며 <strong>추상 메서드</strong>와 <strong>상수</strong>만을 멤버로 가질 수 있습니다. 다만, Java 8 이후에는 <code class=\"language-text\">default method</code>와 <code class=\"language-text\">static method</code>가 추가되었고, Java 9 이후에는 <code class=\"language-text\">private method</code>를 정의할 수 있습니다.</p>\n<h3 id=\"인터페이스를-왜-쓰나요\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%99%9C-%EC%93%B0%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스를 왜 쓰나요?</h3>\n<ul>\n<li>\n<p>개발 기간의 단축이 가능합니다.</p>\n<ul>\n<li>인터페이스를 통해 분업이 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>클래스간의 결합도를 낮출 수 있습니다.</p>\n<ul>\n<li>코드의 종속성을 줄이고 유지보수성을 높일 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>표준화가 가능합니다.</p>\n<ul>\n<li>클래스의 기본틀을 제공하여, 정형화된 개발이 가능합니다.</li>\n<li><strong>자바의 다형성을 극대화하여서 코드의 수정을 줄이고 유지보수성을 높일 수 있습니다.</strong></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"인터페이스-정의하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 정의하는 방법</h2>\n<p>인터페이스의 선언은 class 대신 <code class=\"language-text\">interface</code> 를 사용하며, 접근 제어자는 <code class=\"language-text\">default</code> 혹은 <code class=\"language-text\">public</code>을 사용합니다.</p>\n<p>형태는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> 인터페이스 명 <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 상수 : 해당 값을 함부로 바꾸지 말고 사용합니다.</span>\n    <span class=\"token comment\">// type 상수명 = value;</span>\n    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 추상 메소드 : 가이드 라인을 통해 오버라이딩을 재구현해서 사용합니다.</span>\n    type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 디폴트 메소드 : 인터페이스에서 기본적인 부분을 제공하지만, 원하지 않으면 오버라이딩에서 재구현해서 사용합니다.</span>\n    <span class=\"token keyword\">default</span> type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 정적 메소드 : 인터페이스에서 제공하는 것으로 무조건 사용합니다.</span>\n    <span class=\"token keyword\">static</span> type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이후에 해당 인터페이스를 상속받는 구현체에서는 추상 메소드를 반드시 구현해야합니다.</p>\n<br/>\n<h2 id=\"인터페이스-구현하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 구현하는 방법</h2>\n<p>인터페이스는 <code class=\"language-text\">implements</code> 키워드를 사용해서 구현할 수 있습니다.</p>\n<p>아래는 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스-레퍼런스를-통해-구현체를-사용하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4%EB%A5%BC-%ED%86%B5%ED%95%B4-%EA%B5%AC%ED%98%84%EC%B2%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 레퍼런스를 통해 구현체를 사용하는 방법</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"고등어\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멍멍\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"개사료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Animal</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Animal</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 야옹</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 멍멍</span>\n\n        <span class=\"token comment\">// 캐스팅</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token punctuation\">)</span> cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 고등어</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">)</span> dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 개사료</span>\n\n        <span class=\"token comment\">// 불가능.</span>\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Animal 클래스로 선언되었기 때문에, 이를 상속받은 메소드를 바로 사용할 수는 없습니다. 다만, 캐스팅을 통해서 호출이 가능합니다.</p>\n<br/>\n<h2 id=\"인터페이스-상속\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%83%81%EC%86%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 상속</h2>\n<p>인터페이스는 앞서 이야기 했듯이 상속을 받아 사용합니다. 추가적으로 자바에는 다중 상속이 불가능 하지만 인터페이스는 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Tv</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Internet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">internet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartTv</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Internet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">internet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 인터페이스 다중 상속이 가능합니다.</p>\n<br/>\n<h2 id=\"인터페이스의-기본-메소드-default-method-자바-8\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%A9%94%EC%86%8C%EB%93%9C-default-method-%EC%9E%90%EB%B0%94-8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 기본 메소드 (Default Method), 자바 8</h2>\n<ul>\n<li>인터페이스에서 메소드 선언이 아니라 <strong>구현체</strong>를 제공하는 방법입니다.</li>\n<li>해당 인터페이스를 구현한 클래스의 어떠한 영향 없이 새로운 기능을 추가하는 방법입니다.</li>\n<li>\n<p><code class=\"language-text\">default method</code>는 해당 인터페이스에서 <strong>구현체가 모르는 기능을 구현했기 때문에 리스크가 존재</strong>합니다.</p>\n<ul>\n<li>컴파일 에러는 발생하지는 않지만, 특정 구현의 로직에 런타임 에러가 발생가능합니다.</li>\n</ul>\n</li>\n</ul>\n<p>다음과 같은 예제 코드가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// default로 선언함으로 메소드를 구현합니다.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCalc</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCaclExam</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Calc</span> cal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// output:3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스의-static-메소드-자바-8\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-static-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9E%90%EB%B0%94-8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 static 메소드, 자바 8</h2>\n<p><code class=\"language-text\">static method</code>이므로 상속이 불가능합니다. 인스턴스 없이 수행할 수 있는 작업을 정의할 수 있습니다.</p>\n<p>다음은 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스의-private-메소드-자바-9\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-private-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9E%90%EB%B0%94-9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 private 메소드, 자바 9</h2>\n<p><code class=\"language-text\">default method</code>와 <code class=\"language-text\">static method</code> 모두 내부 method이나, 외부에 공개되는 <code class=\"language-text\">public method</code>이기 때문에 이에 대한 문제가 존재했습니다. 이러한 interface가 다른 곳에서 상속을 하거나 접근하는 것을 막기 위해 <code class=\"language-text\">private</code>이 등장했습니다.</p>\n<p>java 9에서는 <code class=\"language-text\">private method</code>와 <code class=\"language-text\">private static method</code>가 새롭게 등장했습니다. 이 방법을 통해서 interface에 대한 캡슐화를 유지할 수 있습니다.</p>\n<p>다음은 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연산 시작\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">multiple</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">startMultiple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startMultiple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"곱셈 시작\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>default 메소드는 static, instance를 호출할 수 있고, static 메서드에서는 static 메서드만 호출 가능합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/9/language/toc.htm#JSLAN-GUID-E409CC44-9A8F-4043-82C8-6B95CD939296\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/9/language/toc.htm#JSLAN-GUID-E409CC44-9A8F-4043-82C8-6B95CD939296</a></li>\n<li><a href=\"https://www.notion.so/4b0cf3f6ff7549adb2951e27519fc0e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/4b0cf3f6ff7549adb2951e27519fc0e6</a></li>\n<li><a href=\"https://blog.baesangwoo.dev/posts/java-livestudy-8week/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.baesangwoo.dev/posts/java-livestudy-8week/</a></li>\n<li><a href=\"https://limkydev.tistory.com/197\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://limkydev.tistory.com/197</a></li>\n<li><a href=\"https://enjoyplaying.tistory.com/33\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://enjoyplaying.tistory.com/33</a></li>\n<li><a href=\"https://wonyong-jang.github.io/java/2021/01/04/Java-Interface.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wonyong-jang.github.io/java/2021/01/04/Java-Interface.html</a></li>\n</ul>\n"}}]}}},"context":{}}