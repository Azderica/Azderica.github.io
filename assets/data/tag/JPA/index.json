{"hash":"dffc58dc3840349261c8b8f2b24f6d6644d2fe0c","data":{"tag":{"title":"JPA","belongsTo":{"edges":[{"node":{"title":"[Spring] Spring Data JPA와 QueryDSL","path":"/01-spring-jpa/","date":"23. September 2021","timeToRead":6,"description":"Spring JAP와 QueryDSL에 대해 정리합니다.","content":"<h1 id=\"spring-jpa와-querydsl에-대해\"><a href=\"#spring-jpa%EC%99%80-querydsl%EC%97%90-%EB%8C%80%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring JPA와 QueryDSL에 대해</h1>\n<p>지난 시간에는 이번에 정리할 Spring JPA와 QueryDSL을 위해 ORM과 JPA에 대해 정리했습니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-db-orm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a></li>\n<li><a href=\"https://azderica.github.io/00-java-jpa/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA</a></li>\n</ul>\n<p>오늘은 이를 바탕으로 Spring JPA을 더 자세하게 정리합니다.</p>\n<h2 id=\"spring-data-jpa\"><a href=\"#spring-data-jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Data JPA</h2>\n<ul>\n<li>CRUD 문제를 인터페이스 선언만으로 작성합니다.</li>\n<li>스프링 데이터 JPA가 구현 객체를 동적으로 생성해서 주입합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-jpa-적용-전\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-jpa-%EC%A0%81%EC%9A%A9-%EC%A0%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 JPA 적용 전</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// before JPA</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-jpa-적용-후\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-jpa-%EC%A0%81%EC%9A%A9-%ED%9B%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 JPA 적용 후</h3>\n<ul>\n<li>스프링 데이터 JPA에서는 JpaRepository 인터페이스를 제공합니다.</li>\n<li>인터페이스가 인터페이스를 상속받을 때는 extends를 사용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// after JPA</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-데이터-jpa-적용-후-클래스-다이어그램\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa-%EC%A0%81%EC%9A%A9-%ED%9B%84-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 데이터 JPA 적용 후 클래스 다이어그램</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/134428743-a9727ffa-3cf1-47ad-bc6d-55e42338ca1d.png\" alt=\"image\"></p>\n<ul>\n<li>기본적으로 CRUD를 구현하지 않아도 되며, 인터페이스를 호출해서 쓸 수 있습니다.</li>\n<li>스프링 로딩 시점에 UserRepository의 구현체를 만듭니다.</li>\n</ul>\n<h3 id=\"공통-인터페이스\"><a href=\"#%EA%B3%B5%ED%86%B5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>공통 인터페이스</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/134432747-fdf6a1a2-ab04-4190-971e-25dfee64a4d4.png\" alt=\"image\"></p>\n<ul>\n<li>JpaRepository 인터페이스는 공통 CRUD을 제공합니다.</li>\n<li>제네릭은 &#x3C;Entity, 식별자>로 설정합니다.</li>\n<li>스프링에 스프링 데이터 프로젝트와 스프링 데이터 JPA 프로젝트가 따로 존재합니다.</li>\n<li>스프링 데이터에서 공통적인 기능을 가지고 있고, JPA 기능은 스프링 데이터 JPA 프로젝트에서 가지고 있습니다.</li>\n</ul>\n<h3 id=\"쿼리-메서드\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿼리 메서드</h3>\n<ul>\n<li>메서드 이름으로 쿼리를 생성합니다. <code class=\"language-text\">@Query</code> 어노테이션으로 쿼리를 직접 정의할 수도 있습니다.</li>\n<li>메서드 이름만으로 JPQL 쿼리를 생성합니다.</li>\n<li>선언된 메서드에 대해서는 로딩 시점에 쿼리를 만들기 때문에 에러를 미리 잡을 수 있습니다.</li>\n</ul>\n<h3 id=\"예시\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예시</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>이름으로 검색</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></code></pre>\n<ul>\n<li>이름으로 검색 및 정렬</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sort</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// sort is order by age.</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> AGE <span class=\"token keyword\">DESC</span></code></pre>\n<ul>\n<li>이름으로 검색, 정렬, 페이징</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Pageable</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span>\n    <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> ROW_<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ROWNUM ROWNUM_\n      <span class=\"token keyword\">FROM</span>\n          <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> M<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n            <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n            OEDER <span class=\"token keyword\">BY</span> M<span class=\"token punctuation\">.</span>NAME\n          <span class=\"token punctuation\">)</span> ROW_\n     <span class=\"token keyword\">WHERE</span> ROWNUM <span class=\"token operator\">&lt;=</span> ?\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WHERE</span> ROWNUM_<span class=\"token operator\">></span>?</code></pre>\n<h3 id=\"query-jpql-정의\"><a href=\"#query-jpql-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Query</code>, JPQL 정의</h3>\n<ul>\n<li><code class=\"language-text\">@Query</code> 어노테이션을 사용해서 직접 JPQL을 지정할 수 있습니다.</li>\n<li>이도 로딩 시점에 파싱을 함으로 런타임 에러를 내지 않을 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select u from User u where m.name = ?1\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"web-페이징과-정렬-기능\"><a href=\"#web-%ED%8E%98%EC%9D%B4%EC%A7%95%EA%B3%BC-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web 페이징과 정렬 기능</h3>\n<ul>\n<li>컨트롤러에서 페이징 처리 객체를 바로 인젝션 받을 수도 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>page</td>\n<td>현재 페이지</td>\n</tr>\n<tr>\n<td>size</td>\n<td>한 페이지에 노출할 데이터 건수</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>정렬 조건</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>ex) <code class=\"language-text\">/user?page=0&amp;size=20&amp;sort=name,dsec</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"querydsl\"><a href=\"#querydsl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL</h2>\n<ul>\n<li>SQL, JPQL을 코드로 작성할 수 있도록 도와주는 빌더 API</li>\n<li>JPA에 비해 편리하고 실용적입니다.</li>\n<li>오픈소스입니다.</li>\n</ul>\n<h3 id=\"sql-jpql의-문제점\"><a href=\"#sql-jpql%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SQL, JPQL의 문제점</h3>\n<ul>\n<li>SQL, JPQL은 문자열입니다.</li>\n<li>컴파일 시점에 알 수 있는 방법이 없습니다. (로딩 시점에 알 수 있습니다.)</li>\n<li>해당 로직 실행전까지 작동여부 확인을 할 수 없습니다.</li>\n<li>해당 쿼리 실행 시점에 오류를 발견합니다.</li>\n</ul>\n<h3 id=\"querydsl-장점\"><a href=\"#querydsl-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL 장점</h3>\n<ul>\n<li>문자가 아닌 코드로 작성합니다.</li>\n<li>컴파일 시점에 문법 오류를 발견합니다.</li>\n<li>코드 자동완성이 가능합니다. (IDE 도움)</li>\n<li>단순하고 쉽습니다.</li>\n<li><strong>동적 쿼리</strong>입니다.</li>\n</ul>\n<h3 id=\"querydsl-예시\"><a href=\"#querydsl-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL, 예시</h3>\n<h4 id=\"동작원리-커리타입-생성\"><a href=\"#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC-%EC%BB%A4%EB%A6%AC%ED%83%80%EC%9E%85-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동작원리 커리타입 생성</h4>\n<ul>\n<li><code class=\"language-text\">@Entity</code>를 통해서 <code class=\"language-text\">QMember</code>라는 <code class=\"language-text\">QueryDSL</code> 전용 객체를 만듭니다.</li>\n<li><code class=\"language-text\">Entity Manager</code>를 <code class=\"language-text\">JPAQueryFactory</code>에 넣고, <code class=\"language-text\">QMberber</code> 객체를 가지고 쿼리를 코드로 구성가능합니다.</li>\n</ul>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># JPQL</span>\n<span class=\"token keyword\">select</span> m <span class=\"token keyword\">from</span> Member m <span class=\"token keyword\">where</span> m<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"join\"><a href=\"#join\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>join</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member\n<span class=\"token class-name\">QTeam</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">QTeam</span><span class=\"token punctuation\">.</span>team\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teamA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"페이징-api\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%95-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>페이징 API</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"동적-쿼리\"><a href=\"#%EB%8F%99%EC%A0%81-%EC%BF%BC%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동적 쿼리</h4>\n<ul>\n<li>QueryDSL을 쓰는 진짜 이유</li>\n<li>JPQL은 정적 쿼리이고, 문자열을 더해주는것이 헬입니다.</li>\n<li>QueryDSL은 코드를 더하는 것이기에 수월하게 처리가 가능합니다.</li>\n<li><code class=\"language-text\">BooleanBuilder</code>에 조건을 넣고 쿼리를 실행시키면 된다.</li>\n<li>원하는 필드만 뽑아서 DTO로 뽑아내는 기능도 QueryDSL이 다 지원합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"member\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">BooleanBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BooleanBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  builder<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  builder<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"자바\"><a href=\"#%EC%9E%90%EB%B0%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바</h4>\n<ul>\n<li>객체지향적인 관점에서 가장 중요합니다.</li>\n<li>제약조건을 조립할 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 쿠폰의 상태와 마케팅 뷰 카운트를 체크하는 서비스의 경우</span>\n<span class=\"token keyword\">return</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n      coupon<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>typeParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      coupon<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span><span class=\"token function\">wq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LIVE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      marketing<span class=\"token punctuation\">.</span>viewCount<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>markting<span class=\"token punctuation\">.</span>maxCount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 아래 코드처럼 재조립이 가능합니다.</span>\n<span class=\"token keyword\">return</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n      coupon<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>typeParma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">isServiceable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BooleanExpression</span> <span class=\"token function\">isServiceable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> coupon<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span><span class=\"token function\">wq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LIVE\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>marketing<span class=\"token punctuation\">.</span>viewCount<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>markting<span class=\"token punctuation\">.</span>maxCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://ict-nroo.tistory.com/117\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Data JPA와 QueryDSL</a></li>\n<li><a href=\"https://mycup.tistory.com/333\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">QueryDSL과 JOOQ 비교</a></li>\n</ul>\n"}},{"node":{"title":"[DB] 객체지향 쿼리, JPQL","path":"/00-jpa-jpql/","date":"15. July 2021","timeToRead":2,"description":"JPQL의 기본 개념에 대해 정리합니다.","content":"<h1 id=\"jpqljava-persistence-query-language\"><a href=\"#jpqljava-persistence-query-language\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPQL(Java Persistence Query Language)</h1>\n<h2 id=\"jpql란\"><a href=\"#jpql%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPQL란?</h2>\n<ul>\n<li>테이블이 아닌 엔티티 객체를 대상으로 검색하는 객체지향 쿼리입니다.</li>\n<li>SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않습니다.</li>\n<li>JPA는 JPQL을 분석한 후 적절한 SQL을 만들어 데이터베이스를 조회합니다.</li>\n<li>방언(Dialect)만 변경하면 JPQL을 수정하지 않고 자연스럽게 DB를 변경합니다.</li>\n<li>엔티티 객체를 중심으로 개발합니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpql-사용법\"><a href=\"#jpql-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPQL 사용법</h2>\n<p>다음과 같이 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> jpql<span class=\"token operator\">=</span> <span class=\"token string\">\"select m From Member m where m.name like '%hello%'\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>jpql<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>해당 코드를 보면 다음을 알 수 있습니다.</p>\n<ul>\n<li>테이블이 아닌 객체를 대상으로 검색하는 객체지향 쿼리로 이해하면 됩니다.</li>\n<li>SQL을 추상화하해서 특정 데이터베이스 SQL에 의존하지 않습니다.</li>\n<li>JPQL을 한마디로 정의하면 객체 지향 SQL입니다.</li>\n</ul>\n<h3 id=\"예시-문법\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예시 문법</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> _\n<span class=\"token keyword\">from</span> _\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span> _<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>groupby _<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">having</span> _<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>orderby _<span class=\"token punctuation\">]</span></code></pre>\n<h3 id=\"신경쓸-요소\"><a href=\"#%EC%8B%A0%EA%B2%BD%EC%93%B8-%EC%9A%94%EC%86%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>신경쓸 요소</h3>\n<ul>\n<li><code class=\"language-text\">from</code>에는 객체가 들어갑니다.</li>\n<li>엔티티와 속성은 대문자를 구분합니다.</li>\n<li>JPQL 키워드는 대소문자를 구분하지 않습니다.</li>\n<li>엔티티 이름을 사용하며 테이블 이름이 아닙니다.</li>\n<li>별칭은 필수 입니다.</li>\n</ul>\n<h3 id=\"결과-조회-api\"><a href=\"#%EA%B2%B0%EA%B3%BC-%EC%A1%B0%ED%9A%8C-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결과 조회 API</h3>\n<ul>\n<li><code class=\"language-text\">query.getResultList()</code> : 결과가 하나 이상인 경우, 리스트를 반환합니다.</li>\n<li><code class=\"language-text\">query.getSingleResult()</code> : 결과가 정확히 하나, 단일 객체를 반환합니다. (하나가 아니면 예외가 발생합니다.)</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://data-make.tistory.com/614\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA, JPQL Query 정리</a></li>\n<li><a href=\"https://ict-nroo.tistory.com/116\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA, 객체지향 쿼리, JPQL</a></li>\n<li><a href=\"https://victorydntmd.tistory.com/205\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring JPA, JPQL</a></li>\n</ul>\n"}},{"node":{"title":"[Java] JPA에 대해 정리하기","path":"/00-java-jpa/","date":"22. March 2021","timeToRead":5,"description":"JPA에 대해 정리합니다. ","content":"<h1 id=\"jpa\"><a href=\"#jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA</h1>\n<p>오늘은 앞으로 공부할 QueryDsl, Jooq 등의 개념을 공부하기 위해서 앞서 가장 기본적인 내용을 정리합니다.</p>\n<h2 id=\"jpa-개념\"><a href=\"#jpa-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 개념</h2>\n<p>JPA는 <strong>Java Persistence API</strong> 의 약자로서, RDBMS와 OOP 객체 사이의 불일치에서 오는 패러다임을 해결하기 위해서 만들어졌습니다. 이러한 JPA는 ORM(Object-Relational Mapping) 기술입니다.</p>\n<h3 id=\"orm\"><a href=\"#orm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ORM?</h3>\n<p>ORM이란 Object Relational Mapping, 객체-관계 매핑의 줄임말입니다.</p>\n<p>좀 더 풀어 설명하자면 OOP의 객체 구현 클래스와 RDBMS에서 사용하는 테이블을 자동으로 매핑하는 것을 의미합니다. 이 때, 클래스와 테이블은 서로 기존부터 호환 가능성을 두고 만들어진 것이 아니므로 불일치가 발생하는데 이를 ORM을 통해서 객체 간의 관계를 바탕으로 SQL문을 자동으로 생성하여 불일치를 해결합니다. 이 방법을 통해서 SQL문을 짤 필요없이 객체를 통해 간접적으로 데이터베이스를 조작할 수 있습니다.</p>\n<p>이를 이미지로 나타내면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/111995242-0ca00d80-8b5c-11eb-9662-7f60f1dfc0c7.png\" alt=\"image\"></p>\n<p>좀 더 자세한 ORM은 아래 글을 참조해주세요.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-db-orm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a></li>\n</ul>\n<h3 id=\"그래서-jpa를-좀-더-설명하자면\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-jpa%EB%A5%BC-%EC%A2%80-%EB%8D%94-%EC%84%A4%EB%AA%85%ED%95%98%EC%9E%90%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그래서 JPA를 좀 더 설명하자면.</h3>\n<p>앞서 이야기 나온 ORM 기술을 구현하기 위해 나온 프레임워크가 Hibernate이고, 그 외에도 다른 프레임워크(CoCobase, TopLink) 등이 등장했습니다. 이러한 ORM 구현 프레임워크에 대한 <strong>표준화</strong>가 필요하게 되었는데 이가 바로 JPA입니다.</p>\n<p>JPA는 어플리케이션과 DBMS 사이의 인터페이스 역할을 해주기 때문에. 개발자는 JPA 인터페이스에 맞춰우 구현되어 있는 기능을 사용하면 됩니다.</p>\n<p>이를 잘 표현한 이미지는 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/111996259-2b52d400-8b5d-11eb-8fdb-1f6a91096d4c.png\" alt=\"image\"></p>\n<p>다음과 같이, 개발자는 SQL를 직접 사용할 필요없이 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"jpa-동작-과정\"><a href=\"#jpa-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 동작 과정</h2>\n<p>JPA는 다음과 같이 동작합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/112302631-a394d300-8cde-11eb-8c1e-3693ae32a978.png\" alt=\"image\"></p>\n<p>JPA는 애플리케이션과 JDBC 사이에서 동작합니다.</p>\n<ul>\n<li>개발자가 JPA 사용시, JPA 내부에서 JDBC API를 사용하여 SQL을 호출하고 DB와 통신합니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpa를-사용해야하는-이유\"><a href=\"#jpa%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA를 사용해야하는 이유?</h2>\n<h3 id=\"1-sql-중심-개발---객체-중심-개발\"><a href=\"#1-sql-%EC%A4%91%EC%8B%AC-%EA%B0%9C%EB%B0%9C---%EA%B0%9D%EC%B2%B4-%EC%A4%91%EC%8B%AC-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. SQL 중심 개발 -> 객체 중심 개발</h3>\n<p>SQL 중심의 개발 문제를 해결합니다.</p>\n<p>SQL 중심의 개발 문제는 다음과 같습니다.</p>\n<ul>\n<li>지루한 코드가 반복됩니다.</li>\n<li>객체 지향과 RDB 간의 패러다임이 불일치됩니다.</li>\n<li>객체 지향은 상속 관계를 지원합니다.</li>\n<li>모델링 과정에서의 문제를 해결합니다.</li>\n<li>\n<p>객체 그래프 탐색에서의 문제를 해결합니다.</p>\n<ul>\n<li>SQL 중심 개발은 객체 그래프를 탐색할 수 없습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-생산성\"><a href=\"#2-%EC%83%9D%EC%82%B0%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 생산성</h3>\n<ul>\n<li>JPA을 사용함으로서 <code class=\"language-text\">java.collection</code>처럼 편하게 사용가능합니다.</li>\n<li>\n<p>간단한 CRUD를 제공합니다.</p>\n<ul>\n<li><code class=\"language-text\">jpa.persist</code>, <code class=\"language-text\">find</code>, <code class=\"language-text\">set~</code>, <code class=\"language-text\">jpa.remove</code></li>\n</ul>\n</li>\n<li>수정이 간단합니다.</li>\n</ul>\n<h3 id=\"3-유지보수\"><a href=\"#3-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 유지보수</h3>\n<ul>\n<li>기존처럼 모든 SQL을 수정할 필요가 없습니다.</li>\n<li>JPA에서는 필드만 추가하고, SQL은 JPA가 처리합니다.</li>\n</ul>\n<h3 id=\"4-패러다임-불일치의-해결\"><a href=\"#4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-%EB%B6%88%EC%9D%BC%EC%B9%98%EC%9D%98-%ED%95%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 패러다임 불일치의 해결</h3>\n<ul>\n<li>상속, 연관관계, 객체 그래프 탐색, 비교와 같은 패러다임의 불일치 문제를 해결해줍니다.</li>\n</ul>\n<h3 id=\"5-성능적-이슈\"><a href=\"#5-%EC%84%B1%EB%8A%A5%EC%A0%81-%EC%9D%B4%EC%8A%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 성능적 이슈</h3>\n<ul>\n<li>JPA는 애플리케이션과 데이터베이스 사이에서 다양한 성능 최적화 기능을 제공합니다.</li>\n<li>Ex. 동일 데이터 find로 2번 접근하는 경우, 재사용을 통해서 사용합니다.</li>\n</ul>\n<h3 id=\"6-데이터-접근-추상화와-벤더-독립성\"><a href=\"#6-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC-%EC%B6%94%EC%83%81%ED%99%94%EC%99%80-%EB%B2%A4%EB%8D%94-%EB%8F%85%EB%A6%BD%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 데이터 접근 추상화와 벤더 독립성</h3>\n<ul>\n<li>애플리케이션은 처음 선택한 데이터베이스 기술에 종속되고 다른 데이터베이스로 변경하기 어렵습니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpa-사용-방법\"><a href=\"#jpa-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 사용 방법</h2>\n<p>다음과 같은 메소드 들이 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">flush()</code></p>\n<ul>\n<li>Persistence Context의 변경 내용을 데이터베이스에 반영합니다.</li>\n<li>일반적으로는 직접 사용하지는 않고, 자바 애플리케이션에서 커밋 명령이 들어왔을 때 자동으로 실행됩니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">detach()</code></p>\n<ul>\n<li>특정 Entity를 준영속 상태(영속 컨텍스트의 관리를 받지않음)로 바꿉니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">clear()</code></p>\n<ul>\n<li>Persistence Context를 초기화합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">close()</code></p>\n<ul>\n<li>Persistence Context를 종료합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">merge()</code></p>\n<ul>\n<li>준영속 상태의 엔티티 특징</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">find()</code></p>\n<ul>\n<li>식별자 값을 통해 Entity를 찾습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">persist()</code></p>\n<ul>\n<li>생성도니 Entity를 Persistence Context와 DB에 저장합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">remove()</code></p>\n<ul>\n<li>식별자 값을 통해 Entity를 삭제합니다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://spring.io/projects/spring-data-jpa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Data JPA Doc</a></li>\n<li><a href=\"https://tinkerbellbass.tistory.com/24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 기본 개념</a></li>\n<li><a href=\"https://doublesprogramming.tistory.com/257\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 기본 개념 2</a></li>\n<li><a href=\"https://blog.woniper.net/255\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA란 무엇인가</a></li>\n<li><a href=\"http://okminseok.blogspot.com/2019/09/jpa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 코드 없이 적는 기본 개념</a></li>\n<li><a href=\"https://geonlee.tistory.com/207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM의 장단점</a></li>\n<li><a href=\"https://gmlwjd9405.github.io/2019/08/04/what-is-jpa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA란</a></li>\n</ul>\n"}}]}}},"context":{}}