{"hash":"a494b8b1778660c606708ae3dd5d59774a4a3863","data":{"tag":{"title":"JPA","belongsTo":{"edges":[{"node":{"title":"[Java Time] Java Tiem에 대해 정리","path":"/00-java-time/","date":"8. October 2022","timeToRead":7,"description":"Java Time 에 대해 정리합니다.","content":"<h1 id=\"java의-날짜-시간에-대한-기본적인-정책\"><a href=\"#java%EC%9D%98-%EB%82%A0%EC%A7%9C-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%A0%95%EC%B1%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java의 날짜, 시간에 대한 기본적인 정책</h1>\n<h2 id=\"기존-java의-날짜-api의-문제\"><a href=\"#%EA%B8%B0%EC%A1%B4-java%EC%9D%98-%EB%82%A0%EC%A7%9C-api%EC%9D%98-%EB%AC%B8%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기존 Java의 날짜 API의 문제.</h2>\n<p>Java 8 이전에 사용하던 Date 관련 클래스는 Date, Calander, SimpleDateFormat 등이 있었으나, 많은 문제가 있어 자바 8 버전 이후 부터는 새로운 날짜 관련 API를 제공합니다.</p>\n<p>기존 클래스들의 문제는 다음과 같습니다.</p>\n<ul>\n<li>\n<p>부적절한 클래스, 메소드 이름</p>\n<ul>\n<li>Date 클래스의 경우, TimeStamp 방식으로 동작하고 시간을 내재하고 있으나, ClassName은 Date입니다.</li>\n</ul>\n</li>\n<li>\n<p>Thread saftety 하지 않음</p>\n<ul>\n<li>Date 클래스의 경우 mutable 하기 때문에 다른 Thread에서 값을 참조하고 변경할 수 있습니다. -> 즉, thread safe 하지 않습니다.</li>\n</ul>\n</li>\n<li>\n<p>버그가 발생할 여지가 많음</p>\n<ul>\n<li>Calander 클래스의 경우 입력값의 month가 0이 1월로 처리됩니다. 그래서 Calander.SETEMBER 같은 상수를 사용해야하며, DB 데이터랑 연결하면서 서로 다르게 해석됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"joda-time\"><a href=\"#joda-time\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Joda Time</h3>\n<p>위의 여러한 문제 들이 있어 Java8 이전에서는 Joda-Time이라는 라이브러리를 사용했습니다. 그러나, Java 8 부터는 Joda-Time이 자바 표준 라이브러리로 들어왔습니다.</p>\n<br/>\n<h2 id=\"현재의-java의-날짜시간-정책\"><a href=\"#%ED%98%84%EC%9E%AC%EC%9D%98-java%EC%9D%98-%EB%82%A0%EC%A7%9C%EC%8B%9C%EA%B0%84-%EC%A0%95%EC%B1%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>현재의 Java의 날짜/시간 정책.</h2>\n<p>Java SE8 버전부터 JEP(JDK Enhancement Proposal, JDK 개선 제안) 150, JSR-310(Java Specificiation Requests)의 310번째 Requests인 <code class=\"language-text\">Date &amp; Time API</code> 으로 들어왔습니다.</p>\n<p>Date &#x26; Time API의 목표를 읽어보면 다음과 같습니다.</p>\n<ul>\n<li>date, time, instant, time-zone을 포함하는 공식 시간 개념 지원</li>\n<li>immutable 구현</li>\n<li>개발자의 사용성에 중점을 둔 JDK에 적절하고 효과적인 API 제공</li>\n<li>기존의 JDK API와의 통합</li>\n<li>제한된 calendar 시스템 세트를 제공하고 다른 것들로 확장 가능</li>\n<li>ISO-8601, CLDR 및 BCP47을 포함한 관련 표준 사용</li>\n<li>UTC에 연결하여 명시적 시간 척도를 기반</li>\n</ul>\n<p>현재 이 API는 표준이 되었으며, 위의 나온 Joda-Time의 창시자 분 또한 API를 만드는 데 동참했습니다.</p>\n<p>위의 문제점인 부적절한 클래스나 메서드 명들도 정리가 되었고, Thread safe하며, 여러 편의기능이 많고, Zoned 관련된 기능도 있어 여러 글로벌 서비스에서 적합합니다.</p>\n<h3 id=\"instant\"><a href=\"#instant\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Instant</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/194757246-bf361279-1d9f-49e6-b9a4-8dcc23983f2e.png\" alt=\"Instant Image\"></p>\n<p>1970년 1월 1일 UTC의 첫 번째 순간 이후의 현재 시간까지의 나노초를 나타낸 값입니다. 라이브러리를 더 상세하게 보면, epochSecond와 nanos 로 나눠집니다.</p>\n<p>일반적으로 순간을 표현할 때 사용하며, Unix Timestamp를 구할 때 사용할 수 있습니다. Unix Timestamp를 사용하는 이유는 숫자 자료형을 가지고 연산을 하기 때문에 <code class=\"language-text\">Local/Offset/ZonedDateTime</code>과 비교했을 때 연산 속도가 훨씬 빠릅니다. </p>\n<p>대부분의 비즈니스 로직, 데이터 저장 및 데이터 저장 및 데이터 변경은 UTC로 이루어져야하므로 자주 사용하기에 편리한 클래스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Instant</span> cur <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 2022-10-09T12:45:11.825755Z</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span><span class=\"token function\">getEpochSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1665319511</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 825755000</span></code></pre>\n<p>Instant의 now에서는 UTC 표준 시간대를 사용합니다.  (<code class=\"language-text\">Clock.systemUTC().instant()</code>)</p>\n<h3 id=\"localdate-localtime-localdatetime\"><a href=\"#localdate-localtime-localdatetime\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>LocalDate, LocalTime, LocalDateTime</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/194757952-64597f21-4343-44ef-91d2-5d3d1c1eb728.png\" alt=\"LocalDate\">\n<img src=\"https://user-images.githubusercontent.com/42582516/194757965-437143c5-3218-4907-8525-2885741f2382.png\" alt=\"LocalTime\">\n<img src=\"https://user-images.githubusercontent.com/42582516/194757977-2a98fa74-3ab6-4d7b-ae35-bce256acc625.png\" alt=\"LocalDateTime\"></p>\n<p>Java Time에서 <code class=\"language-text\">Local</code> 이 들어가는 것은 시간대(Zone Offset/Zone Region)에 대한 정보가 없다는 것을 의미합니다. </p>\n<p>일반적으로 이런날을 사용하는 것은 그날이 의미하는 것은 즉, 생일이나 기념일이 많이 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalDate</span> localDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2022-10-09</span>\n\n<span class=\"token class-name\">LocalTime</span> localTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 21:49:19.858512</span>\n\n<span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2022-10-09T21:49:19.858589</span></code></pre>\n<p>위의 라이브러리를 간략하게 이야기하면 <code class=\"language-text\">LocalDateTime</code>은 <code class=\"language-text\">LocalDate</code>와 <code class=\"language-text\">LocalTime</code>으로 구성되어 있고, <code class=\"language-text\">LocalDate</code>는 <code class=\"language-text\">year, month, day</code>로 구성되어 있고 이를 맞춰주기 위한 보정값을 사용하고 있고 <code class=\"language-text\">LocalTime</code>은 <code class=\"language-text\">hour, minute, second, nano</code> 의 값으로 이루어져 있습니다.</p>\n<p>LocalDateTime의 now는 default time-zone 의 정보를 사용합니다. 내부적으로는 Instant형으로 바꾼 후, ZoneOffset으로 한번 바꾼뒤 EpochSecond로 바꾼 이후에야 LocalDateTime으로 출력합니다.</p>\n<h3 id=\"offsetdatetime\"><a href=\"#offsetdatetime\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OffsetDateTime</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/194758471-9ed85cc8-6687-4b15-bf1b-422355f8a0f4.png\" alt=\"OffsetDateTime\"></p>\n<p><code class=\"language-text\">LocalDateTime + ZoneOffset</code> 의 개념입니다. <code class=\"language-text\">OffsetDateTime</code>는 UTC보다 몇 시간/분/초 앞 또는 뒤의 컨텍스트를 사용하여 순간을 날짜 및 시간으로 나타냅니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OffsetDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n<span class=\"token comment\">// 2000-01-01T11:11:11Z</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OffsetDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token comment\">// 2000-01-01T11:11:11+09:00</span>\n<span class=\"token comment\">// 위 두 값은 다릅니다.</span></code></pre>\n<h3 id=\"zoneddatetime\"><a href=\"#zoneddatetime\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ZonedDateTime</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/194759752-1ecd1bc2-ba39-43c2-801c-174f1723a988.png\" alt=\"ZonedDateTime\"></p>\n<p><code class=\"language-text\">OffsetDateTime + ZoneRegion</code> 의 개념입니다. OffsetDateTime 과의 차이점은 DST(Daylight Saving Time)와 같은 Time Transition Rule을 포함하는 ZoneRegion의 유무차이 입니다.</p>\n<p>몇개의 나라의 경우, 서머타임을 적용하기 때문에 때로는 겨울, 여름을 다르게 써야하는데, 이를 자바에서는 하나의 Time Zone으로 통일하고, Time Transition Rule을 가지는 ZoneRules을 통해 알아서 내부적으로 계산해줍니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ZoneId</span> seoulZoneId <span class=\"token operator\">=</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>seoulZoneId<span class=\"token punctuation\">.</span><span class=\"token function\">getRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// ZoneRules[currentStandardOffset=+09:00]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>seoulZoneId<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Asia/Seoul</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 2020-01-01T11:11:11+09:00[Asia/Seoul]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Tokyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 2020-01-01T11:11:11+09:00[Asia/Tokyo]</span>\n<span class=\"token comment\">// 위 두값은 다른 region이라 다릅니다.</span>\n\n<span class=\"token comment\">// cet 는 유럽 시간</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 2020-01-01T11:11:11+01:00[CET]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2020-06-01T11:11:11+02:00[CET]</span></code></pre>\n<br/>\n<h2 id=\"jdbc에서-변경되는-형태\"><a href=\"#jdbc%EC%97%90%EC%84%9C-%EB%B3%80%EA%B2%BD%EB%90%98%EB%8A%94-%ED%98%95%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JDBC에서 변경되는 형태</h2>\n<p>JDBC는 Java와 Database Scheme 사이의 컨버팅을 다음과 같이 자동으로 변경이 됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>Date-time types in Java &#x26; SQL</th>\n<th>Legacy class</th>\n<th>Modern class</th>\n<th>SQL standard data type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Moment</td>\n<td>Java.util.Date<br/>Java.sql.Timestamp</td>\n<td>Java.time.Instant</td>\n<td>TIMESTAMP WITH TIME ZONE</td>\n</tr>\n<tr>\n<td>Moment with offset-from-UTC</td>\n<td>(lacking)</td>\n<td>java.time.OffsetDateTime</td>\n<td>TIMESTAMP WITH TIME ZONE</td>\n</tr>\n<tr>\n<td>Moment with time zone</td>\n<td>java.util.GregorianCalendar<br/>javax.xml.datatype.XMLGregorianCalendar</td>\n<td>java.time.ZonedDateTime</td>\n<td>TIMESTAMP WITH TIME ZONE</td>\n</tr>\n<tr>\n<td>Date &#x26; Time-of-day</td>\n<td>(lacking)</td>\n<td>java.time.LocalDateTime</td>\n<td>TIMESTAMP WITHOUT TIME ZONE</td>\n</tr>\n<tr>\n<td>Date only</td>\n<td>java.sql.Date</td>\n<td>java.time.LocalDate</td>\n<td>DATE</td>\n</tr>\n<tr>\n<td>Time-of-day only</td>\n<td>java.sql.Time</td>\n<td>java.time.LocalTime</td>\n<td>TIMESTAMP WITHOUT TIME ZONE</td>\n</tr>\n<tr>\n<td>Time-of-day with offset</td>\n<td>(lacking)</td>\n<td>java.time.OffsetTime</td>\n<td>TIME WITH TIME ZONE</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Year_2038_problem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2038년 문제</a></li>\n<li><a href=\"https://openjdk.org/jeps/150\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenJDK</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32437550/whats-the-difference-between-instant-and-localdatetime\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">different between Instant and LocalDateTime</a></li>\n<li><a href=\"https://perfectacle.github.io/2018/09/26/java8-date-time/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">날짜와 시간 API</a></li>\n<li><a href=\"https://jaehoney.tistory.com/136\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java 8 - 새로운 Date &#x26; Time 정리</a></li>\n</ul>\n"}},{"node":{"title":"[Spring] Spring Batch 개념 잡기","path":"/01-spring-batch/","date":"23. February 2022","timeToRead":9,"description":"Spring Batch에 대한 기본 개념에 대해 정리합니다.","content":"<h1 id=\"spring-batch-개념-잡기\"><a href=\"#spring-batch-%EA%B0%9C%EB%85%90-%EC%9E%A1%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 개념 잡기</h1>\n<p>스프링 배치에 대한 기본 개념을 잘 이해하지 못하고 있음을 느껴 이에 따라 정리합니다. 정확히는 Spring Rest API와의 정확한 차이를 모른다는 생각이 들었습니다.</p>\n<br/>\n<h2 id=\"spring-batch란\"><a href=\"#spring-batch%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch란.</h2>\n<ul>\n<li>배치 프로세싱은 <strong>일괄처리</strong>라는 뜻을 가지고 있으며, 일괄처리의 의미는 일련의 작업을 정해진 로직으로 수행하는 것입니다.</li>\n<li>스프링 배치는 <strong>로깅/추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작, 건너뛰기, 리소스 관리 등 대용량 레코드 처리에 필수적인 기능을 제공</strong>합니다.</li>\n<li>최적화 및 파티셔닝 기술을 통해 대용량 및 고성능 배치 작업을 가능하게 하는 고급 기술 서비스 및 기능을 제공합니다.</li>\n<li>Spring Batch에서 배치가 실패하여 작업 재시작을 하게 된다면 처음부터가 아닌 실패한 지점부터 실행을 합니다.</li>\n<li>중복 실행을 막기 위해 성공한 이력이 있는 Batch는 동일한 Parameters로 실행 시 Exception이 발생합니다.</li>\n</ul>\n<h3 id=\"일괄처리가-필요한-경우\"><a href=\"#%EC%9D%BC%EA%B4%84%EC%B2%98%EB%A6%AC%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>일괄처리가 필요한 경우</h3>\n<ul>\n<li>대용량의 비지니스 데이터를 복잡한 작업으로 처리해야하는 경우</li>\n<li>특정한 시점에 스케줄러를 통해 자동화된 작업이 필요한 경우</li>\n<li>대용량 데이터의 포맷을 변경, 유효성 검사 등의 작업을 트랜잭션 안에서 처리 후 기록해야하는 경우</li>\n</ul>\n<h3 id=\"batch-vs-quartz\"><a href=\"#batch-vs-quartz\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Batch VS Quartz</h3>\n<ul>\n<li>Spring Batch는 Scheduler가 아니기에 비교 대상이 아닙니다.</li>\n<li>Spring Batch는 Batch Job을 관리하지만 Job을 구동하거나 실행시키는 기능은 지원하고 있지 않습니다.</li>\n<li>Spring에서 Batch Job을 실행시키기 위해서는 Quartz, Scheduler, Jenkins 등 전용 Scheduler를 사용하여야 합니다.</li>\n</ul>\n<p><a href=\"https://homoefficio.github.io/2019/09/28/Quartz-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC-%EC%A0%81%EC%9A%A9-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B0%9C%EC%84%A0-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quartz Scheduler</a></p>\n<br/>\n<h2 id=\"spring-batch-원칙-및-가이드\"><a href=\"#spring-batch-%EC%9B%90%EC%B9%99-%EB%B0%8F-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 원칙 및 가이드</h2>\n<ul>\n<li><strong>배치와 서비스에 영향</strong>을 최소화할 수 있도록 구조와 환경에 맞게 디자인합니다.</li>\n<li>배치 어플리케이션 내에서 가능한한 복잡한 로직은 피하고 <strong>단순</strong>하게 설계합니다.</li>\n<li>데이터 처리하는 곳과 데이터의 저장소는 물리적으로 가능한한 가까운 곳에 위치하게 합니다.</li>\n<li>I/O 등의 <strong>시스템 리소스의 사용을 최소화</strong>하고 최대한 많은 데이터를 메모리 위에서 처리합니다.</li>\n<li>처리 시간이 많이 걸리는 작업을 시작하기 전에 메모리 재할당에 소모되는 시간을 피하기 위해 충분한 메모리를 할당합니다.</li>\n<li>데이터 무결성을 위해서 적절한 <strong>검사 및 기록</strong>하는 코드를 추가합니다.</li>\n</ul>\n<br/>\n<h2 id=\"spring-batch의-3가지-레이어\"><a href=\"#spring-batch%EC%9D%98-3%EA%B0%80%EC%A7%80-%EB%A0%88%EC%9D%B4%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch의 3가지 레이어</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/155138569-34e5e8e7-d474-47a3-b572-e3cffa7be069.png\" alt=\"Spring-Batch-3가지-레이어\"></p>\n<ul>\n<li>Application : 개발자가 작성한 모든 배치 작업과 사용자 정의 코드 포함</li>\n<li>\n<p>Batch Core : 배치 작업을 시작하고 제어하는데 필요한 핵심 런타임 클래스 포함</p>\n<ul>\n<li>JobLauncher, Job, Step</li>\n</ul>\n</li>\n<li>Batch Infrastructure : 개발자와 어플리케이션에서 사용하는 일반적인 Reader와 Writer 그리고</li>\n</ul>\n<blockquote>\n<p>스프링 배치는 계층 구조가 이와 같이 설계되어 있어 Application 계층에서 비지니스 로직을 집중하고 Batch Core에 있는 클래스들을 이용해 제어할 수 있습니다.</p>\n</blockquote>\n<br/>\n<h2 id=\"spring-batch-job-구성-및-개념\"><a href=\"#spring-batch-job-%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch Job 구성 및 개념</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/155139624-20d39950-44c3-4073-acf2-9b0116ee7220.png\" alt=\"spring-job-step\"></p>\n<h3 id=\"job\"><a href=\"#job\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Job</h3>\n<ul>\n<li>배치처리 과정을 하나의 단위로 만들어놓은</li>\n<li>배치처리 과정에 있어 전체 계층 최상단에 위치합니다.</li>\n</ul>\n<h3 id=\"jobinstance\"><a href=\"#jobinstance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobInstance</h3>\n<ul>\n<li>Job의 실행 단위</li>\n<li>2/23일, 2/24일 실행 시 각각의 JobInstance가 생성됩니다.</li>\n<li>앞서 이야기한것 처럼 2/23 실행 실패시 2/23에 대한 데이터만 처리하게 됩니다.</li>\n</ul>\n<h3 id=\"jobparameters\"><a href=\"#jobparameters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobParameters</h3>\n<ul>\n<li>JobInstance를 구별할 때 사용합니다.</li>\n<li>String, Double, Long, Date 4가지 형식을 지원합니다,</li>\n</ul>\n<h3 id=\"jobexecution\"><a href=\"#jobexecution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobExecution</h3>\n<ul>\n<li>JobInstance에 대한 실행 시도에 대한 객체입니다.</li>\n<li>실패하여 재실행 시킨 경우 동일한 JobInstance이나 2번 실행에 대한 JobExecution은 개별로 생기게 됩니다.</li>\n<li>JobInstanced 실행에 대한 상태, 시작시간, 종료시간, 생성시간 등의 정보를 담습니다.</li>\n</ul>\n<h3 id=\"step\"><a href=\"#step\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step</h3>\n<ul>\n<li>Job의 배치 처리를 정의하고 순차적인 단계를 캡슐화합니다.</li>\n<li>Job은 최소한 1개 이상의 Step을 가져야 하며 Job의 실제 일괄처리를 제어하는 모든 정보가 들어있습니다.</li>\n</ul>\n<h3 id=\"stepexecution\"><a href=\"#stepexecution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>StepExecution</h3>\n<ul>\n<li>Step 실행 시도에 대한 객체입니다.</li>\n<li>이전 단계의 Step이 실패하면 StepExecution은 생성되지 않습니다.</li>\n<li>실제 시작이 될 때만 생성됩니다.</li>\n<li>StepExecution은 JobExecution에 저장되는 정보 외에 read 수, write 수, commit 수, skip 수 등의 정보들이 저장됩니다.</li>\n</ul>\n<h3 id=\"executioncontext\"><a href=\"#executioncontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ExecutionContext</h3>\n<ul>\n<li>Job에서 데이터를 공유 할 수 있는 데이터 저장소</li>\n<li>Spring Batch에서 제공하는 ExecutionContext는 JobExecutionContext, StepExecutionContext 2가지 종류가 있으나 이 두가지는 지정되는 범위가 다릅니다.</li>\n<li>JobExecutionContext의 경우 Commit 시점에 저장되는 반면 StepExecutionContext는 실행 사이에 저장이 되게 됩니다.</li>\n<li>ExecutionContext를 통해 Step간 Data 공유가 가능하며 Job 실패시 ExecutionContext를 통한 마지막 실행 값을 재구성할 수 있습니다.</li>\n</ul>\n<h3 id=\"jobrepository\"><a href=\"#jobrepository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobRepository</h3>\n<ul>\n<li>위의 모든 배치 처리 정보를 담고있는 매커니즘</li>\n<li>Job이 실행되게 되면 JobRepository에 JobExecution과 StepExecution을 생성하게 되며 JobRepository에서 Execution 정보들을 저장하고 조죄하며 사용하게 됩니다.</li>\n</ul>\n<h3 id=\"joblauncher\"><a href=\"#joblauncher\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobLauncher</h3>\n<ul>\n<li>JobLauncher는 Job과 JobParameters를 사용하여 Job을 실행하는 객체입니다.</li>\n</ul>\n<h3 id=\"itemreader\"><a href=\"#itemreader\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ItemReader</h3>\n<ul>\n<li>Step에서 Item을 읽어오는 인터페이스</li>\n<li>ItemReader에 대한 다양한 인터페이스가 존재하며 다양한 방법으로 Item을 읽어올 수 있습니다.</li>\n</ul>\n<h3 id=\"itemwriter\"><a href=\"#itemwriter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ItemWriter</h3>\n<ul>\n<li>처리된 Data를 Writer할 때 사용합니다.</li>\n<li>처리 결과물에 따라 Insert, Update, Queue의 Send 등이 될 수 있습니다.</li>\n<li>기본적으로 Item을 Chunk로 묶어 처리하고 있습니다.</li>\n</ul>\n<h3 id=\"itemprocessor\"><a href=\"#itemprocessor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ItemProcessor</h3>\n<ul>\n<li>Reader에서 읽어온 Item을 데이터 처리하는 역할을 합니다.</li>\n<li>Processor는 배치를 처리하는데 필수 요소는 아니며 Reader, Writer, Processor 처리를 분리하여 각각의 역할을 명확하게 구분합니다.</li>\n</ul>\n<br/>\n<h2 id=\"spring-batch-장점\"><a href=\"#spring-batch-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 장점</h2>\n<ul>\n<li>\n<p>유지보수성</p>\n<ul>\n<li>배치는 다른 어플리케이션의 코드들보다 수명이 깁니다.</li>\n<li>테스트 용이성, 풍부한 API</li>\n</ul>\n</li>\n<li>\n<p>유연성</p>\n<ul>\n<li>JVM을 이용한 이식성 (기존의 코볼, C++ 등과 비교했을 때)</li>\n<li>코드 공유능력 (POJO 재활용 등)</li>\n</ul>\n</li>\n<li>\n<p>확장성</p>\n<ul>\n<li>과거의 메인프레임 방식이나, 커스텀하게 처리하던 방식은 병렬 처리르 하려면 고려할게 많아 확장성과 안정성이 떨어집니다.</li>\n<li>자바(or 스프링) 배치는 단일 처리, 병력 처리 등이 모두 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>개발인력</p>\n<ul>\n<li>자바, 스프링 프레임워크를 기반</li>\n<li>커뮤니티의 강력한 지원</li>\n</ul>\n</li>\n<li>\n<p>비용</p>\n<ul>\n<li>오픈소스</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"배치-프레임워크-중-스프링-배치를-쓰면-얻는-장점은\"><a href=\"#%EB%B0%B0%EC%B9%98-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EC%A4%91-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B0%B0%EC%B9%98%EB%A5%BC-%EC%93%B0%EB%A9%B4-%EC%96%BB%EB%8A%94-%EC%9E%A5%EC%A0%90%EC%9D%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배치 프레임워크 중 스프링 배치를 쓰면 얻는 장점은?</h3>\n<ul>\n<li>\n<p>ETL(추출=extract - 변환=transform - 적재=load) 패턴에 적합합니다.</p>\n<ul>\n<li>청크 기반 처리</li>\n<li>다양한 확장 기능</li>\n</ul>\n</li>\n<li>\n<p>데이터 마이그레이션</p>\n<ul>\n<li>보통 1회성으로 대충 만들 가능성이 높으나, 스프링 배치를 사용한다면, 풍부한 지원(커밋수, 롤백 등)</li>\n</ul>\n</li>\n<li>병렬 처리</li>\n<li>\n<p>워크로드 조정</p>\n<ul>\n<li>Spring Cloud Data Flow 등을 통해 GUI로 테스크 조정 등</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>Spring Batch에 대한 예제는 다음 글에서 정리합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-batch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Batch Github Repository</a></li>\n<li><a href=\"https://www.fwantastic.com/2019/12/spring-batch-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intro - 스프링 배치 기본 개념 익히기</a></li>\n<li><a href=\"https://www.fwantastic.com/2019/12/spring-batch-1-hello-world.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">스프링 배치 강좌 1. 프로그래밍의 꽃. 스프링 배치 Hello World!</a></li>\n<li><a href=\"https://khj93.tistory.com/entry/Spring-Batch%EB%9E%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Batch란? 이해하고 사용하기(예제소스 포함)</a></li>\n<li><a href=\"https://deeplify.dev/back-end/spring/batch-tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Batch 소개와 간단한 예제</a></li>\n<li><a href=\"https://jojoldu.tistory.com/324\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">배치 어플리케이션이란?</a></li>\n<li><a href=\"https://sjh836.tistory.com/187\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1장 배치와 스프링</a></li>\n<li><a href=\"https://sjh836.tistory.com/188?category=680970\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2장 스프링 배치</a></li>\n</ul>\n"}},{"node":{"title":"[Spring] Spring Data JPA와 QueryDSL","path":"/01-spring-jpa/","date":"23. September 2021","timeToRead":6,"description":"Spring JAP와 QueryDSL에 대해 정리합니다.","content":"<h1 id=\"spring-jpa와-querydsl에-대해\"><a href=\"#spring-jpa%EC%99%80-querydsl%EC%97%90-%EB%8C%80%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring JPA와 QueryDSL에 대해</h1>\n<p>지난 시간에는 이번에 정리할 Spring JPA와 QueryDSL을 위해 ORM과 JPA에 대해 정리했습니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-db-orm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a></li>\n<li><a href=\"https://azderica.github.io/00-java-jpa/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA</a></li>\n</ul>\n<p>오늘은 이를 바탕으로 Spring JPA을 더 자세하게 정리합니다.</p>\n<h2 id=\"spring-data-jpa\"><a href=\"#spring-data-jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Data JPA</h2>\n<ul>\n<li>CRUD 문제를 인터페이스 선언만으로 작성합니다.</li>\n<li>스프링 데이터 JPA가 구현 객체를 동적으로 생성해서 주입합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-jpa-적용-전\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-jpa-%EC%A0%81%EC%9A%A9-%EC%A0%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 JPA 적용 전</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// before JPA</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-jpa-적용-후\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-jpa-%EC%A0%81%EC%9A%A9-%ED%9B%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 JPA 적용 후</h3>\n<ul>\n<li>스프링 데이터 JPA에서는 JpaRepository 인터페이스를 제공합니다.</li>\n<li>인터페이스가 인터페이스를 상속받을 때는 extends를 사용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// after JPA</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-데이터-jpa-적용-후-클래스-다이어그램\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa-%EC%A0%81%EC%9A%A9-%ED%9B%84-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 데이터 JPA 적용 후 클래스 다이어그램</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/134428743-a9727ffa-3cf1-47ad-bc6d-55e42338ca1d.png\" alt=\"image\"></p>\n<ul>\n<li>기본적으로 CRUD를 구현하지 않아도 되며, 인터페이스를 호출해서 쓸 수 있습니다.</li>\n<li>스프링 로딩 시점에 UserRepository의 구현체를 만듭니다.</li>\n</ul>\n<h3 id=\"공통-인터페이스\"><a href=\"#%EA%B3%B5%ED%86%B5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>공통 인터페이스</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/134432747-fdf6a1a2-ab04-4190-971e-25dfee64a4d4.png\" alt=\"image\"></p>\n<ul>\n<li>JpaRepository 인터페이스는 공통 CRUD을 제공합니다.</li>\n<li>제네릭은 &#x3C;Entity, 식별자>로 설정합니다.</li>\n<li>스프링에 스프링 데이터 프로젝트와 스프링 데이터 JPA 프로젝트가 따로 존재합니다.</li>\n<li>스프링 데이터에서 공통적인 기능을 가지고 있고, JPA 기능은 스프링 데이터 JPA 프로젝트에서 가지고 있습니다.</li>\n</ul>\n<h3 id=\"쿼리-메서드\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿼리 메서드</h3>\n<ul>\n<li>메서드 이름으로 쿼리를 생성합니다. <code class=\"language-text\">@Query</code> 어노테이션으로 쿼리를 직접 정의할 수도 있습니다.</li>\n<li>메서드 이름만으로 JPQL 쿼리를 생성합니다.</li>\n<li>선언된 메서드에 대해서는 로딩 시점에 쿼리를 만들기 때문에 에러를 미리 잡을 수 있습니다.</li>\n</ul>\n<h3 id=\"예시\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예시</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>이름으로 검색</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token char\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></code></pre>\n<ul>\n<li>이름으로 검색 및 정렬</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sort</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// sort is order by age.</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token char\">'hello'</span><span class=\"token punctuation\">,</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> AGE <span class=\"token keyword\">DESC</span></code></pre>\n<ul>\n<li>이름으로 검색, 정렬, 페이징</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Pageable</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token char\">'hello'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span>\n    <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> ROW_<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ROWNUM ROWNUM_\n      <span class=\"token keyword\">FROM</span>\n          <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> M<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n            <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n            OEDER <span class=\"token keyword\">BY</span> M<span class=\"token punctuation\">.</span>NAME\n          <span class=\"token punctuation\">)</span> ROW_\n     <span class=\"token keyword\">WHERE</span> ROWNUM <span class=\"token operator\">&lt;=</span> ?\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WHERE</span> ROWNUM_<span class=\"token operator\">></span>?</code></pre>\n<h3 id=\"query-jpql-정의\"><a href=\"#query-jpql-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Query</code>, JPQL 정의</h3>\n<ul>\n<li><code class=\"language-text\">@Query</code> 어노테이션을 사용해서 직접 JPQL을 지정할 수 있습니다.</li>\n<li>이도 로딩 시점에 파싱을 함으로 런타임 에러를 내지 않을 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select u from User u where m.name = ?1\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"web-페이징과-정렬-기능\"><a href=\"#web-%ED%8E%98%EC%9D%B4%EC%A7%95%EA%B3%BC-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web 페이징과 정렬 기능</h3>\n<ul>\n<li>컨트롤러에서 페이징 처리 객체를 바로 인젝션 받을 수도 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>page</td>\n<td>현재 페이지</td>\n</tr>\n<tr>\n<td>size</td>\n<td>한 페이지에 노출할 데이터 건수</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>정렬 조건</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>ex) <code class=\"language-text\">/user?page=0&amp;size=20&amp;sort=name,dsec</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"querydsl\"><a href=\"#querydsl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL</h2>\n<ul>\n<li>SQL, JPQL을 코드로 작성할 수 있도록 도와주는 빌더 API</li>\n<li>JPA에 비해 편리하고 실용적입니다.</li>\n<li>오픈소스입니다.</li>\n</ul>\n<h3 id=\"sql-jpql의-문제점\"><a href=\"#sql-jpql%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SQL, JPQL의 문제점</h3>\n<ul>\n<li>SQL, JPQL은 문자열입니다.</li>\n<li>컴파일 시점에 알 수 있는 방법이 없습니다. (로딩 시점에 알 수 있습니다.)</li>\n<li>해당 로직 실행전까지 작동여부 확인을 할 수 없습니다.</li>\n<li>해당 쿼리 실행 시점에 오류를 발견합니다.</li>\n</ul>\n<h3 id=\"querydsl-장점\"><a href=\"#querydsl-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL 장점</h3>\n<ul>\n<li>문자가 아닌 코드로 작성합니다.</li>\n<li>컴파일 시점에 문법 오류를 발견합니다.</li>\n<li>코드 자동완성이 가능합니다. (IDE 도움)</li>\n<li>단순하고 쉽습니다.</li>\n<li><strong>동적 쿼리</strong>입니다.</li>\n</ul>\n<h3 id=\"querydsl-예시\"><a href=\"#querydsl-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL, 예시</h3>\n<h4 id=\"동작원리-커리타입-생성\"><a href=\"#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC-%EC%BB%A4%EB%A6%AC%ED%83%80%EC%9E%85-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동작원리 커리타입 생성</h4>\n<ul>\n<li><code class=\"language-text\">@Entity</code>를 통해서 <code class=\"language-text\">QMember</code>라는 <code class=\"language-text\">QueryDSL</code> 전용 객체를 만듭니다.</li>\n<li><code class=\"language-text\">Entity Manager</code>를 <code class=\"language-text\">JPAQueryFactory</code>에 넣고, <code class=\"language-text\">QMberber</code> 객체를 가지고 쿼리를 코드로 구성가능합니다.</li>\n</ul>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># JPQL</span>\n<span class=\"token keyword\">select</span> m <span class=\"token keyword\">from</span> Member m <span class=\"token keyword\">where</span> m<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"join\"><a href=\"#join\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>join</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member\n<span class=\"token class-name\">QTeam</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">QTeam</span><span class=\"token punctuation\">.</span>team\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teamA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"페이징-api\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%95-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>페이징 API</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"동적-쿼리\"><a href=\"#%EB%8F%99%EC%A0%81-%EC%BF%BC%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동적 쿼리</h4>\n<ul>\n<li>QueryDSL을 쓰는 진짜 이유</li>\n<li>JPQL은 정적 쿼리이고, 문자열을 더해주는것이 헬입니다.</li>\n<li>QueryDSL은 코드를 더하는 것이기에 수월하게 처리가 가능합니다.</li>\n<li><code class=\"language-text\">BooleanBuilder</code>에 조건을 넣고 쿼리를 실행시키면 된다.</li>\n<li>원하는 필드만 뽑아서 DTO로 뽑아내는 기능도 QueryDSL이 다 지원합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"member\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">BooleanBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BooleanBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  builder<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  builder<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"자바\"><a href=\"#%EC%9E%90%EB%B0%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바</h4>\n<ul>\n<li>객체지향적인 관점에서 가장 중요합니다.</li>\n<li>제약조건을 조립할 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 쿠폰의 상태와 마케팅 뷰 카운트를 체크하는 서비스의 경우</span>\n<span class=\"token keyword\">return</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n      coupon<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>typeParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      coupon<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span><span class=\"token function\">wq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LIVE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      marketing<span class=\"token punctuation\">.</span>viewCount<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>markting<span class=\"token punctuation\">.</span>maxCount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 아래 코드처럼 재조립이 가능합니다.</span>\n<span class=\"token keyword\">return</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n      coupon<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>typeParma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">isServiceable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BooleanExpression</span> <span class=\"token function\">isServiceable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> coupon<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span><span class=\"token function\">wq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LIVE\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>marketing<span class=\"token punctuation\">.</span>viewCount<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>markting<span class=\"token punctuation\">.</span>maxCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://ict-nroo.tistory.com/117\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Data JPA와 QueryDSL</a></li>\n<li><a href=\"https://mycup.tistory.com/333\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">QueryDSL과 JOOQ 비교</a></li>\n</ul>\n"}},{"node":{"title":"[DB] 객체지향 쿼리, JPQL","path":"/00-jpa-jpql/","date":"15. July 2021","timeToRead":2,"description":"JPQL의 기본 개념에 대해 정리합니다.","content":"<h1 id=\"jpqljava-persistence-query-language\"><a href=\"#jpqljava-persistence-query-language\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPQL(Java Persistence Query Language)</h1>\n<h2 id=\"jpql란\"><a href=\"#jpql%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPQL란?</h2>\n<ul>\n<li>테이블이 아닌 엔티티 객체를 대상으로 검색하는 객체지향 쿼리입니다.</li>\n<li>SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않습니다.</li>\n<li>JPA는 JPQL을 분석한 후 적절한 SQL을 만들어 데이터베이스를 조회합니다.</li>\n<li>방언(Dialect)만 변경하면 JPQL을 수정하지 않고 자연스럽게 DB를 변경합니다.</li>\n<li>엔티티 객체를 중심으로 개발합니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpql-사용법\"><a href=\"#jpql-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPQL 사용법</h2>\n<p>다음과 같이 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> jpql<span class=\"token operator\">=</span> <span class=\"token string\">\"select m From Member m where m.name like '%hello%'\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>jpql<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>해당 코드를 보면 다음을 알 수 있습니다.</p>\n<ul>\n<li>테이블이 아닌 객체를 대상으로 검색하는 객체지향 쿼리로 이해하면 됩니다.</li>\n<li>SQL을 추상화하해서 특정 데이터베이스 SQL에 의존하지 않습니다.</li>\n<li>JPQL을 한마디로 정의하면 객체 지향 SQL입니다.</li>\n</ul>\n<h3 id=\"예시-문법\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예시 문법</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> _\n<span class=\"token keyword\">from</span> _\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span> _<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>groupby _<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">having</span> _<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>orderby _<span class=\"token punctuation\">]</span></code></pre>\n<h3 id=\"신경쓸-요소\"><a href=\"#%EC%8B%A0%EA%B2%BD%EC%93%B8-%EC%9A%94%EC%86%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>신경쓸 요소</h3>\n<ul>\n<li><code class=\"language-text\">from</code>에는 객체가 들어갑니다.</li>\n<li>엔티티와 속성은 대문자를 구분합니다.</li>\n<li>JPQL 키워드는 대소문자를 구분하지 않습니다.</li>\n<li>엔티티 이름을 사용하며 테이블 이름이 아닙니다.</li>\n<li>별칭은 필수 입니다.</li>\n</ul>\n<h3 id=\"결과-조회-api\"><a href=\"#%EA%B2%B0%EA%B3%BC-%EC%A1%B0%ED%9A%8C-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결과 조회 API</h3>\n<ul>\n<li><code class=\"language-text\">query.getResultList()</code> : 결과가 하나 이상인 경우, 리스트를 반환합니다.</li>\n<li><code class=\"language-text\">query.getSingleResult()</code> : 결과가 정확히 하나, 단일 객체를 반환합니다. (하나가 아니면 예외가 발생합니다.)</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://data-make.tistory.com/614\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA, JPQL Query 정리</a></li>\n<li><a href=\"https://ict-nroo.tistory.com/116\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA, 객체지향 쿼리, JPQL</a></li>\n<li><a href=\"https://victorydntmd.tistory.com/205\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring JPA, JPQL</a></li>\n</ul>\n"}},{"node":{"title":"[Java] JPA에 대해 정리하기","path":"/00-java-jpa/","date":"22. March 2021","timeToRead":5,"description":"JPA에 대해 정리합니다. ","content":"<h1 id=\"jpa\"><a href=\"#jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA</h1>\n<p>오늘은 앞으로 공부할 QueryDsl, Jooq 등의 개념을 공부하기 위해서 앞서 가장 기본적인 내용을 정리합니다.</p>\n<h2 id=\"jpa-개념\"><a href=\"#jpa-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 개념</h2>\n<p>JPA는 <strong>Java Persistence API</strong> 의 약자로서, RDBMS와 OOP 객체 사이의 불일치에서 오는 패러다임을 해결하기 위해서 만들어졌습니다. 이러한 JPA는 ORM(Object-Relational Mapping) 기술입니다.</p>\n<h3 id=\"orm\"><a href=\"#orm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ORM?</h3>\n<p>ORM이란 Object Relational Mapping, 객체-관계 매핑의 줄임말입니다.</p>\n<p>좀 더 풀어 설명하자면 OOP의 객체 구현 클래스와 RDBMS에서 사용하는 테이블을 자동으로 매핑하는 것을 의미합니다. 이 때, 클래스와 테이블은 서로 기존부터 호환 가능성을 두고 만들어진 것이 아니므로 불일치가 발생하는데 이를 ORM을 통해서 객체 간의 관계를 바탕으로 SQL문을 자동으로 생성하여 불일치를 해결합니다. 이 방법을 통해서 SQL문을 짤 필요없이 객체를 통해 간접적으로 데이터베이스를 조작할 수 있습니다.</p>\n<p>이를 이미지로 나타내면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/111995242-0ca00d80-8b5c-11eb-9662-7f60f1dfc0c7.png\" alt=\"image\"></p>\n<p>좀 더 자세한 ORM은 아래 글을 참조해주세요.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-db-orm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a></li>\n</ul>\n<h3 id=\"그래서-jpa를-좀-더-설명하자면\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-jpa%EB%A5%BC-%EC%A2%80-%EB%8D%94-%EC%84%A4%EB%AA%85%ED%95%98%EC%9E%90%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그래서 JPA를 좀 더 설명하자면.</h3>\n<p>앞서 이야기 나온 ORM 기술을 구현하기 위해 나온 프레임워크가 Hibernate이고, 그 외에도 다른 프레임워크(CoCobase, TopLink) 등이 등장했습니다. 이러한 ORM 구현 프레임워크에 대한 <strong>표준화</strong>가 필요하게 되었는데 이가 바로 JPA입니다.</p>\n<p>JPA는 어플리케이션과 DBMS 사이의 인터페이스 역할을 해주기 때문에. 개발자는 JPA 인터페이스에 맞춰우 구현되어 있는 기능을 사용하면 됩니다.</p>\n<p>이를 잘 표현한 이미지는 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/111996259-2b52d400-8b5d-11eb-8fdb-1f6a91096d4c.png\" alt=\"image\"></p>\n<p>다음과 같이, 개발자는 SQL를 직접 사용할 필요없이 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"jpa-동작-과정\"><a href=\"#jpa-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 동작 과정</h2>\n<p>JPA는 다음과 같이 동작합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/112302631-a394d300-8cde-11eb-8c1e-3693ae32a978.png\" alt=\"image\"></p>\n<p>JPA는 애플리케이션과 JDBC 사이에서 동작합니다.</p>\n<ul>\n<li>개발자가 JPA 사용시, JPA 내부에서 JDBC API를 사용하여 SQL을 호출하고 DB와 통신합니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpa를-사용해야하는-이유\"><a href=\"#jpa%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA를 사용해야하는 이유?</h2>\n<h3 id=\"1-sql-중심-개발---객체-중심-개발\"><a href=\"#1-sql-%EC%A4%91%EC%8B%AC-%EA%B0%9C%EB%B0%9C---%EA%B0%9D%EC%B2%B4-%EC%A4%91%EC%8B%AC-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. SQL 중심 개발 -> 객체 중심 개발</h3>\n<p>SQL 중심의 개발 문제를 해결합니다.</p>\n<p>SQL 중심의 개발 문제는 다음과 같습니다.</p>\n<ul>\n<li>지루한 코드가 반복됩니다.</li>\n<li>객체 지향과 RDB 간의 패러다임이 불일치됩니다.</li>\n<li>객체 지향은 상속 관계를 지원합니다.</li>\n<li>모델링 과정에서의 문제를 해결합니다.</li>\n<li>\n<p>객체 그래프 탐색에서의 문제를 해결합니다.</p>\n<ul>\n<li>SQL 중심 개발은 객체 그래프를 탐색할 수 없습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-생산성\"><a href=\"#2-%EC%83%9D%EC%82%B0%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 생산성</h3>\n<ul>\n<li>JPA을 사용함으로서 <code class=\"language-text\">java.collection</code>처럼 편하게 사용가능합니다.</li>\n<li>\n<p>간단한 CRUD를 제공합니다.</p>\n<ul>\n<li><code class=\"language-text\">jpa.persist</code>, <code class=\"language-text\">find</code>, <code class=\"language-text\">set~</code>, <code class=\"language-text\">jpa.remove</code></li>\n</ul>\n</li>\n<li>수정이 간단합니다.</li>\n</ul>\n<h3 id=\"3-유지보수\"><a href=\"#3-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 유지보수</h3>\n<ul>\n<li>기존처럼 모든 SQL을 수정할 필요가 없습니다.</li>\n<li>JPA에서는 필드만 추가하고, SQL은 JPA가 처리합니다.</li>\n</ul>\n<h3 id=\"4-패러다임-불일치의-해결\"><a href=\"#4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-%EB%B6%88%EC%9D%BC%EC%B9%98%EC%9D%98-%ED%95%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 패러다임 불일치의 해결</h3>\n<ul>\n<li>상속, 연관관계, 객체 그래프 탐색, 비교와 같은 패러다임의 불일치 문제를 해결해줍니다.</li>\n</ul>\n<h3 id=\"5-성능적-이슈\"><a href=\"#5-%EC%84%B1%EB%8A%A5%EC%A0%81-%EC%9D%B4%EC%8A%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 성능적 이슈</h3>\n<ul>\n<li>JPA는 애플리케이션과 데이터베이스 사이에서 다양한 성능 최적화 기능을 제공합니다.</li>\n<li>Ex. 동일 데이터 find로 2번 접근하는 경우, 재사용을 통해서 사용합니다.</li>\n</ul>\n<h3 id=\"6-데이터-접근-추상화와-벤더-독립성\"><a href=\"#6-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC-%EC%B6%94%EC%83%81%ED%99%94%EC%99%80-%EB%B2%A4%EB%8D%94-%EB%8F%85%EB%A6%BD%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 데이터 접근 추상화와 벤더 독립성</h3>\n<ul>\n<li>애플리케이션은 처음 선택한 데이터베이스 기술에 종속되고 다른 데이터베이스로 변경하기 어렵습니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpa-사용-방법\"><a href=\"#jpa-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 사용 방법</h2>\n<p>다음과 같은 메소드 들이 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">flush()</code></p>\n<ul>\n<li>Persistence Context의 변경 내용을 데이터베이스에 반영합니다.</li>\n<li>일반적으로는 직접 사용하지는 않고, 자바 애플리케이션에서 커밋 명령이 들어왔을 때 자동으로 실행됩니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">detach()</code></p>\n<ul>\n<li>특정 Entity를 준영속 상태(영속 컨텍스트의 관리를 받지않음)로 바꿉니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">clear()</code></p>\n<ul>\n<li>Persistence Context를 초기화합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">close()</code></p>\n<ul>\n<li>Persistence Context를 종료합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">merge()</code></p>\n<ul>\n<li>준영속 상태의 엔티티 특징</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">find()</code></p>\n<ul>\n<li>식별자 값을 통해 Entity를 찾습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">persist()</code></p>\n<ul>\n<li>생성도니 Entity를 Persistence Context와 DB에 저장합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">remove()</code></p>\n<ul>\n<li>식별자 값을 통해 Entity를 삭제합니다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://spring.io/projects/spring-data-jpa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Data JPA Doc</a></li>\n<li><a href=\"https://tinkerbellbass.tistory.com/24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 기본 개념</a></li>\n<li><a href=\"https://doublesprogramming.tistory.com/257\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 기본 개념 2</a></li>\n<li><a href=\"https://blog.woniper.net/255\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA란 무엇인가</a></li>\n<li><a href=\"http://okminseok.blogspot.com/2019/09/jpa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 코드 없이 적는 기본 개념</a></li>\n<li><a href=\"https://geonlee.tistory.com/207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM의 장단점</a></li>\n<li><a href=\"https://gmlwjd9405.github.io/2019/08/04/what-is-jpa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA란</a></li>\n</ul>\n"}}]}}},"context":{}}