{"hash":"4d08d5d9909bc52ba8ae53ab8b5e8ea790bc2d53","data":{"tag":{"title":"Developer","belongsTo":{"edges":[{"node":{"title":"[Think] 어떤 개발자가 되어야할까","path":"/think-developer-2021-04-06/","date":"6. April 2021","timeToRead":10,"description":"2021-04-06 어떤 개발자가 되어야할까","content":"<h1 id=\"어떤-개발자가-되어야할까\"><a href=\"#%EC%96%B4%EB%96%A4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EC%96%B4%EC%95%BC%ED%95%A0%EA%B9%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어떤 개발자가 되어야할까?</h1>\n<p>개인적으로 개발을 시작한지 어느새 9개월이 넘었고, 곧 1년차를 위해 열심히 달려가고 있다. 그런데 정작 목표나 어떤 방향의 개발자가 되어야할까에 대해서 어렴풋하게만 생각하고 제대로 된 정리를 해본적이 없어서 한 번 이번 기회를 빌려 정리를 해볼려고 한다.</p>\n<br/>\n<h2 id=\"그-간의-과정\"><a href=\"#%EA%B7%B8-%EA%B0%84%EC%9D%98-%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그 간의 과정</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113700344-b1504c80-9711-11eb-8761-b9eb2179d194.png\" alt=\"git-history\"></p>\n<p>2020년 2월 9일, 폴란드에서부터 깃을 본격적으로 관리하기 시작했었다. 그전까지는 깃을 썼으나 주로 관리하지 않았는 느낌이였다. 코로나 사태로 갑작스럽게 폴란드 바르샤바 공과대학에서 복수학위를 포기하고 귀국을 하여 갑작스럽게 졸업과 취업 준비를 시작했다. 그 때가 약 3월이었다.</p>\n<p>기존에 들었던 학점이 많아 150학점이라는 학점을 4학년 1학기때 다 채워서 졸업을 할 수 있었고, 운 좋게 국내 이커머스 손에 꼽히는 회사에 붙을 수 있게 되었다. (아마 그때 많은 운을 쓰지 않았을까... 부족한 실력이었다고 항상 반성을 한다.)</p>\n<p>그렇게 20년도 6월 22일, 대학교 기말고사를 앞두고 회사에 취직하여 일을 하게되었고 최초에 생각했던 <strong>프론트 엔드 개발자가 아닌 백엔드 개발자</strong>의 삶을 살게 되었다. (이때가 25살. 부족했던 시기, 지금도 마찬가지지만)</p>\n<p>그 때의 마음가짐은 다음과 같았다.</p>\n<ul>\n<li>남들보다 부족하기 때문에 조금 더 시간을 투자해서 일을 하고, 조금 더 공부를 하자.</li>\n<li>회사에 들어올 때는 운 덕분에 들어왔지만, 내가 나갈때는 실력으로 나가자.</li>\n</ul>\n<p>이 두가지의 마음가짐을 바탕으로 일을 시작했다. (다만, 회사에 들어오고 마음이 풀어저서 한 달 정도는 깃 관리를 놓쳐버렸다. 그저 내 잘못...)</p>\n<h3 id=\"본격적으로-일을-하면서\"><a href=\"#%EB%B3%B8%EA%B2%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9D%BC%EC%9D%84-%ED%95%98%EB%A9%B4%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>본격적으로 일을 하면서.</h3>\n<p>생각보다 다양하고 많은 개념과 기초 개념을 모르고 있다는 것을 알게 되었고, 이를 공부를 해야겠다는 위기감이 많이 몰려들었다. 회사는 다른 회사에 비해 적은 개발자 수를 가지고 있었기 때문에 보다 <strong>폭넓은 지식</strong>이 필요했다. 그러나 가장 어려운 부분이라고 생각하는 것은 <strong>\"내가 어떤것을 모를 때, 어떤 것을 모르는지 모르는 거다.\"</strong> 라는 것이였고 그 당시에는 내가 그랬다.</p>\n<p>그래서 내가 선택한 방법은 <strong>주변에서 들리는 개념이란 개념을 모조리 듣고, 약간이라도 애매하거나 모르는 부분이 있으면 이를 따로 개인 슬랙 채널에 적어 놓고, 이를 퇴근 후나 출근 전에 개념을 공부하고 이를 블로그에 정리하는 방법으로 진행</strong>했다. 업무적으로는 내가 어떤 부분을 진행하고 있는지를 <strong>모조리 wiki에 정리</strong>하고, 그 어떠한 부분의 과정이라도 내가 도움이 될 것 같다면 이를 개인 위키에 정리해놓았다. (더 나아가, 나와 같이 하는 사람들이 내 wiki를 통해서 더 효율적으로 일할 수 있게.)</p>\n<p>그 결과적으로 현재 개인 블로그 글 수는 100개를 넘겼고, 업무 개인 위키 페이지는 대략 400개 이상의 게시글이 유지되고 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113702482-84e9ff80-9714-11eb-819d-35afb3d1ff1c.png\" alt=\"image\"></p>\n<ul>\n<li><code class=\"language-text\">google search console</code>에는 정확한 개수가 안나와서 <code class=\"language-text\">ls -l | grep ^- | wc -l</code>로 확인했다.</li>\n<li>업무용 위키는 회사 블로그에서 따로 한번 적기는 했으니 넘기겠다. - <a href=\"https://dev.ebaykorea.com/11\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">내가 운영 및 관리하는\n회사 기술블로그, 필자 구하기가 힘들다...</a></li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113702769-ec07b400-9714-11eb-85c0-21a8ba59b80c.png\" alt=\"image\"></p>\n<ul>\n<li>그렇게 블로그를 작성하면서 생각보다 사용자 수가 많이 증가했다. 이렇게 전문성이 부족한 글도 봐주시는 사람이 있어 항상 고마움을 느낀다.</li>\n</ul>\n<p>이러한 방식으로 많은 글을 정리했고, 지금도 꾸준하게 <strong>1일 1커밋, 블로그 활동, 새벽 기상 및 공부</strong> 등을 지키기 위해서 노력하고 있다. 무라카미 하루키의 글쓰기 방법을 굉장히 존경하고 본받기 위해서 노력한다. 다만 옛날에 비해서 많이 게을러지고 목표를 잃은 느낌이라 다시 텐션을 올려야겠다는 생각을 한다. (옛날에는 새벽에 공부를 하나 했다면 요즘은 그냥 알고리즘 하나 푸는 정도.)</p>\n<br/>\n<h2 id=\"목표\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>목표</h2>\n<p>그렇기 때문에 새로 목표를 세우고 다시 일어나서 해야겠다는 생각을 했다. 기존의 나는 부족한 개념을 채우기 위해서 노력을 했다면, 내가 앞으로 가야하는 방향은 어떤 것일까에 대해서 고민을 하게되었다.</p>\n<p>취업을 시작하고부터 항상 고민했던 문제는 <strong>\"내가 어떤 언어를 가장 자신 있어하고, 어떤 프레임워크를 잘쓰냐\"</strong> 라는 질문이였는데 지금까지도 자신있게 말할 수 있는 언어가 없다. (그저 사용만 할 줄아는...) 그렇기 때문에 나는 아직 주니어 레벨에 도달하지도 못한게 아닐까라는 생각을 자주 한다. (신입보다 못한 사람이지 않을까.)</p>\n<h3 id=\"어떻게-공부\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B3%B5%EB%B6%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어떻게 공부?</h3>\n<p>나는 자바와 스프링은 그래도 자신이 있는 개발자가 되고 싶다. 그래서 먼저 공부할 종류를 다음과 같이 나누었다. 현재 내가 공부하는 시간으로 뺄 수 있는 시간은 하루에 4~5시간 정도 된다. (새벽 5시부터 7시 / 퇴근 후 7시 ~ 10시)</p>\n<ul>\n<li><strong>주 공부</strong> : Java / Spring</li>\n<li><strong>기초 지식</strong> : 네트워크 / DB / 웹</li>\n<li>알고리즘 : 하루에 한 문제만.</li>\n<li>그외의 지식들... : 재밌는 트렌드 등등.</li>\n</ul>\n<p>그렇기에 주 공부를 하루에 3시간 씩하고 기초 지식을 1시간 정도 보는 방향으로 가고, 그 외의 지식은 주말이나 흥미위주로 좀 쉴 때 찾아볼려는 방향으로 갈려고 한다.</p>\n<blockquote>\n<p>길고 긴 마라톤 경주에서 최종적으로 도달할 수 있는 사람이 내가 되기를.</p>\n</blockquote>\n<p>이렇게 공부할때는 최대한 깊게 공부를 할려고 한다. 현재 보고 있는 토비의 스프링처럼, 최대한 자세하고 코드 자체를 다 디버그 해보고, 원리를 이해하는 방향으로 가겠다라는 생각이다. 마찬가지로 기초지식도 면접관이 질문을 물어보는 것처럼 하나하나 자세하게 공부를 해볼려고 한다.</p>\n<ul>\n<li>웹 통신 뭐 있어요? -> http나 socket -> 차이가 뭐에요? 또 다른 통신들은 어떤거 있어요?(ftp, smtp 등등) -> 왜 쓰죠? -> 언제 쓰죠? -> 어떤 점이 문제일 까요?</li>\n<li>로그인 하면 웹 프론트와 백에서는 뭔일이 일어나요? 쿠키와 세션을 통해서 설명해주세요. 이렇게 하면 문제가 없을까요? 보안 이슈가 터지면 어떻게 할까요? 등등</li>\n</ul>\n<p><strong>이렇게 이어가는 질문들을 전부 대답할 수 있는 사람이 되기를 간절히 원한다.</strong></p>\n<p>이 부분이 좀 정리가 되면, 개인 토이프로젝트와 오픈소스를 본격적으로 하고 싶다. (물론 윗내용은 회사에 절대 지장없이 해야한다고 생각한다.. 업무에 지장되면 말장 도루묵이라고 생각하기에)</p>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h3>\n<p>개발자의 방향은 제널리스트와 스페셜리스트가 있다고 듣는다. 나는 아직도 프론트엔드에 관심이 있고 최근에는 DevOps도 흥미가 있다. <strong>개발자의 제널리스트</strong>는 넓은 지식을 얇게 아는 것이 아니라, 자신의 주종목이 있고 이를 바탕으로 다른 부분에서도 대화를 할 수 있고, 능력을 발휘하는 사람이라 믿는다.</p>\n<p>아직 부족하지만, 어쨌든 나는 유니콘과 같은 좋은 풀스택 개발자가 되고 싶다. 다음에 이런 회고록을 쓰는 시점에는 좀 더 발전해있을 것이라 확신한다.</p>\n<p>길었던 회고록을 읽어주신 분들이 있다면 감사합니다.</p>\n"}},{"node":{"title":"[Others] 좋은 개발자가 되기 위한 19가지","path":"/00-good-developer/","date":"21. October 2020","timeToRead":9,"description":" 좋은 개발자가 되기 위한 19가지의 방법입니다.","content":"<h1 id=\"좋은-개발자가-되기-위한-19-가지-방법\"><a href=\"#%EC%A2%8B%EC%9D%80-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0-%EC%9C%84%ED%95%9C-19-%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>좋은 개발자가 되기 위한 19 가지 방법</h1>\n<br/>\n<h2 id=\"1-3개의-룰을-지켜라\"><a href=\"#1-3%EA%B0%9C%EC%9D%98-%EB%A3%B0%EC%9D%84-%EC%A7%80%EC%BC%9C%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 3개의 룰을 지켜라</h2>\n<blockquote>\n<p>Rule of 3.</p>\n</blockquote>\n<p>코드 리팩터링을 진행할 때, 중복된 코드를 새로운 코드(new code), 절차(procedure), 방법(methods)으로 교체한다.</p>\n<p>이러한 리팩토링을 통해 코드와 절차, 방법 등을 일반화해서 여러곳에서 재사용할 수 있게 하는 것이 주 개념이다.</p>\n<br/>\n<h2 id=\"2-지속성을-유지해라\"><a href=\"#2-%EC%A7%80%EC%86%8D%EC%84%B1%EC%9D%84-%EC%9C%A0%EC%A7%80%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 지속성을 유지해라</h2>\n<blockquote>\n<p>Consistency is king</p>\n</blockquote>\n<p>코드를 짜고, 구조를 짜는 것에 일관성을 가져라. 이는 애플리케이션의 가독성과 유지관리에 도움이 된다.</p>\n<p>코딩의 표준을 만들어서 일관성을 유지하는 것이 좋다. 이는 대신 변수의 명명 규칙만큼 작아야한다.</p>\n<p>애플리케이션의 구조는 개발자가 변경할 부분이나 새로운 것을 추가해야하는 부분에 대해 명확해야한다.</p>\n<br/>\n<h2 id=\"3-중복을-피해라\"><a href=\"#3-%EC%A4%91%EB%B3%B5%EC%9D%84-%ED%94%BC%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 중복을 피해라</h2>\n<blockquote>\n<p>Reduce nesting</p>\n</blockquote>\n<p>If 문안에 있는 If 문은 매우 빨리 지저분해지고 읽기가 매우 어렵다.</p>\n<p>마찬가지로 이러한 중복은 최대한 피해야한다.</p>\n<p>이를 해결하는 방법으로 <strong>guard clause</strong> 을 지키는 것도 방법입니다.</p>\n<ul>\n<li>guard clause가 없을 경우.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>account <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>term <span class=\"token operator\">==</span> <span class=\"token class-name\">Term<span class=\"token punctuation\">.</span>Annually</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// term annually</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>term <span class=\"token operator\">==</span> <span class=\"token class-name\">Term<span class=\"token punctuation\">.</span>Monthly</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// term monthly</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidEnumArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>guard clause가 있는 경우</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>account <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>term <span class=\"token operator\">==</span> <span class=\"token class-name\">Term<span class=\"token punctuation\">.</span>Annually</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// term annually (return here)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>term <span class=\"token operator\">==</span> <span class=\"token class-name\">Term<span class=\"token punctuation\">.</span>Monthly</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// term monthly (return here)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidEnumArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameof</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"4-더-큰-그림을-생각해라\"><a href=\"#4-%EB%8D%94-%ED%81%B0-%EA%B7%B8%EB%A6%BC%EC%9D%84-%EC%83%9D%EA%B0%81%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 더 큰 그림을 생각해라</h2>\n<blockquote>\n<p>Think of the bigger picture</p>\n</blockquote>\n<p>큰 그림을 이해하면 작은 세부 사항들을 더 쉽게 따라가고 이해할 수 있다.</p>\n<br/>\n<h2 id=\"5-이름-설정에-시간을-투자해라\"><a href=\"#5-%EC%9D%B4%EB%A6%84-%EC%84%A4%EC%A0%95%EC%97%90-%EC%8B%9C%EA%B0%84%EC%9D%84-%ED%88%AC%EC%9E%90%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 이름 설정에 시간을 투자해라</h2>\n<blockquote>\n<p>Spend time thinking of naming things</p>\n</blockquote>\n<p>클래스, 메소드, 변수에 대한 이름을 정하는 것은 어렵다. 그러나 좋은 이름은 가독성에 큰 도움이 된다.</p>\n<br/>\n<h2 id=\"6-기술적인-빚은-나쁘다\"><a href=\"#6-%EA%B8%B0%EC%88%A0%EC%A0%81%EC%9D%B8-%EB%B9%9A%EC%9D%80-%EB%82%98%EC%81%98%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 기술적인 빚은 나쁘다</h2>\n<blockquote>\n<p>Technical debt is bad</p>\n</blockquote>\n<p>기술적인 빚은 소프트웨어 개발에서 나오는 개념이며, 시간이 더 오래걸린다고 더 나은 접근법을 사용하지 않고 현재 쉬운 방법을 선택하면 이후에 발생하는 묵시적인 비용이 발생할 수 있다.</p>\n<br/>\n<h2 id=\"7-과대평가를-피해라\"><a href=\"#7-%EA%B3%BC%EB%8C%80%ED%8F%89%EA%B0%80%EB%A5%BC-%ED%94%BC%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7. 과대평가를 피해라</h2>\n<blockquote>\n<p>Overestimate</p>\n</blockquote>\n<p>많은 일들이 보통 기대하는 것보다 더 오래 걸린다. 이를 과대평가하면 이후에 문제가 발생할 수 있다.</p>\n<p>따라서 시간적 여유를 가지고 개발을 진행하는 것이 좋다.</p>\n<br/>\n<h2 id=\"8-문서화와-주석을-달아라\"><a href=\"#8-%EB%AC%B8%EC%84%9C%ED%99%94%EC%99%80-%EC%A3%BC%EC%84%9D%EC%9D%84-%EB%8B%AC%EC%95%84%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8. 문서화와 주석을 달아라</h2>\n<blockquote>\n<p>Document and code comments</p>\n</blockquote>\n<p>문서화와 주석은 지식을 공유하는데 도움이 된다. 이러한 기록들을 통해서 이후에 개발에 큰 도움이 된다.</p>\n<br/>\n<h2 id=\"9-나쁜-코드는-자신감있게-없애라\"><a href=\"#9-%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%9E%90%EC%8B%A0%EA%B0%90%EC%9E%88%EA%B2%8C-%EC%97%86%EC%95%A0%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 나쁜 코드는 자신감있게 없애라</h2>\n<blockquote>\n<p>Be confident about deleting bad code</p>\n</blockquote>\n<p>잘못된 코드를 언급하고 남겨놓은 경우가 발생한다. 이보다는 버전관리를 하는 것이 더 좋다. 사용하지 않는 많은 코드들은 나쁜 코드이며 삭제를 해야한다.</p>\n<br/>\n<h2 id=\"10-코드-리뷰에-시간을-투자해라\"><a href=\"#10-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0%EC%97%90-%EC%8B%9C%EA%B0%84%EC%9D%84-%ED%88%AC%EC%9E%90%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>10. 코드 리뷰에 시간을 투자해라</h2>\n<blockquote>\n<p>Spend time on code Reviews</p>\n</blockquote>\n<p>코드 리뷰는 다음과 같은 이점이 있다.</p>\n<ul>\n<li>버그를 찾기 쉽게 도와준다.</li>\n<li>개발 기술의 향상과 팀원에게 좋은 실전을 제공한다.</li>\n<li>지식을 공유할 수 있다.</li>\n<li>일관성있는 디자인과 개발이 가능하다.</li>\n</ul>\n<p>좋은 개발자가 좋은 코드 검토 프로세스는 다음과 같다.</p>\n<ul>\n<li><strong>리스크가 적은 작은 업무</strong>는 개발자 한명이 진행한다.</li>\n<li><strong>중형이나 대형 변경, 위험한 변경</strong>은 3명의 개발자가 진행하며 그 중 한명은 시니어 개발자가 진행하는 것이 좋다.</li>\n<li><strong>극도로 위험한 변경이나, 개발중인 애플리케이션의 새로운 부분</strong>은 미팅을 진행하고 3명의 개발자가 각 라인을 함께 거치며 포인트를 만드는 리드 개발자가 있어야한다.</li>\n</ul>\n<br/>\n<h2 id=\"11-좋은-테스트를-작성해라\"><a href=\"#11-%EC%A2%8B%EC%9D%80-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>11. 좋은 테스트를 작성해라</h2>\n<blockquote>\n<p>Write good tests</p>\n</blockquote>\n<p>좋은 개발자는 좋은 테스트를 만드는데 시간을 투자한다.</p>\n<p>이 테스트가 잘 수행되면 응용프로그램을 더욱 자신있게 확장할 수 있으며 생산 버그를 줄일 수 있다.</p>\n<br/>\n<h2 id=\"12-디자인에-시간을-투자해라\"><a href=\"#12-%EB%94%94%EC%9E%90%EC%9D%B8%EC%97%90-%EC%8B%9C%EA%B0%84%EC%9D%84-%ED%88%AC%EC%9E%90%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12. 디자인에 시간을 투자해라</h2>\n<blockquote>\n<p>Spend time designing</p>\n</blockquote>\n<p>코드를 짜기전에는 먼저 생각을 하고, 이를 작은 덩어리로 분리해야한다. 이는 좀더 조화를 이루게 할 수 있고 더 깨끗한 코드를 만들 수 있게 도와준다.</p>\n<br/>\n<h2 id=\"13-구문보다는-기본에-충실해라\"><a href=\"#13-%EA%B5%AC%EB%AC%B8%EB%B3%B4%EB%8B%A4%EB%8A%94-%EA%B8%B0%EB%B3%B8%EC%97%90-%EC%B6%A9%EC%8B%A4%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>13. 구문보다는 기본에 충실해라</h2>\n<blockquote>\n<p>Focus on the fundamentals and not on the syntax</p>\n</blockquote>\n<p>기본적인 부분에 집중을 해야한다. 이는 문제를 더 효과적으로 찾을 수 있고 많은 이해를 바탕으로 구글링하기 편해진다.</p>\n<br/>\n<h2 id=\"14-구글을-좋은-친구로-사용해라\"><a href=\"#14-%EA%B5%AC%EA%B8%80%EC%9D%84-%EC%A2%8B%EC%9D%80-%EC%B9%9C%EA%B5%AC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>14. 구글을 좋은 친구로 사용해라.</h2>\n<blockquote>\n<p>Make Google your best friend</p>\n</blockquote>\n<p>구글리을 통하면 많은 문제를 해결할 수 있다. 이때 특히, 기본적인 부분이 검색에서 많은 도움이 된다. 구글은 어떤 용어를 검색해야 하는지 알고 있는 부분에 초점을 맞추었기 때문에 이를 잘 이용해야한다.</p>\n<br/>\n<h2 id=\"15-일단-작동하게하고-그-다음에-아름답게-만들어라\"><a href=\"#15-%EC%9D%BC%EB%8B%A8-%EC%9E%91%EB%8F%99%ED%95%98%EA%B2%8C%ED%95%98%EA%B3%A0-%EA%B7%B8-%EB%8B%A4%EC%9D%8C%EC%97%90-%EC%95%84%EB%A6%84%EB%8B%B5%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>15. 일단 작동하게하고, 그 다음에 아름답게 만들어라.</h2>\n<blockquote>\n<p>Make sure it works first, then make it pretty later</p>\n</blockquote>\n<p>초보 개발자의 실수는 처음에 예쁘게 만들려고 너무 많은 시간을 할애한다. 이는 나중에 동작이 작동하지 않게되는 결과를 얻게된다.</p>\n<p>좋은 개발자는 일찍부터 작동하도록 구성한다. 코드를 아름답게 짜기전에 어떤 문제든 일찍 확인할 수 있게 구성해놓습니다. 이는 이후에 좀 더 프로젝트가 훨씬 더 원활하게 진행됩니다.</p>\n<br/>\n<h2 id=\"16-위험-관리와-문제-해결에-신경을-써라\"><a href=\"#16-%EC%9C%84%ED%97%98-%EA%B4%80%EB%A6%AC%EC%99%80-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%EC%97%90-%EC%8B%A0%EA%B2%BD%EC%9D%84-%EC%8D%A8%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>16. 위험 관리와 문제 해결에 신경을 써라</h2>\n<blockquote>\n<p>Risk management and problem resultion</p>\n</blockquote>\n<p>좋은 개발자는 위험을 정의하고 디자인 패턴을 적용해서 복잡한 문제를 해결할 수 있습니다. 더 나아가 과거의 경험을 통해서 다양한 문제를 독립적으로 해결합니다.</p>\n<br/>\n<h2 id=\"17-질문을-해라\"><a href=\"#17-%EC%A7%88%EB%AC%B8%EC%9D%84-%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>17. 질문을 해라.</h2>\n<blockquote>\n<p>Ask questions</p>\n</blockquote>\n<p>좋은 개발자는 극히 간단한 질문이라도 개의치않으며 모든 것을 알려고 한다. 이유는 비지니스와 관련된 질문일 수도 있기 때문이다.</p>\n<p>비지니스 요구를 이해하면 좋은 코드를 만들 수 있다. 좋은 개발자는 자신의 능력에 자신이 있으므로 질문을 두려워하지 않는다.</p>\n<br/>\n<h2 id=\"18-가능한-논리를-데이터베이스에서-제외시켜라\"><a href=\"#18-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%85%BC%EB%A6%AC%EB%A5%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90%EC%84%9C-%EC%A0%9C%EC%99%B8%EC%8B%9C%EC%BC%9C%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>18. 가능한 논리를 데이터베이스에서 제외시켜라</h2>\n<blockquote>\n<p>Keep logic out of the database whenever possible</p>\n</blockquote>\n<p>이 조건은 구축중인 애플리케이션의 유형 중, 성능에 영향을 미치지 않는 경우에만 해당한다.</p>\n<p>좋은 개발자들은 간단한 CRUD 작업에 대한 데이터베이스 쿼리를 유지한다.</p>\n<blockquote>\n<p>CRUD : Create, Read, Update, Delete</p>\n</blockquote>\n<p>다음과 같이 진행할려면 비즈니스 논리 계층을 하나로 묶는 작업이 필요하다. 이렇게 진행하면 개발자들이 비지니스 논리를 쉽게 찾을 수 있으며, 데이터베이스 쿼리와 코드에 논리가 있으면 지저분해 진다.</p>\n<br/>\n<h2 id=\"19-kiss\"><a href=\"#19-kiss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>19. KISS</h2>\n<blockquote>\n<p>Keep It simple Stupid</p>\n</blockquote>\n<p>코드를 단순하게 유지하는 것이 최선의 방법이다. 때로는 이 부분이 많은 코드라인을 생성하더라도 이는 반드시 필요하다</p>\n<ul>\n<li>잘못된 케이스는 다음과 같다. 이는 읽기 매우 어렵다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">return</span> <span class=\"token class-name\"><span class=\"token namespace\">dir<span class=\"token punctuation\">.</span></span>Keys<span class=\"token punctuation\">.</span>Any</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span><span class=\"token operator\">></span> k <span class=\"token operator\">>=</span> limit<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token class-name\"><span class=\"token namespace\">dir<span class=\"token punctuation\">.</span></span>First</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\"><span class=\"token namespace\">x<span class=\"token punctuation\">.</span></span>Key</span> <span class=\"token operator\">>=</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Value <span class=\"token operator\">:</span> dir<span class=\"token punctuation\">[</span><span class=\"token class-name\"><span class=\"token namespace\">dir<span class=\"token punctuation\">.</span></span>Keys<span class=\"token punctuation\">.</span>Max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h2>\n<p>이러한 부분은 좋은 개발자들이 매일 사용하는 방법이고, 실제 코딩보다도 어떠하게 작업에 접근을 해야하는지를 알려줍니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://medium.com/javascript-in-plain-english/19-things-i-stole-from-great-developers-85511ff56570\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/javascript-in-plain-english/19-things-i-stole-from-great-developers-85511ff56570</a></li>\n</ul>\n"}}]}}},"context":{}}