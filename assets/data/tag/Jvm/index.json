{"hash":"dffc58dc3840349261c8b8f2b24f6d6644d2fe0c","data":{"tag":{"title":"Jvm","belongsTo":{"edges":[{"node":{"title":"[Java] JVM이란.","path":"/01-java-study/","date":"29. December 2020","timeToRead":9,"description":"JVM 대해 정리합니다.","content":"<h1 id=\"jvmjava-vitual-machine\"><a href=\"#jvmjava-vitual-machine\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM(Java Vitual Machine)</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다.</p>\n<br/>\n<h2 id=\"java의-특징\"><a href=\"#java%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java의 특징.</h2>\n<p>기본적으로 자바 프로그램은 JVM위에서 동작합니다. 이러한 JVM위에 동작하기 위해서는 자바 바이트 코드가 필요합니다. 이러한 자바 바이트코드는 개발자에 의해서 작성된 자바 소스코드(<code class=\"language-text\">*.java</code>)가 자바 컴파일러(<code class=\"language-text\">javac</code>)로 인해 변환된 코드(<code class=\"language-text\">*.class</code>)를 의미합니다.</p>\n<h3 id=\"java-프로그램의-특징\"><a href=\"#java-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 프로그램의 특징</h3>\n<ul>\n<li>JVM은 Bytecode를 구동하고 있는 OS에 맞춰 Binary code로 해석됩니다. 그렇기 때문에 <strong>OS에 독립적</strong>입니다.</li>\n<li>Bytecode는 클래스 단위(<code class=\"language-text\">*.class</code>)로 생성되기 때문에 프로그램의 수정이 일어나도 전체 소스코드를 컴파일할 필요는 없습니다.</li>\n<li>JVM은 OS로부터 메모리를 할당받아 스스로 관리합니다. 대표적으로 Garbage Collection이 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"jvm이란\"><a href=\"#jvm%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM이란?</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103287755-ac02a800-4a26-11eb-9ed9-a44972821597.png\" alt=\"JVM\"></p>\n<p>JVM이란 Java Virtual Machine의 약자입니다. 이를 번역하면 자바 가상머신입니다. (프로그램을 실행하기 위해 물리적 머신과 유사한 머신을 소프트에어로 구현하였습니다.)</p>\n<p>JVM의 역할은 자바 Application을 클래스 로더를 통해 읽어서 자바 Application을 클래서 로더를 통해 읽어서 자바 API와 함께 실행하는 것입니다. 그리고 JVM은 <strong>Java와 OS사이에서 중개자 역할을 수행</strong>하며 Java가 OS에 구애받지 않고 <strong>재사용 가능</strong>하게 해줍니다.</p>\n<h3 id=\"jvm의-기능\"><a href=\"#jvm%EC%9D%98-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 기능</h3>\n<ul>\n<li>JAVA가 OS에 상관없이 동작할 수 있도록 중계자 역할을 합니다.</li>\n<li>GC(Garabage Collection)등의 기능을 제공합니다.</li>\n</ul>\n<h3 id=\"jvm의-용도\"><a href=\"#jvm%EC%9D%98-%EC%9A%A9%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 용도</h3>\n<ul>\n<li>자바 프로그램이 어느 기기, 또는 어느 운영체제 상에서도 실행될 수 있게 합니다.</li>\n<li>프로그램 메모리를 관리하고 최적화합니다.</li>\n</ul>\n<h3 id=\"바이트-코드란\"><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8-%EC%BD%94%EB%93%9C%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>바이트 코드란?</h3>\n<ul>\n<li>JVM이 이해할 수 있는 형태의 언어.</li>\n</ul>\n<br/>\n<h2 id=\"jvm의-구성과-구동과정\"><a href=\"#jvm%EC%9D%98-%EA%B5%AC%EC%84%B1%EA%B3%BC-%EA%B5%AC%EB%8F%99%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 구성과 구동과정.</h2>\n<p>기존의 자바는 C++ 처럼 빠르지 못하다는 비평을 받았으나, 다양한 알고리즘과 접근방식이 제안되어 개선되고 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103288668-c0e03b00-4a28-11eb-8e0f-554cda0e3bc5.png\" alt=\"JVM의 구동\"></p>\n<p>JVM의 구동은 다음과 같이 진행됩니다. 이를 하나씩 설명해보면 다음과 같습니다.</p>\n<h3 id=\"class-loader클래스-로더\"><a href=\"#class-loader%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A1%9C%EB%8D%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Class Loader(클래스 로더)</h3>\n<ul>\n<li><strong>JVM내로 클래스(.class파일)을 로드하고 링크를 통해 배치하는 작업을 수행하는 모듈</strong>입니다.</li>\n<li>Runtime 시 동적으로 클래스를 로드합니다.</li>\n<li>jar 파일 내에 저장된 클래스를 JVM 위에 탑재하고 사용하지 않는 클래스들은 메모리에서 삭제합니다.</li>\n</ul>\n<h3 id=\"execution-engine실행-엔진\"><a href=\"#execution-engine%EC%8B%A4%ED%96%89-%EC%97%94%EC%A7%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Execution Engine(실행 엔진)</h3>\n<ul>\n<li>클래스 로더에서 <strong>분석된 클래스 파일의 데이터를 저장하고 실행 도중에 필요한 데이터를 저장하고 실행 도중에 필요한 데이터를 실행</strong>합니다.</li>\n</ul>\n<h3 id=\"runtime-data-area\"><a href=\"#runtime-data-area\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Runtime Data Area</h3>\n<ul>\n<li>JVM의 메모리 영역입니다.</li>\n<li>\n<p>크게 4가지로 구분할 수 있습니다.</p>\n<ul>\n<li>\n<p>클래스 영역</p>\n<ul>\n<li><strong>실행에 필요한 클래스를 로드해서 저장</strong>합니다.</li>\n<li>내부에서 메소드 영역과 상수 영역으로 나눠집니다.</li>\n</ul>\n</li>\n<li>\n<p>가비지 컬렉션 힙 영역</p>\n<ul>\n<li><strong>GC에 의해 관리되는 영역</strong>입니다.</li>\n<li>동적 메모리 할당 영역이며, 일반적으로 <code class=\"language-text\">new</code>를 사용해 객체를 선언할 때 할당되는 영역입니다.</li>\n</ul>\n</li>\n<li>\n<p>런타임 스택 영역</p>\n<ul>\n<li>프로그램 <strong>실행 중 발생하는 메소드 호출과 복귀에 대한 정보를 저장</strong>합니다.</li>\n</ul>\n</li>\n<li>\n<p>네이티브 메소드 스택 영역</p>\n<ul>\n<li>자바는 하드웨어를 직접 제어하는 기능이 없어서 C언어와 같은 다른 언어의 기능을 빌려 사용합니다.</li>\n<li>이때 사용하는 기술이 JNI 기술이며 네이티브 메소드들을 바이트 코드로 변환되고 사용되고 기록됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"garbage-collector\"><a href=\"#garbage-collector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Garbage Collector</h3>\n<ul>\n<li>비지 컬렉션이란 프로세스를 통해 메모리를 관리하며, 이 <strong>가비지 컬렉션은 자바 프로그램에서 사용되지 않는 메모리를 지속적으로 찾아내서 제거</strong>합니다.</li>\n<li>과거의 가비지 컬렉션에 비해 알고리즘과 접근방식의 변경, 최적화 등으로 인해 개선되었습니다.</li>\n</ul>\n<br/>\n<h2 id=\"컴파일러와-인터프리터\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>컴파일러와 인터프리터</h2>\n<p>자바에 대해서 좀 더 잘 알기 위해서는 인터프리터에 대해 개념을 아는 것이 중요합니다.</p>\n<p>컴파일러, 인터프리터 둘 다 사람이 보는 고레벨 언어로 작성된 프로그래밍 언어(C++, Java 등등)를 기계어로 변환하는 것은 같으나 그 과정에 있어서 차이가 존재합니다. 컴파일러는 전체소스코드를 보고 명령어를 수집하고 재구성하는 반면 인터프리터는 소스코드의 각 행을 연속적으로 분석하며 실행하는 구조를 가지고 있습니다.</p>\n<h3 id=\"인터프리터의-특성\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0%EC%9D%98-%ED%8A%B9%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터프리터의 특성</h3>\n<p>인터프리터의 특성을 좀 더 자세하게 정리하면 다음과 같습니다.</p>\n<ul>\n<li>고레벨 언어를 중간 코드로 변환하고 이를 각 행마다 실행합니다.</li>\n<li>일반적으로 컴파일러가 각 행마다 실행하는 특성을 가진 인터프리터보다는 실행시간이 빠릅니다다.</li>\n<li>컴파일러는 전체 소스코드를 변환 한 뒤 에러를 보고하지만 인터프리터는 각 행마다 실행하는 도중 에러가 보고되면 이후의 코드는 확인하지 않습니다.</li>\n<li>\n<p>인터프리터 언어로는 다음과 같이 있습니다. <code class=\"language-text\">ex) 파이썬</code></p>\n<ul>\n<li>컴파일 언어 <code class=\"language-text\">ex) c c++</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"자바의-컴파일러와-인터프리터\"><a href=\"#%EC%9E%90%EB%B0%94%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바의 컴파일러와 인터프리터</h3>\n<p>자바는 특별하게 컴파일과 인터프리터를 병행합니다.</p>\n<ul>\n<li><strong>자바 컴파일러</strong>는 .java 파일을 javac(java compiler)가 바이트코드로 쓰여진 .class 파일로 변환한다. 바이트코드는 JVM을 위한 언어입니다.</li>\n<li><strong>자바 인터프리터</strong>는 자바 컴파일러에 의해 변환된 클래스파일내의 바이트코드를 특정 환경의 기계에서 실행될 수 있도록 변환합니다.</li>\n</ul>\n<h3 id=\"jit-왜자바는-컴파일과-인터프리트를-병행하는가\"><a href=\"#jit-%EC%99%9C%EC%9E%90%EB%B0%94%EB%8A%94-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%8A%B8%EB%A5%BC-%EB%B3%91%ED%96%89%ED%95%98%EB%8A%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JIT, 왜자바는 컴파일과 인터프리트를 병행하는가?</h3>\n<p>JIT 컴파일러는 Just In Time 컴파일러의 약자로, 인터프린터 방식과 컴파일러 방식을 혼합한 방식으로 정리할 수 있습니다. 실행 시점에는 인터프린터 형식으로 기계어 코드를 생성하고, 코드를 캐싱합니다.</p>\n<p>다음과 같은 특징을 가집니다.</p>\n<ul>\n<li>컴파일러의 경우 프로그램이 작성된 기계상에서 실행할 때 매우 효율적입니다.</li>\n<li>하지만 인터프리터의 경우는 플랫폼에 종속 되지 않습니다.</li>\n<li>자바 바이트코드는 컴퓨터와 프로그램 사이에 별도의 버퍼 역할을 수행합니다.(보안적 장점 + 성능적 장점)</li>\n</ul>\n<br/>\n<h2 id=\"jdk-vs-jre\"><a href=\"#jdk-vs-jre\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JDK VS JRE</h2>\n<ul>\n<li>JDK : Java Development Kit (자바 개발자 도구)</li>\n<li>JRE : Java Runtime Environment (자바 실행 환경)</li>\n</ul>\n<p>자바 언어로 프로그램을 개발하기 위해서는 JDK를 설치하면 되고, 자바 언어로 작성된 프로그램을 실행하기 위해서는 JRE을 설치하면 됩니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 자바의 기초, 그 처음 단계인 JVM에 대해서 정리했습니다. 잘못된 부분 있으면 알려주시면 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://asfirstalways.tistory.com/158\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://asfirstalways.tistory.com/158</a></li>\n<li><a href=\"https://minwan1.github.io/2018/06/06/2018-06-06-Java,JVM/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://minwan1.github.io/2018/06/06/2018-06-06-Java,JVM/</a></li>\n<li><a href=\"https://sesok808.tistory.com/32\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sesok808.tistory.com/32</a></li>\n<li><a href=\"https://preamtree.tistory.com/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://preamtree.tistory.com/2</a></li>\n<li><a href=\"http://www.itworld.co.kr/news/110837\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.itworld.co.kr/news/110837</a></li>\n</ul>\n"}}]}}},"context":{}}