{"hash":"cc9098dd8346e1418adf53ab8b5e8ea790bc2d53","data":{"tag":{"title":"Database","belongsTo":{"edges":[{"node":{"title":"[Database] Couchbase XDCR","path":"/00-db-couchbase-xdcr/","date":"2. April 2021","timeToRead":4,"description":"Couchbase XDCR에 대해 정리합니다.","content":"<h1 id=\"couchbase-xdcr\"><a href=\"#couchbase-xdcr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Couchbase XDCR</h1>\n<p>최근 진행해야하는 작업 중 하나가, 기존 Couchbase 서버가 있는 데이터 센터에서 서버 부하 해결 및 안정성을 위해 다른 데이터 센터에 데이터를 복제를 해야할 필요성이 존재합니다.</p>\n<p>회사에서 작업하는 주 목적은 데이터 서버에 있는 Couchbase 서버가 모두 죽었을 때, 정상적으로 작동하도록 구성하는 것이 목표입니다.</p>\n<p>이를 위해서 Cross Data Center Replication (약어, XDCR)에 대해 정리합니다.</p>\n<br/>\n<h2 id=\"xdcr이란\"><a href=\"#xdcr%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XDCR이란.</h2>\n<p>XDCR(Cross Data Center Replication)은 클러스터 간의 데이터를 복제하며, 데이터 센터 장애에 대한 보호 기능과 고성능 데이터 액세스 기능을 제공합니다.</p>\n<p>XDCR은 source 클러스터의 특정 버킷에서 대상 클러스터의 특정 버킷으로 데이터를 복제합니다. XDCR agent를 통해 Database Change Protocol을 사용하여 버킷에서 다른 타켓 버킷으로 데이터를 넘길 수 있습니다.</p>\n<br/>\n<h2 id=\"xdcr과-클러스터-내부-복제와의-차이\"><a href=\"#xdcr%EA%B3%BC-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%82%B4%EB%B6%80-%EB%B3%B5%EC%A0%9C%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XDCR과 클러스터 내부 복제와의 차이</h2>\n<ul>\n<li>클러스터 내부 복제의 경우, 클로스터 노드 전체에 데이터를 복제하나 XDCR의 경우 다른 데이터센터에 있는 여러 클러스터에 데이터를 복제합니다.</li>\n<li>클러스터 내부 복제의 경우, 단일 버킷에 대해 수행되지만 XDCR은 복제를 위해 두 개의 버킷이 필요합니다. (하나는 복제 데이터 제공 소스 클러스터 버킷, 다른 하나는 수신 받을 대상의 클러스터)</li>\n<li>클러스터 내 복제는 버킷 생성에서 구성되지만, XDCR은 소스 버킷과 대상 버킷을 모두 생성 후에 구성됩니다.</li>\n</ul>\n<blockquote>\n<p>클러스터(cluster)</p>\n</blockquote>\n<p>여러 대의 컴퓨터들이 연결되어 하나의 시스템처럼 동작하는 컴퓨터들의 집합, 해당 위에서는 서버들의 집합</p>\n<blockquote>\n<p>버킷(bucket)</p>\n</blockquote>\n<p>일반적으로 데이터가 영역으로 분할되는 document 유형입니다.</p>\n<br/>\n<h2 id=\"xdcr-절차\"><a href=\"#xdcr-%EC%A0%88%EC%B0%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XDCR 절차</h2>\n<p>사전 작업</p>\n<ul>\n<li>\n<p>XDCR의 대상이 될 원격 클러스터에 대한 References를 정의합니다.</p>\n<ul>\n<li><a href=\"https://docs.couchbase.com/server/current/manage/manage-xdcr/create-xdcr-reference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Document</a></li>\n</ul>\n</li>\n<li>\n<p>소스 버킷에서 지장된 대상 버킷으로 변경내용을 전송하는 복제를 정의하고 시작합니다.</p>\n<ul>\n<li><a href=\"https://docs.couchbase.com/server/current/learn/clusters-and-availability/xdcr-overview.html#manage:manage-xdcr/create-xdcr-replication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Document</a></li>\n</ul>\n</li>\n<li>복제를 모니터링합니다.</li>\n</ul>\n<p>다음의 옵션을 사용할 수 있습니다.</p>\n<ul>\n<li>Couchbase Web Console</li>\n<li>CLI</li>\n<li>REST API(Web Console, CLI)</li>\n</ul>\n<br/>\n<h2 id=\"xdcr-direction-topology\"><a href=\"#xdcr-direction-topology\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XDCR Direction, Topology</h2>\n<p>크게 전략은 단방향(Unidirectionally)와 양방향(Bidirectionally)로 구성됩니다.</p>\n<p>향후 진행할 작업은 양방향 XDCR을 구성할 방향이다.</p>\n<h3 id=\"unidirectionally\"><a href=\"#unidirectionally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unidirectionally</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113409137-a2089080-93eb-11eb-9fdc-15f325939633.png\" alt=\"Unidirectionally\"></p>\n<p>지정된 소스 버킷에 포함된 데이터가 지정된 대상 버킷에 복제되며, 일반적으로 <strong>백업 용도로 사용</strong>됩니다.</p>\n<h3 id=\"bidirectionally\"><a href=\"#bidirectionally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bidirectionally</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113409142-a5038100-93eb-11eb-8e01-c23ce981dfd5.png\" alt=\"Bidirectionally\"></p>\n<p>지정된 소스 버킷에 포함된 데이터는 대상 버킷에 복제되고, 반대의 방향의 경우에도 적용됩니다. 해당 두 버킷을 모두 데이터 서비스용으로 사용할 수 있으며, <strong>사용자에 좀 더 빠른 데이터 액세스를 제공</strong>할 수 있습니다.</p>\n<p>이러한 양방향 XDCR은 두 데이터 센터 이상으로도 작업할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/113409371-1d6a4200-93ec-11eb-8ff6-0a2205b62be6.png\" alt=\"image\"></p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>간략하게, XDCR에 대해 작성했습니다. 향후, 해당 작업 완료 후 추가적인 게시글을 작성할 예정입니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.couchbase.com/server/current/learn/clusters-and-availability/xdcr-overview.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Couchbase XDCR Doc</a></li>\n</ul>\n"}},{"node":{"title":"[Database] CAP 정리","path":"/00-db-cap/","date":"9. February 2021","timeToRead":4,"description":"CAP 이론에 대해 정리합니다.","content":"<h1 id=\"cap-정리\"><a href=\"#cap-%EC%A0%95%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CAP 정리</h1>\n<p>DB에 대해 공부하다 보면, CAP 이론에 대해 듣게 됩니다. 비록 이야기가 조금 있기는 하지만 그래도 CAP에 대해 개념을 정리합니다.</p>\n<br/>\n<h2 id=\"cap-란\"><a href=\"#cap-%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CAP 란.</h2>\n<p>CAP이론(Brewer's theorem)은 Network로 연결된 분산된 데이터베이스 시스템은 일관성(Consistency), 가용성(Availability), 분할 내구성(Partition Tolerance)의 3가지 특성 중 2가지 특성만을 충족할 수 있고 3가지를 모두 충족할 수는 없다는 이론입니다.</p>\n<h3 id=\"c일관성-consistency\"><a href=\"#c%EC%9D%BC%EA%B4%80%EC%84%B1-consistency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>C(<strong>일관성</strong>, Consistency)</h3>\n<ul>\n<li>일관성을 가진다는 것은 모든 데이터를 요청할 때 응답으로 가장 최신의 변경된 데이터를 리턴 또는 실패를 리턴합니다.</li>\n<li>모든 읽기에 대해서 DB노드가 항상 동일한 데이터를 가지고 있어야한다는 의미입니다.</li>\n</ul>\n<h3 id=\"a가용성-availability\"><a href=\"#a%EA%B0%80%EC%9A%A9%EC%84%B1-availability\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A(<strong>가용성</strong>, Availability)</h3>\n<ul>\n<li>가용성은 모든 요청에 대해서 정상적인 응답을 합니다.</li>\n<li>클러스터의 노드 일부에서 장애가 발생해도 READ나 WRITE 등의 동작은 항상 성공적으로 리턴되어야합니다.</li>\n</ul>\n<h3 id=\"p분할내성-partition-tolerance\"><a href=\"#p%EB%B6%84%ED%95%A0%EB%82%B4%EC%84%B1-partition-tolerance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>P(<strong>분할내성</strong>, Partition tolerance)</h3>\n<ul>\n<li>메시지 전달이 실패하는 시스템 일부가 망가져도 시스템이 계속 동작할 수 있습니다.</li>\n<li>분할 내구성이란 Node간의 통신 장애가 발생하더라도 동작해야합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107368608-19285380-6b24-11eb-95b2-846fea107c43.png\" alt=\"image\"></p>\n<p>다만, 현재의 DB와는 문제가 있다는 이야기는 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107371626-d1a3c680-6b27-11eb-9d32-1edebb653aed.png\" alt=\"image\"></p>\n<br/>\n<h2 id=\"일반적으로\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9C%BC%EB%A1%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>일반적으로</h2>\n<h3 id=\"cpconsistency--partition-tolerance\"><a href=\"#cpconsistency--partition-tolerance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CP(Consistency &#x26; Partition Tolerance)</h3>\n<ul>\n<li>어떤 상황에서도 안정적으로 시스템은 운영되지만 Consistency가 보장되지 않는다면 Error를 반환합니다.</li>\n<li><strong>매 순간 Read / Write 에 따른 정합성이 일치할 필요가 있는 경우 적합한 형태입니다.</strong></li>\n</ul>\n<h3 id=\"apavailability--partition-tolerance\"><a href=\"#apavailability--partition-tolerance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AP(Availability &#x26; Partition Tolerance)</h3>\n<ul>\n<li>어떤 상황에서도 안정적으로 시스템은 운영됩니다.</li>\n<li>데이터와 상관없이 안정적인 응답을 받을 수 있습니다.</li>\n<li>다만 데이터의 정합성에 대한 보장은 불가능합니다.</li>\n<li><strong>결과적으로 일관성이 보장되는 Eventual Consistency를 보장할 수 있는 시스템에 알맞는 형태입니다.</strong></li>\n</ul>\n<h3 id=\"대부분은\"><a href=\"#%EB%8C%80%EB%B6%80%EB%B6%84%EC%9D%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대부분은...</h3>\n<ul>\n<li>사실 대부분 CP, AP 시스템은 없고 대부분 CP와 AP의 어느 중간 쯤에 존재합니다.</li>\n<li>예제에 봤듯이 configuration에 따라 변하기도 하고, 이론 자체에서 한계점도 존재합니다.</li>\n<li>가장 큰 문제는 P에 대한 명확한 정의가 부족합니다.</li>\n<li>기존의 문제를 해결하기 위해 PACELC 이론이 등장하였습니다.</li>\n</ul>\n<br/>\n<h2 id=\"pacelc-이론\"><a href=\"#pacelc-%EC%9D%B4%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PACELC 이론</h2>\n<p>다음과 같은 요소로 표현됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107372209-7faf7080-6b28-11eb-897d-461cc4b64a86.png\" alt=\"pacelc\"></p>\n<h3 id=\"pacelc-구성\"><a href=\"#pacelc-%EA%B5%AC%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PACELC 구성</h3>\n<p>PACELC는 크게 4가지로 구성됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>구성</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Partition</td>\n<td>Availability</td>\n<td>가용성</td>\n</tr>\n<tr>\n<td></td>\n<td>Consistency</td>\n<td>일관성</td>\n</tr>\n<tr>\n<td>Else</td>\n<td>Latency</td>\n<td>시간 지연</td>\n</tr>\n<tr>\n<td></td>\n<td>Consistency</td>\n<td>일관성</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pacelc-대입\"><a href=\"#pacelc-%EB%8C%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PACELC 대입</h3>\n<p>이를 기존의 DB에 대입시키면 다음과 같이 볼 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107372699-0bc19800-6b29-11eb-96f0-957e59da40b8.png\" alt=\"pacelc-db\"></p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>CAP 이론과 PACELC 이론에 대한 개념을 잡았습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://jins-dev.tistory.com/entry/%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%99%98%EA%B2%BD-Distributed-System-%EC%97%90%EC%84%9C-BASE-%EC%9B%90%EC%B9%99%EA%B3%BC-CAP-%EC%A0%95%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jins-dev.tistory.com/entry/%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%99%98%EA%B2%BD-Distributed-System-%EC%97%90%EC%84%9C-BASE-%EC%9B%90%EC%B9%99%EA%B3%BC-CAP-%EC%A0%95%EB%A6%AC</a></li>\n<li><a href=\"https://sabarada.tistory.com/91\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sabarada.tistory.com/91</a></li>\n<li><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=windfalcon1&#x26;logNo=220402574806&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://m.blog.naver.com/PostView.nhn?blogId=windfalcon1&#x26;logNo=220402574806&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F</a></li>\n</ul>\n"}}]}}},"context":{}}