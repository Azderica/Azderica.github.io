{"hash":"c02c31c79a05373d3796f8d9d80ca9ef32b474be","data":{"tag":{"title":"CD","belongsTo":{"edges":[{"node":{"title":"[DevOps] CI와 CD란?","path":"/00-devops-cicd/","date":"9. January 2021","timeToRead":6,"description":"CI와 CD의 개념을 이해햡니다.","content":"<h1 id=\"cicd\"><a href=\"#cicd\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI/CD</h1>\n<p>DevOps에 대해 개념에 듣다 보면, CI와 CD에 대해 듣게 됩니다. 이때 CI와 CD의 개념에 대해 한번 정리해볼려고합니다.</p>\n<h2 id=\"cicd의-개념\"><a href=\"#cicd%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI/CD의 개념</h2>\n<p>CD/CD는 <strong>Continuous Integration (지속적인 통합) / Continuous Delivery or Continuous Deployment (지속적인 전달/지속적인 배포)</strong> 의 약자입니다. 이러한 CI/CD는 <strong>애플리케이션 개발 단게를 자동화하여 애플리케이션보다 짧은 주기로 고객에게 제공하는 방법</strong>입니다. CD/CD의 기본 개념은 <strong>지속적인 통합, 지속적인 서비스 제공, 지속적인 배포</strong>입니다. CI/CD는 새로운 코드 통합을 통해 개발 및 운영에서 발생하는 인테그레이션 헬(Integration hell)을 해결하기 위한 솔루션입니다.</p>\n<p>CI/CD는 애플리케이션의 통합 및 테스트 단게에서부터 제공 및 배포에 이르는 애플리케이션의 라이프사이클 전체에 걸쳐 지속적인 자동화와 지속적인 모니터링을 제공합니다. 이러한 구축 사례를 <strong>CI/CD 파이프라인</strong>이라 부르며, 개발과 운영팀의 애자빌 방싱 협력을 통해서 지원됩니다.</p>\n<p>Tip) CD는 Continuous Delivery 와 Continuous Deployment 로 두 의미를 가집니다.</p>\n<br/>\n<h2 id=\"ci와-cd의-차이\"><a href=\"#ci%EC%99%80-cd%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI와 CD의 차이?</h2>\n<p>CI와 CD는 커버하는 프로세스의 범위에서 차이가 있습니다. <code class=\"language-text\">CI</code>는 <strong>코드 레벨의 테스트까지 자동화</strong>하며, <code class=\"language-text\">CD</code>는 <strong>시스템 테스트 및 배포 등 실행 환경과 릴리즈까지 자동화</strong>합니다.</p>\n<p>CI/CD을 적용해서 품질 향상과 개발 효율성을 올려주고 릴리즈 하는 기간을 단축합니다. 최근 비지니스의 변화가 빨라지기 때문에, 시스템과 서비스를 신속하게 변화해야하는 필요성이 있기 때문에 CI/CD를 적용해야할 필요가 있습니다.</p>\n<br/>\n<h2 id=\"cicd의-단계\"><a href=\"#cicd%EC%9D%98-%EB%8B%A8%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI/CD의 단계.</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104083040-7eb3c680-527e-11eb-8865-a395f4e58df7.png\" alt=\"CI-CD-Diff\"></p>\n<h3 id=\"1-continuous-integration-지속적-통합\"><a href=\"#1-continuous-integration-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Continuous Integration (지속적 통합)</h3>\n<p>개발자가 애플리케이션에 적용한 변경 사항이 병합되면 이러한 변경 사항이 애플리케이션을 손상시키지 않도록 자동으로 애플리케이션을 구축하고 각기 다른 레벨의 자동화 테스트(일반적으로 단위 테스트 및 통합 테스트) 실행을 통해 변경 사항이 애플리케이션에 제대로 적용되었는지를 확인합니다.</p>\n<h3 id=\"2-continuous-delivery-지속적-제공\"><a href=\"#2-continuous-delivery-%EC%A7%80%EC%86%8D%EC%A0%81-%EC%A0%9C%EA%B3%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Continuous Delivery (지속적 제공)</h3>\n<p>CI의 빌드 자동화, 유닛 및 통합 테스트 수행 후, 이어지는 지속적 제공 프로세스에서는 유효한 코드를 리포지토리에 자동으로 릴리스합니다.</p>\n<h3 id=\"3-continuous-deployment-지속적-배포\"><a href=\"#3-continuous-deployment-%EC%A7%80%EC%86%8D%EC%A0%81-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Continuous Deployment (지속적 배포)</h3>\n<p>프로덕션 준비가 완료된 빌드를 코드 리포지토리에 자동으로 릴리스하는 지속적 제공의 확장된 형태인 지속적 배포는 애플리케이션을 프로덕션으로 릴리스하는 작업을 자동화합니다.</p>\n<br/>\n<h2 id=\"ci와-cd의-단계\"><a href=\"#ci%EC%99%80-cd%EC%9D%98-%EB%8B%A8%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI와 CD의 단계</h2>\n<h3 id=\"ci지속적인-통합의-장점\"><a href=\"#ci%EC%A7%80%EC%86%8D%EC%A0%81%EC%9D%B8-%ED%86%B5%ED%95%A9%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI(지속적인 통합)의 장점</h3>\n<p>CI에서는 개발자가 자신이 변경한 코드를 저장소에 커밋하고 그때마다 자동화 된 빌드와 테스트가 실행합니다. 이 짧은 사이클로 통합을 반복하면서 통합시 발생된 오류를 신속하게 수정하여 개발팀은 통합된 소프트웨어를 신속하게 개발할 수 있습니다.</p>\n<p>다음과 같은 특징을 가집니다.</p>\n<ul>\n<li>\n<p>버그를 신속하게 발견하고 대응 가능합니다.</p>\n<ul>\n<li>테스트를 자주 발생하기 때문에, 버그를 빠르게 발견하고 해결할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>신속한 업데이트와 배포가 가능합니다.</p>\n<ul>\n<li>항상 최신 버전을 유지하여 이를 바탕으로 업데이트를 배포할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>개발의 생산성이 향상됩니다.</p>\n<ul>\n<li>일찍 적은 비용으로 오류를 해결할 수 있기 때문에 생산성을 향상시키고 품질이 좋은 소프트웨어에 개발할 수 있게됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cd지속적인-전달의-장점\"><a href=\"#cd%EC%A7%80%EC%86%8D%EC%A0%81%EC%9D%B8-%EC%A0%84%EB%8B%AC%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CD(지속적인 전달)의 장점</h3>\n<p>CD는 클라우드와 컨테이너 기술의 확산과 인프라를 코드로 관리할 수 있게 되면서 등장하였습니다. 이를 통해 소스 커밋부터 릴리즈까지 모든 작업을 자동으로 수행할 수 있습니다.</p>\n<p>다음과 같은 특징을 가집니다.</p>\n<ul>\n<li>\n<p>소프트웨어 릴리스 프로세스 자동화할 수 있습니다.</p>\n<ul>\n<li>CD에서는 개발 코드를 변경, 빌드, 테스트, 운영 환경 릴리스에 대한 준비가 자동화됩니다.</li>\n</ul>\n</li>\n<li>\n<p>개발자 생산성 향상할 수 있습니다.</p>\n<ul>\n<li>수작업을 줄여서 생산성이 향상됩니다.</li>\n</ul>\n</li>\n<li>\n<p>버그를 신속하게 발견하고 대응할 수 있습니다.</p>\n<ul>\n<li>테스트의 빈도를 높이고 내용을 충실하게 하여 버그를 조기에 발견하고 해결할 수 잇습니다.</li>\n</ul>\n</li>\n<li>신속한 업데이트와 배포가 가능합니다.</li>\n</ul>\n<br/>\n<h2 id=\"cicd-지원-툴\"><a href=\"#cicd-%EC%A7%80%EC%9B%90-%ED%88%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI/CD 지원 툴</h2>\n<ul>\n<li>Jenkins</li>\n<li>Travis</li>\n<li>CicleCI</li>\n<li>Bamboo</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>다음글에는 대표적인 CI/CD 지원 툴인 Jenkins에 대해 한번 정리해보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"http://www.opennaru.com/cloud/ci-cd/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.opennaru.com/cloud/ci-cd/</a></li>\n<li><a href=\"https://www.redhat.com/ko/topics/devops/what-is-ci-cd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.redhat.com/ko/topics/devops/what-is-ci-cd</a></li>\n</ul>\n"}}]}}},"context":{}}