{"hash":"a48ca53256831608b767e7c070d0a68a0cbdb4b7","data":{"tag":{"title":"Stater","belongsTo":{"edges":[{"node":{"title":"[Java] Java Lambda Detail","path":"/15-java-study/","date":"4. March 2021","timeToRead":11,"description":"Java Lambda에 대해 좀 더 자세하게 정리합니다.","content":"<h1 id=\"java-lambda\"><a href=\"#java-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h1>\n<p>백기선님의 자바 스터디 15주차(마지막) 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>람다식 사용법</li>\n<li>함수형 인터페이스</li>\n<li>Variable Capture</li>\n<li>메소드, 생성자 레퍼런스</li>\n</ul>\n<br/>\n<h2 id=\"java-lambda-1\"><a href=\"#java-lambda-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h2>\n<p>사실 자바 람다에 대해서는 따로 개인적으로 공부한 적이 있습니다. 다만 오늘은 스터디와 함께 더불어서 더 자세하게 공부해보려고 합니다.</p>\n<p>지난 게시글은 아래의 링크를 참고해주세요.</p>\n<p><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></p>\n<p>해당 게시글에서는 다음의 내용을 소개합니다.</p>\n<ul>\n<li>람다식이란.</li>\n<li>람다식 사용 방법</li>\n<li>람다식 예제</li>\n<li>람다식의 장단점</li>\n</ul>\n<br/>\n<h2 id=\"자바-람다식-사용법\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 람다식 사용법</h2>\n<h3 id=\"람다식이란\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>람다식이란</h3>\n<p><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></p>\n<p>해당 게시글을 내용이며 한번 더 이야기 하면 다음과 같이 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>매개변수<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> 실행문 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>자바의 Lambda는 <strong>메소드를 하나의 식(Expression)</strong>으로 표현한 것입니다. 익명메소드(함수) 생성 문법이라고도 이야기 할 수 있습니다.</p>\n<p>다만 주의해야하는 부분 중 하나는 자바의 메소드는 메소드 자체로 혼자 선언하여 선언하여 쓰일 수 없습니다. 반드시 클래스 구성 멤버로 선언되어 있어야합니다. 즉, 람다식을 통해서 생성되는 것은 메소드가 아닌 해당 메소드를 가지는 객체입니다. 람다식은 일반적인 객체가 아닌 <strong>인터페이스를 구현한 익명구현객체</strong>입니다.</p>\n<p>함수적 프로그래밍을 지원하기 위해서 자바 8부터 람다식을 지원하게 되었는데, 이를 통해서 기존의 코드 패턴이 많이 달라지기도 하며, 문법이 간결한 만큼 가독성면에서 큰 장점을 가집니다.</p>\n<h3 id=\"람다식-예제\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>람다식 예제.</h3>\n<p>다음과 같이 예시를 작성합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 함수형 인터페이스 선언</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 추상 메소드</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    alc minNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minNum<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output : 3</span>\n\n    <span class=\"token class-name\">Calc</span> calcNum <span class=\"token operator\">=</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calcNum<span class=\"token punctuation\">.</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// output : 4</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 예시에서 로직이 한줄이기 때문에 구현 로직에서 { x &#x3C; y ? x : y } 대신에 x &#x3C; y ? x : y 로 {}를 뺄수도 있고 return도 없앨 수 있습니다.</p>\n<p>추가적으로 매개변수가 하나 일때는 () 또한 삭제가 가능합니다.</p>\n<h3 id=\"자바-람다식의-장단점\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%9E%8C%EB%8B%A4%EC%8B%9D%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 람다식의 장단점</h3>\n<p>장점</p>\n<ul>\n<li>코드를 간결하게 만들 수 있습니다.</li>\n<li>가독성이 좋아집니다.</li>\n<li>함수를 만드는 과정 없이 한번에 처리할 수 있으므로 코딩하는 시간이 줄어듭니다.</li>\n<li>병렬 프로그래밍에 유리합니다.</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>재사용이 불가능합니다.</li>\n<li>일부 디버깅이 까다롭습니다.</li>\n<li>너무 남발하면 코드가 지저분해집니다.</li>\n<li>재귀로 만드는 경우에는 성능적 이슈가 있을 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"함수형-인터페이스\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>함수형 인터페이스</h2>\n<p>함수형 인터페이스(Functional Interface) 는 <strong>추상 메소드를 딱 하나만 가지고 있는 인터페이스</strong>입니다.</p>\n<p>자바 8부터 Functional Interface 기반의 <code class=\"language-text\">java.util.function</code> 패키지를 지원합니다.</p>\n<p>대표적인 예시는 아래와 같습니다.</p>\n<h3 id=\"1-predicate\"><a href=\"#1-predicate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Predicate</h3>\n<p><code class=\"language-text\">Predicate</code> 인터페이스는 T타입의 값을 받아서 boolean을 반환하는 함수 인터페이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Predicate Sample</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n  <span class=\"token comment\">// Predicate - and</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateAnd <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateAnd<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span>\n\n  <span class=\"token comment\">// Predicate - negate</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateNegate <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">negate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateNegate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span>\n\n  <span class=\"token comment\">// Predicate - or</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateOr <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateOr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">and(Predicate&lt;? super T&gt; other)</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 기존 Predicate와 and 조건으로 결합된 Predicate를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">negate()</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 부정을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">or(Predicate&lt;? super T&gt; other)</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 기존 Predicate와 or 조건으로 결합된 Predicate를 반환합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-consumer\"><a href=\"#2-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Consumer</h3>\n<p><code class=\"language-text\">Consumer</code> 인터페이스는 제너릭 형식의 T 객체를 받아, void를 반환하는 accept 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> firstConsumer <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first: \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> secondConsumer <span class=\"token operator\">=</span> b <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second: \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> combineConsumer <span class=\"token operator\">=</span> firstConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>secondConsumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  combineConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// first: test \\n second : test</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">andThen(Consumer&lt;? super T&gt; after)</code></p>\n<ul>\n<li>Consumer의 default 메소드로서, accept 메소드를 실행하고, 인수로 받은 Consumer의 accept 메소드를 호출하도록 정의합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-function\"><a href=\"#3-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Function</h3>\n<p><code class=\"language-text\">Function&lt;T, R&gt;</code> 인터페이스는 제너릭 형식의 T 객체를 받아, R 객체를 반환하는 apply 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">R</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> a <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 300</span>\n\n  <span class=\"token comment\">// function - andThen</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function1 <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function1<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 150</span>\n  <span class=\"token comment\">// 3 -> 300 -> 150</span>\n\n  <span class=\"token comment\">// function - compose</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function2 <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function2<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n  <span class=\"token comment\">// 3 -> 1 -> 100</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">andThen(Function&lt;? super R, ? extends T&gt; after)</code></p>\n<ul>\n<li>Function의 default 메소드로서, apply 메소드를 실행후 반환 값을 인수로 받은 Function의 apply 메소드의 인수로 전달하고 결과를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compose(Function&lt;? super V, ? extends T&gt; after)</code></p>\n<ul>\n<li>Function의 default 메소드로서, 인수로 받은 Function의 apply 메소드를 먼저 실행 및 반환 후 apply 메소드를 실행하여 결과를 반환합니다.</li>\n<li><code class=\"language-text\">andThen</code> 메소드와 반대로 동작합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-supplier\"><a href=\"#4-supplier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Supplier</h3>\n<p>Supplier 인터페이스는 매개변수는 없으며 T 객체를 반환하는 get 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// supplier</span>\n  <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> supplier <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-operator\"><a href=\"#5-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Operator</h3>\n<p><code class=\"language-text\">Operator</code> 인터페이스는 특정한 정수나 실수형 데이터를 처리하는데 사용되는 인터페이스입니다.</p>\n<br/>\n<h2 id=\"variable-capture\"><a href=\"#variable-capture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Variable Capture</h2>\n<p>Lambda의 body에서 인자로 넘어온 것 이외의 변수를 접근하는 것을 <strong>Variable Capture</strong>라고 합니다.</p>\n<p>Lambda는 인스턴스, 정적 변수와 final로 선언된 혹은 final처럼 사용되고 있는 <strong>지역 변수를 참조</strong>할 수 있습니다.</p>\n<p>지역변수를 사용할 때에는 해당 변수에게 값의 재할당이 일어나면 안됩니다.</p>\n<p>즉, 다음의 경우와 같이 새로운 scope를 통해서 <strong>로컬변수로 재정의</strong>하여 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week15</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableCapture</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// val - 1</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> anonymosClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// val - 2</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        anonymosClass<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만 이를 람다식처럼 재정의 할려고 하면 에러가 발생합니다. (같은 scope이므로.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableCapture</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lambdaExpression <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error. Variable 'val' is already defined in the scope</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        lambdaExpression<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>람다는 이를 새도윙(shadowing)하지 않습니다.</p>\n<ul>\n<li><strong>새도윙?</strong> 변수, 메소드, 클래스, 인터페이스의 이름을 같은 영역에서 동일하게 사용하는 것</li>\n</ul>\n<h3 id=\"finaleffective-final\"><a href=\"#finaleffective-final\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final/effective final</h3>\n<p>람다식에서는 scope를 공유하기 때문에 <code class=\"language-text\">final</code> 또는 <code class=\"language-text\">effective final</code> 만 사용가능합니다.</p>\n<p>람다식에서 사용되는 외부 지역 변수는 복사본이고 해당 stack에서만 생성되고, 해당 블럭이 끝나면 stack에서 접근되는 구조이기 때문에 이후에 참조할 수 없습니다.</p>\n<p>따라서 지역 변수를 관리하는 쓰레드와 람다식이 실행되는 쓰레드는 다를 수도 있기 때문에 어떤 데이터가 최신일지 모른다는 문제가 있습니다. 그렇기 때문에 이러한 값을 보장하기 위해서 <code class=\"language-text\">final</code>이나 <code class=\"language-text\">effective final</code>만 사용가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lambdaExpression <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// error: local variables referenced from a lambda expression must be final or effectively final</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  val<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n  lambdaExpression<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"메소드-생성자-레퍼런스\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드, 생성자 레퍼런스</h2>\n<h3 id=\"메소드-레퍼런스\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 레퍼런스</h3>\n<p>메소드 레퍼런스는 람다식을 더 간단하게 만드는 표현식입니다.</p>\n<p>전달하는 인수와 사용하는 메소드의 인수 형태가 같을시 메소드 레퍼런스를 통해서 간결하게 표현가능합니다.</p>\n<p>종류는 다음과 같습니다.</p>\n<h4 id=\"1-static-method-reference\"><a href=\"#1-static-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Static Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{타입}::(Static Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> refConsumer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"2-instance-method-reference\"><a href=\"#2-instance-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Instance Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{Object Reference}::(Instance Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> operator <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> refOperator <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"3-constructor-method-reference\"><a href=\"#3-constructor-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Constructor Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{타입}::(Static Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringOperator <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> refStringOperator <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://azderica.github.io/00-java-lambda/</a></li>\n<li><a href=\"https://giyeon95.github.io/whiteship/whiteship_study_week15/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://giyeon95.github.io/whiteship/whiteship_study_week15/</a></li>\n<li><a href=\"https://www.notion.so/758e363f9fb04872a604999f8af6a1ae\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/758e363f9fb04872a604999f8af6a1ae</a></li>\n<li><a href=\"https://soy.me/2014/04/05/name_reuse/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://soy.me/2014/04/05/name_reuse/</a></li>\n<li></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Generic","path":"/14-java-study/","date":"28. February 2021","timeToRead":8,"description":"Java Generic에 대해 정리합니다.","content":"<h1 id=\"java-generic\"><a href=\"#java-generic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Generic</h1>\n<p>백기선님의 자바 스터디 14주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>제네릭 사용법</li>\n<li>제네릭 주요 개념 (바운디드 타입, 와일드 카드)</li>\n<li>제네릭 메소드 만들기</li>\n<li>Erasure</li>\n</ul>\n<br/>\n<h2 id=\"자바-제네릭\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭</h2>\n<p>자바 제네릭스는 JDK 1.5에서 처음 도입되었습니다.</p>\n<p>자바의 제네릭은 다양한 타입의 객체를 다루는 메소드나 컬렉션 클래스에 <strong>컴파일 시의 타입 체크(compile-time type check)를 해주는 기능</strong>입니다.</p>\n<p>그래서 다음과 같은 <strong>장점</strong>이 있었습니다.</p>\n<ul>\n<li>\n<p>객체의 타입을 컴파일 시에 체크하기 때문에 <strong>객체의 타입 안정성을 높이고 형변환의 번거로움이 줄어듭니다.</strong></p>\n<ul>\n<li>타입의 안정성이 높다는 것은 의도하지 않은 타입의 객체가 저장되는 것을 막고, 저장된 객체를 꺼내올 때 원래의 타입과 다른 타입으로 잘못 형변환되어 발생할 수 있는 오류를 줄여줍니다.</li>\n</ul>\n</li>\n</ul>\n<p>따라서 <strong>제네릭의 장점</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p><strong>타입의 안정성을 제공합니다.</strong></p>\n<ul>\n<li>컴파일 타임에 타입 체크를 하기 때문에 런타임에서 ClassCastException과 같은 UncheckedException을 보장합니다.</li>\n</ul>\n</li>\n<li>타입체크와 형변환을 생략할 수 있으므로 <strong>코드가 간결</strong>해집니다.</li>\n</ul>\n<h3 id=\"제네릭-클래스-선언\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>제네릭 클래스 선언</h3>\n<p>다음과 같이 클래스가 있을 때,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>아래처럼 제네릭 클래스로 변경할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 <code class=\"language-text\">T</code>를 <strong>타입 변수(type variable)</strong> 라고 합니다.</p>\n<p>이를 사용하면 다음과 같이 사용가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New String data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// output : New String data</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>일반적으로 Type이라는 단어의 첫 스펠링을 따서 T라고 하며, T가 아닌 다른 것을 사용해도 됩니다.</p>\n<p>일반적으로 상황에 맞는 경우의 약자를 사용합니다. 다음과 같은 예제가 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">ArrayList&lt;E&gt;</code></p>\n<ul>\n<li>E 는 Element의 약자입니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Map&lt;K, V&gt;</code></p>\n<ul>\n<li>타입 변수가 여러개인 경우는 콤마로 구분해서 나열합니다.</li>\n<li>K는 Key, V는 Value를 의미합니다.</li>\n</ul>\n</li>\n</ul>\n<p>일반적으로 다음과 같은 타입 매개변수를 주로 사용합니다.</p>\n<ul>\n<li>E(Element), K(Key), N(Number), T(Type), V(Value)</li>\n</ul>\n<br/>\n<h2 id=\"자바-제네릭의-주요-개념\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭의 주요 개념</h2>\n<h3 id=\"자바-제네릭-용어\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%9A%A9%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭 용어</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li><code class=\"language-text\">Data&lt;T&gt;</code> : 제네릭 클래스</li>\n<li><code class=\"language-text\">T</code> : 타입 변수</li>\n<li><code class=\"language-text\">Data</code> : 원시 타입(raw type)</li>\n</ul>\n<h3 id=\"자바-제네릭의-제한\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%A0%9C%ED%95%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭의 제한</h3>\n<p>자바 제네릭은 인스턴스별로 다르게 동작하도록 만들었기 때문에 여러 기능을 제공합니다.</p>\n<p>다만 다음의 특징을 가지고 있습니다.</p>\n<ul>\n<li>\n<p>static 멤버에 타입 변수 T를 사용할 수 없습니다.</p>\n<ul>\n<li><code class=\"language-text\">static T staticItem</code> : 불가능</li>\n</ul>\n</li>\n<li>\n<p>제네릭 타입의 배열을 생성하는 것은 허용하지 않습니다.</p>\n<ul>\n<li><code class=\"language-text\">T[] itemArray</code> : 불가능</li>\n</ul>\n</li>\n<li>\n<p>참조 변수와 생성자 대입된 타입이 일치해야합니다.</p>\n<ul>\n<li><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new Box&lt;Grape&gt;()</code> : 불가능</li>\n<li><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new Box&lt;Apple&gt;()</code> : 가능</li>\n<li>\n<p><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new FruitBox&lt;Apple&gt;()</code> : 가능</p>\n<ul>\n<li><code class=\"language-text\">FruitBox&lt;T&gt; extends Box</code> : 상속인 경우에 한해서 가능합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"바운디드-타입\"><a href=\"#%EB%B0%94%EC%9A%B4%EB%94%94%EB%93%9C-%ED%83%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>바운디드 타입</h3>\n<p>제네릭 타입에서 타입 인자로 사용할 수 있는 타입을 제한하는 경우가 있을 수 있습니다. 이때 <strong>바운디드 타입이 사용</strong>됩나다.</p>\n<p>바운디드 타입 파라미터를 사용하기 위해서는 <code class=\"language-text\">extends</code>를 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>인터페이스를 구현하는 경우에도 <code class=\"language-text\">implements</code>를 사용하지 않으며, <code class=\"language-text\">extends</code>를 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Eatable</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>자식이면서 인터페이스를 같이 구현하는 경우에는 다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Eatable</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"와일드-카드\"><a href=\"#%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>와일드 카드</h3>\n<p>와일드카드는 기호 <code class=\"language-text\">?</code>로 표현을 하며, 와일드 카드는 어떠한 타입도 될 수 있습니다.</p>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">&lt;? extends T&gt;</code> : 와일드 카드의 상한 제한, T와 그 자손들만 가능</li>\n<li><code class=\"language-text\">&lt;? super T&gt;</code> : 와일드 카드의 하한 제한, T와 그 조상들만 가능</li>\n<li><code class=\"language-text\">&lt;?&gt;</code> : 제한이 없으며 모든 타입이 가능합니다. <code class=\"language-text\">&lt;? extends Object&gt;</code>와 동일합니다.</li>\n</ul>\n<h4 id=\"-extends-t-와일드-카드의-상한-제한-예제\"><a href=\"#-extends-t-%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C%EC%9D%98-%EC%83%81%ED%95%9C-%EC%A0%9C%ED%95%9C-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">&lt;? extends T&gt;</code>, 와일드 카드의 상한 제한 예제</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Juicer</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">Juice</span> <span class=\"token function\">makeJuice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> box<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> fruit <span class=\"token operator\">:</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      temp <span class=\"token operator\">+=</span> fruit <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Juice</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"-super-t--와일드-카드의-하한-제한-예제\"><a href=\"#-super-t--%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C%EC%9D%98-%ED%95%98%ED%95%9C-%EC%A0%9C%ED%95%9C-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">&lt;? super T&gt;</code> : 와일드 카드의 하한 제한 예제.</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitComp</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> t1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Fruit</span> t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> t1<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> t2<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"제네릭-메서드\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>제네릭 메서드</h2>\n<p>메서드의 선언부에 제네릭 타입이 선언된 메서드를 제네릭 메서드라고 합니다.</p>\n<p>일반적으로 컬렉션 메소드 <code class=\"language-text\">Collections.sort()</code>와 같은 메소드가 대표적인 제네릭 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span></code></pre>\n<p>다만, 제네릭 메서드와 제네릭 클래스의 매개변수는 별개의 것을 의미합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// T-1</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// T - 2</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// T-1과 T-2는 다릅니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"자바-제네릭-타입의-제거-erasure\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A0%9C%EA%B1%B0-erasure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭 타입의 제거 (Erasure)</h2>\n<p>컴파일러는 제네릭 타입을 이용해서 소스파일을 체크하고, 필요한 곳에 형변환을 넣어주고 제네릭 타입을 제거합니다.</p>\n<p>컴파일된 파일(*.class)에는 제네릭 타입이 없기 때문에 이를 처리해줄 필요가 있습니다. 따라서 이전의 소스코드와의 호환성을 위해서 만들어졌습니다.</p>\n<p>다음의 순으로 진행됩니다.</p>\n<h4 id=\"1-제네릭-타입의-경계를-제거합니다\"><a href=\"#1-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%98-%EA%B2%BD%EA%B3%84%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 제네릭 타입의 경계를 제거합니다.</h4>\n<ul>\n<li><code class=\"language-text\">&lt;T extends Fruit&gt;</code> : Fruit로 치환됩니다.</li>\n<li><code class=\"language-text\">&lt;T&gt;</code> : Object로 치환됩니다.</li>\n</ul>\n<p>AS-IS</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>TO-Be</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"2-제네릭-타입을-제거한-후에-타입이-일치하지-않는-경우-형변환을-추가합니다\"><a href=\"#2-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A0%9C%EA%B1%B0%ED%95%9C-%ED%9B%84%EC%97%90-%ED%83%80%EC%9E%85%EC%9D%B4-%EC%9D%BC%EC%B9%98%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%BD%EC%9A%B0-%ED%98%95%EB%B3%80%ED%99%98%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 제네릭 타입을 제거한 후에 타입이 일치하지 않는 경우, 형변환을 추가합니다.</h4>\n<ul>\n<li>일반적으로 Object 타입으로 변환이 일어나지만, 와일드 카드가 포함시 적절한 타입으로 형변환이 추가됩니다.</li>\n</ul>\n<p>AS-IS</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>TO-Be</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Fruit</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">)</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.notion.so/4735e9a564e64bceb26a1e5d1c261a3d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/4735e9a564e64bceb26a1e5d1c261a3d</a></li>\n<li><a href=\"https://rockintuna.tistory.com/102\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rockintuna.tistory.com/102</a></li>\n<li><a href=\"https://b-programmer.tistory.com/275\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/275</a></li>\n<li><a href=\"https://blog.naver.com/hsm622/222251602836\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/hsm622/222251602836</a></li>\n<li><a href=\"https://sujl95.tistory.com/73\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/73</a></li>\n<li><a href=\"https://redbean88.github.io/study/whiteship-study-14week/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redbean88.github.io/study/whiteship-study-14week/</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java I/O","path":"/13-java-study/","date":"21. February 2021","timeToRead":9,"description":"Java I/O에 대해 정리합니다.","content":"<h1 id=\"java-io\"><a href=\"#java-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JAVA I/O</h1>\n<p>13주차 내용은 자바의 I/O에 관련된 내용입니다.</p>\n<ul>\n<li>스트림 (Stream) / 버퍼 (Buffer) / 채널 (Channel) 기반의 I/O</li>\n<li>InputStream 과 OutputStream</li>\n<li>Byte 와 Character 스트림</li>\n<li>표준 스트림 (System.in, System.out, System.err)</li>\n<li>파일 읽고 쓰기</li>\n</ul>\n<br/>\n<h2 id=\"스트림-버퍼-채널-기반-io\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EB%B2%84%ED%8D%BC-%EC%B1%84%EB%84%90-%EA%B8%B0%EB%B0%98-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림, 버퍼, 채널 기반 I/O</h2>\n<h3 id=\"자바-nionew-inputoutput\"><a href=\"#%EC%9E%90%EB%B0%94-nionew-inputoutput\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 NIO(New Input/Output)</h3>\n<p>자바 1.4버전부터 추가된 API로 Non-blocking 처리가 가능하며, 스트림이 아닌 채널을 사용합니다.</p>\n<p>기존의 I/O와는 다음의 차이가 있습니다.</p>\n<ul>\n<li>기존 IO 방식의 경우에서는 각각의 스트림에서 read()와 write()가 호출이 되면 데이터가 입력 되고, 데이터가 출력되기전까지, 스레드는 멈춤상태가 됩니다. 이 경우에는 작업이 끝날때까지 사용할 수 없으며, 그전에는 해당 IO 스레드는 사용할 수 없고 인터럽트도 할 수 없습니다. (스트림을 닫는 방법이 유일합니다.)</li>\n<li>NIO의 블로킹 상태에서는 Interrupt를 통해서 빠져 나올 수 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>--</th>\n<th>IO</th>\n<th>NIO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>입출력 방식</td>\n<td>스트림</td>\n<td>채널</td>\n</tr>\n<tr>\n<td>비동기 방식 지원</td>\n<td>X</td>\n<td>O</td>\n</tr>\n<tr>\n<td>Blocking/Non-Blocking</td>\n<td>Blocking Only</td>\n<td>Both</td>\n</tr>\n<tr>\n<td>사용 경우</td>\n<td>연결 클라이언트가 적고</td>\n<td>연결 클라이언트가 많고</td>\n</tr>\n<tr>\n<td></td>\n<td>I/O처리가 큰 경우(대용량)</td>\n<td>I/O처리가 작은 경우(저용량)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"스트림stream\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BCstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림(Stream)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108591789-ccf3d380-73ad-11eb-9cd6-625d393cf111.png\" alt=\"image\"></p>\n<ul>\n<li>FIFO(First In First Out)</li>\n<li>단방향이기 때문에 입력 스트림과 출력 스트림을 별도로 사용합니다.</li>\n<li>연속된 데이터의 흐름으로 입출력 진행시 다른 작업을 할 수 없는 블로킹(Blocking) 상태가 됩니다.</li>\n<li>입출력 대상을 변경하기 편하며 동일한 프로그램 구조를 유지할 수 있습니다.</li>\n</ul>\n<h3 id=\"버퍼buffer\"><a href=\"#%EB%B2%84%ED%8D%BCbuffer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>버퍼(Buffer)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108591844-21974e80-73ae-11eb-90af-b3353a464654.png\" alt=\"image\"></p>\n<ul>\n<li>byte, char, int 등의 기본 데이터 타입을 저장할 수 있는 저장소로서, 배열과 마찬가지로 제한된 크기(capacity)에 순서대로 데이터를 저장합니다.</li>\n<li>버퍼는 데이터를 저장하기 위한 것이며, 실제로 버퍼가 사용되는 것은 채널을 통해서데이터를 주고 받을 때 사용됩니다.</li>\n<li><strong>채널을 통해서 소켓, 파일 등에서 데이터를 전송할 때나 읽어올 때 버퍼를 사용하게 됨으로써 가비지량을 최소화 시키며 이는 가비지 콜렉션의 회수를 줄임으로써 서버의 전체 처리량을 증가시킵니다.</strong></li>\n</ul>\n<h3 id=\"채널channel-기반-io\"><a href=\"#%EC%B1%84%EB%84%90channel-%EA%B8%B0%EB%B0%98-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>채널(Channel) 기반 I/O</h3>\n<p>채널은 서버와 클라인트간의 통신 수단을 나타냅니다. 일종의 데이터가 다니는 통로라는 점에서 비슷하지만 <strong>양방향</strong>이기 때문에 읽기와 쓰기가 동시에 가능합니다.</p>\n<p>대표적으로 다음과 같이 있습니다.</p>\n<ul>\n<li>SocketChannel (소켓과 연결)</li>\n<li>FileChannel (파일 채널)</li>\n<li>Pipe.SinkChannel (파이프와 연결)</li>\n<li>Pipe.SourceChannel (파이프와 연결)</li>\n<li>ServerSocketChannel (서버소켓과 연결)</li>\n</ul>\n<br/>\n<h2 id=\"inputstream-outputstream\"><a href=\"#inputstream-outputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>InputStream, OutputStream</h2>\n<h3 id=\"inputstream\"><a href=\"#inputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>InputStream</h3>\n<ul>\n<li>바이트 기반의 <strong>입력 스트림의 최상위 추상 클래스</strong>입니다.</li>\n<li>모든 바이트 기반 입력 스트림은 해당 클래스 상속 받아서 만들어집니다.</li>\n<li>버퍼, 파일, 네트워크 단에서 입력되는 데이터를 읽어오는 기능을 수행합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read()</td>\n<td>입력 스트림으로부터 1바이트를 읽어서 바이트를 리턴</td>\n</tr>\n<tr>\n<td>read(byte[] b)</td>\n<td>입력 스트림으로부터 읽은 바이트들을 매개값으로 주어진 바이트 배열 b에 저장하고 실제로 읽은 바이트 수를 리턴</td>\n</tr>\n<tr>\n<td>read(byte[] b, int off, int len)</td>\n<td>입력 스트림으로부터 len 개의 바이트만큼 읽고 매개값으로 주어진 바이트 배열 b[off]부터 len 개까지 저장</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>사용한 시스템 자원을 반납하고 입력 스트림 닫기</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputstream\"><a href=\"#outputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OutputStream</h3>\n<ul>\n<li>바이트 기반의 <strong>출력 스트림의 최상위 추상 클래스</strong>입니다.</li>\n<li>모든 바이트 기반 출력 스트림은 해당 클래스를 상속 받아서 만들어집니다.</li>\n<li>버퍼, 파일, 네트워크 단으로 데이터를 내보내는 기능을 수행합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>write(int b)</td>\n<td>출력 스트림으로부터 1바이트를 보냅니다.</td>\n</tr>\n<tr>\n<td>write(byte[] b</td>\n<td>출력 스트림으로부터 주어진 바이트 배열 b의 모든 바이트를 보낸다</td>\n</tr>\n<tr>\n<td>write(byte[] b, int off, int len)</td>\n<td>출력 스트림으로 주어진 바이트 배열 b[off]부터 len 개까지의 바이트를 보내야한다</td>\n</tr>\n<tr>\n<td>flush()</td>\n<td>버퍼에 잔류하는 모든 바이트를 출력한다.</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>사용한 시스템 자원을 반납하고 입력 스트림 닫기</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"byte와-character-스트림\"><a href=\"#byte%EC%99%80-character-%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Byte와 Character 스트림</h2>\n<p>스트림의 객체도는 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600189-14438980-73d9-11eb-82cb-75b83bb27abf.png\" alt=\"image\"></p>\n<h3 id=\"byte-stream\"><a href=\"#byte-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Byte Stream</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600070-325cba00-73d8-11eb-8538-8f81084f99c7.png\" alt=\"image\"></p>\n<ul>\n<li>binary 데이터를 입출력하는 스트림</li>\n<li>데이터는 <strong>1바이트</strong> 단위로 처리합니다.</li>\n<li>이미지, 동영상 등을 송수신할 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"character-stream\"><a href=\"#character-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Character Stream</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600068-2d980600-73d8-11eb-9e03-79e0abf2700f.png\" alt=\"image\"></p>\n<ul>\n<li>text 데이터를 입출력하는 스트림</li>\n<li>데이터는 <strong>2바이트</strong> 단위로 처리합니다.</li>\n<li>일반적인 테스트 및 JSON, HTML 등을 송수신할 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"보조-stream\"><a href=\"#%EB%B3%B4%EC%A1%B0-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>보조 Stream</h3>\n<ul>\n<li>FilterInputStream과 FilterOutputStream을 상속받는 클래스들로 기본 스트림과 결합하여 특정 상황에서 편하게 사용할 수 있습니다.</li>\n<li>\n<p>BufferedInputStream/BufferedOutputStream</p>\n<ul>\n<li>버퍼를 사용하여 입출력 효율과 편의를 위해 사용할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>BufferedReader/BufferedWriter</p>\n<ul>\n<li>라인단위의 입출력이 편리합니다.</li>\n</ul>\n</li>\n<li>\n<p>InputStreamReader/OutputStreamReader</p>\n<ul>\n<li>바이트 스트림을 문자 스트림처러 쓸 수 있도록하며 문자 인코딩 변환을 지원합니다.</li>\n</ul>\n</li>\n<li>\n<p>DataInputStream/DataOutputStream</p>\n<ul>\n<li>자바 원시 자료형 데이터 처리에 적합합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"표준-스트림-systemin-systemout-systemerr\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%8A%A4%ED%8A%B8%EB%A6%BC-systemin-systemout-systemerr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>표준 스트림 (System.in, System.out, System.err)</h2>\n<p>표준 스트림은 콘솔(console,도스창)을 통한 데이터 입력과 콘솔로의 데이터 출력을 의미합니다. 자바에서는 표준 스트림을 3가지 제공을 합니다.(System.in, System.out, System.err)</p>\n<p>해당 표준 스트림은 <code class=\"language-text\">java.lang</code> 패키지의 System 클래스 내부에 선언되어 있습니다. 또한 이 표준 스트림들은 자바 어플리케이션의 실행과 동시에 사용할 수 있도록 자동적으로 생성이 됩니다. 그렇기 때문에 개발자가 별도로 스트림을 생성하는 코드를 작성하지 않고도 사용이 가능합니다.</p>\n<p>이를 확인해보면 다음과 같이 구성되어 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">System</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">InputStream</span> in<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PrintStream</span> out<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PrintStream</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같은 의미를 가집니다,</p>\n<ul>\n<li><code class=\"language-text\">System.out</code> 은 콘솔 화면에 문자열을 출력하기 위한 용도로 사용되는 출력 스트림입니다.</li>\n<li><code class=\"language-text\">System.in</code> 은 키보드의 입력을 받아들이기 위해 사용되는 입력 스트림입니다.</li>\n<li>\n<p><code class=\"language-text\">System.out</code> 와 <code class=\"language-text\">System.err</code></p>\n<ul>\n<li>둘다 출력 스트림입니다.</li>\n<li><code class=\"language-text\">System.err</code> 는 좀 더 정확하고 빠르게 출력해야하기 때문에 버퍼링을 지원하지 않습니다. (버퍼링 도중 프로그램이 멈추면 버퍼링 내용이 출력이 되지않기 때문에.)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"파일-읽고-쓰기\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B3%A0-%EC%93%B0%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>파일 읽고 쓰기</h2>\n<p>텍스트 파일의 경우에는 문자 스트림 클래스를 사용하고, 바이너리 파일의 경우에는 바이트 스트림을 기본적으로 사용합니다.</p>\n<ul>\n<li>입출력 효율을 위해 Buffered 계열의 보조 스트림을 사용하는 것이 좋습니다.</li>\n</ul>\n<p><strong>텍스트 파일</strong> 의 경우</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  br<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>이진 파일</strong> 의 경우</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedInputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedOutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">100000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://bingbingpa.github.io/java/whiteship-live-study-week13/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bingbingpa.github.io/java/whiteship-live-study-week13/</a></li>\n<li>\b<a href=\"https://github.com/LeeWoooo/Java_LiveStudy/tree/master/week13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/LeeWoooo/Java_LiveStudy/tree/master/week13</a></li>\n<li><a href=\"https://github.com/JJongSue/javastudy/tree/master/src/main/java/week13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/JJongSue/javastudy/tree/master/src/main/java/week13</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Annotation","path":"/12-java-study/","date":"5. February 2021","timeToRead":6,"description":"Java Annotation에 대해 정리합니다.","content":"<h1 id=\"java-annotation\"><a href=\"#java-annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Annotation</h1>\n<p>12주차 내용은 자바의 Annotation 에 대한 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>애노테이션 정의하는 방법</li>\n<li><code class=\"language-text\">@retention</code></li>\n<li><code class=\"language-text\">@target</code></li>\n<li><code class=\"language-text\">@documented</code></li>\n<li>애노테이션 프로세서</li>\n</ul>\n<br/>\n<h2 id=\"어노테이션annotation-이란\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 이란</h2>\n<p>일반적으로 Annotation 을 해석하면 주석이라는 의미를 가집니다.</p>\n<p>다만, 자바에서의 Annotation은 <code class=\"language-text\">//</code> 나 <code class=\"language-text\">/* */</code> 등의 주석과는 차이가 있습니다.</p>\n<p>자바의 어노테이션은 Java 5부터 등장하였으며 어노테이션이 붙은 코드는 어노테이션에 구현된 정보에 따라 연결되는 방향이 결정됩니다. 즉, <strong>비지니스 로직에는 영향이 없지만 해당 타켓의 연결방법이나 소스코드의 구조를 변경할 수 있습니다.</strong></p>\n<p>이를 좀 더 간단하게 설명하자면, 일종의 라벨의 개념으로 <strong>역할은 주석과 비슷하지만 코드를 작성할 수 있습니다.</strong>. 이러한 목적은 <strong>소스 코드에 메타데이터를 표현하는 것</strong>입니다.</p>\n<br/>\n<h2 id=\"어노테이션annotation-정의-방법\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EC%A0%95%EC%9D%98-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 정의 방법</h2>\n<p>어노테이션은 다음과 같은 구조를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AnnotationEx</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// content</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Annotation은 <code class=\"language-text\">java.lang.annotation.Annotation</code> 을 상속받습니다.</p>\n<p>좀 더 자세하게 어노테이션을 선언한다면 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Inherited</span>  <span class=\"token comment\">// 자식이 상속 받을 수 있음</span>\n<span class=\"token annotation punctuation\">@Documented</span> <span class=\"token comment\">// 문서에도 어노테이션 정보가 표현됨</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 컴파일 이후 JVM에 의해 접근 가능</span>\n<span class=\"token comment\">//@Retention(RetentionPolicy.CLASS) // 컴파일러가 클래스를 참조할 때 까지 유효</span>\n<span class=\"token comment\">//@Retention(RetentionPolicy.SOURCE) // 어노테이션 정보는 컴파일 이후 사라짐</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>PACKAGE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 패키지 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>CONSTRUCTOR<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 생성자 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 멤버 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 메소드 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 어노테이션 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>LOCAL_VARIABLE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 지역 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 매개 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE_PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 매개 변수 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE_USE <span class=\"token comment\">// 타입 사용시</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">CustomAnnotation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* enum 타입을 선언 */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Quality</span> <span class=\"token punctuation\">{</span>BAD<span class=\"token punctuation\">,</span> GOOD<span class=\"token punctuation\">,</span> VERYGOOD<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* String은 기본 자료형은 아니지만 사용 가능합니다. */</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 배열 형태로도 사용할 수 있습니다. */</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* enum 형태를 사용하는 방법입니다. */</span>\n    <span class=\"token class-name\">CustomAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Quality</span> <span class=\"token function\">quality</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">CustomAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Quality</span><span class=\"token punctuation\">.</span>GOOD<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://jdm.kr/blog/216\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처</a></p>\n<br/>\n<h2 id=\"어노테이션annotation-규칙\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EA%B7%9C%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 규칙</h2>\n<p>어노테이션은 다음의 규칙이 적용됩니다.</p>\n<ul>\n<li>요소의 타입은 기본, String, enum, Annotation, Class만 허용됩니다.</li>\n<li>매개변수는 선언할 수 없습니다.</li>\n<li>예외를 선언할 수는 없습니다.</li>\n<li>요소를 타입 매개변수로 정의할 수 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"표준-어노테이션annotation\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>표준 어노테이션(Annotation)</h2>\n<p>자바에서 제공되는 어노테이션은 크게 2가지로 구성되며, 하나는 자바 코드를 사용할 때 사용되는 어노테이션이고 다른 하나는 어노테이션의 정의를 위해 필요한 것입니다.</p>\n<br/>\n<blockquote>\n<p>기본적으로 제공하는 어노테이션</p>\n</blockquote>\n<h3 id=\"override\"><a href=\"#override\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Override</code></h3>\n<ul>\n<li>메소드가 오버라이드 됐는지 검증합니다</li>\n<li>부모 클래스나 구현할 인터페이스에서 해당 메소드를 찾지못하면 컴파일 오류가 발생합니다.</li>\n</ul>\n<h3 id=\"deprecated\"><a href=\"#deprecated\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Deprecated</code></h3>\n<ul>\n<li>메소드를 사용하지 않도록 유도합니다.</li>\n<li>사용시 컴파일 경고를 일으킵니다.</li>\n</ul>\n<h3 id=\"suppresswarnings\"><a href=\"#suppresswarnings\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@SuppressWarnings</code></h3>\n<ul>\n<li>컴파일 경고를 무시하도록 합니다.</li>\n</ul>\n<h3 id=\"safevarargs\"><a href=\"#safevarargs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@SafeVarargs</code></h3>\n<ul>\n<li>제네릭 같은 가변인자 매개변수를 사용시 경고를 무시합니다.</li>\n<li>자바 7이상에서 적용됩니다.</li>\n</ul>\n<h3 id=\"functionalinterface\"><a href=\"#functionalinterface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@FunctionalInterface</code></h3>\n<ul>\n<li>람다 함수등을 위한 인터페이스를 지정합니다.</li>\n<li>메소드가 없거나 두개 이상이 되면 컴파일 오류가 납니다.</li>\n<li>자바 8이상에서 적용됩니다.</li>\n</ul>\n<br/>\n<blockquote>\n<p>Meta Annotations(메타 어노테이션)</p>\n</blockquote>\n<h3 id=\"retention\"><a href=\"#retention\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Retention</code></h3>\n<ul>\n<li>어노테이션의 범위입니다.</li>\n<li>어떤 시점까지 어노테이션의 영향이 미치는지를 결정합니다.</li>\n</ul>\n<h3 id=\"documented\"><a href=\"#documented\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Documented</code></h3>\n<ul>\n<li>문서에도 어노테이션의 정보가 표현됩니다.</li>\n</ul>\n<h3 id=\"target\"><a href=\"#target\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Target</code></h3>\n<ul>\n<li>어노테이션이 적용할 위치를 결정합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>요소 타입</th>\n<th>대상</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONSTRUCTOR</td>\n<td>생성자 선언시</td>\n</tr>\n<tr>\n<td>FIELD</td>\n<td>필드 값 선언시</td>\n</tr>\n<tr>\n<td>LOCAL_VARIABLE</td>\n<td>지역 변수 선언시</td>\n</tr>\n<tr>\n<td>METHOD</td>\n<td>메소드 선언시</td>\n</tr>\n<tr>\n<td>PACKAGE</td>\n<td>패키지 선언시</td>\n</tr>\n<tr>\n<td>PARAMETER</td>\n<td>매개 변수 선언시</td>\n</tr>\n<tr>\n<td>TYPE</td>\n<td>클래스, 인터페이스, enum 등의 선언시</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"inherited\"><a href=\"#inherited\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Inherited</code></h3>\n<ul>\n<li>자식 클래스가 어노테이션을 상속받을 수 있습니다.</li>\n</ul>\n<h3 id=\"repeatable\"><a href=\"#repeatable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Repeatable</code></h3>\n<ul>\n<li>반복적으로 어노테이션을 선언할 수 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>요소 타입</th>\n<th>대상</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SOURCE</td>\n<td>어노테이션 정보는 컴파일 이후 사라짐</td>\n</tr>\n<tr>\n<td>CLASS</td>\n<td>컴파일러가 클래스를 참조할 때 까지 유효</td>\n</tr>\n<tr>\n<td>RUNTIME</td>\n<td>컴파일 이후 JVM에 의해 접근 가능</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"어노테이션annotation-프로세서\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 프로세서</h2>\n<p>자바 컴파일러의 컴파일 단계에서 유저가 정의한 어노테이션의 소스코드를 분석하고 처리하기 위해 사용되는 훅입니다. 컴파일 에러나 컴파일 경고를 만들기도 하고 소스코드와 바이트 코드를 내보내기도 합니다.</p>\n<p>대표적인 예제로 <strong>롬복(Lombok)</strong> 라이브러리가 있습니다. 이 롬복 라이브러리를 사용하면 <code class=\"language-text\">@Getter</code>, <code class=\"language-text\">@Setter</code> 등을 사용하면 get이나 set, toString() 등을 선언할 필요없이 컴파일 시에 미리 생성되어 편리하게 사용할 수 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.nextree.co.kr/p5864/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.nextree.co.kr/p5864/</a></li>\n<li><a href=\"https://jdm.kr/blog/216\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/216</a></li>\n<li><a href=\"https://sujl95.tistory.com/67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/67</a></li>\n<li><a href=\"https://gowoonsori.site/java/annotation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gowoonsori.site/java/annotation/</a></li>\n<li><a href=\"https://b-programmer.tistory.com/264\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/264</a></li>\n<li><a href=\"https://sujl95.tistory.com/67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/67</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Enum","path":"/11-java-study/","date":"1. February 2021","timeToRead":3,"description":"Java Enum에 대해 정리합니다.","content":"<h1 id=\"java-enum\"><a href=\"#java-enum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Enum</h1>\n<p>11주차 내용은 자바의 Enum에 관련된 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>enum 정의하는 방법</li>\n<li>enum이 제공하는 메소드 (values()와 valueOf())</li>\n<li>java.lang.Enum</li>\n<li>EnumSet</li>\n</ul>\n<h2 id=\"enum-정의\"><a href=\"#enum-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 정의</h2>\n<p><strong>enum</strong>은 열겨형이라 불리며, 관련된 상수를 편리하게 선언하기 위해 상수를 여러개 정의할 때 사용됩니다.</p>\n<p>간단하게 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Language</span> <span class=\"token punctuation\">{</span>\n    JAVASCRIPT<span class=\"token punctuation\">,</span> JAVA<span class=\"token punctuation\">,</span> PYTHON<span class=\"token punctuation\">,</span> TYPESCRIPT\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용할려면 다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printEnumOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>JAVASCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>JAVA<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>PYTHON<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>TYPESCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>output</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106461852-ae9a6680-64d8-11eb-9431-d97516e46b24.png\" alt=\"output-1\"></p>\n<p>다음과 같기 때문에 순서를 조심히 해야합니다.</p>\n<h3 id=\"상수-데이터-추가\"><a href=\"#%EC%83%81%EC%88%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상수 데이터 추가</h3>\n<p>다음처럼 상수 데이터를 넣어줄 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ItCompany</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">GOOGLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">APPLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">NAVER</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">KAKAO</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ItCompany</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"enum-값-사용\"><a href=\"#enum-%EA%B0%92-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 값 사용</h2>\n<p>Enum에서 값을 꺼내는 방법은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">Language.JAVASCRIPT</code></li>\n<li><code class=\"language-text\">Language.valueOf(&quot;JAVA&quot;)</code></li>\n<li><code class=\"language-text\">Enum.valueOf(Language.class, &quot;PYTHON&quot;)</code></li>\n<li><code class=\"language-text\">Language.TYPESCRIPT.name()</code></li>\n</ul>\n<p>해당 코드의 결과는 다음과 같이 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106462114-fde09700-64d8-11eb-80bf-fdd498b1c92f.png\" alt=\"output-2\"></p>\n<br/>\n<h2 id=\"enum-메소드\"><a href=\"#enum-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 메소드</h2>\n<p>enum에서 제공되는 메소드는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">ordinal()</code> : enum의 순서</li>\n<li><code class=\"language-text\">name()</code> : 각 요소들의 이름</li>\n<li><code class=\"language-text\">valeOf()</code> : 문자열로 enum 요소의 이름을 찾아서 이름을 리턴</li>\n<li>\n<p><code class=\"language-text\">values()</code> : 모든 enum의 요소들을 배열로 만들어줍니다.</p>\n<ul>\n<li><code class=\"language-text\">Language[] values = Language.values();</code></li>\n<li>output : JAVASCRIPT, JAVA, PYTHON, TYPESCRIPT</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compareTo()</code> : 비교를 할 수 있습니다.</p>\n<ul>\n<li>A.compareTo(B) : 같으면 0, A > B인 경우 1, A &#x3C; B 인 경우는 -1 입니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"javalangenum\"><a href=\"#javalangenum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>java.lang.Enum</h2>\n<p>Enum클래스를 보면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// method</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 해당 <code class=\"language-text\">java.lang.enum</code>은 모든 열겨형의 조상으로서, 여러 메소드 등을 사용할 수 있습니다.</p>\n<p>그 중에서 여러 눈에 뛰는 메소드로는 아래와 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Class&lt;E&gt; getDeclaringClass()</code></td>\n<td>열거형의 Class 객체 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">String name()</code></td>\n<td>열거형 상수의 이름을 문자열로 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">int ordinal()</code></td>\n<td>열거형 상수가 정의된 순서 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">T valueOf(Class&lt;T&gt; enumType, String name)</code></td>\n<td>지정된 열거형에서 name과 일치하는 열거형 상수 반환</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"enum-멤버-추가\"><a href=\"#enum-%EB%A9%A4%EB%B2%84-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 멤버 추가</h2>\n<p>열거형을 구분할 때나 확인하는 경우에는 ordinal() 보다는 멤버를 추가하는 방식이 일반적으로는 좋습니다. 특히 불연속적인 경우가 필요할 경우에는 다음과 같이 사용하는 방식이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"></code></pre>\n<br/>\n<h2 id=\"enumset\"><a href=\"#enumset\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EnumSet</h2>\n<p>Enum을 사용하여서 Set 자료구조를 만들 수 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">allOf</code> : enum에서 정의된 정보를 모두 추가할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">EnumSet.allOf(Language.class)</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">noneOf</code> : 아무것도 추가하지 않습니다.</li>\n<li>\n<p><code class=\"language-text\">of</code> : 요소를 넣을 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">EnumSet&lt;Language&gt; languageSet = EnumSet.of(Language.JAVA);</code></li>\n</ul>\n</li>\n</ul>\n<p>그 외에도 다양한 메소드가 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://b-programmer.tistory.com/262\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/262</a></li>\n<li><a href=\"https://wisdom-and-record.tistory.com/52\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wisdom-and-record.tistory.com/52</a></li>\n<li><a href=\"https://www.notion.so/Enum-6ffa87530c424d8ab7a1b585bfb26fa2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/Enum-6ffa87530c424d8ab7a1b585bfb26fa2</a></li>\n<li><a href=\"https://parkadd.tistory.com/50\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://parkadd.tistory.com/50</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Multi Thread","path":"/10-java-study/","date":"22. January 2021","timeToRead":15,"description":"Java 멀티쓰레드에 대해 정리합니다.","content":"<h1 id=\"java-interface\"><a href=\"#java-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Interface</h1>\n<p>10 주차 내용은 멀티쓰레드 프로그래밍에 관련된 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>Thread 클래스와 Runnable zmffotm</li>\n<li>쓰레드의 상태</li>\n<li>쓰레드의 우선순위</li>\n<li>Main 쓰레드</li>\n<li>동기화</li>\n<li>데드락</li>\n</ul>\n<br/>\n<h2 id=\"들어가기-앞서\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>들어가기 앞서.</h2>\n<h3 id=\"process와-thread의-차이\"><a href=\"#process%EC%99%80-thread%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Process와 Thread의 차이</h3>\n<p><strong>Process란</strong></p>\n<ul>\n<li>단순히 실행 중인 프로그램</li>\n<li>사용자가 작성한 프로그램이 OS에 의해 메모리 공간을 할당 받아 실행 중인 것</li>\n<li>프로세스는 프로그램에 사용되는 데이터, 메모리, 쓰레드로 구성됩니다.</li>\n</ul>\n<p><strong>Thread란</strong></p>\n<ul>\n<li>프로세스 내에서 실제로 작업을 수행하는 주체</li>\n<li>가장 작은 실행 단위 입니다.</li>\n<li>모든 프로세스에서는 1개 이상의 쓰레드가 존재하여 작업을 수행합니다.</li>\n<li>두개 이상의 쓰레드를 가지면 멀티 쓰레드 프로세스라고 합니댜.</li>\n</ul>\n<p>이 차이를 그림으로 나타내면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105566319-d9651c00-5d6e-11eb-92a9-fe7cd625276a.png\" alt=\"process-thread-diff\"></p>\n<br/>\n<h2 id=\"thread-클래스와-runnable-인터페이스\"><a href=\"#thread-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-runnable-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thread 클래스와 Runnable 인터페이스</h2>\n<p>자바에서 쓰레드를 생성하는 방법은 크게 두가지로 구성됩니다.</p>\n<ul>\n<li><code class=\"language-text\">Thread</code> 클래스를 사용</li>\n<li><code class=\"language-text\">Runnable</code> 인터페이스를 사용</li>\n</ul>\n<p>다만, Thread 클래스 Runnable 인터페이스와 차이가 있는 것이 아닌 구현한 클래스이므로, 어떤 것을 적용하는 지의 차이로 볼 수 있습니다. 둘 모두 <code class=\"language-text\">java.lang</code> 패키지에 포함되어 있습니다..</p>\n<h3 id=\"thread-클래스\"><a href=\"#thread-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thread 클래스</h3>\n<p>쓰레드의 클래스는 다음과 같이 구성됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnbale</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerNatives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용한 예제 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"runnable-인터페이스\"><a href=\"#runnable-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Runnable 인터페이스</h3>\n<p>Runnable Interface는 다음과 같이 구성됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 구현하면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunnableExample</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"예제-코드를-통한-쓰레드-구현\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%93%B0%EB%A0%88%EB%93%9C-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예제 코드를 통한 쓰레드 구현</h3>\n<p>코드를 구현해보면 다음과 같이 동작하는 것을 알 수 있습니다.</p>\n<p>해당 코드와 결과를 보면, 순차적으로 일어나고 있지 않음을 알수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105505206-046a5400-5d0c-11eb-8e38-bb01725cf329.png\" alt=\"start-example\"></p>\n<p><code class=\"language-text\">run()</code> 호출 시에는 그저 메소드 호출의 의미를 가지기 때문에 아래와 같은 결과가 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105505781-b73ab200-5d0c-11eb-9975-18e75f3bdec6.png\" alt=\"run-example\"></p>\n<p><code class=\"language-text\">start()</code>를 함으로써 쓰레드를 생성하고 각 쓰레드는 각각의 호출스택을 가지게 됩니다.</p>\n<br/>\n<h2 id=\"쓰레드의-상태\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%83%81%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쓰레드의 상태</h2>\n<p>Thread의 상태는 크게 6가지로 구성됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105506399-59f33080-5d0d-11eb-9e0f-acae0353ec69.png\" alt=\"image\"></p>\n<p>이를 하나씩 설명하면 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">NEW</code> : 쓰레드 인스턴스가 생성은 되었으나 아직 start 하지 않은 상태입니다.</li>\n<li><code class=\"language-text\">RUNNABLE</code> : 쓰레드가 start 한 상태, 동작 가능한 상태임을 의미합니다. (동작 중일 수도 dlT고 아닐 수 도 있습니다.)</li>\n<li><code class=\"language-text\">BLOCKED</code> : Monitor lock을 획득하기 위해 다른 스레드가 락을 풀기를 기다리는 상태입니다.</li>\n<li><code class=\"language-text\">WAITING</code> : 대기상태에 들어간 쓰레드입니다.</li>\n<li><code class=\"language-text\">TIME_WAITING</code> : WAITING과 비슷하지만, 정해진 시간동안 대기시간에 들어갑니다.</li>\n<li><code class=\"language-text\">TERMINATED</code> : 쓰레드가 동작을 완료한 상태입니다.</li>\n</ul>\n<p>이를 사용하는 Thread method로는 아래와 같은 함수 들이 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">static void sleep(long millis)</code>, <code class=\"language-text\">static void sleep(long millis, int nanos)</code></p>\n<ul>\n<li>지정된 시간동안 쓰레드를 일시정지시켜 그 시간이 지나면 자동적으로 다시 실행대기상태가 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void join()</code>, <code class=\"language-text\">void join(long millis)</code>, <code class=\"language-text\">void join(long millis, int nanos)</code></p>\n<ul>\n<li>지정된 시간동안 쓰레드가 실행되도록 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void interrupt()</code></p>\n<ul>\n<li>sleep()이나 join()에 의해 일시정지상태인 쓰레드를 깨워서 실행대기 상태로 만든다.</li>\n<li>해당 쓰레드에서는 InterruptedException이 발생함으로써 일시정지상태를 벗어나게 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void stop()</code></p>\n<ul>\n<li>쓰레드를 즉시 종료 시킨다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void suspend()</code></p>\n<ul>\n<li>쓰레드를 일시정지시킨다. resume()을 호출하면 다시 실행대기상태가 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void resume()</code></p>\n<ul>\n<li>suspend()에 의해 일시정지상태에 있는 쓰레드를 실행대기상태로 만든다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">static void yield()</code></p>\n<ul>\n<li>실행 중에 자신에게 주어진 실행시간을 다른 쓰레드에게 양보하고 자신은 실행대기상태가 된다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"쓰레드의-우선순위\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쓰레드의 우선순위</h2>\n<p>다중작업을 진행할 때는 멀티쓰레드 방식을 하는데 이 경우는 크게 <strong>동시성(Concurrency)</strong> 와 <strong>병렬성(Parallelism)</strong> 으로 나눠집니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105507187-3da3c380-5d0e-11eb-91c3-3e1fb63c091d.png\" alt=\"java-concurrency-parallelism\"></p>\n<p><strong>동시성</strong>의 경우는 싱글코어에 멀티 스레드를 번갈아가면서 실행합니다. <strong>병렬성</strong>의 경우에는 멀티코어에 개별 스레드를 동시에 실행시킵니다.</p>\n<h3 id=\"우선순위-할당-방식\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%95%A0%EB%8B%B9-%EB%B0%A9%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>우선순위 할당 방식</h3>\n<p>Java에서는 각 쓰레드는 우선순위에 관한 필드값을 가지고 있고 우선순위에 따라 특정 쓰레드가 더 많은 시간동안 작업을 할 수 있습니다.</p>\n<p>쓰레드의 우선 순위는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">static int MAX_PROPERTY</code> : 쓰레드가 가질 수 있는 최대 우선순위</li>\n<li><code class=\"language-text\">static int MIN_PROPERTY</code> : 쓰레드가 가질 수 있는 최소 우선순위</li>\n<li><code class=\"language-text\">static int NORM_PROPERTY</code> : 쓰레드가 생성될 때 가지는 기본 우선순위</li>\n</ul>\n<p><code class=\"language-text\">setPriority()</code> 을 통해서 쓰레드의 우선순위를 변경할 수 있으며, 범위는 1~10 입니다. 번호가 높아질 수록 우선순위가 높으나, 상대적인 순위입니다. (기본은 5로 정의되어 있습니다)</p>\n<p>아래의 코드처럼 사용할 수 있으며, 이 결과로 우선순위가 높은 쓰레드가 좀 더 많이 실행됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> threadExample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> runnableExample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RunnableExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        runnableExample<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        threadExample<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        runnableExample<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"순환-할당-방식\"><a href=\"#%EC%88%9C%ED%99%98-%ED%95%A0%EB%8B%B9-%EB%B0%A9%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>순환 할당 방식</h3>\n<p>할당량(Time Slice)을 정해서 하나의 스레드를 정해진 시간만큼 실행하고 다른 스레드를 실행하는 방식입니다. 이는 <code class=\"language-text\">JVM</code>에 의해 결정됨으로 임의로 수정이 불가능합니다.</p>\n<br/>\n<h2 id=\"main-쓰레드\"><a href=\"#main-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Main 쓰레드</h2>\n<p>Java에서 main() 메소드는 프로그램의 시작점입니다. 이 main() 메소드 또한 쓰레드에 의해 실행되기 때문에 main 쓰레드라고 하기도 합니다.</p>\n<p>해당 코드처럼 로직이 돌아갑니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// main thread tart</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>   <span class=\"token comment\">// main thread end</span></code></pre>\n<p>다만 Main 쓰레드는 <strong>싱글 쓰레드</strong>인지, 혹은 <strong>멀티 쓰레드</strong>인지에 따라서도 동작이 다릅니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105510514-12bb6e80-5d12-11eb-912d-10ef0e099dc1.png\" alt=\"Thread-Diff\"></p>\n<p>싱글 쓰레드 어플리케이션의 경우에는 main thread가 종료되면 프로세스도 종료되지만, <strong>멀티 쓰레드 어플리케이션의 경우에는 main Thread가 종료되더라도 실행중인 thread가 하나라도 있으면 프로세스는 종료되지 않습니다.</strong></p>\n<h3 id=\"daemon-thread\"><a href=\"#daemon-thread\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Daemon Thread</h3>\n<ul>\n<li>Main 쓰레드의 작업을 돕습니다.</li>\n<li>Main 쓰레드가 종료되면 보조역할을 하는 Daemon Thread은 강제적으로 종료됩니다.</li>\n<li><strong>Daemon 쓰레드</strong>는 Daemon 쓰레드가 될 쓰레드에 <code class=\"language-text\">setDaemon(true)</code>를 호출하면 됩니다.</li>\n<li>일반적으로 부가적인 작업을 수행할 때, Main 쓰레드가 종료되면 같이 종료되게 하기 위해서 사용합니다.</li>\n</ul>\n<br/>\n<h2 id=\"동기화\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동기화</h2>\n<p>멀티 쓰레드의 경우에는 여러 쓰레드가 같은 프로세스 내의 자원을 공유하기 때문에 서로의 작업에 영향을 줄 수 있습니다. 이를 방지하기 위해 한 쓰레드가 특정 작업을 끝마치기 전까지 다른 쓰레드에 방해받지 않도록 하는 개념이 필요하여 <code class=\"language-text\">critical section(입계 영역)</code> 과 <code class=\"language-text\">lock(잠금)</code> 입니다.</p>\n<p>공유데이터로 사용하는 코드 영역을 <code class=\"language-text\">critical section</code>으로 지정하여, lock을 획득한 하나의 쓰레드만 이 영역 내에서 코드를 수행할 수 있게 합니다. 해당 쓰레드가 임계 영역 내에서 모든 코드를 수행하고 나서 lock 을 반납하고 나가야, 다른 쓰레드가 반납된 lock을 얻어 임계 영역의 코드를 수행할 수 있습니다.</p>\n<p>이 때 한 쓰레드가 진행중인 작업을 다른 쓰레드가 간섭하지 못하도록 막는 것을 <strong>쓰레드의 동기화</strong>라고 합니다.</p>\n<p>자바에서 동기화하는 방법은 크게 3가지로 분류됩니다.</p>\n<ul>\n<li><code class=\"language-text\">Synchronized</code></li>\n<li><code class=\"language-text\">Atomic</code> 클래스</li>\n<li><code class=\"language-text\">Volatile</code> 클래스</li>\n</ul>\n<h3 id=\"synchronized\"><a href=\"#synchronized\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Synchronized</h3>\n<p>Java의 예약어 중 하나입니다. 크게 두 가지 방법으로 사용됩니다.</p>\n<ul>\n<li>synchronized methods : 메소드 자체를 <code class=\"language-text\">synchronized</code> 키워드로 선언한는 방법</li>\n<li>synchronized statements ; 메소드 내의 특정 문장을 <code class=\"language-text\">synchronized</code>로 감싸는 방법</li>\n</ul>\n<p>다음과 같이 코드를 짤 수 있습니다. 해당 코드는 결과값을 2개의 쓰레드에서 10000번 더하는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SyncCalculator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SyncCalculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">-=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalcThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SyncCalculator</span> calc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CalcThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SyncCalculator</span> calc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>calc <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            calc<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드를 실행시키면 결과는 다음과 같습니다.</p>\n<ul>\n<li>Synchronized 사용시.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105567926-1209f300-5d79-11eb-9e2d-56561fb2e8a8.png\" alt=\"image\"></p>\n<ul>\n<li>Synchronized 미사용시</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105567911-f7377e80-5d78-11eb-9c2a-c025778292ad.png\" alt=\"image\"></p>\n<p>다음과 같이 Synchronized을 사용하면 동기화가 되는 것을 확인할 수 있습니다.</p>\n<h3 id=\"atomic-클래스\"><a href=\"#atomic-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Atomic 클래스</h3>\n<p><code class=\"language-text\">Atomicity(원자성)</code>의 개념은 <strong>쪼갤 수 없는 가장 작은 단위</strong>를 의미합니다. 자바의 Atomic Type은 Wrapping 클래스의 일종으로서 CAS(Compare-And-Swap) 알고리즘을 사용해 lock 없이 동기화 처리를 할 수 있습니다.</p>\n<p><code class=\"language-text\">AtomicBoolean</code>, <code class=\"language-text\">AtomicInteger</code> 등의 클래스가 있으며 <code class=\"language-text\">java.util.concurrent.atomic</code> 패키지에 정의된 클래스입니다.</p>\n<h4 id=\"atomic-method\"><a href=\"#atomic-method\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Atomic Method</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">get()</code>, <code class=\"language-text\">set()</code></p>\n<ul>\n<li>기존 기능과 동일합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">getAndSet(newValue)</code></p>\n<ul>\n<li>atomic하게 값을 업데이트 하고, 원래의 값을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compareAndSet(expect, update)</code></p>\n<ul>\n<li>현재 값이 예상되는 값과 동일하다면, update하고 true을 반환합니다.</li>\n<li>현재 값이 예상되는 값이 다르다면, update를 하지않고 false를 반환합니다.</li>\n</ul>\n</li>\n<li>그외에도 여러가지 mehtod가 있습니다.</li>\n</ul>\n<p><strong>Compae And Swap(CAS)</strong></p>\n<ul>\n<li>현재 주어진 값(현재 쓰레드에서의 데이터)와 실제 데이터가 저장된 데이터를 비교하여 두 개가 일치할 때만 값을 업데이트합니다. 이 역활을 수행하는 method는 <code class=\"language-text\">compareAndSet</code> 입니다.</li>\n</ul>\n<h3 id=\"volatile-클래스\"><a href=\"#volatile-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Volatile 클래스</h3>\n<h4 id=\"volatile-이란\"><a href=\"#volatile-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Volatile 이란.</h4>\n<ul>\n<li><code class=\"language-text\">volatile</code> keyword는 Java 변수를 Main Memory에 저장하겠다는 것을 명시합니다.</li>\n<li>변수의 값을 읽을 때, CPU cache에 저장된 것이 아닌 Main Memory에서 읽습니다.</li>\n<li>변수의 값을 쓸 때, Main Memory에 작성을 합니다.</li>\n</ul>\n<h4 id=\"volatile-사용-이유\"><a href=\"#volatile-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Volatile 사용 이유.</h4>\n<p><code class=\"language-text\">volatile</code> 변수를 사용하지 않는 MultiThread 애플리케이션은 작업을 수행하는 동안 성능 향상을 위해서 아래 그림과 같이 Main Memory에서 읽은 변수를 CPU Cache에 저장하게 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105566601-593fb600-5d70-11eb-8804-a267a7970c67.png\" alt=\"why-volatile\"></p>\n<p>다만 Multi Thread 환경에서 Thread가 변수 값을 읽어올 때 각각의 CPU Cache에 저장된 값이 달라 변수 값이 다른 수도 있습니다. 이를 가시성 문제라고 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105566665-c05d6a80-5d70-11eb-85ed-32b695af397a.png\" alt=\"why-volatile-2\"></p>\n<p>이를 해결하기 위해서 <code class=\"language-text\">volatile</code> 키워드를 추가하여 해당 문제를 해결합니다. <code class=\"language-text\">volatile</code> 키워드를 통해 변수의 read/write 를 Main Memory에서 진행하게 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>다만</strong>, CPU Cache보다 Main Memory에서 비용이 더 크기 때문에 <strong>변수 값 일치를 보장</strong>해야 하는 경우에만 이를 사용합니다.</p>\n<br/>\n<h2 id=\"데드락deadlock\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BDdeadlock\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락(Deadlock)</h2>\n<h3 id=\"deadlock-이란\"><a href=\"#deadlock-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deadlock 이란.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105568052-e9cec400-5d79-11eb-98d8-2e806812fcf8.png\" alt=\"deadlock\"></p>\n<p>Deadlock이란 둘 이상의 쓰레드가 lock을 획득하기 위해 대기를 하는데, 이 lock을 잡고 있는 쓰레드들 또한 다른 lock을 기다리면서 서로 block 상태에 놓이는 것을 의미합니다.</p>\n<p>이러한 Deadlock 상태가 되기 위해서는 4가지 조건을 만족해야합니다.</p>\n<ul>\n<li><strong>Mutual exclusion(상호배제)</strong> : 프로세스들이 필요로 하는 자원에 대해 배타적인 통제권을 요청합니다.</li>\n<li><strong>Hold and wait(점유대기)</strong> : 프로세스가 할당된 자원을 가진 상태에서 다른 자원을 기다립니다.</li>\n<li><strong>No preemption(비선점)</strong> : 프로세스가 어떤 자원의 사용을 끝날 때까지 그 자원을 뺏을 수 없습니다.</li>\n<li><strong>Circular wait(순환대기)</strong> : 각 프로세스는 순환적으로 다음 프로세스가 요구하는 자원을 가지고 있습니다.</li>\n</ul>\n<h3 id=\"deadlock-해결\"><a href=\"#deadlock-%ED%95%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deadlock 해결</h3>\n<p>이를 해결하는 방법은 크게 3가지(예방, 회피, 무시)로 구성됩니다.</p>\n<h4 id=\"데드락-예방\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD-%EC%98%88%EB%B0%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락 예방</h4>\n<p>앞서 이야기한 4가지 조건 중 하나를 제거합니다. 다만 이러한 방법들은 자원 사용의 효율성이 떨어집니다.</p>\n<h4 id=\"데드락-회피\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD-%ED%9A%8C%ED%94%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락 회피</h4>\n<p>자원이 어떻게 요청될지에 대한 추가정보를 제공하도록 요구하는 것이며, 이를 검사하는 알고리즘을 사용합니다.</p>\n<ul>\n<li>Resource Allocation Graph Algorithm</li>\n<li>Banker's Algorithm</li>\n</ul>\n<h4 id=\"데드락-무시\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD-%EB%AC%B4%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락 무시</h4>\n<p>일반적으로 예방과 회피를 사용하면 자연적으로 성능적으로 낮아집니다. 일반적으로 데드락 발생이 드물게 일어나고 그에 대한 코스트가 적다면 무시하는 방법을 선택할 수도 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://sujl95.tistory.com/63\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/63</a></li>\n<li><a href=\"https://www.notion.so/Thread-5fdb5d603a6a473186bf2738f482cedc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/Thread-5fdb5d603a6a473186bf2738f482cedc</a></li>\n<li><a href=\"https://www.notion.so/ac23f351403741959ec248b00ea6870e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/ac23f351403741959ec248b00ea6870e</a></li>\n<li><a href=\"https://www.notion.so/10-4a588c3795c3455fb8c498a040696ce8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/10-4a588c3795c3455fb8c498a040696ce8</a></li>\n<li><a href=\"https://velog.io/@jaden_94/10%EC%A3%BC%EC%B0%A8-%ED%95%AD%ED%95%B4%EC%9D%BC%EC%A7%80-Multi-Thread-Programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@jaden_94/10%EC%A3%BC%EC%B0%A8-%ED%95%AD%ED%95%B4%EC%9D%BC%EC%A7%80-Multi-Thread-Programming</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Exception","path":"/09-java-study/","date":"15. January 2021","timeToRead":7,"description":"자바의 예외에 대해 정리합니다.","content":"<h1 id=\"java-exception\"><a href=\"#java-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Exception</h1>\n<p>백기선님의 자바 스터디 9주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>자바가 제공하는 예외 계층 구조</li>\n<li>자바에서 예외 처리 방법 (try, catch, throw, throws, finally)</li>\n<li>Exception과 Error의 차이는?</li>\n<li>RuntimeException과 RE가 아닌 것의 차이는?</li>\n<li>커스텀한 예외 만드는 방법</li>\n</ul>\n<br/>\n<h2 id=\"자바가-제공하는-예외-계층-구조\"><a href=\"#%EC%9E%90%EB%B0%94%EA%B0%80-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%98%88%EC%99%B8-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바가 제공하는 예외 계층 구조</h2>\n<p>자바에서는 예외를 이야기 할 때는 <code class=\"language-text\">오류(Error)</code> 와 <code class=\"language-text\">예외(Exception)</code> 의 개념이 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104693052-58919900-574c-11eb-8a77-cd7568ed23e7.png\" alt=\"java-error-exception\"></p>\n<p>자바의 예외 클래스의 구조는 다음과 같이 구성되어 있습니다.</p>\n<h3 id=\"오류error\"><a href=\"#%EC%98%A4%EB%A5%98error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>오류(Error)</h3>\n<p>시스템의 비정상적인 상황이 생겼을 때 발생하는 것을 <code class=\"language-text\">오류</code> 라고 합니다. 이는 시스템 레벨에서 발생하므로 시스템 자체에 영향을 줄 수도 있기 때문에 심각한 오류로 볼 수 있습니다. 다만 개발자는 이를 예측하여 처리하는 것은 어렵기 때문에 크게 신경을 쓰지 않아도 됩니다.</p>\n<p>아래와 같은 예시가 있습니다.</p>\n<ul>\n<li>VirtualMachineError</li>\n<li>OutOfMemoryError</li>\n<li>StackOverflowError</li>\n</ul>\n<h3 id=\"예외exception\"><a href=\"#%EC%98%88%EC%99%B8exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외(Exception)</h3>\n<p>개발자의 잘못된 코딩으로 인해 구현한 로직에서 발생합니다. 따라서 이는 미리 예측하여 처리할 수 있고, 일반적으로 try-catch 문을 사용하여 해결합니다.</p>\n<br/>\n<h2 id=\"자바에서-예외-처리-방법-try-catch-throw-thorws-finally\"><a href=\"#%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-try-catch-throw-thorws-finally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바에서 예외 처리 방법 (try, catch, throw, thorws, finally)</h2>\n<h3 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>try-catch-finally</h3>\n<p>예외 처리를 위해 try-catch-finally 문을 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 예외가 발생할 수 있는 가능성이 있는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception1</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Exception1이 발생시, 이를 처리하는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception2</span> e2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략 가능</span>\n        <span class=\"token comment\">// 만약 Exception1에서 에러 발생시, 해당 로직에는 작동을 하지 않음</span>\n        <span class=\"token comment\">// Exception2이 발생시, 이를 처리하는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략 가능</span>\n        <span class=\"token comment\">// 예외가 발생해도 마지막에 실행됩니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>try 블럭에는 여러 catch 블록이 올 수 있으며, 이 중에서 발생한 에외의 종류와 일치하는 단 한 개의 catch 블록만 수행됩니다.</p>\n<h3 id=\"multi-catch\"><a href=\"#multi-catch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>multi catch</h3>\n<p>다음과 같이, 자바 7이후 여러 catch 블럭을 '|' 기호를 통해 나의 catch 블럭으로 합칠 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionA</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ExceptionB</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"try-with-resources\"><a href=\"#try-with-resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>try-with-resources</h3>\n<ul>\n<li>회수를 해야하는 자원을 다룰 때, 도움이 됩니다.</li>\n<li>코드를 더 간결하고 예외정보도 유리하게 사용할 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstLineInFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> defaultVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> defaultVal<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"throw\"><a href=\"#throw\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>throw</h3>\n<p>throw 키워드를 통해서 고의로 예외를 발생할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exceptionThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Exception</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"고의로 발생한 예외\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"throws\"><a href=\"#throws\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>throws</h3>\n<p>메서드 선언부에서 throws 키워드를 통해서 해당 메서드를 호출한 메서드로 예외를 던집니다. 예외를 선언함으로서 메서드를 사용할 때 발생할 수 잇는 에러를 명시적으로 알 수 있습니다. 이 때 예외는 해당 메서드를 호출하는 곳에서 한 번은 <code class=\"language-text\">try-catch</code> 로 처리해주어야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CustomException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">CustomException</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"내가 만든 예외\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custome Exception\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>좀 더 Clean Code로 짜는 방법</p>\n</blockquote>\n<ul>\n<li>try 블럭에서 무슨 일이 생기든지 catch 블록은 프로그램 상태를 일관성있게 유지합니다.</li>\n<li>\n<p>예외에 의미를 제공합니다.</p>\n<ul>\n<li>오류가 발생한 윈언과 위치를 찾기 쉽도록 오류메세지에 정보를 담고, 실패한 연산 이름과 실패 유형을 언급합니다.</li>\n</ul>\n</li>\n<li>\n<p>호출자를 고려해서 예외 클래스를 구성합니다.</p>\n<ul>\n<li>아래는 그 예시입니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ACMEPort</span> port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ACMEPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n     port<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeviceResponseException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Device response exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ATM1212UnlockedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unlock exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">GMXError</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Device response exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>정상 흐름을 정의합니다.</li>\n<li>null을 반환하거나 전달하는 습관은 좋지 않습니다.</li>\n</ul>\n<br/>\n<h2 id=\"runtimeexception과-re가-아닌-것의-차이는\"><a href=\"#runtimeexception%EA%B3%BC-re%EA%B0%80-%EC%95%84%EB%8B%8C-%EA%B2%83%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RuntimeException과 RE가 아닌 것의 차이는?</h2>\n<p>자바의 <code class=\"language-text\">RuntimeException</code>은 <strong>Unchecked Exception</strong>으로 <code class=\"language-text\">RuntimeExcption이 아닌 것</code>은 <strong>Checked Exception</strong>으로 분류됩니다.</p>\n<p>둘의 차이는 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>Check Exception</th>\n<th>Unckecked Exception</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>처리여부</strong></td>\n<td>반드시 필요</td>\n<td>강제성이 없음</td>\n</tr>\n<tr>\n<td>확인시점</td>\n<td>컴파일 시점</td>\n<td>실행 시점</td>\n</tr>\n<tr>\n<td><strong>예외 발생시 트랜잭션</strong></td>\n<td>Roll-back X</td>\n<td>Roll-back</td>\n</tr>\n<tr>\n<td>대표적인 예시</td>\n<td>- IO Exception</td>\n<td>- NullPointerException</td>\n</tr>\n<tr>\n<td></td>\n<td>- SQL Exception</td>\n<td>- IllegalArgumentException</td>\n</tr>\n<tr>\n<td></td>\n<td>- ...</td>\n<td>- IndexOutOfBoundException...</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"커스텀한-예외-만드는-방법\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-%EC%98%88%EC%99%B8-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀한 예외 만드는 방법</h2>\n<p>Custom한 예외 클래스를 만드는 조건은 다음과 같습니다. 해당 조건 중 하나가 필요하다면 예외 클래스를 적용합니다.</p>\n<ol>\n<li>Java 플랫폼에 없는 예외 유형이 필요합니까?</li>\n<li>다른 벤더가 작성한 클래스에서 제공한 예외 사항과 차별화할 수 있다면 어떻겠습니까?</li>\n<li>코드가 하나 이상의 관련 예외를 발생합니까?</li>\n<li>다른 사용자의 예외를 사용할 경우 해당 예외에 대한 액세스 권한이 사용자에게 부여됩니까?</li>\n</ol>\n<h3 id=\"custom-checked-exception\"><a href=\"#custom-checked-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Checked Exception</h3>\n<p>FileNotFoundException 의 경우는 정확한 예외 원인을 정확하게 알지 못합니다. 파일 이름이 없을 수도 있고 파일이 존재하지 않을 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncorrectFileNameException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isCorrectFileName</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"filename is incorrect : \"</span> <span class=\"token operator\">+</span> fileName <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 커스텀 예외를 사용하여 정확한 원인을 확인할 수 있습니다.</p>\n<h3 id=\"custom-unchecked-exception\"><a href=\"#custom-unchecked-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Unchecked Exception</h3>\n<p>확장자가 없는 경우, 런타임 시 문제가 발생하는데 이를 커스텀 예외로 확인할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncorrectFileExtensionException</span>\n  <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileExtensionException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isCorrectFileName</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"filename is incorrect : \"</span> <span class=\"token operator\">+</span> fileName <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IncorrectFileExtensionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">containsExtension</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileExtensionException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"Filename does not contain extension : \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 구성할 수 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://velog.io/@youngerjesus/%EC%9E%90%EB%B0%94-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@youngerjesus/%EC%9E%90%EB%B0%94-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC</a></li>\n<li><a href=\"https://i-am-clap.tistory.com/12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://i-am-clap.tistory.com/12</a></li>\n<li><a href=\"https://rebeccacho.gitbooks.io/java-study-group/content/chapter8.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rebeccacho.gitbooks.io/java-study-group/content/chapter8.html</a></li>\n<li><a href=\"https://sujl95.tistory.com/62\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/62</a></li>\n<li><a href=\"https://wisdom-and-record.tistory.com/46\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wisdom-and-record.tistory.com/46</a></li>\n<li><a href=\"https://www.notion.so/3565a9689f714638af34125cbb8abbe8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/3565a9689f714638af34125cbb8abbe8</a></li>\n<li><a href=\"https://github.com/kongduboo/whiteship-java-study/blob/main/week9.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/kongduboo/whiteship-java-study/blob/main/week9.md</a></li>\n<li><a href=\"http://amazingguni.github.io/blog/2016/05/Clean-Code-7-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://amazingguni.github.io/blog/2016/05/Clean-Code-7-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 자바 상속","path":"/06-java-study/","date":"13. January 2021","timeToRead":8,"description":"자바의 상속에 대해 정리합니다.","content":"<h1 id=\"java-inherit\"><a href=\"#java-inherit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Inherit</h1>\n<p>백기선님의 자바 스터디 6주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>자바 상속의 특징</li>\n<li>super 키워드</li>\n<li>메소드 오버라이딩</li>\n<li>다이나믹 메소드 디스패치 (Dynamic Method Dispatch)</li>\n<li>추상 클래스</li>\n<li>final 키워드</li>\n<li>Object 클래스</li>\n</ul>\n<br/>\n<h2 id=\"자바-상속\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%83%81%EC%86%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 상속</h2>\n<p>상속이란, <strong>부모 클래스의 변수와 메소드를 물려 받는 것</strong>으로 이러한 상속은 코드의 재사용성을 통해 코드의 간결성을 확보해줍니다.</p>\n<p>일반적으로 <code class=\"language-text\">extends</code>라는 키워드를 통해 이루어집니다.</p>\n<h3 id=\"자바-상속의-특징\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%83%81%EC%86%8D%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 상속의 특징</h3>\n<p>자바 상속은 다음의 특징을 가집니다.</p>\n<ul>\n<li>\n<p>Single inheritance</p>\n<ul>\n<li>자바는 단일 상속만 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>Object를 제외한 모든 클래스는 암묵적으로 Object의 서브 클래스입니다.</p>\n<ul>\n<li>자바 계층 구조 최상위에는 java.lang.Object 클래스가 존재합니다.</li>\n</ul>\n</li>\n<li>\n<p>Multi-level inheritance</p>\n<ul>\n<li>자바에서는 상속의 횟수에 제한이 없습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"super-키워드\"><a href=\"#super-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>super 키워드</h2>\n<p>suuper 키워드는 자식클래스가 부모클래스로부터 상속받은 멤버를 사용할 때 사용됩니다.</p>\n<p>부모 생성자를 호출하는 경우를 <code class=\"language-text\">constructor chanining</code> 이라고 불립니다.</p>\n<p>만약에 자식 클래스의 생성자에서 <code class=\"language-text\">super()</code>를 명시적으로 사용하지 않으면, 컴파일러가 부모 클래스의 기본 생성자를 호출하도록 코드를 삽입되며, 만약 부모 클래스에 기본 생성자가 없으면 컴파일 에러가 발생합니다.</p>\n<br/>\n<h2 id=\"메소드-오버라이딩\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 오버라이딩</h2>\n<p><strong>super 클래스가 가지고 있는 메소드를 서브 클래스에서 새롭게 다른 로직으로 정의하고 싶을 때 사용하는 문법</strong>입니다.</p>\n<p><strong>상속관계에 있는 클래스간에 같은 이름의 메서드를 정의하는 문법</strong>을 오버라이딩이라고 합니다. 이러한 오버라이딩 annotation은 생략할 수도 있습니다.</p>\n<p>다음과 같은 규칙을 준수합니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>부모 클래스 instance method</th>\n<th>부모 클래스 static method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>자식 클래스 instance method</td>\n<td>overrides</td>\n<td>compile error</td>\n</tr>\n<tr>\n<td>자식 클래스 static method</td>\n<td>compile error</td>\n<td>hides</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>hides : 부모 클래스의 메소드를 부를 수 없습니다.</li>\n<li>overrides : 오버라이딩 된 메소드의 부모 메소드를 직접적으로 호출할 수 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"메소드-디스패치method-dispatch\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 디스패치(Method Dispatch)</h2>\n<p>메소드 디스패치는 <strong>어떤 메소드를 호출할 지 결정하여 실제로 실행시키는 과정</strong>을 의미합니다.</p>\n<p>메소드 디스패치는 <strong>정적 메소드 디스패치(Static Method Dispatch), 동적 메소드 디스패치(Dynamic Method Dispatch), 더블 디스패치(Double Dispatch)</strong>로 구성됩니다.</p>\n<h3 id=\"정적-메소드-디스패치static-method-dispatch\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98static-method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 메소드 디스패치(Static Method Dispatch)</h3>\n<p>정적 메소드 디스패치는 구현 클래스를 통해 컴파일 시점에서 컴파일러가 어떤 메소드를 호출할지 명확하게 알고 있는 경우, 컴파일 시 생성된 바이트코드에도 정보가 남아있으면 애플리케이션 실행 전에 호출할 메소드를 결정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 스태틱 메소드 디스패치</span>\n        <span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"동적-메소드-디스패치static-method-dispatch\"><a href=\"#%EB%8F%99%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98static-method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동적 메소드 디스패치(Static Method Dispatch)</h3>\n<p>인터페이스나 추상 클래스에 정의된 추상 메소드를 호출하는 경우이며 호출되는 메소드가 런타임 시 동적으로 결정됩니다.</p>\n<p>인터페이스 또는 추상 클래스로 선언하고 구현/상속 받은 하위 클래스이 인스턴스를 생성합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 스태틱 메소드 디스패치</span>\n        <span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>런타임 전에는 컴파일러가 <code class=\"language-text\">Dog</code>가 생성됨을 모름므로 <code class=\"language-text\">Animal</code>이 정의한 <code class=\"language-text\">bark()</code> 메소드만 접근 가능합니다.</p>\n<h3 id=\"더블-디스패치double-dispatch\"><a href=\"#%EB%8D%94%EB%B8%94-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98double-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>더블 디스패치(Double Dispatch)</h3>\n<p>다이나믹 메소드 디스패치가 2번 발생하는 것입니다. 디자인 패턴 중 <strong>방문자 패턴(Visitor Pattern)</strong>과 밀접한 관계를 가지고 있습니다.</p>\n<ul>\n<li>방문자 패턴 : 여러 객체에 대해 각 객체의 동작들을 지정하는 패턴</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dispatch</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Picture</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Facebook</span> <span class=\"token keyword\">implements</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Twitter</span> <span class=\"token keyword\">implements</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> posts <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Picture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>SNS<span class=\"token punctuation\">></span></span> sns <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Facebook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        posts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"추상-클래스\"><a href=\"#%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>추상 클래스</h2>\n<p>츠상클래스는 클래스를 만들기 위한 일종의 설계도로 인스턴스를 생성할 수 없는 클래스입니다. 이를 사용하기 위해서는 반드시 자식 클래스에서 상속을 받아 클래스를 모두 구현해야합니다.</p>\n<p>다음의 형태를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> 클래스이름 <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>추상 클래스는 반드시 하나 이상의 추상 메서드를 포함하고 있으며, 생성자와 멤버변수, 일반 메서드를 가질 수 있습니다.</p>\n<p>다음의 특징을 가집니다.</p>\n<ul>\n<li>자체 인스턴스 생성이 불가능합니다.</li>\n<li>생성자와 멤버 변수, 일반 메서드를 모두 가질 수 있습니다.</li>\n<li>하나 이상의 추상 메서드를 포함합니다.</li>\n</ul>\n<br/>\n<h2 id=\"final-키워드\"><a href=\"#final-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 키워드</h2>\n<p>final 키워드는 엔티티를 한 번만 할당하겠다는 의미로 자바에서는 3가지의 의미로 사용됩니다.</p>\n<h3 id=\"final-변수\"><a href=\"#final-%EB%B3%80%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 변수</h3>\n<p>일반적으로 알고 있는 상수를 의미합니다. 생성자나 대입연산자를 통해 단 한번만 초기화 가능한 변수입니다.</p>\n<h3 id=\"final-메소드\"><a href=\"#final-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 메소드</h3>\n<p>오버라이드하거나 숨길 수 없는 메서드 입니다.</p>\n<h3 id=\"final-클래스\"><a href=\"#final-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 클래스</h3>\n<p>해당 클래스를 상속할 수 없음을 의미합니다. 상속을 할 수 없기 때문에 상속 계층에서 마지막 클래스라는 의미를 지닙니다.</p>\n<br/>\n<h2 id=\"object-클래스\"><a href=\"#object-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object 클래스</h2>\n<p><code class=\"language-text\">java.lang.Object</code> 클래스는 모든 클래스의 최상위 클래스입니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">boolean equals(Object obj)</code></p>\n<ul>\n<li>두 객체가 같은 지 비교합니다.(같으면 true, 틀리면 false)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">String toString()</code></p>\n<ul>\n<li>객체의 문자열을 반환합니다</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">protected Object clone()</code></p>\n<ul>\n<li>객체를 복사합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">protected void finalize()</code></p>\n<ul>\n<li>가비지 컬렉션 직전에 객체의 리소스를 정리할때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Class getClass()</code></p>\n<ul>\n<li>객체의 클레스형을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">int hashCode()</code></p>\n<ul>\n<li>객체의 코드값을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void notify()</code></p>\n<ul>\n<li>wait된 스레드 실행을 재개할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void notifyAll()</code></p>\n<ul>\n<li>wait된 모든 스레드 실행을 재개할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void wait()</code></p>\n<ul>\n<li>스레드를 일시적으로 중지할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void wait(long timeout)</code>, <code class=\"language-text\">void wait(long timeout, int nanos)</code></p>\n<ul>\n<li>주어진 시간만큼 스레드를 일시적으로 중지할 때 호출합니다.</li>\n</ul>\n</li>\n</ul>\n<p>모든 클래스는 정의할 때부터 명시적으로 java.lang.Object 클래스를 상속 받게 됩니다. 따라서 위의 함수들은 어떤 클래스에서도 호출이 가능합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/</a></li>\n<li><a href=\"https://velog.io/@roeniss/%EC%9E%90%EB%B0%94-%EA%B8%B0%EC%B4%88%EC%A7%80%EC%8B%9D-%EC%A0%95%EB%A6%AC#6%EC%A3%BC%EC%B0%A8--%EC%83%81%EC%86%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@roeniss/%EC%9E%90%EB%B0%94-%EA%B8%B0%EC%B4%88%EC%A7%80%EC%8B%9D-%EC%A0%95%EB%A6%AC#6%EC%A3%BC%EC%B0%A8--%EC%83%81%EC%86%8D</a></li>\n<li><a href=\"https://blog.naver.com/swoh1227/222181505425\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/swoh1227/222181505425</a></li>\n<li><a href=\"https://leemoono.tistory.com/20\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leemoono.tistory.com/20</a></li>\n<li><a href=\"https://github.com/mongzza/java-study/blob/main/study/6%EC%A3%BC%EC%B0%A8.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/mongzza/java-study/blob/main/study/6%EC%A3%BC%EC%B0%A8.md</a></li>\n<li><a href=\"https://roeldowney.tistory.com/486\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://roeldowney.tistory.com/486</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 자바 클래스","path":"/05-java-study/","date":"12. January 2021","timeToRead":8,"description":"자바의 클래스에 대해 정리합니다.","content":"<h1 id=\"java-operatore\"><a href=\"#java-operatore\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Operatore</h1>\n<p>백기선님의 자바 스터디 5주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>클래스 정의하는 방법</li>\n<li>객체 만드는 방법 (new 키워드 이해하기)</li>\n<li>메소드 정의하는 방법</li>\n<li>생성자 정의하는 방법</li>\n<li>this 키워드 이해하기</li>\n</ul>\n<p>과제</p>\n<ul>\n<li>int 값을 가지고 있는 이진 트리를 나타내는 Node 라는 클래스를 정의하세요.</li>\n<li>int value, Node left, right를 가지고 있어야 합니다.</li>\n<li>BinrayTree라는 클래스를 정의하고 주어진 노드를 기준으로 출력하는 bfs(Node node)와 dfs(Node node) 메소드를 구현하세요.</li>\n<li>DFS는 왼쪽, 루트, 오른쪽 순으로 순회하세요.</li>\n</ul>\n<br/>\n<h2 id=\"객체-지향이란\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 지향이란.</h2>\n<p>먼저 자바의 클래스 개념에 대해 알기 전에 <strong>객체지향 프로그램</strong>에 대해서 정확하게 인지를 하고 넘어가야합니다.</p>\n<p>객체지향 프로그래밍이란 실제 세계에 존재하는 모든 것을 <strong>객체</strong>로 취급하여 프로그래밍 하는 방법입니다. 이러한 객체 지향은 실제 세계의 모습을 표현하기 위해 나온 것이며 아래의 특징을 가집니다.</p>\n<ul>\n<li>\n<p><strong>캡슐화(Encapsulation)</strong></p>\n<ul>\n<li>데이터(속성)와 데이터를 처리하는 함수를 하나로 묶는 것</li>\n<li>캡슐화된 객체의 세부 내용이 외부에 은폐(정보 은닉)되어, 변경이 발생할 때 오류의 파급효과가 적고 재사용에 편리합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>정보은닉(Information Hiding)</strong></p>\n<ul>\n<li>다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통하여 접근을 허용하는 것입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>추상화(Abstarction)</strong></p>\n<ul>\n<li>불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화하는 것, 즉 모델화 하는 것입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>상속성(Inheritance)</strong></p>\n<ul>\n<li>이미 정의된 상위 클래스(부모 클래스)의 모든 속성솨 연산을 하위 클래스가 물려받는 것</li>\n<li>상속성을 이용하면 하위 클래스는 상위 클래스의 모든 속성과 연산을 자신의 클래스 내에서 다시 정의하지 않고서도 즉시 자신의 속성으로 사용할 수 있습니다.</li>\n<li>ex) <code class=\"language-text\">extends</code></li>\n</ul>\n</li>\n<li>\n<p><strong>다형성(Polymorphism)</strong></p>\n<ul>\n<li>메시지에 의해 개체(클래스)가 연산을 수행하게 될 때 하나의 메시지에 대해 각 객체(클래스)가 가지고 있는 고유한 방법(특성)으로 응답할 수 있는 능력</li>\n<li>객체(클래스)들은 동일한 메소드명을 사용하며 같은 의미의 응답을 합니다.</li>\n<li>ex) <code class=\"language-text\">1+2=3 / A+B=AB</code></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"클래스\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스.</h2>\n<p>클래스란 객체를 생성하기 위해 <strong>상태(state)와 행동(behavior)을 정의하는 일종의 설계도</strong>라고 볼 수 있습니다.</p>\n<p>이를 표현하는 용어로 일반적으로 붕어빵 틀로 묘사하고는 합니다. 붕어빵은 일종의 객체로서 여러 개를 만들 수 있고, 붕어빵 틀은 이러한 객체를 만들 수 있는 클래스입니다.</p>\n<p>클래스는 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// attribute</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// method</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"객체-만들기\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 만들기</h2>\n<p>객체는 클래스를 인스턴스화 시킨 것으로 표현할 수 있습니다. 일반적으로 <code class=\"language-text\">new</code> 키워드를 통해서 생성할 수 있으며, 이러한 <code class=\"language-text\">new</code> 키워드는 객체에 메모리를 할당하는 과정으로 볼 수 있습니다.</p>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassTest</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 객체 1</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ClassTest</span> object1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// object 1</span>\n        <span class=\"token class-name\">ClassTest</span> object2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// object 2</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음처럼 <code class=\"language-text\">new</code> 키워드를 통해 여러개의 객체를 선언할 수 있습니다.</p>\n<h3 id=\"new-연산자\"><a href=\"#new-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>new 연산자</h3>\n<p>new 연산자는 클래스 타입의 인스턴스를 생성해주는 역할을 하는 연산자이며, 메모리(Heap 영역)에 공간을 할당 받고 그 공간의 참조값을 객체에게 반환해주는 역할을 합니다.</p>\n<br/>\n<h2 id=\"메서드-정의\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메서드 정의</h2>\n<p>메서드는 다음과 같은 형태로 구성됩니다. 일반적으로 어떠한 기능을 수행한다고 이해하면 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104312556-1e40b580-551a-11eb-820c-4a6d4041d314.png\" alt=\"method\"></p>\n<p>메서드의 접근 제어자는 여러 게시물에서 소개했지만, 한번 더 정리하자면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104312777-6e1f7c80-551a-11eb-9892-329bd9312921.png\" alt=\"image\"></p>\n<p>이는 일종의 범위로 이해하면 됩니다.</p>\n<br/>\n<h2 id=\"생성자-정의\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성자 정의</h2>\n<p>생성자는 객체가 생성된 직후에 클래스의 객체를 초기화하는데 사용됩니다. 생성자를 명시하지 않으면 컴파일러가 자동으로 기본 생성자를 생성합니다. 하지만 다른 생성자를 명시했다면 기본 생성자는 컴파일 시 생성되지 않습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 기본 생성자</span>\n\n<span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"this-키워드-이해하기\"><a href=\"#this-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>this 키워드 이해하기</h2>\n<p><code class=\"language-text\">this</code> 키워드는 인스턴스의 자기 자신을 의미합니다. <code class=\"language-text\">this</code> 키워드를 사용해서 지역변수와 구별도 가능합니다. 다만, 클래스 메서드에서는 인스턴스가 생성되지 않을 수도 있기 때문에 <code class=\"language-text\">this</code>를 사용할 수 없습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 2</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1 &lt;- 2</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1 &lt;- 2</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"과제\"><a href=\"#%EA%B3%BC%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>과제.</h2>\n<p>다음의 요구사항을 가지는 클래스를 만듭니다.</p>\n<ul>\n<li>int 값을 가지고 있는 이진 트리를 나타내는 Node 라는 클래스를 정의하세요.</li>\n<li>int value, Node left, right를 가지고 있어야 합니다.</li>\n<li>BinrayTree라는 클래스를 정의하고 주어진 노드를 기준으로 출력하는 bfs(Node node)와 dfs(Node node) 메소드를 구현하세요.</li>\n<li>DFS는 왼쪽, 루트, 오른쪽 순으로 순회하세요.</li>\n</ul>\n<h3 id=\"node-class\"><a href=\"#node-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Node Class</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addLeftNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addRightNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"binary-tree-class\"><a href=\"#binary-tree-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Binary Tree Class</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> bfsList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> dfsList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Node</span> n <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bfsList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        dfsList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>좀 더 상세한 코드는 아래에 적어놓았습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-Java-With-WhiteShip/tree/master/src/main/java/week5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 예제</a></li>\n</ul>\n<p>이상입니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://blog.naver.com/swoh1227/222174170682\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/swoh1227/222174170682</a></li>\n<li><a href=\"https://jeeneee.dev/java-live-study/week5-class/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jeeneee.dev/java-live-study/week5-class/</a></li>\n<li><a href=\"https://leemoono.tistory.com/17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leemoono.tistory.com/17</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Interface","path":"/08-java-study/","date":"8. January 2021","timeToRead":7,"description":"Java Interface에 대해 정리합니다.","content":"<h1 id=\"java-interface\"><a href=\"#java-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Interface</h1>\n<p>백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 8주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>인터페이스 정의하는 방법</li>\n<li>인터페이스 구현하는 방법</li>\n<li>인터페이스 레퍼런스를 통해 구현체를 사용하는 방법</li>\n<li>인터페이스 상속</li>\n<li>인터페이스의 기본 메소드 (Default Method), 자바 8</li>\n<li>인터페이스의 static 메소드, 자바 8</li>\n<li>인터페이스의 private 메소드, 자바 9</li>\n</ul>\n<h2 id=\"인터페이스의-개념과-역할\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%97%AD%ED%95%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 개념과 역할</h2>\n<p>가끔 인터페이스와 추상클래스의 차이에 대해 혼란을 가지고 있는 사람이 있는데, 인터페이스의 가장 큰 특징은 <strong>협업을 위한 기능</strong>이라고 생각합니다. 즉, 가이드 라인이나 규격을 제공해주는 <strong>일종의 설계도</strong>로 이해하면 됩니다.</p>\n<p>이러한 인터페이스는 구현이 없으며 <strong>추상 메서드</strong>와 <strong>상수</strong>만을 멤버로 가질 수 있습니다. 다만, Java 8 이후에는 <code class=\"language-text\">default method</code>와 <code class=\"language-text\">static method</code>가 추가되었고, Java 9 이후에는 <code class=\"language-text\">private method</code>를 정의할 수 있습니다.</p>\n<h3 id=\"인터페이스를-왜-쓰나요\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%99%9C-%EC%93%B0%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스를 왜 쓰나요?</h3>\n<ul>\n<li>\n<p>개발 기간의 단축이 가능합니다.</p>\n<ul>\n<li>인터페이스를 통해 분업이 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>클래스간의 결합도를 낮출 수 있습니다.</p>\n<ul>\n<li>코드의 종속성을 줄이고 유지보수성을 높일 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>표준화가 가능합니다.</p>\n<ul>\n<li>클래스의 기본틀을 제공하여, 정형화된 개발이 가능합니다.</li>\n<li><strong>자바의 다형성을 극대화하여서 코드의 수정을 줄이고 유지보수성을 높일 수 있습니다.</strong></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"인터페이스-정의하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 정의하는 방법</h2>\n<p>인터페이스의 선언은 class 대신 <code class=\"language-text\">interface</code> 를 사용하며, 접근 제어자는 <code class=\"language-text\">default</code> 혹은 <code class=\"language-text\">public</code>을 사용합니다.</p>\n<p>형태는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> 인터페이스 명 <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 상수 : 해당 값을 함부로 바꾸지 말고 사용합니다.</span>\n    <span class=\"token comment\">// type 상수명 = value;</span>\n    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 추상 메소드 : 가이드 라인을 통해 오버라이딩을 재구현해서 사용합니다.</span>\n    type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 디폴트 메소드 : 인터페이스에서 기본적인 부분을 제공하지만, 원하지 않으면 오버라이딩에서 재구현해서 사용합니다.</span>\n    <span class=\"token keyword\">default</span> type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 정적 메소드 : 인터페이스에서 제공하는 것으로 무조건 사용합니다.</span>\n    <span class=\"token keyword\">static</span> type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이후에 해당 인터페이스를 상속받는 구현체에서는 추상 메소드를 반드시 구현해야합니다.</p>\n<br/>\n<h2 id=\"인터페이스-구현하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 구현하는 방법</h2>\n<p>인터페이스는 <code class=\"language-text\">implements</code> 키워드를 사용해서 구현할 수 있습니다.</p>\n<p>아래는 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스-레퍼런스를-통해-구현체를-사용하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4%EB%A5%BC-%ED%86%B5%ED%95%B4-%EA%B5%AC%ED%98%84%EC%B2%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 레퍼런스를 통해 구현체를 사용하는 방법</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"고등어\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멍멍\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"개사료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Animal</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Animal</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 야옹</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 멍멍</span>\n\n        <span class=\"token comment\">// 캐스팅</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token punctuation\">)</span> cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 고등어</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">)</span> dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 개사료</span>\n\n        <span class=\"token comment\">// 불가능.</span>\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Animal 클래스로 선언되었기 때문에, 이를 상속받은 메소드를 바로 사용할 수는 없습니다. 다만, 캐스팅을 통해서 호출이 가능합니다.</p>\n<br/>\n<h2 id=\"인터페이스-상속\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%83%81%EC%86%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 상속</h2>\n<p>인터페이스는 앞서 이야기 했듯이 상속을 받아 사용합니다. 추가적으로 자바에는 다중 상속이 불가능 하지만 인터페이스는 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Tv</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Internet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">internet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartTv</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Internet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">internet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 인터페이스 다중 상속이 가능합니다.</p>\n<br/>\n<h2 id=\"인터페이스의-기본-메소드-default-method-자바-8\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%A9%94%EC%86%8C%EB%93%9C-default-method-%EC%9E%90%EB%B0%94-8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 기본 메소드 (Default Method), 자바 8</h2>\n<ul>\n<li>인터페이스에서 메소드 선언이 아니라 <strong>구현체</strong>를 제공하는 방법입니다.</li>\n<li>해당 인터페이스를 구현한 클래스의 어떠한 영향 없이 새로운 기능을 추가하는 방법입니다.</li>\n<li>\n<p><code class=\"language-text\">default method</code>는 해당 인터페이스에서 <strong>구현체가 모르는 기능을 구현했기 때문에 리스크가 존재</strong>합니다.</p>\n<ul>\n<li>컴파일 에러는 발생하지는 않지만, 특정 구현의 로직에 런타임 에러가 발생가능합니다.</li>\n</ul>\n</li>\n</ul>\n<p>다음과 같은 예제 코드가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// default로 선언함으로 메소드를 구현합니다.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCalc</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCaclExam</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Calc</span> cal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// output:3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스의-static-메소드-자바-8\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-static-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9E%90%EB%B0%94-8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 static 메소드, 자바 8</h2>\n<p><code class=\"language-text\">static method</code>이므로 상속이 불가능합니다. 인스턴스 없이 수행할 수 있는 작업을 정의할 수 있습니다.</p>\n<p>다음은 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스의-private-메소드-자바-9\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-private-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9E%90%EB%B0%94-9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 private 메소드, 자바 9</h2>\n<p><code class=\"language-text\">default method</code>와 <code class=\"language-text\">static method</code> 모두 내부 method이나, 외부에 공개되는 <code class=\"language-text\">public method</code>이기 때문에 이에 대한 문제가 존재했습니다. 이러한 interface가 다른 곳에서 상속을 하거나 접근하는 것을 막기 위해 <code class=\"language-text\">private</code>이 등장했습니다.</p>\n<p>java 9에서는 <code class=\"language-text\">private method</code>와 <code class=\"language-text\">private static method</code>가 새롭게 등장했습니다. 이 방법을 통해서 interface에 대한 캡슐화를 유지할 수 있습니다.</p>\n<p>다음은 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연산 시작\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">multiple</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">startMultiple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startMultiple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"곱셈 시작\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>default 메소드는 static, instance를 호출할 수 있고, static 메서드에서는 static 메서드만 호출 가능합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/9/language/toc.htm#JSLAN-GUID-E409CC44-9A8F-4043-82C8-6B95CD939296\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/9/language/toc.htm#JSLAN-GUID-E409CC44-9A8F-4043-82C8-6B95CD939296</a></li>\n<li><a href=\"https://www.notion.so/4b0cf3f6ff7549adb2951e27519fc0e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/4b0cf3f6ff7549adb2951e27519fc0e6</a></li>\n<li><a href=\"https://blog.baesangwoo.dev/posts/java-livestudy-8week/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.baesangwoo.dev/posts/java-livestudy-8week/</a></li>\n<li><a href=\"https://limkydev.tistory.com/197\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://limkydev.tistory.com/197</a></li>\n<li><a href=\"https://enjoyplaying.tistory.com/33\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://enjoyplaying.tistory.com/33</a></li>\n<li><a href=\"https://wonyong-jang.github.io/java/2021/01/04/Java-Interface.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wonyong-jang.github.io/java/2021/01/04/Java-Interface.html</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 자바 제어문","path":"/04-java-study/","date":"2. January 2021","timeToRead":7,"description":"자바의 제어문에 대해 정리합니다.","content":"<h1 id=\"java-control\"><a href=\"#java-control\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Control</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 4주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>선택문</li>\n<li>반복문</li>\n<li>과제. JUnit 5</li>\n<li>과제. live-study dashboad</li>\n<li>과제. Linked List</li>\n<li>과제. Stack</li>\n<li>과제. ListNode Stack</li>\n<li>과제. Queue</li>\n</ul>\n<p>제어문이란 코드의 실행을 제어하는 구문을 나타냅니다. 대표적으로 선택문과 반복문 등이 있습니다.</p>\n<br/>\n<h2 id=\"선택문\"><a href=\"#%EC%84%A0%ED%83%9D%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>선택문</h2>\n<p>선택문은 일반적으로 if 문과 swtich 문으로 나눠집니다.</p>\n<h3 id=\"if-문\"><a href=\"#if-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>If 문</h3>\n<p>if 문은 다음과 같은 <code class=\"language-text\">if (조건문) {실행조건}</code>의 형태를 가집니다. 좀 더 자세하게 설명을 하기 위해서는 해당 코드를 보면서 설명하겠습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ifExample</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> caseNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>caseNum <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>caseNum <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Others\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음의 경우, caseNum 가 1인 경우, One을 출력하고, caseNum가 2인 경우 Two, 그 외의 경우는 모두 Others가 출력됩니다. if문에서 <code class=\"language-text\">else if</code> 와 <code class=\"language-text\">else</code> 는 없어도 됩니다.</p>\n<h3 id=\"switch-문\"><a href=\"#switch-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Switch 문</h3>\n<p>이와 비슷한 예제문으로 Switch 문이 있습니다. 아래와 같은 형태를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchExample</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> caseNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>caseNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 해당 라인이 없으면, 출력으로 One \\n Two 가 나오게 됩니다.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Others\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 if문과 같이 기능은 똑같은 코드입니다. 마찬가지로 <code class=\"language-text\">default</code>는 생략이 가능합니다. <code class=\"language-text\">break</code>문을 사용하지 않으면, 해당 조건에서 끝나지 않고, 아래의 조건까지 계속 실행됩니다.</p>\n<br/>\n<h2 id=\"반복문\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>반복문</h2>\n<p>반복문은 일반적으로 <code class=\"language-text\">for 문</code>과 <code class=\"language-text\">while 문</code>으로 나눠집니다.</p>\n<h3 id=\"for-문\"><a href=\"#for-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>for 문</h3>\n<p>다음 코드는 구구단의 9단을 예시로 만든 코드입니다. for문은 다음과 같이 <code class=\"language-text\">for(initialization; 종료 조건; 반복 수행){}</code>의 형태를 가지고 있습니다. 특히 처음 for문을 배울 때 신경써야하는 부분은 반복 수행은 마지막에 end state가 만족하지 않는 경우 수행됩니댜.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" * 9 = \"</span> <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"while-문\"><a href=\"#while-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>while 문</h3>\n<p>while 문도 이전 코드의 기능과 같습니다. while문은 다음과 같이 <code class=\"language-text\">while(종료 조건){}</code>의 형태를 구성해야합니다. 마찬가지로 조심해야하는 부분으로 종료 조건이 끝나지 않으면 무한 루프가 발생하여 끝나지 않게됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whileExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" * 9 = \"</span> <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 비슷하게 <code class=\"language-text\">do {} while(종료 조건)</code>의 형태가 있습니다. while문과 기능은 비슷하지만, 반드시 한번은 수행된다는 점이 다릅니다.</p>\n<br/>\n<h2 id=\"junit-5\"><a href=\"#junit-5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit 5</h2>\n<p>이에 관련해서는 기존에 Springboot Test 관련으로 공부한 내용이 있어서, 아래의 글을 참고하면 됩니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/01-springboot-test/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Springboog Test</a></li>\n</ul>\n<br/>\n<h2 id=\"live-study-dashboad\"><a href=\"#live-study-dashboad\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>live-study dashboad</h2>\n<p>요구사항</p>\n<ul>\n<li>깃헙 이슈 1번부터 18번까지 댓글을 순회하며 댓글을 남긴 사용자를 체크 할 것.</li>\n<li>참여율을 계산하세요. 총 18회에 중에 몇 %를 참여했는지 소숫점 두자리가지 보여줄 것.</li>\n<li>Github 자바 라이브러리를 사용하면 편리합니다.</li>\n<li>깃헙 API를 익명으로 호출하는데 제한이 있기 때문에 본인의 깃헙 프로젝트에 이슈를 만들고 테스트를 하시면 더 자주 테스트할 수 있습니다.</li>\n</ul>\n<p>코드는 아래의 링크에 있습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-Java-With-WhiteShip/tree/master/src/main/java/week4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">예제 코드</a></li>\n</ul>\n<br/>\n<h2 id=\"linked-list\"><a href=\"#linked-list\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Linked List</h2>\n<p>요구사항</p>\n<ul>\n<li>LinkedList에 대해 공부하세요.</li>\n<li>정수를 저장하는 ListNode 클래스를 구현하세요.</li>\n<li>ListNode add(ListNode head, ListNode nodeToAdd, int position)를 구현하세요.</li>\n<li>ListNode remove(ListNode head, int positionToRemove)를 구현하세요.</li>\n<li>boolean contains(ListNode head, ListNode nodeTocheck)를 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> nodeToAdd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> target <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> position <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    nodeToAdd<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> nodeToAdd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> nodeToAdd<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> positionToRemove<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> target <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> before <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> positionToRemove <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      before <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n      target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    before<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> nodeTocheck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nodeTocheck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"stack\"><a href=\"#stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stack</h2>\n<p>요구사항</p>\n<ul>\n<li>int 배열을 사용해서 정수를 저장하는 Stack을 구현하세요.</li>\n<li>void push(int data)를 구현하세요.</li>\n<li>int pop()을 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"listnode-stack\"><a href=\"#listnode-stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ListNode Stack</h2>\n<p>요구사항</p>\n<ul>\n<li>ListNode head를 가지고 있는 ListNodeStack 클래스를 구현하세요.</li>\n<li>void push(int data)를 구현하세요.</li>\n<li>int pop()을 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNodeStack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNodeStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> curNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n    curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ListNode</span> curNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> before <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      before <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span>\n      curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    before<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> curNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"queue\"><a href=\"#queue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Queue</h2>\n<p>요구사항</p>\n<ul>\n<li>배열을 사용해서 한번</li>\n<li>ListNode를 사용해서 한번.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<ul>\n<li>배열을 사용한 코드</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayQueue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> queue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>ListNode를 사용한 코드</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNodeQueue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNodeQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n"}},{"node":{"title":"[Java] 자바 연산자","path":"/03-java-study/","date":"1. January 2021","timeToRead":8,"description":"자바가 제공하는 다양한 연산자에 대해 정리합니다.","content":"<h1 id=\"java-operator\"><a href=\"#java-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Operator</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 3주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>산술 연산자</li>\n<li>비트 연산자</li>\n<li>관계 연산자</li>\n<li>논리 연산자</li>\n<li>instanceof</li>\n<li>assignment(=) operator</li>\n<li>화살표(->) 연산자</li>\n<li>3항 연산자</li>\n<li>연산자 우선 순위</li>\n<li>(optional) Java 13. switch 연산자</li>\n</ul>\n<br/>\n<h2 id=\"산술-연산자\"><a href=\"#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>산술 연산자</h2>\n<p>산술 연산자는 크게 4가지로 구성됩니다. 덧셈 연산자, 뺄셈 연산자, 곱셈 연산자, 나머지 연산자로 이루어지며, 이는 일반적인 수학 수식처럼 이해하면 됩니다.</p>\n<h3 id=\"코드-예시\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">calcOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 8</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 15</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1 (실수형이라면 1.666 이지만 정수형이므로 내림으로 1이 나온다.)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"비트-연산자\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>비트 연산자</h2>\n<p>비트 연산은 일반적으로 1과 0으로 이루어지며 0은 거짓, 그 외의 값은 참을 의미합니다. 대표적인 비트 연산자로는 <code class=\"language-text\">~(not), &amp;(and), |(or), ^(xor)</code> 이 있습니다.</p>\n<h3 id=\"not-\"><a href=\"#not-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NOT, ~</h3>\n<table>\n<thead>\n<tr>\n<th>입력</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"and-\"><a href=\"#and-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AND, &#x26;</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"or\"><a href=\"#or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OR,</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"xor-\"><a href=\"#xor-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XOR, ^</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"코드-예시-1\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bitOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001111</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -11</span>\n  <span class=\"token comment\">// 11111111 11111111 11111111 11110101</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">|</span> num2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 15</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00001111</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> num2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 비트 연산을 사용할 수 있습니다. 일반적으로 자주 사용하지는 않으나, 종종 알고리즘을 풀 때 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"관계-연산자\"><a href=\"#%EA%B4%80%EA%B3%84-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>관계 연산자</h2>\n<p>연산자를 중심으로 양쪽의 값이 어떤 관계를 갖는지 확인하는 연산입니다. 관계 연산자로는 <code class=\"language-text\">==, !=, &gt;, &gt;=, &lt;, &lt;=, instance of</code> 가 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>이름</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>같음</td>\n<td>양쪽이 같으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>다름</td>\n<td>양쪽이 다르면 참, 같으면 거짓</td>\n</tr>\n<tr>\n<td>></td>\n<td>보다 큼</td>\n<td>왼쪽이 크면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>>=</td>\n<td>보다 크거나 같음</td>\n<td>왼쪽이 크거나 같으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>&#x3C;</td>\n<td>보다 작음</td>\n<td>왼쪽이 작으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>&#x3C;=</td>\n<td>보다 작거나 같음</td>\n<td>왼쪽이 작거나 같으면 참, 아니면 거짓</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"코드-예시-2\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relationOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">>=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"논리-연산자\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>논리 연산자</h2>\n<p>비트 연산과 비슷하지만, 대상이 boolean 타입의 논리 값입니다. <code class=\"language-text\">!</code>은 논리적인 부정을 의미하고, <code class=\"language-text\">&amp;&amp;(and)</code>와 <code class=\"language-text\">||(or)</code> 연산은 비트 연산자와 비슷한 개념을 가집니다.</p>\n<h3 id=\"코드-예시-3\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relativeOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> boo_true <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> boo_false <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>boo_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">&amp;&amp;</span> boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">||</span> boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">&amp;&amp;</span> boo_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만 신경써야하는 부분은, &#x26;와 &#x26;&#x26;, |과 ||은 <strong>두번째 조건</strong>의 확인이 다릅니다.</p>\n<p>&#x26;&#x26;는 첫번째 조건이 참이 아니면 두번째 조건을 보지않지만, &#x26;는 두번째 조건을 봅니다. 마찬가지로 ||은 첫번째 조건이 참이면 두번째 조건을 확인하지않지만, |은 두번째 조건을 확인합니다.</p>\n<br/>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>instanceof</h2>\n<p><strong>레퍼런스 타입 변수가 레퍼런스 타입의 데이터 티입인지 확인해 보는 연산</strong>입니다. 일반적으로 레퍼런스 타입 변수가 레퍼런스 타입으로 타입 변환이 가능한지 확인하기 위해서 사용합니다.</p>\n<p><code class=\"language-text\">(레퍼런스 타입 변수) instance of (레퍼런스 데이터 타입)</code>의 형태를 가집니다.</p>\n<h3 id=\"코드-예시-4\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> interType<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type2 <span class=\"token keyword\">extends</span> type1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type3 <span class=\"token keyword\">implements</span> interType <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Week3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">instanceOfExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    type1 myType1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    type2 myType2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    type3 myType3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType1 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType2 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType3 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType2 <span class=\"token keyword\">instanceof</span> type2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"assignment-operator\"><a href=\"#assignment-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>assignment(=) operator</h2>\n<p>일반적으로 대입 연산자 혹은 할당 연산자라고 부릅니다. 오른쪽의 피연산자를 왼쪽의 피연산자의 값으로 할당합니다. 따라서, 왼쪽에는 변수, 오른쪽에는 리터럴이나 리터럴이 담긴 변수가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">assignmentOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 <code class=\"language-text\">variable = literal</code>의 형태를 가집니다.</p>\n<p>이외에도 시프트 연산이 존재합니다. 다음과 같은 <code class=\"language-text\">&gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</code>와 같은 시프트 연산이 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shiftOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 80</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 01010000</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 작동합니다. <code class=\"language-text\">&gt;&gt;</code>와 <code class=\"language-text\">&gt;&gt;&gt;</code>의 차이는 오른쪽으로 비트 이동시, 왼쪽에 추가로 넣는 값에 MSB값으로 채우는지 0으로 채우는지의 차이입니다.</p>\n<p><code class=\"language-text\">&gt;&gt;</code>의 경우는 MSB로 부족한 비트값을 채우고, <code class=\"language-text\">&gt;&gt;&gt;</code>은 0으로 부족한 값을 채웁니다.</p>\n<br/>\n<h2 id=\"화살표--연산자\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C--%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>화살표(->) 연산자</h2>\n<p>자바에 람다가 도입하면서 등장하였습니다. 자바 람다에 대해서는 <a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">java lambda</a> 글을 참고하면 됩니다.</p>\n<p>해당 글을 간략하게 정리하자면 화살표 연산자는 <code class=\"language-text\">() -&gt; {}</code> 의 형태를 가지고 있으며, 매개변수를 받아, 메소드(함수)를 실행합니다.</p>\n<br/>\n<h2 id=\"3항-연산자\"><a href=\"#3%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3항 연산자</h2>\n<p>다음과 같은 형태를 지니고 있습니다.이 연산자를 통해서 코드를 짧게 할 수 있습니다.</p>\n<p><code class=\"language-text\">(조건) ? (조건이 참일 시, 실행) : (조건이 거짓일 시, 실행)</code></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">binomialOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"okay\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"okay\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 나타낼 수 있습니다.</p>\n<br/>\n<h2 id=\"연산자-우선-순위\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>연산자 우선 순위</h2>\n<p>연산자의 우선 순위는 다음과 같습니다. 해당 우선순위가 앞에 있을수록 먼저 실행됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>우선순위</th>\n<th>연산자</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code class=\"language-text\">(), []</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code class=\"language-text\">!, ~, ++, --</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code class=\"language-text\">*, /, %</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code class=\"language-text\">+, -</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code class=\"language-text\">&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code class=\"language-text\">&lt;, &lt;=, &gt;, &gt;=</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code class=\"language-text\">=, !=</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code class=\"language-text\">&amp;</code></td>\n</tr>\n<tr>\n<td>9</td>\n<td><code class=\"language-text\">^</code></td>\n</tr>\n<tr>\n<td>10</td>\n<td><code class=\"language-text\">|</code></td>\n</tr>\n<tr>\n<td>11</td>\n<td><code class=\"language-text\">&amp;&amp;</code></td>\n</tr>\n<tr>\n<td>12</td>\n<td><code class=\"language-text\">||</code></td>\n</tr>\n<tr>\n<td>13</td>\n<td><code class=\"language-text\">?:</code></td>\n</tr>\n<tr>\n<td>14</td>\n<td><code class=\"language-text\">=, +=, -=, *=, /=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, ~=</code></td>\n</tr>\n</tbody>\n</table>\n<p>다음과 같은 우선순위를 가지며, 일반적으로 괄호를 잘 쓰는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"java-13-switch-연산자\"><a href=\"#java-13-switch-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 13. switch 연산자</h2>\n<p>switch 문법의 가독성과 실행 속도를 향상 시키기 위해 있는 문법입니다. 자바 13에서의 switch 는 statement가 아닌 operator에 더 가깝고, 이미 처리된 결과를 통해서 해당 연산을 수행합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"c\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Document.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Document.html</a></li>\n<li><a href=\"https://blog.naver.com/hsm622/222150928707\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/hsm622/222150928707</a></li>\n<li><a href=\"https://nipafx.dev/java-13-switch-expressions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nipafx.dev/java-13-switch-expressions/</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 데이터 타입, 변수, 배열","path":"/02-java-study/","date":"31. December 2020","timeToRead":5,"description":"자바 데이터 타입, 변수, 배열을 사용하는 방법을 익힙니다.","content":"<h1 id=\"java-package\"><a href=\"#java-package\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Package</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 2주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>프리미티브 타입 종류와 값의 범위 그리고 기본 값</li>\n<li>프리미티브 타입과 레퍼런스 타입</li>\n<li>리터럴</li>\n<li>변수 선언 및 초기화하는 방법</li>\n<li>변수의 스코프와 라이프타임</li>\n<li>타입 변환, 캐스팅 그리고 타입 프로모션</li>\n<li>1차 및 2차 배열 선언하기</li>\n<li>타입 추론, var</li>\n</ul>\n<br/>\n<h2 id=\"프리미티브-타입-종류와-값의-범위-그리고-기본-값\"><a href=\"#%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85-%EC%A2%85%EB%A5%98%EC%99%80-%EA%B0%92%EC%9D%98-%EB%B2%94%EC%9C%84-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B8%B0%EB%B3%B8-%EA%B0%92\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프리미티브 타입 종류와 값의 범위 그리고 기본 값</h2>\n<p>프리미티브 타입은 <strong>기본 타입</strong>을 의미합니다.</p>\n<p>자바의 기본 타입은 8종류입니다.</p>\n<table>\n<thead>\n<tr>\n<th>타입 종류</th>\n<th>메모리 크기</th>\n<th>값 범위</th>\n<th>기본 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>1byte</td>\n<td>-128 ~ 127</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>1byte</td>\n<td>-32,768 ~ 32,767</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>2byte</td>\n<td>-2,147,483,648 ~ 2,147,483,647</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4byte</td>\n<td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>8byte</td>\n<td>(3.4 X 10^-38) ~ (3.4 X 10^38)</td>\n<td>0.0F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>4byte</td>\n<td>(1.7 X 10^-308) ~ (1.7 X 10^308)</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>8byte</td>\n<td>0 ~ 65,535</td>\n<td>'\\u0000'</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>2byte</td>\n<td>true/false</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"프리미티브-타입과-레퍼런스-타입\"><a href=\"#%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85%EA%B3%BC-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4-%ED%83%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프리미티브 타입과 레퍼런스 타입</h2>\n<h3 id=\"primitive-type\"><a href=\"#primitive-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Primitive type</h3>\n<ul>\n<li>기본 타입</li>\n<li>byte, short, signed/unsigned int, signed/unsigned long, float, double, boolean, char</li>\n<li>not object</li>\n<li><strong>값을 저장</strong>합니다</li>\n</ul>\n<h3 id=\"reference-type\"><a href=\"#reference-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference type</h3>\n<ul>\n<li>참조 타입</li>\n<li>class, interface, enum, array, String type</li>\n<li><strong>주소를 저장</strong>합니다.</li>\n</ul>\n<br/>\n<h2 id=\"리터럴\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>리터럴</h2>\n<ul>\n<li><strong>데이터</strong>를 의미합니다.</li>\n<li>변수의 값이 변하지 않습니다.</li>\n</ul>\n<p>다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> alphabet <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"변수-선언-및-초기화하는-방법\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변수 선언 및 초기화하는 방법</h2>\n<p>일반적으로 초기화하는 방법으로 2가지 방법이 있습니다.</p>\n<h3 id=\"1-변수-선언-후-이후에-초기화\"><a href=\"#1-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%9B%84-%EC%9D%B4%ED%9B%84%EC%97%90-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 변수 선언 후 이후에 초기화</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output : 1</span></code></pre>\n<h3 id=\"2-변수-선언과-동시에-초기화\"><a href=\"#2-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EA%B3%BC-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 변수 선언과 동시에 초기화</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output : 2</span></code></pre>\n<br/>\n<h2 id=\"변수의-스코프와-라이프타임\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%EB%9D%BC%EC%9D%B4%ED%94%84%ED%83%80%EC%9E%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변수의 스코프와 라이프타임</h2>\n<p>프로그램에서 사용되는 변수들은 사용 가능한 범위를 가집니다. 그 범위를 <strong>변수의 스코프</strong>라고 합니다. 변수가 선언된 블럭이 그 변수의 사용 범위입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VarScopeExam</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> globalValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">localScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> localValue <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>globalValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 전체 범위</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// localScope 범위</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// localScope 범위</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"타입-변환-캐스팅-그리고-타입-프로모션\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98-%EC%BA%90%EC%8A%A4%ED%8C%85-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%ED%83%80%EC%9E%85-%ED%94%84%EB%A1%9C%EB%AA%A8%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입 변환, 캐스팅 그리고 타입 프로모션</h2>\n<p>타입 변환은 <strong>하나의 타입을 다른 타입으로 바꾸는 것을 의미</strong>합니다.</p>\n<h3 id=\"primitive-type-1\"><a href=\"#primitive-type-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Primitive type</h3>\n<ul>\n<li>\n<p>Widening type cast : 더 넓은 타입으로 형을 변환합니다.</p>\n<ul>\n<li>ex. int to long, byte to short...</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> value2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<p>Narrow type case : 더 좁은 타입으로의 형을 변환합니다.</p>\n<ul>\n<li>값이 손실될 수 있습니다.</li>\n<li>ex. long to int, short to byte...</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> value <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> value2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"reference-type-1\"><a href=\"#reference-type-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference type</h3>\n<ul>\n<li>Inheritance 관계에서만 가능</li>\n<li>\n<p>Upcast : subclass -> superclass</p>\n<ul>\n<li>모든 subclass는 superclass의 컨텐츠를 가지고 있으므로, superclass 로의 casting이 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>Downcase : superclass -> subclass</p>\n<ul>\n<li>모든 superclass는 subclass의 컨텐츠를 가지고 있지 않을 수 도 있습니다. 그래서 오류가 발생할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"1차-및-2차-배열-선언하기\"><a href=\"#1%EC%B0%A8-%EB%B0%8F-2%EC%B0%A8-%EB%B0%B0%EC%97%B4-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1차 및 2차 배열 선언하기</h2>\n<p>배열 길이를 초과하게 되면, ArrayIndexOutOfBounds 예외가 발생합니다.</p>\n<h3 id=\"1차-배열\"><a href=\"#1%EC%B0%A8-%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1차 배열</h3>\n<ul>\n<li><code class=\"language-text\">타입[] 배열이름 = new 타입[배열길이];</code>의 형태를 가지고 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// number = { 1, 2, 3};</span></code></pre>\n<h3 id=\"2차-배열\"><a href=\"#2%EC%B0%A8-%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2차 배열</h3>\n<ul>\n<li><code class=\"language-text\">타입[][] 배열이름 = new 타입[열 길이][행 길이];</code>의 형태를 가지고 있습니다.</li>\n<li>2차원 배열은 배열 요소로 1차원 배열을 가지는 배열입니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// arr</span>\n<span class=\"token comment\">// {  0,  1,  2 }</span>\n<span class=\"token comment\">// { 10, 11, 12 }</span></code></pre>\n<br/>\n<h2 id=\"타입-추론-var\"><a href=\"#%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0-var\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입 추론, var</h2>\n<p><strong>타입 추론</strong>은 <strong>변수 타입을 명시하지 않고 컴파일러가 데이터 타입이 무엇인지 추론한다는 것을 의미</strong>합니다.</p>\n<p>var</p>\n<ul>\n<li>지역 변수에서만 사용 가능합니다.</li>\n<li>선언과 동시에 반드시 초기화를 해야합니다.</li>\n<li>null 초기화하면 작동하지 않습니다.</li>\n<li>람다 표현식에는 var을 사용할 수 없습니다.</li>\n<li>타입이 없어서 배열에 초기값을 넘겨도 작동하지 않습니다.</li>\n</ul>\n<p>예제코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.naver.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/methods.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/generics/methods.html</a></li>\n<li><a href=\"https://www.baeldung.com/java-type-erasure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-type-erasure</a></li>\n<li><a href=\"https://www.baeldung.com/java-10-local-variable-type-inference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-10-local-variable-type-inference</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Package.","path":"/07-java-study/","date":"30. December 2020","timeToRead":6,"description":"Package에 대해 정리합니다.","content":"<h1 id=\"java-package\"><a href=\"#java-package\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Package</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 7주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>package 키워드</li>\n<li>import 키워드</li>\n<li>클래스패스</li>\n<li>CLASSPATH 환경변수</li>\n<li>-classpath 옵션</li>\n<li>접근지시자</li>\n</ul>\n<br/>\n<h2 id=\"package란\"><a href=\"#package%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Package란.</h2>\n<h3 id=\"java-package란\"><a href=\"#java-package%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Package란?</h3>\n<p>자바의 패키지란 <strong>비슷한 성격의 클래스를 모아서 만든 자바의 디렉토리</strong>입니다.</p>\n<p>자바에서는 다수의 클래스를 정의하기 때문에 애플리케이션에서 클래스를 정리할 필요가 있습니다. 그래서 이를 정리하기 위해 <strong>패키지</strong>를 사용합니다.</p>\n<p>패키지는 다음과 같은 특성을 가집니다.</p>\n<ul>\n<li>자바는 패키의 가장 상위 디렉토리에서 실행한다는 약속이 있습니다.</li>\n<li>소스 코드 맨 첫 줄에 있어야하고, 패키지 선언은 소스 코드에 단 하나만 있어야합니다.</li>\n<li>패키지 이름과 위치한 폴더는 동일 해야합니다.</li>\n<li>패키지 이름은 'java'로 시작하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PackageExample</span> <span class=\"token punctuation\">{</span>\n\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printPackage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is Package\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"package name : package week7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드에서 package week7이 자바의 패키지입니다.</p>\n<h3 id=\"package-이름-규칙\"><a href=\"#package-%EC%9D%B4%EB%A6%84-%EA%B7%9C%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Package 이름 규칙</h3>\n<ul>\n<li>java 패키지 이름은 모두 소문자로 구성되어 있습니다.</li>\n<li>자바의 예약어를 사용하면 안됩니다.</li>\n<li>\n<p>다음과 같은 시작 패키지 규칙이 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">java</code> : 자바 기본 패키지 개발</li>\n<li><code class=\"language-text\">javax</code> : 자바 확장 패키지 개발</li>\n<li><code class=\"language-text\">org</code> : 오픈소스 패키지</li>\n<li><code class=\"language-text\">com</code> : 회사 패키지</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"import란\"><a href=\"#import%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Import란.</h2>\n<p>다음과 같은 구성을 가지고 있습니다.</p>\n<p>아래는 예제 코드입니다. (아시아 현재 시간을 가져오는 예제 코드)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeZone</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportExample</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TimeZone</span> time<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DateFormat</span> df <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 현재 아시아 시간 가져오기</span>\n        time <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeZone</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTimeZone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        df<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeZone</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %n %s %n\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드에서 확인할 수 있듯이, <code class=\"language-text\">import</code>는 <code class=\"language-text\">import 패키지명.클래스명</code>의 구조를 가집니다. 일반적으로 다른 패키지명에 있는 클래스를 찾지 못할 때 사용합니다.</p>\n<p>여러가지 팁을 가지는데.</p>\n<ul>\n<li><code class=\"language-text\">import 패키지명.*</code> 을 사용한다면 해당 패키지의 다수 클래스를 <code class=\"language-text\">import</code> 할 수도 있습니다.</li>\n<li><code class=\"language-text\">command(mac)/alt(window) + Enter</code>시, 바로 import 기능을 사용할 수 있습니다. (Intelij 기능)</li>\n<li><code class=\"language-text\">import static</code>을 사용하는 경우, static한 변수나 메소드를 사용할 때 용이합니다.</li>\n<li><code class=\"language-text\">java.lang</code> 패키지나 같은 패키지의 경우에는 <code class=\"language-text\">import</code>를 하지 않아도 됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"classpath에-대해서\"><a href=\"#classpath%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CLASSPATH에 대해서.</h2>\n<p><strong>클래스를 찾기 위한 경로</strong>를 의미합니다.</p>\n<p>JVM이 프로그램을 실행할 때, 클래스 파일을 찾기 위해서 클래스 패스를 이용합니다. 이를 다르게 말하자면 JVM은 클래스 패스의 경로를 확인해서 라이브러리의 위치를 참조합니다.</p>\n<p>이를 좀 더 자세하게 설명하기 위해서는 자바 프로그램의 실행과정을 아는 것이 중요한데, 이를 간단하게 순서를 정리하자면.</p>\n<ol>\n<li>프로그램이 실행시, JVM은 프로그램이 필요로 하는 메모리를 할당받습니다.</li>\n<li>자바 컴파일러가 자바 코드를 바이트 코드로 변환합니다.</li>\n<li>클래스 로더를 통해 클래스 파일을 JVM에 올려놓습니다.</li>\n<li>올려진 클래스 파일을 Execution Engine을 통해 해석합니다.</li>\n<li>해석된 바이트 코드는 Runtime Data Area에서 수행됩니다.</li>\n</ol>\n<p>좀 더 자세하게 알고 싶으면 <a href=\"https://Azderica.github.io/00-java-jvm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 게시글</a>을 참고하면 좋습니다.</p>\n<p>다음 자바 프로그래밍 과정 중에서 2번이 끝나고, 소스 코드가 바이트 코드가 되었을 때, java runtime으로 .class 파일에 있는 명령을 하기 위해서는 클래스 패스로 파일을 찾을 수 있어야합니다.</p>\n<p>일반적으로 이 클래스 패스를 찾는 방법은 크게 2가지 방법이 있습니다.</p>\n<h3 id=\"classpath-환경-변수\"><a href=\"#classpath-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CLASSPATH 환경 변수.</h3>\n<p>이 방법은 컴퓨터 시스템 변수 설정을 통해서 지정합니다.</p>\n<p><code class=\"language-text\">CLASSPATH=.;C:\\Program Files\\Java\\jdk-10.0.1\\lib\\tools.jar</code></p>\n<p>일반적으로 윈도우에서 자바를 설정할 때, 아래의 사진을 많이 보게됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103354435-dfa90500-4aee-11eb-8bc4-eb0794fc146b.png\" alt=\"class-path-1\"></p>\n<h3 id=\"-classpath-옵션\"><a href=\"#-classpath-%EC%98%B5%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>-classpath 옵션.</h3>\n<p><code class=\"language-text\">javac &lt;options&gt; &lt;source files&gt;</code>와 같은 형식을 가집니다. 이 방법은 자바 컴파일러가 컴파일 시, 필요로 하는 참조 클래스 파일을 찾기 위해 경로를 지정해주는 옵션입니다.</p>\n<p>예를 들자면 다음과 같은 명령어로 진행합니다. (<code class=\"language-text\">;</code> 으로 구분 가능합니다.)</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">javac -classpath .;C:\\Java\\Example;C:\\Java\\Test.java</code></pre>\n<br/>\n<h2 id=\"접근-지시자\"><a href=\"#%EC%A0%91%EA%B7%BC-%EC%A7%80%EC%8B%9C%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>접근 지시자.</h2>\n<p>크게 4가지로 구성됩니다. (public, protected, default, private)</p>\n<table>\n<thead>\n<tr>\n<th>접근 지시자</th>\n<th>클래스 내부</th>\n<th>동일 패키지</th>\n<th>상속받은 클래스</th>\n<th>import한 클래스</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>o</td>\n<td>o</td>\n<td>o</td>\n<td>o</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>o</td>\n<td>o</td>\n<td>o</td>\n<td>x</td>\n</tr>\n<tr>\n<td>default</td>\n<td>o</td>\n<td>o</td>\n<td>x</td>\n<td>x</td>\n</tr>\n<tr>\n<td>private</td>\n<td>o</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n</tr>\n</tbody>\n</table>\n<p>다음과 같은 특징을 가집니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://kils-log-of-develop.tistory.com/430\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kils-log-of-develop.tistory.com/430</a></li>\n<li><a href=\"https://blog.opid.kr/62\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.opid.kr/62</a></li>\n<li><a href=\"https://effectivesquid.tistory.com/entry/%EC%9E%90%EB%B0%94-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%8C%A8%EC%8A%A4classpath%EB%9E%80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://effectivesquid.tistory.com/entry/자바-클래스패스classpath란</a></li>\n<li><a href=\"http://blog.naver.com/PostView.nhn?blogId=minsuk0123&#x26;logNo=44865799\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.naver.com/PostView.nhn?blogId=minsuk0123&#x26;logNo=44865799</a></li>\n<li><a href=\"https://hyoje420.tistory.com/7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hyoje420.tistory.com/7</a></li>\n</ul>\n"}},{"node":{"title":"[Java] JVM이란.","path":"/01-java-study/","date":"29. December 2020","timeToRead":9,"description":"JVM 대해 정리합니다.","content":"<h1 id=\"jvmjava-vitual-machine\"><a href=\"#jvmjava-vitual-machine\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM(Java Vitual Machine)</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다.</p>\n<br/>\n<h2 id=\"java의-특징\"><a href=\"#java%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java의 특징.</h2>\n<p>기본적으로 자바 프로그램은 JVM위에서 동작합니다. 이러한 JVM위에 동작하기 위해서는 자바 바이트 코드가 필요합니다. 이러한 자바 바이트코드는 개발자에 의해서 작성된 자바 소스코드(<code class=\"language-text\">*.java</code>)가 자바 컴파일러(<code class=\"language-text\">javac</code>)로 인해 변환된 코드(<code class=\"language-text\">*.class</code>)를 의미합니다.</p>\n<h3 id=\"java-프로그램의-특징\"><a href=\"#java-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 프로그램의 특징</h3>\n<ul>\n<li>JVM은 Bytecode를 구동하고 있는 OS에 맞춰 Binary code로 해석됩니다. 그렇기 때문에 <strong>OS에 독립적</strong>입니다.</li>\n<li>Bytecode는 클래스 단위(<code class=\"language-text\">*.class</code>)로 생성되기 때문에 프로그램의 수정이 일어나도 전체 소스코드를 컴파일할 필요는 없습니다.</li>\n<li>JVM은 OS로부터 메모리를 할당받아 스스로 관리합니다. 대표적으로 Garbage Collection이 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"jvm이란\"><a href=\"#jvm%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM이란?</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103287755-ac02a800-4a26-11eb-9ed9-a44972821597.png\" alt=\"JVM\"></p>\n<p>JVM이란 Java Virtual Machine의 약자입니다. 이를 번역하면 자바 가상머신입니다. (프로그램을 실행하기 위해 물리적 머신과 유사한 머신을 소프트에어로 구현하였습니다.)</p>\n<p>JVM의 역할은 자바 Application을 클래스 로더를 통해 읽어서 자바 Application을 클래서 로더를 통해 읽어서 자바 API와 함께 실행하는 것입니다. 그리고 JVM은 <strong>Java와 OS사이에서 중개자 역할을 수행</strong>하며 Java가 OS에 구애받지 않고 <strong>재사용 가능</strong>하게 해줍니다.</p>\n<h3 id=\"jvm의-기능\"><a href=\"#jvm%EC%9D%98-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 기능</h3>\n<ul>\n<li>JAVA가 OS에 상관없이 동작할 수 있도록 중계자 역할을 합니다.</li>\n<li>GC(Garabage Collection)등의 기능을 제공합니다.</li>\n</ul>\n<h3 id=\"jvm의-용도\"><a href=\"#jvm%EC%9D%98-%EC%9A%A9%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 용도</h3>\n<ul>\n<li>자바 프로그램이 어느 기기, 또는 어느 운영체제 상에서도 실행될 수 있게 합니다.</li>\n<li>프로그램 메모리를 관리하고 최적화합니다.</li>\n</ul>\n<h3 id=\"바이트-코드란\"><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8-%EC%BD%94%EB%93%9C%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>바이트 코드란?</h3>\n<ul>\n<li>JVM이 이해할 수 있는 형태의 언어.</li>\n</ul>\n<br/>\n<h2 id=\"jvm의-구성과-구동과정\"><a href=\"#jvm%EC%9D%98-%EA%B5%AC%EC%84%B1%EA%B3%BC-%EA%B5%AC%EB%8F%99%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 구성과 구동과정.</h2>\n<p>기존의 자바는 C++ 처럼 빠르지 못하다는 비평을 받았으나, 다양한 알고리즘과 접근방식이 제안되어 개선되고 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103288668-c0e03b00-4a28-11eb-8e0f-554cda0e3bc5.png\" alt=\"JVM의 구동\"></p>\n<p>JVM의 구동은 다음과 같이 진행됩니다. 이를 하나씩 설명해보면 다음과 같습니다.</p>\n<h3 id=\"class-loader클래스-로더\"><a href=\"#class-loader%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A1%9C%EB%8D%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Class Loader(클래스 로더)</h3>\n<ul>\n<li><strong>JVM내로 클래스(.class파일)을 로드하고 링크를 통해 배치하는 작업을 수행하는 모듈</strong>입니다.</li>\n<li>Runtime 시 동적으로 클래스를 로드합니다.</li>\n<li>jar 파일 내에 저장된 클래스를 JVM 위에 탑재하고 사용하지 않는 클래스들은 메모리에서 삭제합니다.</li>\n</ul>\n<h3 id=\"execution-engine실행-엔진\"><a href=\"#execution-engine%EC%8B%A4%ED%96%89-%EC%97%94%EC%A7%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Execution Engine(실행 엔진)</h3>\n<ul>\n<li>클래스 로더에서 <strong>분석된 클래스 파일의 데이터를 저장하고 실행 도중에 필요한 데이터를 저장하고 실행 도중에 필요한 데이터를 실행</strong>합니다.</li>\n</ul>\n<h3 id=\"runtime-data-area\"><a href=\"#runtime-data-area\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Runtime Data Area</h3>\n<ul>\n<li>JVM의 메모리 영역입니다.</li>\n<li>\n<p>크게 4가지로 구분할 수 있습니다.</p>\n<ul>\n<li>\n<p>클래스 영역</p>\n<ul>\n<li><strong>실행에 필요한 클래스를 로드해서 저장</strong>합니다.</li>\n<li>내부에서 메소드 영역과 상수 영역으로 나눠집니다.</li>\n</ul>\n</li>\n<li>\n<p>가비지 컬렉션 힙 영역</p>\n<ul>\n<li><strong>GC에 의해 관리되는 영역</strong>입니다.</li>\n<li>동적 메모리 할당 영역이며, 일반적으로 <code class=\"language-text\">new</code>를 사용해 객체를 선언할 때 할당되는 영역입니다.</li>\n</ul>\n</li>\n<li>\n<p>런타임 스택 영역</p>\n<ul>\n<li>프로그램 <strong>실행 중 발생하는 메소드 호출과 복귀에 대한 정보를 저장</strong>합니다.</li>\n</ul>\n</li>\n<li>\n<p>네이티브 메소드 스택 영역</p>\n<ul>\n<li>자바는 하드웨어를 직접 제어하는 기능이 없어서 C언어와 같은 다른 언어의 기능을 빌려 사용합니다.</li>\n<li>이때 사용하는 기술이 JNI 기술이며 네이티브 메소드들을 바이트 코드로 변환되고 사용되고 기록됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"garbage-collector\"><a href=\"#garbage-collector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Garbage Collector</h3>\n<ul>\n<li>비지 컬렉션이란 프로세스를 통해 메모리를 관리하며, 이 <strong>가비지 컬렉션은 자바 프로그램에서 사용되지 않는 메모리를 지속적으로 찾아내서 제거</strong>합니다.</li>\n<li>과거의 가비지 컬렉션에 비해 알고리즘과 접근방식의 변경, 최적화 등으로 인해 개선되었습니다.</li>\n</ul>\n<br/>\n<h2 id=\"컴파일러와-인터프리터\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>컴파일러와 인터프리터</h2>\n<p>자바에 대해서 좀 더 잘 알기 위해서는 인터프리터에 대해 개념을 아는 것이 중요합니다.</p>\n<p>컴파일러, 인터프리터 둘 다 사람이 보는 고레벨 언어로 작성된 프로그래밍 언어(C++, Java 등등)를 기계어로 변환하는 것은 같으나 그 과정에 있어서 차이가 존재합니다. 컴파일러는 전체소스코드를 보고 명령어를 수집하고 재구성하는 반면 인터프리터는 소스코드의 각 행을 연속적으로 분석하며 실행하는 구조를 가지고 있습니다.</p>\n<h3 id=\"인터프리터의-특성\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0%EC%9D%98-%ED%8A%B9%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터프리터의 특성</h3>\n<p>인터프리터의 특성을 좀 더 자세하게 정리하면 다음과 같습니다.</p>\n<ul>\n<li>고레벨 언어를 중간 코드로 변환하고 이를 각 행마다 실행합니다.</li>\n<li>일반적으로 컴파일러가 각 행마다 실행하는 특성을 가진 인터프리터보다는 실행시간이 빠릅니다다.</li>\n<li>컴파일러는 전체 소스코드를 변환 한 뒤 에러를 보고하지만 인터프리터는 각 행마다 실행하는 도중 에러가 보고되면 이후의 코드는 확인하지 않습니다.</li>\n<li>\n<p>인터프리터 언어로는 다음과 같이 있습니다. <code class=\"language-text\">ex) 파이썬</code></p>\n<ul>\n<li>컴파일 언어 <code class=\"language-text\">ex) c c++</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"자바의-컴파일러와-인터프리터\"><a href=\"#%EC%9E%90%EB%B0%94%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바의 컴파일러와 인터프리터</h3>\n<p>자바는 특별하게 컴파일과 인터프리터를 병행합니다.</p>\n<ul>\n<li><strong>자바 컴파일러</strong>는 .java 파일을 javac(java compiler)가 바이트코드로 쓰여진 .class 파일로 변환한다. 바이트코드는 JVM을 위한 언어입니다.</li>\n<li><strong>자바 인터프리터</strong>는 자바 컴파일러에 의해 변환된 클래스파일내의 바이트코드를 특정 환경의 기계에서 실행될 수 있도록 변환합니다.</li>\n</ul>\n<h3 id=\"jit-왜자바는-컴파일과-인터프리트를-병행하는가\"><a href=\"#jit-%EC%99%9C%EC%9E%90%EB%B0%94%EB%8A%94-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%8A%B8%EB%A5%BC-%EB%B3%91%ED%96%89%ED%95%98%EB%8A%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JIT, 왜자바는 컴파일과 인터프리트를 병행하는가?</h3>\n<p>JIT 컴파일러는 Just In Time 컴파일러의 약자로, 인터프린터 방식과 컴파일러 방식을 혼합한 방식으로 정리할 수 있습니다. 실행 시점에는 인터프린터 형식으로 기계어 코드를 생성하고, 코드를 캐싱합니다.</p>\n<p>다음과 같은 특징을 가집니다.</p>\n<ul>\n<li>컴파일러의 경우 프로그램이 작성된 기계상에서 실행할 때 매우 효율적입니다.</li>\n<li>하지만 인터프리터의 경우는 플랫폼에 종속 되지 않습니다.</li>\n<li>자바 바이트코드는 컴퓨터와 프로그램 사이에 별도의 버퍼 역할을 수행합니다.(보안적 장점 + 성능적 장점)</li>\n</ul>\n<br/>\n<h2 id=\"jdk-vs-jre\"><a href=\"#jdk-vs-jre\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JDK VS JRE</h2>\n<ul>\n<li>JDK : Java Development Kit (자바 개발자 도구)</li>\n<li>JRE : Java Runtime Environment (자바 실행 환경)</li>\n</ul>\n<p>자바 언어로 프로그램을 개발하기 위해서는 JDK를 설치하면 되고, 자바 언어로 작성된 프로그램을 실행하기 위해서는 JRE을 설치하면 됩니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 자바의 기초, 그 처음 단계인 JVM에 대해서 정리했습니다. 잘못된 부분 있으면 알려주시면 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://asfirstalways.tistory.com/158\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://asfirstalways.tistory.com/158</a></li>\n<li><a href=\"https://minwan1.github.io/2018/06/06/2018-06-06-Java,JVM/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://minwan1.github.io/2018/06/06/2018-06-06-Java,JVM/</a></li>\n<li><a href=\"https://sesok808.tistory.com/32\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sesok808.tistory.com/32</a></li>\n<li><a href=\"https://preamtree.tistory.com/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://preamtree.tistory.com/2</a></li>\n<li><a href=\"http://www.itworld.co.kr/news/110837\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.itworld.co.kr/news/110837</a></li>\n</ul>\n"}}]}}},"context":{}}