{"hash":"40cbc053d2b1d239e475a5f7164f96d1d94c070f","data":{"tag":{"title":"Stub","belongsTo":{"edges":[{"node":{"title":"[Test] Mock 테스트와 Stub 테스트 차이","path":"/00-test-mock-and-stub/","date":"27. February 2022","timeToRead":6,"description":"Mock 테스트와 Stub 테스트, Spy 테스트 차이를 서술합니다.","content":"<h1 id=\"mock-테스트-stub-테스트\"><a href=\"#mock-%ED%85%8C%EC%8A%A4%ED%8A%B8-stub-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mock 테스트, Stub 테스트</h1>\n<p>최근 Mock 테스트와 Stub 테스트 차이에 대해 질문을 받았는데 부끄럽지만 차이를 몰라 이에 대해서 정리합니다.</p>\n<h2 id=\"개념에-대해\"><a href=\"#%EA%B0%9C%EB%85%90%EC%97%90-%EB%8C%80%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>개념에 대해</h2>\n<p><a href=\"https://martinfowler.com/articles/mocksArentStubs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">원문 참고</a></p>\n<ul>\n<li><code class=\"language-text\">Dummy</code> 객체는 전달되지만 사용되지 않고 일반적으로 매개변수 목록을 채우는 목적으로만 사용됩니다.</li>\n<li>\n<p><code class=\"language-text\">Fake</code> 객체는 실제로 작동하는 구현을 가지고 있지만 일반적으로 프로덕션에 적합하지 않는 몇가지 지름길을 사용합니다.</p>\n<ul>\n<li>대표적인 예시로 메모리 데이터베이스가 있습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Stub</code>은 테스트 중에 만들어진 호출에 미리 준비된 답변을 제공하며 일반적으로 테스트를 위해 프로그래밍된 것 외에는 전혀 응답하지 않습니다.</li>\n<li>\n<p><code class=\"language-text\">Spy</code>는 어떻게 호출받았는지에 따라 일부 정보를 기록하는 Stub 입니다.</p>\n<ul>\n<li>예시로 전송된 메시지 수를 기록하는 이메일 서비스 일 수 있습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Mock</code> 은 예상되는 기대값으로 미리 프로그래밍 객체입니다.</li>\n</ul>\n<p>무슨 말인지 와닿지 않아 이에 대해 조금 더 찾아봤습니다.</p>\n<h3 id=\"테스트-대역test-double\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%97%ADtest-double\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 대역(Test Double)</h3>\n<ul>\n<li>위의 개념에 대해 이해하기전 우선 테스트 대역(Test Double) 이라는 개념을 이해해야 합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/155876237-36a220bd-8e0f-4f1c-b0be-6a4a012fb3d2.png\" alt=\"테스트 대역\"></p>\n<ul>\n<li>테스트 대역이란 테스트하려는 객체가 다른 객체들이 여러 관계가 엮여있어 사용하기 힘들 때, <strong>대체할 수 있는 객체를 의미</strong>합니다.</li>\n<li>테스트 대역은 Dummy, Stub, Spy, Mock, Fake로 나눠집니다. (이에 대한 설명이 위에 있습니다.)</li>\n</ul>\n<br/>\n<h2 id=\"mock과-stub을-좀-더-자세히\"><a href=\"#mock%EA%B3%BC-stub%EC%9D%84-%EC%A2%80-%EB%8D%94-%EC%9E%90%EC%84%B8%ED%9E%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mock과 Stub을 좀 더 자세히.</h2>\n<p>일반적으로 많이 사용하는 두 개념에 대해서 정리를 하면 다음과 같습니다.</p>\n<blockquote>\n<p>Test의 원칙에 따르면 하나의 테스트에는 여러 개의 스텁이 있을 수 있지만 일반적으로 모의는 하나만 있습니다.</p>\n</blockquote>\n<h3 id=\"stub\"><a href=\"#stub\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stub</h3>\n<ul>\n<li>인스턴스화하여 구현한 가짜 객체(Dummy, 기능 구현이 없음)을 이용해 실제로 동작하는 것처럼 보이게 만드는 객체입니다.</li>\n<li>해당 인터페이스나 클래스를 최소한으로 구현합니다.</li>\n<li>테스트에서 호출된 요청에 대해 미리 준비해둔답변을 응답합니다.</li>\n<li>테스트시에 프로그래밍된 것 외에는 응답하지 않습니다.</li>\n<li>협력 객체의 특정 부분이 테스트가 어려운 경우, stub을 사용하여 수월하게 테스트할 수 있습니다.</li>\n</ul>\n<h4 id=\"stubs-lifecycle\"><a href=\"#stubs-lifecycle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stub's Lifecycle</h4>\n<ul>\n<li>Setup, 테스트 준비</li>\n<li>Exercise, 테스트</li>\n<li>Verify state, 상태 검증</li>\n<li>Teardown, 리소스 정리</li>\n</ul>\n<h3 id=\"mock\"><a href=\"#mock\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mock</h3>\n<ul>\n<li>호출에 대한 기대를 명세하고, 내용에 따라 동작하도록 프로그래밍 된 객체입니다.</li>\n<li>테스트 작성을 위한 환경 구축이 어려울 때, 테스트하고자 하는 코드와 엮인 객ㅊ들을 대신하기 위해 만들어진 객체입니다.</li>\n<li>행위 검증을 진행합니다.</li>\n</ul>\n<h4 id=\"mocks-lifecycle\"><a href=\"#mocks-lifecycle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mock's Lifecycle</h4>\n<ul>\n<li>Setup data, 데이터 준비</li>\n<li>Setup expectations, 예상되는 결과 준비</li>\n<li>Exercise, 테스트</li>\n<li>Verify expectations, 예상 검증</li>\n<li>Verify state, 상태 검증</li>\n<li>Teardown, 리소스 정리</li>\n</ul>\n<h3 id=\"stub과-mock의-차이\"><a href=\"#stub%EA%B3%BC-mock%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stub과 Mock의 차이</h3>\n<ul>\n<li>\n<p><strong>stub</strong>을 포함한 다른 대역들은 <strong>상태 검증(state verification)</strong> 을 사용하고 <strong>Mock</strong> 오브젝트는 <strong>행위 검증(behavior verification)</strong> 을 사용합니다.</p>\n<ul>\n<li><code class=\"language-text\">상태 검증</code>이란 메소드가 수행된 후, 객체의 상태를 확인하여 올바르게 동작했는지를 확인하는 검증법입니다.</li>\n<li><code class=\"language-text\">행위 검증</code>이란 메소드의 리턴 값으로 판단할 수 없는 경우, 특정 동작을 수행하는지 확인하는 검증법입니다.</li>\n</ul>\n</li>\n<li>검증의 대상이 다르다는 것이 중요한 체크 요소입니다.</li>\n</ul>\n<h4 id=\"상태-검증-예시\"><a href=\"#%EC%83%81%ED%83%9C-%EA%B2%80%EC%A6%9D-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상태 검증 예시.</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">StateClass</span> stateClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StateClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstateClass<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>stateClass<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"행위-검증-예시\"><a href=\"#%ED%96%89%EC%9C%84-%EA%B2%80%EC%A6%9D-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>행위 검증 예시</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BehaviorClass</span> behaviorClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BehaviorClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>behaviorClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doBehavior</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"조금-더-상세한-예제\"><a href=\"#%EC%A1%B0%EA%B8%88-%EB%8D%94-%EC%83%81%EC%84%B8%ED%95%9C-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>조금 더 상세한 예제</h2>\n<h3 id=\"stub-예제\"><a href=\"#stub-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stub 예제</h3>\n<ul>\n<li>사용하기 쉬우며 추가 종속성이 없습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Service</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Collaborator</span> collaborator<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCollaborator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collaborator</span> collaborator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>collaborator <span class=\"token operator\">=</span> collaborator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// part of Service interface</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> collaborator<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testActiveWhenCollaboratorIsActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n  service<span class=\"token punctuation\">.</span><span class=\"token function\">setCollaborator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Collaborator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"mock-예제\"><a href=\"#mock-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mock 예제</h3>\n<ul>\n<li>아래는 EasyMock 코드 예시</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Collaborator</span> collaborator <span class=\"token operator\">=</span> <span class=\"token class-name\">EasyMock</span><span class=\"token punctuation\">.</span><span class=\"token function\">createMock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collaborator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">EasyMock</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>collaborator<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">andReturn</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">EasyMock</span><span class=\"token punctuation\">.</span><span class=\"token function\">replay</span><span class=\"token punctuation\">(</span>collaborator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nservice<span class=\"token punctuation\">.</span><span class=\"token function\">setCollaborator</span><span class=\"token punctuation\">(</span>collaborator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">EasyMock</span><span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>collaborator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"언제-stub-mock-을-사용하나요\"><a href=\"#%EC%96%B8%EC%A0%9C-stub-mock-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>언제 Stub, Mock 을 사용하나요?</h2>\n<ul>\n<li>기본적으로 적합하다고 판단될 때 선택해야 합니다.</li>\n<li>행위 검증(Mock)의 경우, <code class=\"language-text\">특정 메서드의 호출</code> 등을 검증하기 때문에 구현에 의존적입니다.</li>\n<li>상태 검증(Stub)의 경우, 상태를 노출하는 메서드가 많이 추가될 수 있습니다.</li>\n<li>많은 경우 상태 검증이 좋은 경우가 많습니다.</li>\n<li>그러나 상태 검증이 어려운 경우가 있어서 이때는 행위 검증 혹은 전체 테스트를 진행하는 것도 좋은 방법이 됩니다.</li>\n</ul>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>다음 공부할 내용은 아래와 같습니다.</p>\n<ul>\n<li>Spock</li>\n<li>TDD</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://martinfowler.com/articles/mocksArentStubs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mocks Aren't Stub 원문</a></li>\n<li><a href=\"https://ducktyping.tistory.com/17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mocks Aren't Stub! Mock과 Stub에 대해서</a></li>\n<li><a href=\"https://github.com/team-tancheon/book-lounge/issues/16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">테스트 스텁과 목 오브젝트의 차이점</a></li>\n<li><a href=\"https://joont92.github.io/tdd/%EC%83%81%ED%83%9C%EA%B2%80%EC%A6%9D%EA%B3%BC-%ED%96%89%EC%9C%84%EA%B2%80%EC%A6%9D-stub%EA%B3%BC-mock-%EC%B0%A8%EC%9D%B4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">상태검증과-행위검증-stub과-mock-차이</a></li>\n<li><a href=\"https://spring.io/blog/2007/01/15/unit-testing-with-stubs-and-mocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unit Testing with Stubs and Mocks</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">whats-the-difference-between-a-mock-stub</a></li>\n</ul>\n"}}]}}},"context":{}}