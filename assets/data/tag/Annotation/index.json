{"hash":"7b056bf5bb97ab72db0df8d9d80ca9ef32b474be","data":{"tag":{"title":"Annotation","belongsTo":{"edges":[{"node":{"title":"[Java] Java Annotation","path":"/12-java-study/","date":"5. February 2021","timeToRead":6,"description":"Java Annotation에 대해 정리합니다.","content":"<h1 id=\"java-annotation\"><a href=\"#java-annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Annotation</h1>\n<p>12주차 내용은 자바의 Annotation 에 대한 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>애노테이션 정의하는 방법</li>\n<li><code class=\"language-text\">@retention</code></li>\n<li><code class=\"language-text\">@target</code></li>\n<li><code class=\"language-text\">@documented</code></li>\n<li>애노테이션 프로세서</li>\n</ul>\n<br/>\n<h2 id=\"어노테이션annotation-이란\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 이란</h2>\n<p>일반적으로 Annotation 을 해석하면 주석이라는 의미를 가집니다.</p>\n<p>다만, 자바에서의 Annotation은 <code class=\"language-text\">//</code> 나 <code class=\"language-text\">/* */</code> 등의 주석과는 차이가 있습니다.</p>\n<p>자바의 어노테이션은 Java 5부터 등장하였으며 어노테이션이 붙은 코드는 어노테이션에 구현된 정보에 따라 연결되는 방향이 결정됩니다. 즉, <strong>비지니스 로직에는 영향이 없지만 해당 타켓의 연결방법이나 소스코드의 구조를 변경할 수 있습니다.</strong></p>\n<p>이를 좀 더 간단하게 설명하자면, 일종의 라벨의 개념으로 <strong>역할은 주석과 비슷하지만 코드를 작성할 수 있습니다.</strong>. 이러한 목적은 <strong>소스 코드에 메타데이터를 표현하는 것</strong>입니다.</p>\n<br/>\n<h2 id=\"어노테이션annotation-정의-방법\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EC%A0%95%EC%9D%98-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 정의 방법</h2>\n<p>어노테이션은 다음과 같은 구조를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AnnotationEx</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// content</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Annotation은 <code class=\"language-text\">java.lang.annotation.Annotation</code> 을 상속받습니다.</p>\n<p>좀 더 자세하게 어노테이션을 선언한다면 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Inherited</span>  <span class=\"token comment\">// 자식이 상속 받을 수 있음</span>\n<span class=\"token annotation punctuation\">@Documented</span> <span class=\"token comment\">// 문서에도 어노테이션 정보가 표현됨</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 컴파일 이후 JVM에 의해 접근 가능</span>\n<span class=\"token comment\">//@Retention(RetentionPolicy.CLASS) // 컴파일러가 클래스를 참조할 때 까지 유효</span>\n<span class=\"token comment\">//@Retention(RetentionPolicy.SOURCE) // 어노테이션 정보는 컴파일 이후 사라짐</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>PACKAGE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 패키지 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>CONSTRUCTOR<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 생성자 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 멤버 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 메소드 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 어노테이션 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>LOCAL_VARIABLE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 지역 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 매개 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE_PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 매개 변수 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE_USE <span class=\"token comment\">// 타입 사용시</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">CustomAnnotation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* enum 타입을 선언 */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Quality</span> <span class=\"token punctuation\">{</span>BAD<span class=\"token punctuation\">,</span> GOOD<span class=\"token punctuation\">,</span> VERYGOOD<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* String은 기본 자료형은 아니지만 사용 가능합니다. */</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 배열 형태로도 사용할 수 있습니다. */</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* enum 형태를 사용하는 방법입니다. */</span>\n    <span class=\"token class-name\">CustomAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Quality</span> <span class=\"token function\">quality</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">CustomAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Quality</span><span class=\"token punctuation\">.</span>GOOD<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://jdm.kr/blog/216\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처</a></p>\n<br/>\n<h2 id=\"어노테이션annotation-규칙\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EA%B7%9C%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 규칙</h2>\n<p>어노테이션은 다음의 규칙이 적용됩니다.</p>\n<ul>\n<li>요소의 타입은 기본, String, enum, Annotation, Class만 허용됩니다.</li>\n<li>매개변수는 선언할 수 없습니다.</li>\n<li>예외를 선언할 수는 없습니다.</li>\n<li>요소를 타입 매개변수로 정의할 수 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"표준-어노테이션annotation\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>표준 어노테이션(Annotation)</h2>\n<p>자바에서 제공되는 어노테이션은 크게 2가지로 구성되며, 하나는 자바 코드를 사용할 때 사용되는 어노테이션이고 다른 하나는 어노테이션의 정의를 위해 필요한 것입니다.</p>\n<br/>\n<blockquote>\n<p>기본적으로 제공하는 어노테이션</p>\n</blockquote>\n<h3 id=\"override\"><a href=\"#override\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Override</code></h3>\n<ul>\n<li>메소드가 오버라이드 됐는지 검증합니다</li>\n<li>부모 클래스나 구현할 인터페이스에서 해당 메소드를 찾지못하면 컴파일 오류가 발생합니다.</li>\n</ul>\n<h3 id=\"deprecated\"><a href=\"#deprecated\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Deprecated</code></h3>\n<ul>\n<li>메소드를 사용하지 않도록 유도합니다.</li>\n<li>사용시 컴파일 경고를 일으킵니다.</li>\n</ul>\n<h3 id=\"suppresswarnings\"><a href=\"#suppresswarnings\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@SuppressWarnings</code></h3>\n<ul>\n<li>컴파일 경고를 무시하도록 합니다.</li>\n</ul>\n<h3 id=\"safevarargs\"><a href=\"#safevarargs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@SafeVarargs</code></h3>\n<ul>\n<li>제네릭 같은 가변인자 매개변수를 사용시 경고를 무시합니다.</li>\n<li>자바 7이상에서 적용됩니다.</li>\n</ul>\n<h3 id=\"functionalinterface\"><a href=\"#functionalinterface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@FunctionalInterface</code></h3>\n<ul>\n<li>람다 함수등을 위한 인터페이스를 지정합니다.</li>\n<li>메소드가 없거나 두개 이상이 되면 컴파일 오류가 납니다.</li>\n<li>자바 8이상에서 적용됩니다.</li>\n</ul>\n<br/>\n<blockquote>\n<p>Meta Annotations(메타 어노테이션)</p>\n</blockquote>\n<h3 id=\"retention\"><a href=\"#retention\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Retention</code></h3>\n<ul>\n<li>어노테이션의 범위입니다.</li>\n<li>어떤 시점까지 어노테이션의 영향이 미치는지를 결정합니다.</li>\n</ul>\n<h3 id=\"documented\"><a href=\"#documented\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Documented</code></h3>\n<ul>\n<li>문서에도 어노테이션의 정보가 표현됩니다.</li>\n</ul>\n<h3 id=\"target\"><a href=\"#target\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Target</code></h3>\n<ul>\n<li>어노테이션이 적용할 위치를 결정합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>요소 타입</th>\n<th>대상</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONSTRUCTOR</td>\n<td>생성자 선언시</td>\n</tr>\n<tr>\n<td>FIELD</td>\n<td>필드 값 선언시</td>\n</tr>\n<tr>\n<td>LOCAL_VARIABLE</td>\n<td>지역 변수 선언시</td>\n</tr>\n<tr>\n<td>METHOD</td>\n<td>메소드 선언시</td>\n</tr>\n<tr>\n<td>PACKAGE</td>\n<td>패키지 선언시</td>\n</tr>\n<tr>\n<td>PARAMETER</td>\n<td>매개 변수 선언시</td>\n</tr>\n<tr>\n<td>TYPE</td>\n<td>클래스, 인터페이스, enum 등의 선언시</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"inherited\"><a href=\"#inherited\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Inherited</code></h3>\n<ul>\n<li>자식 클래스가 어노테이션을 상속받을 수 있습니다.</li>\n</ul>\n<h3 id=\"repeatable\"><a href=\"#repeatable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Repeatable</code></h3>\n<ul>\n<li>반복적으로 어노테이션을 선언할 수 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>요소 타입</th>\n<th>대상</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SOURCE</td>\n<td>어노테이션 정보는 컴파일 이후 사라짐</td>\n</tr>\n<tr>\n<td>CLASS</td>\n<td>컴파일러가 클래스를 참조할 때 까지 유효</td>\n</tr>\n<tr>\n<td>RUNTIME</td>\n<td>컴파일 이후 JVM에 의해 접근 가능</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"어노테이션annotation-프로세서\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 프로세서</h2>\n<p>자바 컴파일러의 컴파일 단계에서 유저가 정의한 어노테이션의 소스코드를 분석하고 처리하기 위해 사용되는 훅입니다. 컴파일 에러나 컴파일 경고를 만들기도 하고 소스코드와 바이트 코드를 내보내기도 합니다.</p>\n<p>대표적인 예제로 <strong>롬복(Lombok)</strong> 라이브러리가 있습니다. 이 롬복 라이브러리를 사용하면 <code class=\"language-text\">@Getter</code>, <code class=\"language-text\">@Setter</code> 등을 사용하면 get이나 set, toString() 등을 선언할 필요없이 컴파일 시에 미리 생성되어 편리하게 사용할 수 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.nextree.co.kr/p5864/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.nextree.co.kr/p5864/</a></li>\n<li><a href=\"https://jdm.kr/blog/216\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/216</a></li>\n<li><a href=\"https://sujl95.tistory.com/67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/67</a></li>\n<li><a href=\"https://gowoonsori.site/java/annotation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gowoonsori.site/java/annotation/</a></li>\n<li><a href=\"https://b-programmer.tistory.com/264\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/264</a></li>\n<li><a href=\"https://sujl95.tistory.com/67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/67</a></li>\n</ul>\n"}}]}}},"context":{}}