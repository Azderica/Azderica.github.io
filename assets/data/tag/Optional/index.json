{"hash":"320ebf32be0b99ce0833c32326d49aab3f1f64f3","data":{"tag":{"title":"Optional","belongsTo":{"edges":[{"node":{"title":"[Java] Java Optional 2","path":"/01-java-optional/","date":"17. December 2020","timeToRead":7,"description":"Java Optional 을 좀 더 잘 사용하기","content":"<h1 id=\"java-optional-활용-편\"><a href=\"#java-optional-%ED%99%9C%EC%9A%A9-%ED%8E%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional 활용 편</h1>\n<p>지난 시간에 자바 Optional에 대해 작성했습니다. 또한 자바 Stream이나 Lambda에 대해서도 이야기를 하였습니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/00-java-optional/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Optional</a></li>\n<li><a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></li>\n<li><a href=\"https://Azderica.github.io/00-java-stream/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Stream</a></li>\n</ul>\n<p>이를 기반으로 좀 더 Optional을 더 잘 쓰는 방법에 대해 이야기해볼려고합니다.</p>\n<br/>\n<h2 id=\"optional과-stream\"><a href=\"#optional%EA%B3%BC-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional과 Stream</h2>\n<p>Optional을 제대로 사용하기 위해서는 Stream을 빼놓을 수는 없습니다. 일부 다른 표현으로는 <strong>Optional</strong>을 <strong>최대 1개의 원소를 가진 특별한 Stream</strong>이라고 표현하기도 합니다.</p>\n<p>Optional 클래스와 Stream 클래스 간에 직접적인 상관관계는 없지만 크게 유사한 부분을 가지고 있습니다. 지난시간에 이야기한 Stream이 가지고 있는 <code class=\"language-text\">map()</code>, <code class=\"language-text\">flatMap()</code>, <code class=\"language-text\">filter()</code> 모두 Optional도 가지고 있습니다.</p>\n<h3 id=\"map-사용하기\"><a href=\"#map-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>map() 사용하기</h3>\n<p>해당 코드는 <strong>\"주문을 한 회원이 살고 있는 도시를 반환한다\"</strong> 라는 예제입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCityOfMemberFromOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token operator\">::</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Address</span><span class=\"token operator\">::</span><span class=\"token function\">getCity</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음 코드는 기존의 NPE(Null Pointer Exception) 방어 패턴에 비해 훨씬 간결하고 명확한 코드를 확인할 수 있습니다.</p>\n<p>이를 좀 더 상세하게 설명한다면 다음과 같은 의미를 가집니다.</p>\n<ul>\n<li><code class=\"language-text\">ofNullable</code> 을 통해 Order 객체를 Optional로 감쌌으며 객체가 null인 경우를 위해 <code class=\"language-text\">of()</code> 대신에 <code class=\"language-text\">ofNullabe</code>을 사용하였습니다.</li>\n<li><code class=\"language-text\">map()</code> 메소드를 3번 호출하면서 Optional 객체는 <code class=\"language-text\">Optional&lt;Order&gt;</code> 에서 <code class=\"language-text\">Optional&lt;Member&gt;</code>, <code class=\"language-text\">Optional&lt;Address&gt;</code>, <code class=\"language-text\">Optional&lt;String&gt;</code>으로 객체가 3번 변화하였습니다.</li>\n<li><code class=\"language-text\">orElse()</code>를 통해 <code class=\"language-text\">Optional</code>이 비어있는 경우, 디폴트 값으로 \"Seoul\"을 설정하였습니다.</li>\n</ul>\n<p>해당 코드는 <code class=\"language-text\">null-safe</code>한 아름다운 코드입니다.</p>\n<h3 id=\"filter-사용하기\"><a href=\"#filter-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>filter() 사용하기</h3>\n<p><strong>주어진 시간내에 생성된 주문을 한 경우, 회원 정보를 얻는 기능</strong>을 구현한 코드가 예시로 있습니다.</p>\n<p>기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span> <span class=\"token function\">getMemberIfOrderWithin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>order <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> min <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 <code class=\"language-text\">filter()</code>을 통해 읽기 편하고 아름다운 코드를 만들 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMemberIdOrderWithin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullabe</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">-></span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> min <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 코드를 수정할 수 있습니다.</p>\n<p>다만 <code class=\"language-text\">filter()</code> 의 경우, <code class=\"language-text\">Opional</code>과 <code class=\"language-text\">Stream</code>은 약간의 차이가 있습니다. 동작 방식은 동일하지만 <code class=\"language-text\">Optional</code>의 경우에는 원소가 하나이기 때문에, <code class=\"language-text\">filter()</code> 로 넘어온 함수형 인자값이 false 인 경우에는 그 이후의 메소드는 의미없어집니다.</p>\n<br/>\n<h2 id=\"optional-활용-예시\"><a href=\"#optional-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 활용 예시</h2>\n<h3 id=\"null-반환\"><a href=\"#null-%EB%B0%98%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null 반환</h3>\n<p>다음과 같은 데이터가 있는 경우.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {1, \"Seoul\"}, {2, \"Busan\"}, {3, \"Daegu\"}</span></code></pre>\n<p><code class=\"language-text\">map</code> 인터페이스에서 <code class=\"language-text\">get()</code> 메소드 사용시 인덱스에 해당하는 값이 없으면 null을 반환합니다. 따라서 기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> city <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// return null</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> city <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> city<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null check</span></code></pre>\n<p>다만 <code class=\"language-text\">Optional</code>을 통해 <code class=\"language-text\">get()</code>을 감싸주면 null-safe한 코드가 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> maybeCity <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Optional</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> maybeCity<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// null-safe</span></code></pre>\n<p>이와 같이 아름다운 코드가 됩니다.</p>\n<h3 id=\"예외-발생\"><a href=\"#%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외 발생</h3>\n<p>마찬가지로 null 반환을 하지 않고 예외를 던지는 경우에도 <code class=\"language-text\">Optional</code>은 효과적입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cities <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Busan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Daegu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이와 같은 데이터가 있을 때, 기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> city <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\tcity <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throws exception</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ignore</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> city <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> city<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null check</span></code></pre>\n<p>이를 Optional을 통해서 수정가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAsOptional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>정적 메소드를 사용하여 null-safe하게 간단하게 코딩할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> maybeCity <span class=\"token operator\">=</span> <span class=\"token function\">getAsOptional</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Optional</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> maybeCity<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null-safe</span></code></pre>\n<br/>\n<h2 id=\"java-9의-optional-메소드\"><a href=\"#java-9%EC%9D%98-optional-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 9의 Optional 메소드</h2>\n<p>자바 9에서도 추가된 옵셔널 메소드가 있습니다.</p>\n<h3 id=\"or\"><a href=\"#or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>or</h3>\n<p>기존의 <code class=\"language-text\">.orElseGet()</code>과 유사하지만 체이닝을 통해서 우선 순위를 결정할 수 있습니다. <code class=\"language-text\">.or()</code> 연산 중 비어있으면 순차적으로 진행합니다.</p>\n<p>예제 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public Optional&lt;T> or(Supplier&lt;? extends Optional&lt;? extends T>></span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token string\">\"filter\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">empty</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"final\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'second'</span></code></pre>\n<h3 id=\"ifpresentorelse\"><a href=\"#ifpresentorelse\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ifPresentOrElse</h3>\n<p>기존의 <code class=\"language-text\">.ifPresent</code> 메소드와 비슷하지만 매개변수를 하나 더 받을 수 있습니다. <code class=\"language-text\">emptyAction</code>을 추가로 받아서 유효한 객체가 있는 경우 <code class=\"language-text\">action</code>을 실행하고 그렇지 못한 경우에는 <code class=\"language-text\">emptyAction</code>을 실행합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public void ifPresentOrElse(Consumer&lt;? super T> action, Runnable emptyAction);</span>\n\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'test'</span>\n\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'null'</span></code></pre>\n<h3 id=\"stream\"><a href=\"#stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.stream</h3>\n<p><code class=\"language-text\">.stream()</code> 메서드는 Optional 객체가 바로 스트림 객체로 전환되는 기능을 가지고 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public Stream&lt;T> stream();</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">-></span> val <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : [2, 4]</span></code></pre>\n<br/>\n<h2 id=\"java-10의-optional-메소드\"><a href=\"#java-10%EC%9D%98-optional-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 10의 Optional 메소드</h2>\n<p>자바 10에서도 하나의 메서드가 추가되었습니다.</p>\n<h3 id=\"orelsethrow\"><a href=\"#orelsethrow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>orElseThrow</h3>\n<p>매개변수가 필요없는 예외 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java 8</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchElementException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Java 10</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>이상으로 길고 길었던 Java의 Optinal, lambda, Stream에 대해 한번 정리했습니다. 스프링 개발을 하면서 좋은 코드에 대해 많은 고민이 들었습니다. 클린 코드에서 추가하는 아름다운 코드를 구성하기 위해서는 어떤식으로 코드를 구성해야할까라는 생각이 많이 들었습니다.</p>\n<p>함께 일하기 좋은 개발자 중 한명으로 코드를 보기 쉽게 짜는 사람이 있다는 이야기를 들은적이 있습니다. 저 또한 이부분을 잘 살려서 아름답고 사용자가 보기 쉬운 코드를 구성하는데 목표를 세워야겠다는 생각이 드는 시간이였습니다.</p>\n<p>부족한 점이나 잘못된 부분이 있으면 편하게 이야기주세요. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.daleseo.com/java8-optional-after/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-after/</a></li>\n<li><a href=\"https://www.daleseo.com/java8-optional-effective/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-effective/</a></li>\n<li><a href=\"https://jdm.kr/blog/234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/234</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Optional","path":"/00-java-optional/","date":"14. December 2020","timeToRead":6,"description":"Java Optional 대해 정리합니다.","content":"<h1 id=\"java-optional\"><a href=\"#java-optional\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional</h1>\n<p>Java8에서 Optional이 적용이 되었으나 실질적으로 개발에서 잘 사용하지 못한다는 생각을 자주하였습니다. 오늘은 Optional을 공부해보면서 왜 이를 써야할까에 대해서 작성하겠습니다.</p>\n<h2 id=\"java-optional이란\"><a href=\"#java-optional%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional이란?</h2>\n<p><code class=\"language-text\">Java Optional</code>이란 \"<strong>존재할 수도 있지만 안 할수도 있는 객체</strong>\"입니다. 이를 좀더 풀어 설명한다면 null이 될 수도 있는 객체를 감싸고 있는 일종의 <code class=\"language-text\">Wrapper</code> 클래스입니다. 따라서 Optional 인스턴스는 모든 타입의 참조 변수를 저장할 수 있습니다.</p>\n<blockquote>\n<p>Wrapper 클래스 : 8개의 기본타입(type, short, int, ...)의 데이터를 객체로 포장해주는 클래스, 각각의 타입에 해당하는 데이터를 인수로 전달받아, 해당 값을 가지는 객체 </p>\n</blockquote>\n<br/>\n<h2 id=\"java-optional의-장점\"><a href=\"#java-optional%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional의 장점</h2>\n<p>여러 가지 장점이 있으나 다음과 같이 서술할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">Null Pointer Exception</code>을 유발할 수 있는 null 을 직접 다루지 않아도 됩니다.</li>\n<li>null 체크를 따로 하지 않아도 됩니다.</li>\n<li>명시적으로 해당 변수가 null일 수도 있다는 가능성을 표현할 수 있습니다. 따라서, 방어로직을 해결하면서 코드 가독성과 유지 보수성을 높일 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"java-optional의-사용법\"><a href=\"#java-optional%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional의 사용법</h2>\n<h3 id=\"optional-변수-선언\"><a href=\"#optional-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 변수 선언</h3>\n<p>Optional 변수는 제네릭을 제공하므로, 변수를 선언할 때 타입 파라미터에 따라 감쌀 수 있는 객체 타입을 결정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Customer 타입의 객체를 감쌀 수 있는 Optional 타입의 변수</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">></span></span> storeCustomer<span class=\"token punctuation\">;</span>   \n\n<span class=\"token comment\">// Member 타입의 객체를 감쌀 수 있는 Optional 타입의 변수</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMebmer<span class=\"token punctuation\">;</span></code></pre>\n<p>다음과 같이 변수를 선언할 수 있습니다. 코드의 스타일에 따라 \"opt\"와 같이 접두어를 붙여 Optional 타입의 변수를 표현할 수 있습니다.</p>\n<h3 id=\"optional-객체-생성\"><a href=\"#optional-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 객체 생성</h3>\n<p>Optional 객체를 선언하는 방법은 크게 3가지 방법으로 나눠집니다.</p>\n<h4 id=\"1-optionalempty\"><a href=\"#1-optionalempty\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Optional.empty()</h4>\n<p>비어 있는(null) Optional 객체를 얻습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"2-optionalofvalue\"><a href=\"#2-optionalofvalue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Optional.of(value)</h4>\n<p>null이 아닌 value의 값을 가지고 있는 Optional 객체를 생성합니다. null이 넘어오는 경우에는, Null Pointer Exception이 발생하므로, 주의해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>dataMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"3-optionalofnullablevalue\"><a href=\"#3-optionalofnullablevalue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Optional.ofNullable(value)</h4>\n<p>null인지 아닌지 확신할 수 없는 객체를 담고 있는 Optional 객체를 생성합니다. 일종의 앞에 두개의 객체 생성법을 합친 방법이라고 이해하면 좋습니다.</p>\n<ul>\n<li><code class=\"language-text\">Optional.ofNullable(value)</code> = <code class=\"language-text\">Optinal.empty()</code> + <code class=\"language-text\">Optional.of(value)</code></li>\n</ul>\n<p>null이 넘어오는 경우에는 Null Pointer Exception이 발생하지 않고, <code class=\"language-text\">Optional.empty()</code>와 마찬가지로 비어있는 Optional 객체를 가져옵니다. 일반적으로 해당 객체가 null이 아닌지 자신이 없는 상황에서 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>dataMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optNotMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"optional-중간-처리\"><a href=\"#optional-%EC%A4%91%EA%B0%84-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 중간 처리</h3>\n<p>Optional 객체를 생성하고 바로 사용 가능한 메서드입니다. 아래의 메서드들은 다시 Optional을 반환하므로, 메서드 체이닝을 통해서 원하는 로직을 구성할 수 있습니다.</p>\n<h4 id=\"1-filter\"><a href=\"#1-filter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. filter()</h4>\n<p>해당 값이 참이면 해당 <code class=\"language-text\">필터</code>를 통과시키고 거짓이면 통과시키지 않습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return \"true\"</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return \"no data\"</span></code></pre>\n<h4 id=\"2-map\"><a href=\"#2-map\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. map()</h4>\n<p>mapper 함수를 통해 입력값을 다른 값으로 변환하는 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> test <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchElementException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return 1 (number)</span></code></pre>\n<h4 id=\"3-flatmap\"><a href=\"#3-flatmap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. flatMap()</h4>\n<p>mapper 함수를 통해 입력값을 다른 값으로 변환하는 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print 'good'</span></code></pre>\n<h3 id=\"optional-객체-접근\"><a href=\"#optional-%EA%B0%9D%EC%B2%B4-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 객체 접근</h3>\n<p>일반적으로 Optional 클래스에 담고 있는 객체를 꺼내오는 여러가지 방법이 있습니다. 자바에서는 이러한 다양한 인스턴스 메소드를 가져오는데, 자주 사용하는 메소드를 주로 설명하겠습니다. (<strong>객체가 존재하는 경우에는 동일하게 값을 가져옵니다.</strong>)</p>\n<h4 id=\"1-get\"><a href=\"#1-get\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. get()</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, <code class=\"language-text\">NoSuchElementException</code>의 예외를 던집니다.</li>\n</ul>\n<h4 id=\"2-orelset-other\"><a href=\"#2-orelset-other\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. orElse(T other)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 인자(other)를 반환합니다.</li>\n</ul>\n<h4 id=\"3-orelsegetsupplier-extends-t-other\"><a href=\"#3-orelsegetsupplier-extends-t-other\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. orElseGet(Supplier&#x3C;? extends T> other)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 함수형 인자(other)을 통해 생성된 객체를 반환합니다.</li>\n<li>일종의 <code class=\"language-text\">orElse(T other)</code>의 lazy 버전입니다. 비어있는 경우에만 호출되므로 <code class=\"language-text\">orElse(T other)</code>보다 성능적으로 좋을 것으로 예상할 수 있습니다.</li>\n</ul>\n<h4 id=\"4-orelsethrowsupplier-extends-x-exceptionsupplier\"><a href=\"#4-orelsethrowsupplier-extends-x-exceptionsupplier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. orElseThrow(Supplier&#x3C;? extends X> exceptionSupplier)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 함수형 인자를 통해 생성된 예외를 던집니다.</li>\n</ul>\n<h4 id=\"5-ifpresentconsumer-super-t-consumer\"><a href=\"#5-ifpresentconsumer-super-t-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. ifPresent(Consumer&#x3C;? super T> consumer);</h4>\n<ul>\n<li>최종적으로 연산을 끝낸 후에 값이 비어있지 않으면 입력값으로 주어집니다.</li>\n<li>중간 연산 중 비어있는 결과가 있는 경우 ifPresent(consumer)는 수행하지 않습니다.</li>\n</ul>\n<h4 id=\"6-ifpresent\"><a href=\"#6-ifpresent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. ifPresent()</h4>\n<ul>\n<li>최종 연산 후 객체가 존재하는지 여부를 파악합니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>자바8에서 등장한 Optional 클래스에 대해서 정리해보았습니다. 다음 글에는 자바9와 자바 10에서 추가된 Optional 메서드에 대해 작성하고 이를 이용한 코드를 좀 더 본격적으로 다루어보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"http://www.tcpschool.com/java/java_api_wrapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_api_wrapper</a></li>\n<li><a href=\"https://www.daleseo.com/java8-optional-after/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-after/</a></li>\n<li><a href=\"https://jdm.kr/blog/234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/234</a></li>\n<li><a href=\"https://daddyprogrammer.org/post/1988/java-optional/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://daddyprogrammer.org/post/1988/java-optional/</a></li>\n<li><a href=\"http://homoefficio.github.io/2019/10/03/Java-Optional-%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%93%B0%EA%B8%B0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://homoefficio.github.io/2019/10/03/Java-Optional-%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%93%B0%EA%B8%B0/</a></li>\n<li><a href=\"http://www.tcpschool.com/java/java_stream_optional\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_stream_optional</a></li>\n</ul>\n"}}]}}},"context":{}}