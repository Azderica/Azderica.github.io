{"hash":"413fde1b7460f5c0a9c6e7c070d0a68a0cbdb4b7","data":{"tag":{"title":"Serialize","belongsTo":{"edges":[{"node":{"title":"[Java] Java Serialization","path":"/java-serialize/","date":"12. May 2021","timeToRead":8,"description":"Java 직렬화와 역직렬화에 대해 정리합니다.","content":"<h1 id=\"java-serialize\"><a href=\"#java-serialize\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Serialize</h1>\n<p>이펙티브 자바를 공부하던 중, 마지막 단원을 공부하다보면 자바 직렬화(Serialize)에 대한 개념이 나옵니다. 다만, 이 부분에 대해 지식이 너무 부족해 이를 따로 정리합니다.</p>\n<h2 id=\"자바-직렬화란\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 직렬화란</h2>\n<p>일반적으로 자바의 직렬화와, 역직렬화를 아울러서 직렬화라고 합니다.</p>\n<h3 id=\"직렬화serialize\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94serialize\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화(Serialize)</h3>\n<ul>\n<li>자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도 사용할 수 있도록 바이트 형태로 데이터를 변환하는 기술입니다.</li>\n<li>JVM의 메모리에서 상주되어 있는 객체 데이터를 바이트 형태로 변환하는 기술입니다.</li>\n<li>일반적으로 객체들을 통째로 저장하거나 전송하고 싶을 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"역직렬화deserialize\"><a href=\"#%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94deserialize\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>역직렬화(Deserialize)</h3>\n<ul>\n<li>바이트로 변환된 데이터를 원래대로 객체나 데이터로 변환하는 기술을 역직렬화라고 합니다.</li>\n<li>직렬화된 바이트 형태의 데이터를 개체로 변환해서 JVM으로 상주시키는 형태입니다.</li>\n<li>저장된 파일을 읽거나 전송된 스트림 데이터를 읽어서 원래 객체의 형태로 복원합니다.</li>\n</ul>\n<br/>\n<h2 id=\"자바-직렬화를-사용하기\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 직렬화를 사용하기</h2>\n<h3 id=\"자바-직렬화-방법\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 직렬화 방법</h3>\n<p>자바의 기본(primitive) 타입과 <code class=\"language-text\">java.io.Serializable</code> 인터페이스를 상송받은 객체는 직렬화 할 수 있는 <strong>기본 조건</strong>을 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">myepark<span class=\"token punctuation\">.</span>study</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person{id='%s', email='%s', age='%s'}\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음처럼, 코드 작성시 직렬화 조건을 만족한 상태입니다.</p>\n<p>이를 직렬화하는 방법은 <code class=\"language-text\">java.io.ObjectOutputStream</code> 객체를 이용하는 것입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializableTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"박모씨\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"XXX-XXX\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serializedPerson <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteArrayOutputStream</span> baos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>baos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 직렬화된 Person 객체</span>\n        serializedPerson <span class=\"token operator\">=</span> baos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>serializedPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드를 실행시키면, 이에 대한 결과를 확인할 수 있습니다.</p>\n<p><code class=\"language-text\">rO0ABXNyAAxzdHVkeS5QZXJzb25ntzRTK7/dGgIAA0kAA2FnZUwAAmlkdAASTGphdmEvbGFuZy9TdHJpbmc7TAAEbmFtZXEAfgABeHAAAAAadAAHWFhYLVhYWHQACeuwleuqqOyUqA==</code></p>\n<p>이는 바이트 배열 형태이기 때문에 사용자가 봤을때는 확인할 수 없습니다.</p>\n<h3 id=\"자바-역직렬화-방법\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 역직렬화 방법</h3>\n<p>자바 역직렬화를 사용하기 위해서는 아래의 조건을 만족해야합니다.</p>\n<ul>\n<li>\n<p>직렬화 대상이 된 객체의 클래스가 클래스 패스에 존재해야하며 <code class=\"language-text\">import</code> 되어야 합니다.</p>\n<ul>\n<li>중요한 점 중 하나는 직력화와 역직렬화를 진행하는 시스템이 서로 다를 수 있기 때문에 이를 <strong>반드시 고려</strong>해야합니다.</li>\n</ul>\n</li>\n<li>자바 직렬화 대상 객체는 동일한 <code class=\"language-text\">serialVersionUID</code> 를 가지고 있어야합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이를 통해서 위의 바이트 코드를 다음과 같이 수정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeserializableTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> base64Memeber <span class=\"token operator\">=</span> <span class=\"token string\">\"rO0ABXNyAAxzdHVkeS5QZXJzb25ntzRTK7/dGgIAA0kAA2FnZUwAAmlkdAASTGphdmEvbGFuZy9TdHJpbmc7TAAEbmFtZXEAfgABeHAAAAAadAAHWFhYLVhYWHQACeuwleuqqOyUqA==\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serializedPerson <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>base64Memeber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteArrayInputStream</span> bais <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>serializedPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>bais<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 역직렬화된 Person 객체를 읽어옵니다.</span>\n        <span class=\"token class-name\">Object</span> objectPerson <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> objectPerson<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드를 실행하면 아래처럼 결과가 나옵니다.</p>\n<p><code class=\"language-text\">Person{name=&#39;박모씨&#39;, id=&#39;XXX-XXX&#39;, age=&#39;26&#39;}</code></p>\n<p>이처럼 직렬화와 역직렬화를 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"직렬화-사용시-주의할-부분\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EB%B6%80%EB%B6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화 사용시 주의할 부분.</h2>\n<ul>\n<li>자바 직렬화 사용할 때는 최대하게 신중하게 사용합니다.</li>\n<li><code class=\"language-text\">Serializable</code>을 구현할때는 신중히 결정합니다,</li>\n<li>커스텀 직렬화 형태를 고려해서 개발합니다.</li>\n<li><code class=\"language-text\">readObject</code> 메서드는 방어적으로 작성합니다.</li>\n<li>인스턴스 수를 통제해야한다면 <code class=\"language-text\">readObject</code> 보다는 <code class=\"language-text\">Enum</code> 타입을 사용합니다.</li>\n<li>직렬화된 인스턴스보다는 <code class=\"language-text\">직렬화 프록시 사용</code>을 검토합니다.</li>\n</ul>\n<p><a href=\"https://github.com/Azderica/Book-Record/tree/master/Effective%20Java/ch12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">좀 더 자세하게</a></p>\n<br/>\n<h2 id=\"직렬화의-사용-이유\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94%EC%9D%98-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화의 사용 이유.</h2>\n<p>자바 직렬화 외에 다른 데이터 직렬화 종류는 아래와 같습니다.</p>\n<h3 id=\"문자열-형태의-직렬화-방법\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%98%95%ED%83%9C%EC%9D%98-%EC%A7%81%EB%A0%AC%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열 형태의 직렬화 방법</h3>\n<p>일반적으로 직접 데이터를 문자열 형태로 확인 가능한 직렬화 방법입니다. 범용적인 API나 데이터를 변환하여 추출할 때 많이 사용합니다.</p>\n<ul>\n<li>CSV</li>\n<li>XML</li>\n<li>JSON</li>\n</ul>\n<h3 id=\"이진-직렬화-방법\"><a href=\"#%EC%9D%B4%EC%A7%84-%EC%A7%81%EB%A0%AC%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이진 직렬화 방법</h3>\n<p>데이터 변환 및 전송 속도에 최적화하여 별도의 직렬화 방법을 제시하는 구조입니다.</p>\n<ul>\n<li>Protocol Buffer</li>\n<li>Apache Avro</li>\n</ul>\n<h3 id=\"자바-직렬화의-필요성\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 직렬화의 필요성</h3>\n<p>앞서 여러 직렬화 방법이 있지만 자바의 직렬화를 쓰는 이유는 자바 직렬화가 가지는 장점이 있기 때문입니다.</p>\n<ul>\n<li>자바 시스템에서 개발에 최적화가 되어 있습니다.</li>\n<li>복잡한 데이터 구조의 클래스의 객체라도 직렬화의 기본 조건만 지키게 되면, 큰 작업없이 바로 직렬화나 역직렬화가 됩니다.</li>\n<li>역직렬화하면 기존 객체처럼 바로 사용할 수 있습니다.</li>\n</ul>\n<p>다만 직렬화가 가지는 단점 또한 있습니다.</p>\n<ul>\n<li>보안에 신경을 써야합니다. (직렬화 공격)</li>\n<li>예외 처리에 신경을 써야합니다.</li>\n<li>용량이 큽니다.</li>\n<li>역직렬화 또한 일종의 생성자이기 때문에, 신경을 써야하는 부분이 많습니다.</li>\n</ul>\n<br/>\n<h2 id=\"직렬화를-사용하는-경우\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화를 사용하는 경우</h2>\n<p>JVM의 메모리에서만 상주되어있는 객체 데이터를 그대로 영석화(Persistence)가 필요할 때 사용됩니다. 또한 시스템이 종료되더라도 없어지지 않는 장점을 가지며 영속화된 데이터이기 때문에 네트워크 전송도 가능합니다. 그리고 필요할 때 직렬화된 객체 데이터를 가져와서 역직렬화 해서 객체를 바로 사용할 수 있게됩니다.</p>\n<p>주로 아래의 경우에서 쉽게 사용됩니다.</p>\n<ul>\n<li>\n<p>서블릿 세션(Servlet Session)</p>\n<ul>\n<li>서블릿 기반의 WAS(톰캣, 웹로직 등)는 대부분 세션의 자바 직렬화를 지원합니다.</li>\n<li>파일로 저장, 세션 클러스터링, DB 저장 등을 할 때 직렬화되어서 저장됩니다.</li>\n</ul>\n</li>\n<li>\n<p>캐시(Cache)</p>\n<ul>\n<li>시스템에서는 퍼포먼스를 위해서 캐시를 사용하는데, 이때 자바 직렬화된 데이터를 저장해서 사용합니다.</li>\n</ul>\n</li>\n<li>\n<p>자바 RMI(Remote Method Invocation)</p>\n<ul>\n<li>원격 시스템 간의 메시지 교환을 위해 사용하는 자바에서 지원하는 기술입니다.</li>\n<li>RMI는 시스템과의 통신에서 필요한 IP, 포트를 통해서 소켓통신을 하는데 이를 추상화하여 로컬 시스템 메서드인 것처럼 호출할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/platform/serialization/spec/serial-arch.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/platform/serialization/spec/serial-arch.html</a></li>\n<li><a href=\"https://woowabros.github.io/experience/2017/10/17/java-serialize.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://woowabros.github.io/experience/2017/10/17/java-serialize.html</a></li>\n<li><a href=\"https://ryan-han.com/post/java/serialization/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ryan-han.com/post/java/serialization/</a></li>\n<li><a href=\"https://ryan-han.com/post/java/java-serialization/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ryan-han.com/post/java/java-serialization/</a></li>\n</ul>\n"}}]}}},"context":{}}