{"hash":"a494b8b1778660c606708ae3dd5d59774a4a3863","data":{"tag":{"title":"Java","belongsTo":{"edges":[{"node":{"title":"[Java Time] Java Date & Time API 정리","path":"/00-java-time/","date":"8. October 2022","timeToRead":7,"description":"Java Date & Time API에 대해 정리합니다.","content":"<h1 id=\"java의-날짜-시간에-대한-기본적인-정책\"><a href=\"#java%EC%9D%98-%EB%82%A0%EC%A7%9C-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%A0%95%EC%B1%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java의 날짜, 시간에 대한 기본적인 정책</h1>\n<h2 id=\"기존-java의-날짜-api의-문제\"><a href=\"#%EA%B8%B0%EC%A1%B4-java%EC%9D%98-%EB%82%A0%EC%A7%9C-api%EC%9D%98-%EB%AC%B8%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기존 Java의 날짜 API의 문제.</h2>\n<p>Java 8 이전에 사용하던 Date 관련 클래스는 Date, Calendar, SimpleDateFormat 등이 있었으나, 많은 문제가 있어 자바 8 버전 이후 부터는 새로운 날짜 관련 API를 제공합니다.</p>\n<p>기존 클래스들의 문제는 다음과 같습니다.</p>\n<ul>\n<li>\n<p>부적절한 클래스, 메소드 이름</p>\n<ul>\n<li>Date 클래스의 경우, TimeStamp 방식으로 동작하고 시간을 내재하고 있으나, ClassName은 Date입니다.</li>\n</ul>\n</li>\n<li>\n<p>Thread saftety 하지 않음</p>\n<ul>\n<li>Date 클래스의 경우 mutable 하기 때문에 다른 Thread에서 값을 참조하고 변경할 수 있습니다. -> 즉, thread safe 하지 않습니다.</li>\n</ul>\n</li>\n<li>\n<p>버그가 발생할 여지가 많음</p>\n<ul>\n<li>Calendar 클래스의 경우 입력값의 month가 0이 1월로 처리됩니다. 그래서 Calendar.SEPTEMBER 같은 상수를 사용해야하며, DB 데이터랑 연결하면서 서로 다르게 해석됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"joda-time\"><a href=\"#joda-time\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Joda Time</h3>\n<p>위의 여러한 문제 들이 있어 Java8 이전에서는 Joda-Time이라는 라이브러리를 사용했습니다. 그러나, Java 8 부터는 Joda-Time이 자바 표준 라이브러리로 들어왔습니다.</p>\n<br/>\n<h2 id=\"현재의-java의-날짜시간-정책\"><a href=\"#%ED%98%84%EC%9E%AC%EC%9D%98-java%EC%9D%98-%EB%82%A0%EC%A7%9C%EC%8B%9C%EA%B0%84-%EC%A0%95%EC%B1%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>현재의 Java의 날짜/시간 정책.</h2>\n<p>Java SE8 버전부터 JEP(JDK Enhancement Proposal, JDK 개선 제안) 150, JSR-310(Java Specificiation Requests)의 310번째 Requests인 <code class=\"language-text\">Date &amp; Time API</code> 으로 들어왔습니다.</p>\n<p>Date &#x26; Time API의 목표를 읽어보면 다음과 같습니다.</p>\n<ul>\n<li>date, time, instant, time-zone을 포함하는 공식 시간 개념 지원</li>\n<li>immutable 구현</li>\n<li>개발자의 사용성에 중점을 둔 JDK에 적절하고 효과적인 API 제공</li>\n<li>기존의 JDK API와의 통합</li>\n<li>제한된 calendar 시스템 세트를 제공하고 다른 것들로 확장 가능</li>\n<li>ISO-8601, CLDR 및 BCP47을 포함한 관련 표준 사용</li>\n<li>UTC에 연결하여 명시적 시간 척도를 기반</li>\n</ul>\n<p>현재 이 API는 표준이 되었으며, 위의 나온 Joda-Time의 창시자 분 또한 API를 만드는 데 동참했습니다.</p>\n<p>위의 문제점인 부적절한 클래스나 메서드 명들도 정리가 되었고, Thread safe하며, 여러 편의기능이 많고, Zoned 관련된 기능도 있어 여러 글로벌 서비스에서 적합합니다.</p>\n<h3 id=\"instant\"><a href=\"#instant\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Instant</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/194757246-bf361279-1d9f-49e6-b9a4-8dcc23983f2e.png\" alt=\"Instant Image\"></p>\n<p>1970년 1월 1일 UTC의 첫 번째 순간 이후의 현재 시간까지의 나노초를 나타낸 값입니다. 라이브러리를 더 상세하게 보면, epochSecond와 nanos 로 나눠집니다.</p>\n<p>일반적으로 순간을 표현할 때 사용하며, Unix Timestamp를 구할 때 사용할 수 있습니다. Unix Timestamp를 사용하는 이유는 숫자 자료형을 가지고 연산을 하기 때문에 <code class=\"language-text\">Local/Offset/ZonedDateTime</code>과 비교했을 때 연산 속도가 훨씬 빠릅니다. </p>\n<p>대부분의 비즈니스 로직, 데이터 저장 및 데이터 저장 및 데이터 변경은 UTC로 이루어져야하므로 자주 사용하기에 편리한 클래스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Instant</span> cur <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 2022-10-09T12:45:11.825755Z</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span><span class=\"token function\">getEpochSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1665319511</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 825755000</span></code></pre>\n<p>Instant의 now에서는 UTC 표준 시간대를 사용합니다.  (<code class=\"language-text\">Clock.systemUTC().instant()</code>)</p>\n<h3 id=\"localdate-localtime-localdatetime\"><a href=\"#localdate-localtime-localdatetime\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>LocalDate, LocalTime, LocalDateTime</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/194757952-64597f21-4343-44ef-91d2-5d3d1c1eb728.png\" alt=\"LocalDate\">\n<img src=\"https://user-images.githubusercontent.com/42582516/194757965-437143c5-3218-4907-8525-2885741f2382.png\" alt=\"LocalTime\">\n<img src=\"https://user-images.githubusercontent.com/42582516/194757977-2a98fa74-3ab6-4d7b-ae35-bce256acc625.png\" alt=\"LocalDateTime\"></p>\n<p>Java Time에서 <code class=\"language-text\">Local</code> 이 들어가는 것은 시간대(Zone Offset/Zone Region)에 대한 정보가 없다는 것을 의미합니다. </p>\n<p>일반적으로 Local 클래스는 생일이나 기념일 등에 주로 사용됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalDate</span> localDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2022-10-09</span>\n\n<span class=\"token class-name\">LocalTime</span> localTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 21:49:19.858512</span>\n\n<span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2022-10-09T21:49:19.858589</span></code></pre>\n<p>위의 라이브러리를 간략하게 이야기하면 <code class=\"language-text\">LocalDateTime</code>은 <code class=\"language-text\">LocalDate</code>와 <code class=\"language-text\">LocalTime</code>으로 구성되어 있고, <code class=\"language-text\">LocalDate</code>는 <code class=\"language-text\">year, month, day</code>로 구성되어 있고 이를 맞춰주기 위한 보정값을 사용하고 있고 <code class=\"language-text\">LocalTime</code>은 <code class=\"language-text\">hour, minute, second, nano</code> 의 값으로 이루어져 있습니다.</p>\n<p>LocalDateTime의 now는 default time-zone 의 정보를 사용합니다. 내부적으로는 Instant형으로 바꾼 후, ZoneOffset으로 한번 바꾼뒤 EpochSecond로 바꾼 이후에야 LocalDateTime으로 출력합니다.</p>\n<h3 id=\"offsetdatetime\"><a href=\"#offsetdatetime\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OffsetDateTime</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/194758471-9ed85cc8-6687-4b15-bf1b-422355f8a0f4.png\" alt=\"OffsetDateTime\"></p>\n<p><code class=\"language-text\">LocalDateTime + ZoneOffset</code> 의 개념입니다. <code class=\"language-text\">OffsetDateTime</code>는 UTC보다 몇 시간/분/초 앞 또는 뒤의 컨텍스트를 사용하여 순간을 날짜 및 시간으로 나타냅니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OffsetDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n<span class=\"token comment\">// 2000-01-01T11:11:11Z</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OffsetDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token comment\">// 2000-01-01T11:11:11+09:00</span>\n<span class=\"token comment\">// 위 두 값은 다릅니다.</span></code></pre>\n<h3 id=\"zoneddatetime\"><a href=\"#zoneddatetime\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ZonedDateTime</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/194759752-1ecd1bc2-ba39-43c2-801c-174f1723a988.png\" alt=\"ZonedDateTime\"></p>\n<p><code class=\"language-text\">OffsetDateTime + ZoneRegion</code> 의 개념입니다. OffsetDateTime 과의 차이점은 DST(Daylight Saving Time)와 같은 Time Transition Rule을 포함하는 ZoneRegion의 유무차이 입니다.</p>\n<p>몇개의 나라의 경우, 서머타임을 적용하기 때문에 때로는 겨울, 여름을 다르게 써야하는데, 이를 자바에서는 하나의 Time Zone으로 통일하고, Time Transition Rule을 가지는 ZoneRules을 통해 알아서 내부적으로 계산해줍니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ZoneId</span> seoulZoneId <span class=\"token operator\">=</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>seoulZoneId<span class=\"token punctuation\">.</span><span class=\"token function\">getRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// ZoneRules[currentStandardOffset=+09:00]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>seoulZoneId<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Asia/Seoul</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 2020-01-01T11:11:11+09:00[Asia/Seoul]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Tokyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 2020-01-01T11:11:11+09:00[Asia/Tokyo]</span>\n<span class=\"token comment\">// 위 두값은 다른 region이라 다릅니다.</span>\n\n<span class=\"token comment\">// cet 는 유럽 시간</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 2020-01-01T11:11:11+01:00[CET]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2020-06-01T11:11:11+02:00[CET]</span></code></pre>\n<br/>\n<h2 id=\"jdbc에서-변경되는-형태\"><a href=\"#jdbc%EC%97%90%EC%84%9C-%EB%B3%80%EA%B2%BD%EB%90%98%EB%8A%94-%ED%98%95%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JDBC에서 변경되는 형태</h2>\n<p>JDBC는 Java와 Database Scheme 사이의 컨버팅을 다음과 같이 자동으로 변경이 됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>Date-time types in Java &#x26; SQL</th>\n<th>Legacy class</th>\n<th>Modern class</th>\n<th>SQL standard data type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Moment</td>\n<td>Java.util.Date<br/>Java.sql.Timestamp</td>\n<td>Java.time.Instant</td>\n<td>TIMESTAMP WITH TIME ZONE</td>\n</tr>\n<tr>\n<td>Moment with offset-from-UTC</td>\n<td>(lacking)</td>\n<td>java.time.OffsetDateTime</td>\n<td>TIMESTAMP WITH TIME ZONE</td>\n</tr>\n<tr>\n<td>Moment with time zone</td>\n<td>java.util.GregorianCalendar<br/>javax.xml.datatype.XMLGregorianCalendar</td>\n<td>java.time.ZonedDateTime</td>\n<td>TIMESTAMP WITH TIME ZONE</td>\n</tr>\n<tr>\n<td>Date &#x26; Time-of-day</td>\n<td>(lacking)</td>\n<td>java.time.LocalDateTime</td>\n<td>TIMESTAMP WITHOUT TIME ZONE</td>\n</tr>\n<tr>\n<td>Date only</td>\n<td>java.sql.Date</td>\n<td>java.time.LocalDate</td>\n<td>DATE</td>\n</tr>\n<tr>\n<td>Time-of-day only</td>\n<td>java.sql.Time</td>\n<td>java.time.LocalTime</td>\n<td>TIMESTAMP WITHOUT TIME ZONE</td>\n</tr>\n<tr>\n<td>Time-of-day with offset</td>\n<td>(lacking)</td>\n<td>java.time.OffsetTime</td>\n<td>TIME WITH TIME ZONE</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Year_2038_problem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2038년 문제</a></li>\n<li><a href=\"https://openjdk.org/jeps/150\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OpenJDK</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32437550/whats-the-difference-between-instant-and-localdatetime\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">different between Instant and LocalDateTime</a></li>\n<li><a href=\"https://perfectacle.github.io/2018/09/26/java8-date-time/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">날짜와 시간 API</a></li>\n<li><a href=\"https://jaehoney.tistory.com/136\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java 8 - 새로운 Date &#x26; Time 정리</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Effective Java, Concurrency","path":"/10-java-effective-java/","date":"24. May 2021","timeToRead":33,"description":"Effective Java 책 중, ch11. 동시성에 대해 정리합니다.","content":"<h1 id=\"concurrency-동시성\"><a href=\"#concurrency-%EB%8F%99%EC%8B%9C%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Concurrency (동시성)</h1>\n<p>동시성은 여러 활동을 동시에 진행할 수 있습니다. 동시 프로그래밍은 단일 스레드 프로그래밍보다 어렵습니다. 더 많은 문제가 발생할 수 있고 실패를 재현하기 어렵기 때문에 동시성을 피할 수 없습니다. 아래에서는 명확하고 정확하며 잘 문서화 된 동시 프로그래밍을 작성하는데 도움이 되는 자료입니다.</p>\n<h2 id=\"item-78-공유된-변경-가능한-데이터는-동기화해서-사용합니다\"><a href=\"#item-78-%EA%B3%B5%EC%9C%A0%EB%90%9C-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 78. 공유된 변경 가능한 데이터는 동기화해서 사용합니다.</h2>\n<p><code class=\"language-text\">synchronized</code> 키워드는 하나의 스레드가 한번에 방법 또는 블록을 실행함을 보장합니다. 이를 통해서, 어떤 메서드도 객체의 상태가 일관되게 됩니다.</p>\n<p>자바 언어는 long과 double 형을 제외하고는 변수를 읽고 쓰는 것은 원자적입니다. 즉, <strong>동기화 없이 여러 스레드가 같은 변수를 수정하므로 항상 어떤 스레드가 정상적으로 저장한 값을 읽어오는 것을 보장</strong>합니다.</p>\n<p>하지만, 스레드가 필드를 읽을 때 항상 수정이 완전히 반영된 값을 얻는다 보장하지만, 한 스레드가 저장된 값이 다른 스레드에서 보이는가는 보장하지 않습니다. 즉, <strong>스레드 간의 안정적인 통신과 상호 배제를 위해서는 동기화가 필요합니다</strong>.</p>\n<p>이를 표현한 잘못된 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StopThread</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> stopRequested<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Thread</span> backgroundThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopRequested<span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    backgroundThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stopRequested <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드의 경우, 스레드가 <code class=\"language-text\">start</code>되고 1초의 sleep후, 루프가 종료될 것으로 예상되지만 종료되지않습니다. 이는 동기화가 되지 않았기 때문입니다. 즉, 동기화가 없어지면 가상 머신이 아래처럼 수정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 원래 코드</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopRequested<span class=\"token punctuation\">)</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 최적화한 코드</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopRequested<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이는 JVM이 적용하는 <strong>끌어올리기(hoisting, 호이스팅)</strong>이라는 최적화 기법이 사용된 경우이며, 이는 종료되지 않습니다. 그렇기 때문에 아래처럼 고쳐서 지속적으로 동작하도록 할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StopThread</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> stopRequested<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requestStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    stopRequested <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">stopRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> stopRequested<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Thread</span> backgroundThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">stopRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    backgroundThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">requestStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 하면 동기화처리가 되며, 동기화는 읽기와 쓰기 모두 필요합니다. 둘 중 하나만 동기화 하는 경우에는 충준하지 않습니다.</p>\n<h3 id=\"volatile\"><a href=\"#volatile\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>volatile</h3>\n<p>volatile(휘발성)은 배타적 수행과는 상관이 없지만 항상 가장 최근에 저장된 값을 읽어온다. 이론적으로는 CPU 캐시가 아닌 컴퓨터의 메인 메모리로부터 값을 읽어옵니다. 그렇기 때문에 읽기/쓰기 모두가 메인 메모리에서 수행됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> stopThread <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> stopRequested<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Thread</span> backgroundThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stopRequested<span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    backgroundThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stopRequested <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드처럼 <code class=\"language-text\">volatile</code>을 사용하면 동기화를 생략할 수 있습니다. 그러나 아래의 경우 처럼 문제가 발생할 수 있기에 조심히 사용해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> nextSerialNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">generateSerialNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nextSerialNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>코드 상으로 증가 연산자(++)는 하나지만 실제로는 volatile 필드에 두 번 접근합니다. 먼저 값을 읽고 그 다음에 1을 증가한 값과 동일한 새로운 값을을 다시 작성합니다. 따라서 두 번째 스레드가 첫 번째 스레드의 연산 사이에 들어와 공유 필드를 읽게되며, 첫번째 스레드와 같은 값을 보게될 것입니다.</p>\n<p>이처럼 잘못된 결과를 계산해내는 오류를 안전 실패(safety failure)라고 합니다. 이 문제는 메서드에 <code class=\"language-text\">synchronized</code>를 붙이고 <code class=\"language-text\">violate</code> 키워드를 공유 필드에서 제거하면 해결됩니다.</p>\n<h3 id=\"atomic-패키지\"><a href=\"#atomic-%ED%8C%A8%ED%82%A4%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>atomic 패키지</h3>\n<p>위의 volatile 보다 더 좋은 방법 중 하나는 <code class=\"language-text\">java.util.concurrent.atomic</code>을 사용하는 것입니다. <code class=\"language-text\">java.util.concurrent.atomic</code>의 패키지에는 락 없이도 thread-safe한 클래스를 제공합니다. <code class=\"language-text\">volatile</code>은 동기화 효과 중 통신쪽만 지원하지만, <strong>패키지는 원자성까지 지원</strong>하며 성능도 다른 동기화 버전에 비해 우수합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicLong</span> nextSerialNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">generateSerialNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> nextSerialNum<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"결론적으로\"><a href=\"#%EA%B2%B0%EB%A1%A0%EC%A0%81%EC%9C%BC%EB%A1%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론적으로.</h3>\n<p>가변 데이터를 공유하지 않는 것이 동기화 문제를 피하는 가장 좋은 방법입니다. 즉, <strong>가변 데이터는 단일 스레드에서만 사용하는 것이 좋습니다.</strong> 그리고 이에 대한 문서화를 하는 것이 중요합니다.</p>\n<p>한 스레드가 데이터를 수정한 후에 다른 스레드에 공유할 때는 해당 객체에 공유하는 부분만 동기화해도 됩니다. 다른 스레드에 이런 객체를 건네는 행위를 <code class=\"language-text\">안전 발행(safe publication)</code>이라고 합니다. 클래스 초기화 과정에서 객체를 정적 필드, volatile 필드, final 필드 혹은 보통의 락을 통해 접근하는 필드 그리고 동시성 컬렉션에 저장하면 안전하게 발생할 수 있습니다.</p>\n<p>여러 스레드가 변경 가능한 데이터를 공유할 때 데이터를 읽거나 쓰는 각 스레드는 동기화를 수행하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-79-과도한-동기화는-피합니다\"><a href=\"#item-79-%EA%B3%BC%EB%8F%84%ED%95%9C-%EB%8F%99%EA%B8%B0%ED%99%94%EB%8A%94-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 79. 과도한 동기화는 피합니다.</h2>\n<p>동기화를 하지 않으면 문제가 발생합니다. 하지만 과도한 동기화는 성능 저하, 데드락, 비결정적 동작을 유발할 수 있습니다.</p>\n<h3 id=\"외계인-메서드-alien-method\"><a href=\"#%EC%99%B8%EA%B3%84%EC%9D%B8-%EB%A9%94%EC%84%9C%EB%93%9C-alien-method\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>외계인 메서드 (alien method)</h3>\n<p>이러한 응답 불가 및 안전 문제를 줄이기 위해서는, <strong>동기화된 메서드 또는 블록 내에서 클라이언트에게 제어권을 넘기면 안됩니다.</strong> 즉, 동기화된 영액 내에서 재정의되도록 설계된 메서드 또는 클라이언트가 함수 개체의 형태로 제공하는 메서드를 호출하면 안됩니다. 이러한 <strong>메서드는 무슨 일을 할지 모르기 때문에 예외를 발생시키거나, 교착상태를 만들거나 데이터를 훼손 할 수 있으며 이러한 메서드를 외계인 메서드(<code class=\"language-text\">alien method</code>)라고 합니다.</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Broken - 동기화 된 블록에서 외계인 메서드를 호출한 경우.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObservableSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ForwardingSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ObservableSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SetObserver</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyElementAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer <span class=\"token operator\">:</span> observers<span class=\"token punctuation\">)</span>\n        observer<span class=\"token punctuation\">.</span><span class=\"token function\">added</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> added <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>added<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">notifyElementAdded</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> added<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">|=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Calls notifyElementAdded</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SetObserver</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 관찰 가능한 집합에 요소가 추가 될 때 호출됩니다.</span>\n  <span class=\"token keyword\">void</span> added <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObservableSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> set<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드는 집합에 원소가 추가되면 알림을 받는 관찰자 패턴을 사용한 예제 코드입니다. 해당 코드는 <code class=\"language-text\">addObserver</code> 메서드를 호출해서 알림을 구독하고, <code class=\"language-text\">removeObserver</code> 메서드를 호출해서 구독을 취소합니다.</p>\n<p>이를 통한 잘못된 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\">set<span class=\"token punctuation\">.</span>addObserver <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SetObserver</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> added <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObservableSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>removeObserver <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>위 코드는 <code class=\"language-text\">ConcurrentModificationException</code>가 발생합니다. 해당 경우, 0부터 23까지 출력한 후 자신을 remove하고 종료할 것 같으나, 실제로 실행해보면 0~23까지 출력 후 예외가 발생합니다. 이유는 added 메서드 호출이 일어난 시점이 <code class=\"language-text\">notifyElementAdded</code>가 <code class=\"language-text\">Observer</code>들의 리스트를 순회하는 도중이기 때문입니다.</p>\n<p>added 메서드에서 <code class=\"language-text\">ObservableSet.removeObserver</code> 메서드를 호출하고, 또 여기서 observers.remove 메서드를 호출하는데 여기서 문제가 발생합니다. 즉, 순회하고 있는 리스트에서 원소를 제거하려고하기 때문에 <code class=\"language-text\">notifyElementAdded</code> 메서드에서 수행하는 순회는 동기화 블록 안에 있어 동시 수정이 일어나지는 않지만, 자신이 콜백을 거쳐 되돌아와 수정하는 것은 막을 수 없습니다.</p>\n<p>또 다른 예시로 쓸데없는 백그라운드 스레드를 사용한 케이스를 볼 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 백그라운드 스레드를 불필요하게 사용하는 옵저버</span>\nset<span class=\"token punctuation\">.</span>addObserver <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SetObserver</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> added <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObservableSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span>newSingleThreadExecutor <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        exec<span class=\"token punctuation\">.</span>submit <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span>removeObserver <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> get <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutionException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">InterruptedException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        exec<span class=\"token punctuation\">.</span>shutdown <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>해당 코드는 예외는 발생하지 않지만, deadlock에 빠집니다. 백그라운드 스레드가 <code class=\"language-text\">s.removeObserver</code> 메서드를 호출하면, 메인 스레드가 이미 락을 가지고 있기 때문에 <code class=\"language-text\">Observer</code>을 잠그려 시도하지만 락을 얻을 수 없습니다.</p>\n<p>이러한 외계인 메서드 예제를 정의한 코드를 보면 <code class=\"language-text\">removerObserver</code> 메서드에는 <code class=\"language-text\">synchronized</code> 키워드가 있기 때문에 실행 시 락이 걸립니다. 동시에 메인 스레드는 백그라운드 스레드가 <code class=\"language-text\">Observer</code>를 제거하기만 기다리기 때문에 deadlock에 빠집니다.</p>\n<p>이를 해결하는 방법은 다음과 같습니다.</p>\n<ul>\n<li>외계인 메서드 호출을 동기화 블럭 바깥으로 옮깁니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyElementAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SetObserver</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> snapshot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    snapshot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>observers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer <span class=\"token operator\">:</span> snapshot<span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">added</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>더 나은 방법으로는 자바의 <code class=\"language-text\">concurrent collection</code>을 사용하는 방법도 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SetObserver</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyElementAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SetObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> observer <span class=\"token operator\">:</span> observers<span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">added</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위와 같은 <code class=\"language-text\">CopyOnWriteArrayList</code>는 ArrayList를 구현한 클래스로 내부를 변경하는 작업은 항상 깨끗한 복사본을 만들어서 수행하도록 구현되어 있습니다. 내부의 배열은 수정되지 않아, 순회할 때 락이 필요없이 매우 빠릅니다. 다른 용도로 사용되는 경우에는 복사를 매번 해야하기에는 느리지만 수정할 일이 적고 순회만 자주 일어나는 경우, Observer 리스트 용도로는 최적입니다.</p>\n<p>이처럼 과도한 동기화는 병렬로 실행할 기회를 읽고, 모든 코어가 메모리를 일관되게 보기 위한 지연시간이 지연 비용입니다. 또한 JVM으 코드 최적화를 제한하는 것도 고려해야합니다.</p>\n<p>즉, 가변 클래스를 작성할 때는 두가지 선택을 할 수 있습니다.</p>\n<ul>\n<li>\n<p>동기화를 하지 않고 그 클래스를 사용해야하는 클래스가 외부에서 동기화 하는 것</p>\n<ul>\n<li><code class=\"language-text\">java.util</code> 패키지 (vector와 hashtable 제외)</li>\n</ul>\n</li>\n<li>\n<p>동기화를 내부에서 수행해 <code class=\"language-text\">thread-safe</code>한 클래스를 만드는 것</p>\n<ul>\n<li><code class=\"language-text\">java.concurrent</code>패키지</li>\n</ul>\n</li>\n</ul>\n<p>결론적으로 <strong>동기화 영역에서는 작업을 최소한으로 줄이는 것이 중요</strong>합니다. 오래 걸리는 작업이라면 동기화 영역 밖으로 옮기는 방법을 찾아보는 것이 중요합니다. 여러 스레드가 호출할 가능성이 있는 메서드가 정적 필드를 수정한다면 그 필드를 사용하기 전에 반드시 동기화해야합니다.</p>\n<p>가변 클래스를 설계할 때는 스스로 동기화해야할지를 고민해야합니다. 과도한 동기화를 피하는 것이 중요하며 합당한 이유가 있는 경우에만 내부에서 동기화하고 동기화 여부를 문서화합니다.</p>\n<br/>\n<h2 id=\"item-80-스레드보다는-executors-task-stream을-선호합니다\"><a href=\"#item-80-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%B3%B4%EB%8B%A4%EB%8A%94-executors-task-stream%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 80. 스레드보다는 executors, task, stream을 선호합니다.</h2>\n<p>스레드를 직접 다룰 수 있지만, <code class=\"language-text\">concurrent</code> 패키지를 이용하면 간단하게 코드를 작성할 수 있습니다.</p>\n<h3 id=\"executor-framework\"><a href=\"#executor-framework\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Executor Framework</h3>\n<p><code class=\"language-text\">java.util.concurrent</code> 패키지에는 인터페이스 기반의 유연한 태스크 실행 기능을 담은 실행자 프레임워크(Executor Framework)가 있습니다. 예를 들어 옛날에는 작업 큐를 작성하기 위해서 많은 코드를 작성했다면 현재는 간단하게 생성가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 작업 큐 생성</span>\n<span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span>newSingleThreadExecutor <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 작업 큐 실행</span>\nexec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 작업 큐 삭제</span>\nexec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>실행자 프레임워크는 여러 기능을 가지고 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">method</code></th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">get</code></td>\n<td>특정 태스크가 완료되기 까지를 기다림</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">invokeAny</code></td>\n<td>태스크 중 하나가 완료되는 것을 기다림</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">invokeAll</code></td>\n<td>모든 테스크가 종료되는 것을 기다림</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">awaitTermination</code></td>\n<td>실행자 서비스가 종료하기를 기다림</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ExecutorCompletionService</code></td>\n<td>완료된 태스크들의 결과를 차례로 받음</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ScheduledThreadPoolExecutor</code></td>\n<td>태스크를 특정 시간에 혹은 주기적으로 실행함</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><a href=\"https://madplay.github.io/post/prefer-executors-tasks-and-streams-to-threads\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처</a></li>\n</ul>\n<p>둘 이상의 스레드가 대기열의 요청을 처리하도록 하려면 <code class=\"language-text\">ThreadPool</code>을 쓰면 됩니다.</p>\n<p><code class=\"language-text\">Executors.newCachedThreadPool</code>은 가벼운 프로그램을 실행하는 서버에 적합합니다. 요청받은 task를 큐에 쌓지 않고 바로 처리하며, 사용 가능한 스레드가 없다면 즉시 스레드를 생성하여 처리합니다. 그러나 서버가 무겁다면 새로운 task가 도착할 때마다 다른스레드를 생성하기 때문에 최악입니다. 따라서, 무거운 프로덕션 서버에서는 <code class=\"language-text\">Executors.newFixedThreadPool</code>을 선택해서 스레드 개수를 고정하거나 <code class=\"language-text\">ThreadPoolExecutor</code>를 사용하는 것이 좋습니다.</p>\n<p>스레드를 직접 다루는 것은 항상 자제해야합니다. <strong>일반적으로는 스레드를 직접 다루기 보다는 실행자와 프레임워크를 사용하는 것이 중요</strong>합니다. 이렇게 사용하게 되면 작업 단위와 실행 매커니즘을 분리할 수 있습니다. (<code class=\"language-text\">Runnable</code>와 <code class=\"language-text\">Callable</code>)</p>\n<p>자바 7부터는 실행자 프레임워크는 <code class=\"language-text\">fork-join</code> task를 지원합니다. <code class=\"language-text\">ForkJoinTask</code>의 인스턴스는 작은 하위 task로 나눌 수 있고, <code class=\"language-text\">ForkJoinPool</code>을 구성하는 스레드들이 이 task들을 처리하며 일을 먼저 끝낸 스레드가 다른 스레드의 남은 task를 가져와서 대신 처리할 수도 있습니다. 이를 통해서 최대한의 CPU를 사용해서, 높은 처리량과 낮은 지연시간을 달성합니다.</p>\n<br/>\n<h2 id=\"item-81-wait와-notify보다는-동시성-유틸리티를-선호합니다\"><a href=\"#item-81-wait%EC%99%80-notify%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 81. <code class=\"language-text\">wait</code>와 <code class=\"language-text\">notify</code>보다는 동시성 유틸리티를 선호합니다.</h2>\n<p>이제는 <code class=\"language-text\">wait</code>와 <code class=\"language-text\">notify</code>보다 더 고수준이며 편리한 동시성 유틸리티를 사용하는 것이 좋습니다. <code class=\"language-text\">java.util.concurrent</code> 패키지의 고수준 유틸리티는 크게 실행자 프레임워크, 동시성 컬렉션, 동기화 장치로 나눌 수 있습니다.</p>\n<p><code class=\"language-text\">java.util.concurrent</code> 패키지는 고수준의 동시성 유틸리티를 제공합니다. 크게 세가지로 분류하면, <code class=\"language-text\">Executor Framework</code>, <code class=\"language-text\">Concurrent Collections</code>, <code class=\"language-text\">Synchronizers</code>로 나눌 수 있습니다.</p>\n<p>앞에서 <code class=\"language-text\">Executor Framework</code>를 설명했으므로, <code class=\"language-text\">Concurrent Collections</code>과 <code class=\"language-text\">Synchronizers</code>에 대해 설명할 수 있습니다.</p>\n<p><code class=\"language-text\">Concurrent Collections(동시 컬렉션)</code>와 같은 컬렉션 표준 인터페이스는 고성능의 동시성이 구현되어, <code class=\"language-text\">List</code>, <code class=\"language-text\">Queue</code>, <code class=\"language-text\">Map</code>등을 제공합니다. 이러한 구현은 내부적으로 동기화를 관리합니다. 그렇기 때문에 동시성 컬렉션에서 동시성을 제외하는 것은 불가능합니다. (외부에서 Lock을 사용하면 속도가 느려집니다.)</p>\n<p>동시성 컬렉션에서 동시 활동을 제외할 수 없기 때문에 이를 원자적으로 구성할 수 없습니다. 또한 이를 위해 여러 메서드등이 등장했습니다.</p>\n<p>예를 들어 <code class=\"language-text\">Map</code>의 <code class=\"language-text\">putIfAbsent(key, value)</code> 메서드가 대표적인 에시로 키가 없는 경우 매핑을 삽입합니다. 기존 값이 있으면 그 값을 반환하고 없는 경우에는 null을 반환하며, String의 <code class=\"language-text\">intern</code> 메서드를 아래처럼 흉내낼 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConcurrentMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>동기화된 컬렉션보다는 동시성 켈력션을 사용하는 것이 성능에 좋습니다. (Collections의 <code class=\"language-text\">synchronizedMap</code> 보다는 <code class=\"language-text\">ConcurrentHashMap</code>을 사용하는 것이 중요합니다.)</p>\n<p><code class=\"language-text\">Synchronizers</code>를 통하면, 스레드가 다른 스레드를 기다릴 수 있게 해서 서로의 task를 조율할 수 있도록 해줍니다. 대표적으로는 <code class=\"language-text\">CountDownLatch</code>와 <code class=\"language-text\">Semaphore</code>, <code class=\"language-text\">CyclicBarrier</code>, <code class=\"language-text\">Exchanger</code>등이 있습니다. 그외에도 강력한 <code class=\"language-text\">Phaser</code>가 있습니다.</p>\n<p><code class=\"language-text\">CountDownLatch</code>는 하나 이상의 스레드가 또 다른 하나 이상의 스레드 작업이 끝날때까지 기다립니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 동시 실행을 위한 간단한 프레임 워크</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Executor</span> executor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> concurrency<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Runnable</span> action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">CountDownLatch</span> ready <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>concurrency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">CountDownLatch</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">CountDownLatch</span> done  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>concurrency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> concurrency<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      ready<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Tell timer we're ready</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        start<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait till peers are ready</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        done<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Tell timer we're done</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  ready<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Wait for all workers to be ready</span>\n  <span class=\"token keyword\">long</span> startNanos <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  start<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// And they're off!</span>\n  done<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Wait for all workers to finish</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startNanos<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드에서 실행자는 concurrency로 지정한 값 만큼 스레드를 생성할 수 있어야합니다. 그렇지 않으면 메스드 수행이 끝나지 않는데 이를 스레드 기아 교착 상태라고 합니다. 또, 시간을 잴 때는 <code class=\"language-text\">System.currentTimeMillis</code>보다는 시스템 시간과 무관한 <code class=\"language-text\">System.nanoTime</code>을 사용하는 것이 좋습니다.</p>\n<p>새로운 코드라면 <code class=\"language-text\">wait</code>, <code class=\"language-text\">notify</code>가 아닌 동시성 유틸리티를 사용해야합니다. 하지만, 이를 사용해야하는 상황이면 반드시 <strong>동기화 영역 안에서만 사용해야하며, 항상 반복문 안에서 사용해야합니다.</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>조건이 충족되지 않은 경우<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    obj<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (락 넣어놓고, 깨어나면 잡습니다.)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 조건이 충족됐을 때의 동작을 수행합니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 반복문은 <code class=\"language-text\">wait</code> 호출 전후로 조건이 만족하는 지를 검사하는 역할을 합니다. 대기전에 조건을 검사하여, 조건이 충족되었다면 <code class=\"language-text\">wait</code>를 건너뛰게 하는 것은 <strong>응답 불가</strong> 상태를 예방하는 것입니다. 조건이 충족되었는데 스레드가 <code class=\"language-text\">notify</code>나 <code class=\"language-text\">notifyAll</code> 메서드로 먼저 호출한 경우 대기 상태로 빠지면 그 스레드를 다시 깨우지 못합니다.</p>\n<p>한편 대기 후에 조건을 검사하여 조건을 충족하지 않았을 때 다시 대기하게 하는 것은 잘못된 값을 계산하는 <strong>안전 실패</strong>를 막기 위한 조치입니다. 그런데 조건이 만족되지 않아도 스레드가 깨어날수 있는 상황이 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">notify</code>를 호출하여 대기 중인 스레드가 깨어나는 사이에 다른 스레드가 락을 거는 경우</li>\n<li>조건이 만족되지 않았으나 실수 혹은 악의적으로 <code class=\"language-text\">notify</code>를 호출하는 경우</li>\n<li>대기 중인 스레드 중 일부만 조건을 충족해도 <code class=\"language-text\">notifyAll</code>로 모든 스레드를 깨우는 경우</li>\n<li>대기 중인 스레드가 드물게 <code class=\"language-text\">notify</code> 없이 깨어나는 경우, 허위 각성(spurious wakeup)이라고 합니다.</li>\n</ul>\n<p>일반적으로는 <code class=\"language-text\">notify</code>보다는 <code class=\"language-text\">notifyAll</code>을 사용하는 것이 안전하며, <code class=\"language-text\">wait</code>는 <code class=\"language-text\">while</code>문 내부에서 호출하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-82-스레드-안전성-수준을-문서화합니다\"><a href=\"#item-82-%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%95%88%EC%A0%84%EC%84%B1-%EC%88%98%EC%A4%80%EC%9D%84-%EB%AC%B8%EC%84%9C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 82. 스레드 안전성 수준을 문서화합니다.</h2>\n<p>문서에서 synchronized 수정자를 찾아서, 메서드가 스레드로부터 안전한지 알 수 있다는 말을 들을 수 있는데 이는 꼭 맞는 말은 아닙니다. 스레드 안전성에서도 어느 정도의 수준인지 나뉘므로 멀티스레드 환경에서도 안전하게 사용하려면 지원하는 스레드 안전성 수준을 명시해야합니다.</p>\n<p>스레드의 안전성 수준을 높은 순서대로 보면 아래와 같습니다.</p>\n<ul>\n<li>\n<p>Immutable (변경 불가능)</p>\n<ul>\n<li>해당 클래스의 인스턴스는 마치 상수와 비슷하기에 외부 동기화가 필요없습니다.</li>\n<li><code class=\"language-text\">String</code>, <code class=\"language-text\">Long</code>, <code class=\"language-text\">BigInteger</code></li>\n</ul>\n</li>\n<li>\n<p>Unconditionally thread-safe (무조건적인 스레드 안전)</p>\n<ul>\n<li>해당 클래스의 인스턴스는 수정될 수 있지만 내부에서도 동기화되어 있어, 별도의 외부 동기화 없이 사용해도 안전합니다.</li>\n<li><code class=\"language-text\">AtomicLong</code>, <code class=\"language-text\">ConcurrentHashMap</code></li>\n</ul>\n</li>\n<li>\n<p>Conditionally thread-safe (조건부 스레드 안전)</p>\n<ul>\n<li>무조건적인 스레드 안전성과 비슷하지만 일부 메서드는 동시에 사용하려면 외부 동기화가 필요합니다.</li>\n<li><code class=\"language-text\">Collection.synchronized</code> 래퍼 메서드가 반환한 컬렉션</li>\n</ul>\n</li>\n<li>\n<p>Not thread-safe (스레드로부터 안전하지 않음)</p>\n<ul>\n<li>해당 클래스의 인스턴스는 수정될 수 있으며 동시에 사용하려면 각각의 메서드 호출을 클라이언트가 선택한 외부 동기화 로직으로 감싸야합니다.</li>\n<li><code class=\"language-text\">ArrayList</code>, <code class=\"language-text\">HashMap</code></li>\n</ul>\n</li>\n<li>\n<p>Thread-hostile (스레드와 적대적)</p>\n<ul>\n<li>외부 동기화를 사용하더라도, 멀티스레드 환경에서 안전하지 않습니다.</li>\n<li>일반저긍로 동시성을 고려하지 않는 클래스입니다.</li>\n</ul>\n</li>\n</ul>\n<p>따라서 동기화에 대한 문서화는 필요합니다. 조건부 스레드에 안전한 클래스는 주의해서 문서화해야합니다. 어떠한 순서로 호출할 때, 외부 동기화 로직이 필요한지 그리고 그 순서대로 호출시 어떤 락을 얻어야하는지를 작성해야합니다.</p>\n<p><code class=\"language-text\">Collections.synchronizedMap</code>의 API 문서는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>synchronizedMap <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>keySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동기화 된 블록에있을 필요가 없습니다.</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nsynchronous <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// s가 아닌 m에서 동기화 중입니다!</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key <span class=\"token operator\">:</span> s<span class=\"token punctuation\">)</span>\n    key<span class=\"token punctuation\">.</span>f <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>반환 타입만으로 알수 없는 경우, 객체에 대한 스레드 안전성을 문서화해야합니다.</p>\n<p>외부에 공개된 락(Lock)을 사용하는 경우, 유연한 코드를 만들 수 있지만 그만한 대가가 따릅니다. 클라이언트가 공개된 락을 통해 서비스 거부 공격(denial-of-service attack)을 수행할 수 있습니다. 이를 방지하려면 비공게 락 객체를 사용해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Private lock 객체 관용구-서비스 거부 공격을 막습니다.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>여기서 lock 멤버를 final로 선언한 이유 중 하나는 우연히 락 객체가 교체되는 상황을 방지합니다. 일반적인 락이나 <code class=\"language-text\">java.util.concurrent.locks</code> 패키지에서 가져온 락이 동일합니다. 이와 같이 구성하면서 하위 클래스에서 동끼화 로직을 깨는 것을 예방할 수 있습니다.</p>\n<p>모든 클래스는 신중하게 표현된 설명이나 스레드 안전성 어노테이션을 통해서 스레드의 안전성을 명확하게 문서화해야합니다. 조건부 스레드나, 스레드에 안전한 케이스 모두 lock을 문서화해야하고, <code class=\"language-text\">private final lock</code>을 사용하는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"item-83-지연-초기화는-신중히-사용합니다\"><a href=\"#item-83-%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0%ED%99%94%EB%8A%94-%EC%8B%A0%EC%A4%91%ED%9E%88-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 83. 지연 초기화는 신중히 사용합니다.</h2>\n<p><code class=\"language-text\">Lazy initialization(지연 초기화)</code>는 값이 필요할 때까지 필드 초기화를 지연하는 행동입니다. 지연 초기화는 주로 최적화이지만, 클래스 및 인스턴스 초기화에서 유해한 순환성을 깨는데 사용할 수도 있습니다.</p>\n<p>지연 초기화는 일종의 양날의 검이기 때문에 필요하지 않으면 수행하지 않는 것이 중요합니다. 지연 초기화된 필드에 액세스하는 비용을 증가시키면서 클래스 초기화 또는 인스턴스 생성 비용을 줄입니다. 따라서 초기화된 필드에 자주 액세스하는지에 따라 성능을 저하시킬 수 있습니다.</p>\n<p>대부분의 경우에 지연 초기화보다는 정상적인 초기화가 좋습니다. 특히, 여러 스레드가 있는 경우에는 지연 초기화가 까다롭습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 인스턴스 필드의 일반 초기화</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">FieldType</span> field <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>지연 초기화가 초기화의 순환성을 깰 것 같으면 <code class=\"language-text\">synchronized</code>를 단 접근자를 이용하는 것이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Lazy initialization of instance field - synchronized accessor</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">FieldType</span> <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    field <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> field<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>성능 때문에 정적 필드를 초기화해야 한다면, <strong>지연 초기화 홀더 클래스</strong>를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FieldHolder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">FieldType</span> field <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">FieldType</span> <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">FieldHolder</span><span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>성능을 위해 인스턴스 필드를 지연 초기화해야하는 경우, <strong>double-check(이중검사)</strong> 관용구를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반드시 volatile 로 선언</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">FieldType</span> <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">FieldType</span> result <span class=\"token operator\">=</span> field<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 첫 번째 검사(락 사용 안함)</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">This</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 두 번째 검사(락 사용)</span>\n      field <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> field<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>반복해서 초기화해도 상관 없는 인스턴스 필드를 지연 초기화할 때가 있는데 이를 때는 두 번째 검사를 생략해도 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반드시 volatile 로 선언</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">FieldType</span> field<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">FieldType</span> <span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">FieldType</span> result <span class=\"token operator\">=</span> field<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    field <span class=\"token operator\">=</span> result <span class=\"token operator\">=</span> <span class=\"token function\">computeFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>만역 field 타입이 <code class=\"language-text\">long</code>이나 <code class=\"language-text\">double</code>이 아닌 다른 기본 타입이면 단일 검사의 필드 선언에서 <code class=\"language-text\">volatile</code>을 없앨 수도 있습니다.</p>\n<p>이를 요약하면 <strong>대부분의 필드를 지연이 아니라 정상적으로 초기화해야합니다</strong>. 성능을 위하거나 유해한 초기화 순환성을 깨기 위해 필드를 느리게 초기화해야하는 경우, 지연 초기화 기술을 사용해야합니다.</p>\n<br/>\n<h2 id=\"item-84-프로그램의-동작을-스레드-스케줄러에-의존하지-않습니다\"><a href=\"#item-84-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9D%84-%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC%EC%97%90-%EC%9D%98%EC%A1%B4%ED%95%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 84. 프로그램의 동작을 스레드 스케줄러에 의존하지 않습니다.</h2>\n<h3 id=\"스레드-스케줄러에-의존하면-안됩니다\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC%EC%97%90-%EC%9D%98%EC%A1%B4%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드 스케줄러에 의존하면 안됩니다.</h3>\n<p>많은 스레드가 실행 가능할 때 스레드 스케줄러는 실행할 스레드와 시간을 결정합니다. 합리적인 운영 체제라면 결정을 공정하게 할려고 하지만 정책은 다를 수 있습니다. 따라서 잘 작성된 프로그램은 이 정책의 세부 사항에 의존하면 안됩니다. 즉, <strong>정확성이나 성능을 위해 스레드 스퀘줄러에 의존하는 프로그램은 이식할 수 없습니다.</strong></p>\n<h3 id=\"성능과-이식성이-좋은-프로그램을-작성합니다\"><a href=\"#%EC%84%B1%EB%8A%A5%EA%B3%BC-%EC%9D%B4%EC%8B%9D%EC%84%B1%EC%9D%B4-%EC%A2%8B%EC%9D%80-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>성능과 이식성이 좋은 프로그램을 작성합니다.</h3>\n<p>실행 가능한 스레드의 평균적인 수가 프로세스의 수보다 과도하게 많아서는 안됩니다. 그래야 스케줄러의 고민이 줄어듭니다. 실행 준비가 된 스레드들은 맡은 작업이 끝낼 때까지계속 실행되도록 만들어야합니다.</p>\n<p>실행 가능한 스레드 수를 적게 유지하려면 각 스레드가 작업을 완료한 후 다음 작업이 생길 때까지 대기하도록 하는 것입니다. 스레드는 당장 처리해야 할 작업이 없다면 실행되서는 안됩니다.</p>\n<p>예를 들어 실행자 프레임워크의 경우, 스레드 풀의 크기를 적절히 설정하고 작업을 짧게 유지하면 됩니다. 다만 너무 작으면 성능이 저하됩니다.</p>\n<h3 id=\"스레드는-절대-busy-wait-상태가-되면-안됩니다\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EB%8A%94-%EC%A0%88%EB%8C%80-busy-wait-%EC%83%81%ED%83%9C%EA%B0%80-%EB%90%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드는 절대 busy-wait 상태가 되면 안됩니다.</h3>\n<p>고유 객체의 상태가 바뀔 때까지 쉬지 않고 검사해서는 안됩니다. 바쁜 대기(busy waiting) 상태는 스레드 스케줄러의 변덕에 취약하며 프로세서에 큰 부하를 줘서 다른 유용한 작업의 양이 줄어듭니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 끔찍한 CountDownLatch 구현 - busy-waits incessantly!</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SlowCountDownLatch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SlowCountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token string\">\" &lt; 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 예제 코드를 수행하다 보면, <code class=\"language-text\">concurrent</code> 패키징 있는 <code class=\"language-text\">CountDownLatch</code>보다 훨씬 더 느린 속도를 볼 수 있습니다. 이와 같이 하나 이상의 스레드가 필요도 없이 실행 가능한 상태인 경우 성능과 이식성이 저하됩니다.</p>\n<p><code class=\"language-text\">Thread.yield</code>는 동작하지 않는 스레드가 대기 상태가 되는 등 다른 스레드에게 실행을 양보하는 것을 의미합니다. 하지만 이 경우 특정 스레드가 cpu를 할당받지 못해 느려질 수 있으므로 <code class=\"language-text\">yield</code> 메서드를 쓰는 것은 피해야합니다.</p>\n<p>이러한 경우는 테스트할 수단도 없으며 성능이 좋아지더라도 이식성은 나빠질 수 있습니다. 차라리 애플리케이션 구조를 바꿔 동시에 실행 가능한 스레드의 개수를 적게 만드는 것이 좋습니다. 스레드 우선 순위를 조절하는 것도 위험합니다. (이는 이식성에서 가장 나쁜 특성입니다.)</p>\n"}},{"node":{"title":"[Java] Effective Java, Serialization","path":"/11-java-effective-java/","date":"24. May 2021","timeToRead":28,"description":"Effective Java 책 중, ch12. 직렬화에 대해 정리합니다.","content":"<h1 id=\"serialization\"><a href=\"#serialization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Serialization</h1>\n<p>아래에서는 자바 직렬화의 위험성과 이를 최소화하는 방법을 중점으로 합니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/java-serialize/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바 직렬화란</a></li>\n</ul>\n<h2 id=\"item-85-자바-직렬화의-대안을-찾습니다\"><a href=\"#item-85-%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94%EC%9D%98-%EB%8C%80%EC%95%88%EC%9D%84-%EC%B0%BE%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 85. 자바 직렬화의 대안을 찾습니다.</h2>\n<p>최초의 자바에 직렬화가 추가되었을 때는 다소 위험한 것으로 알려졌습니다. 이는 보이지 않는 생성자였고 API와 구현 사이의 경계가 흐려졌습니다. 또한 정확성, 성능, 보안 및 유지 관리 문제가 발생할 가능성이 있어서 입니다.</p>\n<p>그러나 근본적인 자바 직렬화의 위험은 아래와 같습니다.</p>\n<ul>\n<li>공격 범위가 너무 넓습니다.</li>\n<li>지속적으로도 더 넓어져서 방어하기도 어렵습니다.</li>\n</ul>\n<p>이러한 문제들의 원인은 <code class=\"language-text\">OutputInputStream</code>의 <code class=\"language-text\">readObject</code> 메서드가 호출되면서 객체 그래프가 역직렬화(deserialization)가 되기 때문입니다.</p>\n<p>바이트 스트림을 역직렬화하는 과정에서 <code class=\"language-text\">readObject</code> 메서드는 그 타입들 안의 모드 코드를 수행할 수 있습니다. (즉, 타입들의 코드 전체가 악의적인 공격 범위에 들어갑니다.)</p>\n<p><strong>역직렬화 과정에서 호출되어 잠재적인 위험한 동작을 수행하는 메서드</strong>를 <strong>가젯(gadget)</strong> 이라고 합니다. 하나의 가젯이 여러개의 가젯이 마음대로 코드를 수행할 수 있기 때문에 아주 신중하게 제작된 바이트 스트림만 역직렬화를 해야합니다.</p>\n<p>역직렬화에 시간이 오래걸리는 짧은 스트림을 <strong>역직렬화 폭탄(deserialization bomb)</strong> 이라고 합니다. 아래는 그 예시입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">bomb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> s1 <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    t1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Make t1 unequal to t2</span>\n    s1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  s1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  s2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    s1 <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">;</span>\n    s2 <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Method omitted for brevity</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 호출해버리면, 깊이가 100단계까지 호출됩니다. 이를 역직렬화 하려면 2^100 번 넘게 호출해야합니다.</p>\n<p>이 문제를 해결하기 위해서는 자바 직렬화 대신 <strong>크로스-플랫폼 구조화된 데이터 표현 방법</strong> 을 사용하는 것이 좋습니다. 예로는 JSON, protocol buffer 등이 있습니다. 프로토콜 버퍼는 이진 표현이라 효율이 훨씬 더 높으며, JSON은 텍스트 기반이라 사람이 읽을 수 있는 장점이 있습니다.</p>\n<p>직렬화를 대체할 수 없다면, 반드시 <strong>신뢰할 수 있는 데이터만 역직렬화</strong> 해야합니다. 직렬화를 피할 수 없고, 역직렬화한 데이터가 안전하지 확실할 수 없다면 객체 역직렬화 필터링을 사용하면 됩니다.</p>\n<p>다만, 직렬화는 위험 요소가 많습니다. 시간과 노력을 쓰더라도, JSON 등으로 마이그레이션하는 것을 추천합니다.</p>\n<br/>\n<h2 id=\"item-86-serializable을-구현할지에-대해-신중히-결정합니다\"><a href=\"#item-86-serializable%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%A0%EC%A7%80%EC%97%90-%EB%8C%80%ED%95%B4-%EC%8B%A0%EC%A4%91%ED%9E%88-%EA%B2%B0%EC%A0%95%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 86. <code class=\"language-text\">Serializable</code>을 구현할지에 대해 신중히 결정합니다.</h2>\n<p>직렬화 가능한 클래스는 <code class=\"language-text\">Serializable</code>을 구현하면 됩니다. 이를 구현하는 것은 싶지만, 구현을 했을 때의 대가는 매우 비쌉니다. 구현한 순간부터 많은 위험성을 가지게 되고, 확장성을 잃게 됩니다.</p>\n<h3 id=\"직렬화-클래스의-단점\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화 클래스의 단점</h3>\n<h4 id=\"1-릴리즈가-된-이후-유연성을-감소합니다\"><a href=\"#1-%EB%A6%B4%EB%A6%AC%EC%A6%88%EA%B0%80-%EB%90%9C-%EC%9D%B4%ED%9B%84-%EC%9C%A0%EC%97%B0%EC%84%B1%EC%9D%84-%EA%B0%90%EC%86%8C%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 릴리즈가 된 이후, 유연성을 감소합니다.</h4>\n<p><code class=\"language-text\">Serializable</code>을 구현하면 직렬화 형태도 하나의 공개 API가 됩니다. 직렬화 형태는 적용 당시 클래스의 내부 구현 방식에 종속적입니다. 또한 클래스의 private과 package 인스턴스 필드마저 API로 공개되기 때문에 캡슐화도 깨집니다.</p>\n<p>클래스의 내부 구현을 수정할 시, 원래의 직렬화 형태와 달라집니다. 구버전의 인스턴스를 직렬화한 후 신버전 클래스로 역직렬화를 시도하면 오류가 발생합니다.</p>\n<p>한편 수정을 어렵게 만드는 요소로 <code class=\"language-text\">SerialVersionUID</code>를 뽑을 수 있습니다. 모든 직렬화된 클래스는 고유 식별 번호를 부여받으며, 클래스 내부에 직접 명시하지 않는 경우에 시스템이 런타임에 자동으로 생성됩니다. <code class=\"language-text\">SUID</code>를 생성할 때는 클래스의 이름, 구현하도록 선언한 인터페이스 등이 고려됩니다. 따라서 나중에 수정한다면 <code class=\"language-text\">SUID</code> 값도 변하게 됩니다. 이러한 자동으로 생성된 값은 호환성이 쉽게 깨집니다.</p>\n<h4 id=\"2-버그와-보안에-취약합니다\"><a href=\"#2-%EB%B2%84%EA%B7%B8%EC%99%80-%EB%B3%B4%EC%95%88%EC%97%90-%EC%B7%A8%EC%95%BD%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 버그와 보안에 취약합니다.</h4>\n<p>자바에서는 객체를 생성자를 통해서 만듭니다. 그러나 직렬화는 이러한 언어의 기본 방식을 우회하면서 객체를 생성합니다. 역직렬화는 일반 생성자의 문제가 발생하는 숨은 생성자입니다. 역직렬화를 사용하면 불변식이 깨질 수 있으며 허가되지 않은 접근에 쉽게 노출될 수 있습니다.</p>\n<h4 id=\"3-테스트-부담-요소가-증가합니다\"><a href=\"#3-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%B6%80%EB%8B%B4-%EC%9A%94%EC%86%8C%EA%B0%80-%EC%A6%9D%EA%B0%80%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 테스트 부담 요소가 증가합니다.</h4>\n<p>직렬화 가능한 클래스가 수정되면, 새로운 버전의 인스턴스를 직렬화 한후에 구버전으로 역직렬화가 가능한지 테스트해야합니다. 물론 그 반대 경우도 테스트 해야합니다.</p>\n<h3 id=\"serializable-구현\"><a href=\"#serializable-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Serializable</code> 구현</h3>\n<p><code class=\"language-text\">Serializable</code> 구현 여부는 쉽게 결정할 것이 아닙니다. 클래스를 설계할 때마다 따르는 이득과 비용을 잘 고려해야합니다. 에를 들어 <code class=\"language-text\">BigInteger</code>과 <code class=\"language-text\">Instant</code> 같은 값 클래스와 컬렉션 클래스는 <code class=\"language-text\">Serializable</code>을 구현하였으며 스레드 풀처럼 동작하는 객체를 표현한 클래스는 대부분 구현하지 않았습니다.</p>\n<p>따라서 아<code class=\"language-text\">Serializable</code>을 구현하면 안되는 경우가 많습니다.</p>\n<h4 id=\"상속-목적으로-설계된-클래스와-대부분의-인터페이스는-serializable을-구현하면-안됩니다\"><a href=\"#%EC%83%81%EC%86%8D-%EB%AA%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%84%A4%EA%B3%84%EB%90%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EB%8C%80%EB%B6%80%EB%B6%84%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-serializable%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상속 목적으로 설계된 클래스와 대부분의 인터페이스는 <code class=\"language-text\">Serializable</code>을 구현하면 안됩니다.</h4>\n<p>클래스를 확장하거나 인터페이스를 구현하는 대상에게 위험성을 제공합니다. 하지면 <code class=\"language-text\">Serializable</code>를 구현한 클래스만 지원하는 프레임워크를 사용해야한다면 어쩔 수 없습니다. 이러한 경우처럼 직렬화와 확장이 모두 가능한 클래스를 만들어야한다면 하위 클래스에서 <code class=\"language-text\">finalize</code> 메서드를 재정의를 방지해야합니다. 일반적으로는 재정의하고 <code class=\"language-text\">final</code> 키워드를 붙이면 되며, 인스턴스 필드 중 기본값으로 초기화되어서 위배되는 불변식이 있는 경우에는 아래와 같은 메서드를 추가합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObjectNoData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InvalidObjectException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidObjectException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stream data required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"내부-클래스는-직렬화를-구현하면-안됩니다\"><a href=\"#%EB%82%B4%EB%B6%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EC%A7%81%EB%A0%AC%ED%99%94%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>내부 클래스는 직렬화를 구현하면 안됩니다.</h4>\n<p>내부 클래스는 바깥 인스턴스의 참조와 유효 범위에 속한 지역변수를 저장하기 위한 필드가 필요합니다. 그렇기에 기본 직렬화 형태가 명확하지 않습니다. 이 필드들은 컴파일러가 자동으로 추가를 하는데, 이 필드들이 어떻게 추가될 지 모릅니다. (정적 멤버 클래스는 다릅니다.)</p>\n<br/>\n<h2 id=\"item-87-커스텀-직렬화-형태를-고려합니다\"><a href=\"#item-87-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%A7%81%EB%A0%AC%ED%99%94-%ED%98%95%ED%83%9C%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 87. 커스텀 직렬화 형태를 고려합니다.</h2>\n<p>클래스가 <code class=\"language-text\">Serializable</code> 을 구현하고 기본 직렬화 형태를 사용한다면 현재의 구현에 종속적이게 됩니다. 즉, 기본 직렬화 형태를 버릴 수 없게 됩니다. 따라서 유연성, 성능, 정확성과 같은 측면을 고민한 후에 합당하다고 생각되는 경우에 한해 기본 직렬화 형태를 사용해야합니다.</p>\n<h3 id=\"이상적인-직렬화-형태\"><a href=\"#%EC%9D%B4%EC%83%81%EC%A0%81%EC%9D%B8-%EC%A7%81%EB%A0%AC%ED%99%94-%ED%98%95%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이상적인 직렬화 형태</h3>\n<p>기본 직렬화 형태는 객체가 포함한 데이터 뿐만 아니라, 그 객체를 시작으로 접근할 수 있는 모든 객체와 객체들의 연결된 정보까지 나타냅니다. 이상적인 직렬화의 형태는 물리적인 모습과 독립된 논리적인 모습만을 표현해야합니다. 객체의 물리적 표현과 논리적 내용이 같다면 기본 직렬화 형태를 선택해도 무방합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Name</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@serial</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@serial</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@serial</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> middleName<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이름은 논리적으로 성, 이름, 중간 이름으로 3개의 문자열로 구성되는데 위 클래스의 인스턴스 필드들은 논리적인 구성 요소를 정확하게 반영합니다.</p>\n<p>기본 직렬화 형태가 적합해도 불변식 보장과 보안을 위해서 <code class=\"language-text\">readObject</code> 메서드를 제공해야하는 경우가 많습니다. 앞에 있는 코드의 경우, lastName과 firstName 필드는 null이 아님을 <code class=\"language-text\">readObject</code> 메서드가 보장해야합니다.</p>\n<h3 id=\"부적절한-직렬화-형태\"><a href=\"#%EB%B6%80%EC%A0%81%EC%A0%88%ED%95%9C-%EC%A7%81%EB%A0%AC%ED%99%94-%ED%98%95%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>부적절한 직렬화 형태</h3>\n<p>객체의 물리적 표현과 논리적 내용이 같은 경우, 기본 직렬화 형태를 선택해도 됩니다. 그러나 적절하지 않는 경우도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringList</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Entry</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Entry</span> previous<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ... 생략</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 클래스 경우에는 여러 문제점이 있습니다. 논리적으로 문자열을 표현했고 물리적으로는 문자열들을 이중 연결 리스트로 표현했습니다. 이 클래스에 기본 직렬화 형태를 사용하면 각 노드에 연결된 노드들까지 모두 표현하기 때문에 다음과 같은 문제가 발생합니다.</p>\n<ul>\n<li>\n<p>공개 API가 현재의 내부 표현 방식에 종속적이게 됩니다.</p>\n<ul>\n<li>향후 버전에서 연결 리스트를 사용하지 않더라도, 관련 처리가 필요해집니다.</li>\n<li>코드를 제거할 수가 없습니다.</li>\n</ul>\n</li>\n<li>\n<p>사이즈가 큽니다</p>\n<ul>\n<li>기본 직렬화를 사용할 때 각 노드의 연결 정보까지 모두 포함될 것입니다.</li>\n<li>이는 내부 구현이며 직렬화 형태에 가치가 없으며 네트워크 전송 속도를 느리게 합니다.</li>\n</ul>\n</li>\n<li>\n<p>시간이 많이 걸립니다.</p>\n<ul>\n<li>직렬화 로직은 객체 그래프의 위상에 관한 정보를 알 수 없으니, 직접 순회할 수 밖에 없습니다.</li>\n</ul>\n</li>\n<li>\n<p>스택 오버플로를 발생시킵니다.</p>\n<ul>\n<li>기본 직렬화 형태는 객체 그래프를 재귀 순회하며, 호출 정도가 많아지면 스택이 감당을 하지 못합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"합리적인-직렬화-형태\"><a href=\"#%ED%95%A9%EB%A6%AC%EC%A0%81%EC%9D%B8-%EC%A7%81%EB%A0%AC%ED%99%94-%ED%98%95%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>합리적인 직렬화 형태</h3>\n<p>이를 수정해서 합리적인 직렬화 형태는 다음과 같습니다. 단순히 리스트가 포함한 문자열의 개수와 문자열만 있는 것이 좋습니다. 위의 부적절한 코드를 개선한 형태입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringList</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Entry</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Entry</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Entry</span> previous<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectOutputStream</span> stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">defaultWriteObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      s<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> numElements <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numElements<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ... 생략</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드에서 특별한 키워드인 <code class=\"language-text\">transient</code>를 확인할 수 있습니다. <code class=\"language-text\">transient</code> 키워드가 붙은 필드는 기본 직렬화 형태에 포함되지 않습니다. 클래스의 모든 필드가 <code class=\"language-text\">transient</code>로 선언되어 있더라도 <code class=\"language-text\">writeObject</code> 와 <code class=\"language-text\">readObject</code> 메서드는 <code class=\"language-text\">defaultWriteObject</code>와 <code class=\"language-text\">defaultReadObject</code> 메서드를 호출합니다. 직렬화 명세에서는 이 과정을 무조건 진행할 것을 요구합니다. 이렇게 함으로써 향후 릴리즈에서 <code class=\"language-text\">transient</code>가 아닌 필드가 추가되더라도 상위와 하위 모두 호환이 가능하기 때문입니다.</p>\n<p>신버전의 인스턴스를 직렬화하고 구버전으로 역직렬화할시, 새로 추가된 필드는 무시됩니다. 그리고 구버전의 <code class=\"language-text\">readObject</code> 메서드에서 <code class=\"language-text\">defaultReadObject</code>를 호출하지 않는다면 역직렬화 과정에서 <code class=\"language-text\">StreamCorruptedException</code>이 발생합니다.</p>\n<p>기본 직렬화 여부에 관계없이 <code class=\"language-text\">defaultWriteObject</code> 메서들 호출하면 <code class=\"language-text\">transient</code>로 선언하지 않은 모든 필드는 직렬화됩니다. 따라서, <code class=\"language-text\">transient</code> 키워드를 선언해도 되는 필드라면 붙이는 것이 좋습니다. 즉, 논리적 상태와 무관한 필드라고 판단될 때 생략하는 것이 좋습니다.</p>\n<p>기본 직렬화를 사용한다면, 역직렬화를 할 때는 <code class=\"language-text\">transient</code> 필드는 기본 값으로 초기화됩니다. 기본 값을 변경해야 하는 경우에는 <code class=\"language-text\">readObject</code> 메서드에서 <code class=\"language-text\">defaultReadObject</code> 메서드를 호출한 다음 원하는 값으로 지정하면 됩니다. 아니면 값을 처음 사용할 때 초기화해도 됩니다.</p>\n<p>기본 직렬화 사용 여부와 상관없이 직렬화에도 동기화 규칙을 적용해야합니다. 예를 들어 모든 메서드를 <code class=\"language-text\">synchronized</code> 로 선언하여 스레드에 안전하게 만든 객체에 기본 직렬화를 사용한다면 <code class=\"language-text\">writeObject</code> 도 아래처럼 수정해야 합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectOutputStream</span> stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOExceptions</span> <span class=\"token punctuation\">{</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">defaultWriteObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>어떤 직렬화 형태를 선택하더라도, 직렬화가 가능한 클래스에는 <code class=\"language-text\">SerialVersionUID(SUID)</code> 를 명시적으로 선언해야 합니다. 물론 선언하지 않더라도 자동 생성되지만 런타임에 이 값을 생성하느라 복잡한 연산을 수행해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 무작위로 고른 long 값</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">0204L</span><span class=\"token punctuation\">;</span></code></pre>\n<p>다만, SUID가 꼭 유니크할 필요가 없습니다. 다만 이 값이 변경되면 기존 버전 클래스와의 호환을 끊게 됩니다. 따라서 호환성을 끊는 경우가 아니라면 SUID 값을 변경해서는 안됩니다.</p>\n<br/>\n<h2 id=\"item-88-readobject-메서드는-방어적으로-작성합니다\"><a href=\"#item-88-readobject-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%EB%B0%A9%EC%96%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 88. <code class=\"language-text\">readObject</code> 메서드는 방어적으로 작성합니다.</h2>\n<p>지난 Item 50에서는 적시에 방어적 복사본을 만들라는 규칙이 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * <span class=\"token keyword\">@param</span>  <span class=\"token parameter\">start</span> the beginning of the period\n   * <span class=\"token keyword\">@param</span>  <span class=\"token parameter\">end</span> the end of the period; must not precede start\n   * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalArgumentException</span></span> if start is after end\n   * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">NullPointerException</span></span> if start or end is null\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end   <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n      start <span class=\"token operator\">+</span> <span class=\"token string\">\" after \"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> end <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> start <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Remainder omitted</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>물리적 표현과 논리적 표현이 같기 때문에 기본 직렬화 형태를 사용해도 된다고 판단됩니다. 따라서 <code class=\"language-text\">Serializable</code>만 구현하면 될 것 같습니다. 하지만 <code class=\"language-text\">readObject</code>가 새로운 public 생성자이기 때문에 불변식을 보장할 수 없습니다.</p>\n<p><code class=\"language-text\">readObject</code> 메서드도 생성자와 같은 수준으로 주의해야합니다. 인수가 유효한지 검사하고, 매개변수를 방어적으로 복사해야합니다. 그렇지 않으면 불변식을 깨뜨리는 공격에 취약합니다.</p>\n<p><code class=\"language-text\">readObject</code> 메서드는 매개변수로 바이트 스트림을 받는 생성자로 볼 수 있습니다. 일반적으로 보통 바이트 스트림은 정상적으로 생성된 인스턴스를 직렬화해서 만들어집니다. 하지만, 불변을 깨트릴 목표로 만들어진 바이트 스트림을 받으면 문제가 발생합니다. 이러한 경우는 정상적으로 만들어 낼 수 없는 객체를 생성합니다.</p>\n<p>아래는 그 잘못된 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BogusPeriod</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Byte stream couldn't have come from a real Period instance!</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serializedForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xed</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x69</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xf8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x2b</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x46</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xc0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xf4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Period</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Period</span><span class=\"token punctuation\">)</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>serializedForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 바이트 스트림으로부터 객체를 만들어 변환합니다.</span>\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>sf<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드를 실행하면, 불변식이 깨지는 객체가 만들어집니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">Fri Jan 01 12:00:00 PST 1999 - Sun Jan 01 12:00:00 PST 1984</code></pre>\n<p>이를 방어하기 위해서는 <code class=\"language-text\">readObject</code> 메서드가 <code class=\"language-text\">defaultReadObject</code>를 호출하게 한 후 역직렬화된 객체가 유효한지 검사해야합니다. 여기서 유효성 검사에 실패한다면 <code class=\"language-text\">InvalidObjectException</code>을 던져 잘못된 역직렬화가 발생하는 것을 막아야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 불변식을 만족하는지 검사한다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidObjectException</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token string\">\"after\"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 이러한 코드에서도 바이트 스트림 끝에 <code class=\"language-text\">private Date</code> 필드로의 참조를 추가하면 가변적인 Period 인스턴스를 만들어 낼 수 있습니다. 공격자가 역직렬화를 통해서 바이트 스트림 끝의 참조 값을 읽으면 Period의 내부 정보를 얻을 수 있습니다. 이 참조를 이용해서 인스턴스를 수정할 수 있기 때문에 불변이 아닙니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MutablePeriod</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Period</span> period<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">MutablePeriod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">ByteArrayOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">ObjectOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>bos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      out<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">/*\n       * 악의적인 '이전 객체 참조', 즉 내부 Date 필드로의 참조를 추가한다.\n       * 상세 내용은 자바 객체 직렬화 명세의 6.4절 참조.\n       */</span>\n      <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ref <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0x71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 시작(start) 필드</span>\n      ref<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 참조 #4</span>\n      bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 종료(end) 필드</span>\n\n      <span class=\"token class-name\">ObjectInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>bos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      period <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Period</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      start <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">MutablePeriod</span> mp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutablePeriod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Period</span> p <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>period<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> pEnd <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 시간을 되돌린다.</span>\n    pEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 60년대로 돌아간다.</span>\n    pEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token number\">69</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">Wed Nov 22 00:21:29 PST 2017 - Wed Nov 22 00:21:29 PST 1978\nWed Nov 22 00:21:29 PST 2017 - Sat Nov 22 00:21:29 PST 1969</code></pre>\n<p>해당 원인은 <code class=\"language-text\">Period</code>의 <code class=\"language-text\">readObject</code> 메서드가 방어적 복사를 하지 않음에 있습니다. <strong>역직렬화를 할 때는 클라이언트가 접근해서는 안되는 객체 참조를 갖는 필드는 모두 방어적으로 복사를 해야합니다.</strong></p>\n<p><code class=\"language-text\">Period</code>를 공격으로부터 보호하기 위해 방어적 복사를 유효성 검사보다 먼저 수행해야합니다. 또한 Date의 <code class=\"language-text\">clone</code> 메서드는 사용되지 않습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n  s<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 가변 요소들을 방어적으로 복사한다.</span>\n  start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 불변식을 만족하는지 검사한다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">compareto</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidObjectException</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token string\">\" after \"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">Fri May 31 01:01:06 KST 2019 - Fri May 31 01:01:06 KST 2019\nFri May 31 01:01:06 KST 2019 - Fri May 31 01:01:06 KST 2019</code></pre>\n<p>한편 <code class=\"language-text\">final</code> 필드는 방어적 복사가 불가능하니 주의해야합니다. 따라서 start와 end 필드에서 <code class=\"language-text\">final</code> 키워드를 제거해야합니다. 공격을 받는 것보다는 더 나은 방향입니다.</p>\n<p><code class=\"language-text\">transient</code> 필드를 제외한 모든 필드의 값을 매개변수로 받아 유효성 검사를 없이도 필드에 대입하는 public 생성자를 추가해도 괜찮다고 판단되면 기본 <code class=\"language-text\">readObject</code>를 사용해도 됩니다. 아닌 경우에는 직접 <code class=\"language-text\">readObject</code> 메서드를 정의해서 생성자에서 수행했어야 할 모든 유효성 검사와 방어적 복사를 수행해야합니다. 이때 가장 추천되는 것은 <code class=\"language-text\">직렬화 프록시 패턴</code>을 사용하는 것입니다. 이는 역직렬화를 안전하게 만드는데 필요한 노력을 줄여줍니다,</p>\n<p><code class=\"language-text\">final</code>이 아닌 직렬화 가능 클래스라면 생성자처럼 <code class=\"language-text\">readObject</code> 메서드도 재정의(Overriding) 가능한 메서드를 호출해서는 안됩니다. 하위 클래스의 상태가 완전히 직렬화되기 전에 하위 클래스에서 재정의된 메서드가 실행되기 때문입니다.</p>\n<p>결론적으로 다음과 같이 요약할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">readObject</code> 메서드를 작성할 때는 언제나 public 생성자를 작성하는 자세로 임합니다.</li>\n<li>\n<p><code class=\"language-text\">readObject</code> 메서드는 어떤 바이트 스트림이 넘어오더라도 유효한 인스턴스를 만들어야합니다.</p>\n<ul>\n<li>이 바이트 스트림이 항상 직렬화된 인스턴스라고 믿으면 안됩니다.</li>\n</ul>\n</li>\n<li>\n<p>안전한 <code class=\"language-text\">readObject</code> 메서드를 작성하기 위해서는 아래를 준수합니다.</p>\n<ul>\n<li><code class=\"language-text\">private</code> 여야 하는 객체 참조 필드는 각 필드가 가리키는 객체를 방어적으로 복사합니다.</li>\n<li>모든 불변식을 검사하고 어긋난다면, <code class=\"language-text\">InvalidObjectException</code>을 던집니다.</li>\n<li>역직렬화 이후에 객체 그래프 전체의 유효성을 검사해야 한다면 <code class=\"language-text\">ObjectInputValidation</code>을 던집니다.</li>\n<li>오버라이딩이 가능한 메서드는 호출하지 않는 것이 좋습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"item-89-인스턴스-수를-통제해야한다면-readresolve보다는-enum-타입을-사용합니다\"><a href=\"#item-89-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%88%98%EB%A5%BC-%ED%86%B5%EC%A0%9C%ED%95%B4%EC%95%BC%ED%95%9C%EB%8B%A4%EB%A9%B4-readresolve%EB%B3%B4%EB%8B%A4%EB%8A%94-enum-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 89. 인스턴스 수를 통제해야한다면 <code class=\"language-text\">readResolve</code>보다는 enum 타입을 사용합니다.</h2>\n<p>앞에서 싱글톤 패턴의 예저를 보았는데 이 방법은 <code class=\"language-text\">public static final</code> 필드를 사용하는 방식입니다. 생성자는 <code class=\"language-text\">private</code> 접근 지정자로 선언하여 외부로부터 감추고, <code class=\"language-text\">INSTANCE</code>를 초기화할 때 한 번만 호출됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Elvis</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>하지만, 이 클래스는 <code class=\"language-text\">Serializable</code>을 구현하게 되는 순간 싱글턴이 아닙니다. 기본 직렬화를 쓰지 않거나 명시적인 <code class=\"language-text\">readObject</code> 메서드를 제공해도 소용이 없습니다. 어떤 <code class=\"language-text\">readObject</code> 메서드를 사용해도 초기화될 때 만들어진 인스턴스와 다른 인스턴스를 반환하게 됩니다.</p>\n<p>이때 <code class=\"language-text\">readResolve</code> 메서드를 사용하면, <code class=\"language-text\">readObject</code> 메서드가 만든 인스턴스를 다른 것으로 대체할 수 있습니다. 이때 <code class=\"language-text\">readObject</code>가 만들어낸 인스턴스는 가비지 컬렉터의 대상이 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>한편 여기서 나온 <code class=\"language-text\">Elvis</code> 인스턴스의 직렬화 형태는 아무런 실 데이터를 가질 필요가 없으니 모든 인스턴스 필드는 <code class=\"language-text\">transient</code>로 선언해야합니다. 그러므로 <code class=\"language-text\">readResolve</code> 메서드를 인스턴스의 통제 목적으로 이용한다면 모든 필드는 <code class=\"language-text\">transient</code>로 선언하는 것이 좋습니다. 그렇지 않으면 역직렬화 과정에서 역직렬화된 인스턴스를 가져와서 싱글턴이 깨지게 됩니다.</p>\n<p>이를 해결하는 방법은 <code class=\"language-text\">enum</code>입니다. 자바가 선언한 상수 외에 다른 객체가 없음을 보장해주기 때문입니다. 물론 <code class=\"language-text\">AccessibleObject.setAccessible</code> 메서드와 같은 리플렉션을 사용하는 경우는 예외입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  INSTANCE<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>물론 인스턴스 통제를 위해 <code class=\"language-text\">readResolve</code> 메서드를 사용하는 것이 중요할 때도 있습니다. 직렬화 가능 인스턴스 통제 클래스를 작성해야 할 때, 컴파일 타임에는 어떤 인스턴스들이 있는지 모를 수 있습니다. 이때는 <code class=\"language-text\">Enum</code> 타입으로 표현하는 것이 불가능하기 때문에 <code class=\"language-text\">readResolve</code> 메서드를 사용할 수 밖에 없습니다.</p>\n<br/>\n<h2 id=\"item-90-직렬화된-인스턴스-대신-직렬화-프록시-사용을-검토합니다\"><a href=\"#item-90-%EC%A7%81%EB%A0%AC%ED%99%94%EB%90%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%8C%80%EC%8B%A0-%EC%A7%81%EB%A0%AC%ED%99%94-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%82%AC%EC%9A%A9%EC%9D%84-%EA%B2%80%ED%86%A0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 90. 직렬화된 인스턴스 대신 직렬화 프록시 사용을 검토합니다.</h2>\n<p><code class=\"language-text\">Serializable</code>을 <code class=\"language-text\">implements</code> 하게 되면, 정상적인 인스턴스 생성 방법인 생성자 이외의 방법이 생기게 됩니다. 버그와 보안 문제가 생길 가능성이 커진다는 것입니다. 하지만 <strong>직렬화 프록시 패턴</strong>을 사용하면 이를 크게 줄일 수 있습니다.</p>\n<h3 id=\"직렬화-프록시-패턴\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94-%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화 프록시 패턴</h3>\n<p>바깥 클래스의 논리적 상태를 표현하는 중첩 클래스를 설계해서 <code class=\"language-text\">private static</code>으로 선언합니다. 여기서 중첩 클래스가 <strong>직렬화 프록시</strong> 입니다. 중첩 클래스의 생성자는 단 하나여야하며, 바깥 클래스를 매개변수로 받아야합니다. 단순히 인수로 넘어온 인스턴스의 데이터를 복사해야합니다. 일관성 검사 또는 방어적 복사도 필료가 없습니다. 아만, 바깥 클래스와 직렬화 프록시 모두 <code class=\"language-text\">Serializable</code>을 구현해야합니다.</p>\n<p>이러한 직렬화 프록시 패턴의 장점은 아래와 같습니다.</p>\n<ul>\n<li>멤버 필드를 <code class=\"language-text\">final</code>로 선언할 수 있기 때문에 진정한 불변으로 만들 수 있습니다.</li>\n<li>역직렬화한 인스턴스와 원래의 직렬화된 클래스가 달라도 정상적으로 동작합니다.</li>\n</ul>\n<p>다만 직렬화 프록시 패턴에도 한계가 있습니다.</p>\n<ul>\n<li>클라이언트가 마음대로 확장할 수 있는 클래스에는 적용할 수 없습니다.</li>\n<li>객체가 서로 참조하는 경우(순환이 있는 경우)에는 적용할 수 없습니다.</li>\n<li>방어적 복사보다 상대적으로 속도가 느립니다.</li>\n</ul>\n"}},{"node":{"title":"[Java] Effective Java, Exceptions","path":"/09-java-effective-java/","date":"24. May 2021","timeToRead":17,"description":"Effective Java 책 중, ch10. 예외에 대해 정리합니다.","content":"<h1 id=\"exceptions\"><a href=\"#exceptions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Exceptions</h1>\n<h2 id=\"item-69-예외는-진짜-예외-상황에서만-사용합니다\"><a href=\"#item-69-%EC%98%88%EC%99%B8%EB%8A%94-%EC%A7%84%EC%A7%9C-%EC%98%88%EC%99%B8-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 69. 예외는 진짜 예외 상황에서만 사용합니다.</h2>\n<p>예외는 꼭 필요한 경우에만 사용해야합니다.아래는 잘못 사용한 케이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    range<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">climb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>예외를 사용할 때는 몇가지 준수사항이 있습니다.</p>\n<ul>\n<li>예외는 예외적인 상황을위해 설계되었기 때문에, JVM 구현자가 명시적으로 빠르게 할 필요가 없습니다.</li>\n<li><code class=\"language-text\">try-catch</code> 블록 내에 코드를 배치하면 JVM 구현이 수행할 수 있는 특정 최적화가 금지됩니다.</li>\n<li>배열을 반복하는 표준 관용구가 반드시 중복 검사를 발생시키는 것이 아닙니다.</li>\n</ul>\n<p>따라서, 예외는 반드시 예외 상황에서만 사용해야하며 일반적인 제어 흐름에서는 절대로 사용하면 안됩니다. 이를 위해 상태 검사 메서드 등을 제공하거나, Optional, 또는 특정 값을 반환하면 안됩니다.</p>\n<p>이는 API 설계에도 적용되는 규칙입니다. 잘 설계된 API는 클라이언트가 일반 제어 흐름에 예외를 사용하도록 강요하면 안됩니다.</p>\n<p>아래와 같은 코드는 매우 잘못된 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션 반복에 이런 코드는 최악입니다.</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Foo</span> foo <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchElementException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>위와 같은 코드는 매우 잘못된 코드입니다. 따라서, 예외는 예외적인 조건을 위해 설계되었습니다. 일반적으로 사용하는 제어문에 사용하면 안되며, 다른 사람들이 그렇게 하도록 강요하는 API를 작성하면 안됩니다.</p>\n<br/>\n<h2 id=\"item-70-복구-가능한-조건에는-체크된-예외를-사용하고-프로그래밍-오류에는-런타임-예외를-사용합니다\"><a href=\"#item-70-%EB%B3%B5%EA%B5%AC-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%A1%B0%EA%B1%B4%EC%97%90%EB%8A%94-%EC%B2%B4%ED%81%AC%EB%90%9C-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%98%A4%EB%A5%98%EC%97%90%EB%8A%94-%EB%9F%B0%ED%83%80%EC%9E%84-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 70. 복구 가능한 조건에는 체크된 예외를 사용하고, 프로그래밍 오류에는 런타임 예외를 사용합니다.</h2>\n<p>자바는 <code class=\"language-text\">checked exception</code>, <code class=\"language-text\">runtime exception</code>, <code class=\"language-text\">errors</code>의 3가지 종류의 throwable을 제공합니다. 각 종류의 throwable을 사용하는 것이 적절한 시기에 대해 프로그래머 간에 약간의 혼동이 있습니다.</p>\n<p>검사 예외(<code class=\"language-text\">checked exception</code>)와 비검사 예외(<code class=\"language-text\">unchecked exception</code>)를 구분하는 기본 규칙은 간단합니다.</p>\n<p>호출하는 쪽에서 복수할 수 있다고 생각된다면 <code class=\"language-text\">checked exception</code>를 사용합니다. <code class=\"language-text\">checked exception</code>를 던지면, <code class=\"language-text\">try-catch</code>로 처리하거나 <code class=\"language-text\">throw</code>를 이용해서 더 바깥쪽으로 전파하도록 강제합니다</p>\n<p><code class=\"language-text\">unchecked exception</code>은 <code class=\"language-text\">runtime exception</code>와 <code class=\"language-text\">errors</code>가 있습니다. 이 이러한 경우는 프로그램에서 잡을 필요가 없거나 잡아도 득보다 실이 많은 경우입니다. 또한 <code class=\"language-text\">throwable</code>의 경우 직접 구현이 가능한데, <code class=\"language-text\">Exception</code>, <code class=\"language-text\">RuntimeException</code>, <code class=\"language-text\">Error</code> 클래스를 상속하지 않는 구현은 좋지 않습니다.</p>\n<blockquote>\n<p><a href=\"https://madplay.github.io/post/java-checked-unchecked-exceptions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Exception에 대한 글</a></p>\n</blockquote>\n<p>즉, 복구 가능한 조건에 대해서는 <code class=\"language-text\">checked exception</code>를 써야하고, 프로그래밍 오류에 대해서는 <code class=\"language-text\">runtime exception</code>를 던져야합니다. 확실하지 않는 경우에서는 <code class=\"language-text\">unchecked exceptions</code>를 throw 합니다. <code class=\"language-text\">checked exception</code>이나 <code class=\"language-text\">runtime exception</code>가 아닌 경우, <code class=\"language-text\">throwable</code>을 정의하면 안됩니다.</p>\n<br/>\n<h2 id=\"item-71-checked-exceptions의-불필요한-사용을-피합니다\"><a href=\"#item-71-checked-exceptions%EC%9D%98-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EC%82%AC%EC%9A%A9%EC%9D%84-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 71. <code class=\"language-text\">checked exceptions</code>의 불필요한 사용을 피합니다.</h2>\n<p>많은 Java 프로그래머는 <code class=\"language-text\">checked exceptions</code>를 싫어하지만, 제대로 사용하게 되면 API와 프로그램을 향상시킬 수 있습니다. 하지만 이를 과하게 사용하거나 잘못 사용하면 불편한 API가 될 수 있습니다.</p>\n<p>메서드가 <code class=\"language-text\">checked exceptions</code>를 던질 수 있는 경우에는, 이를 호출하는 곳에서 예외를 확인하고 <code class=\"language-text\">throw</code>해야합니다. 다만, <code class=\"language-text\">stream</code>에서는 사용할 수 없습니다.</p>\n<p>일반적으로 <code class=\"language-text\">checked exceptions</code>와 <code class=\"language-text\">unchecked exceptions</code> 중 어떤 것을 선택해야할 지 고민되는 경우가 있는데, 이에 대해 조치를 할 수 있는 부분이라면 <code class=\"language-text\">checked exceptions</code>를 사용하고 그렇지 않으면 대부분은 <code class=\"language-text\">unchecked exceptions</code>를 사용하는 것이 중요합니다.</p>\n<h3 id=\"checked-exceptions를-피하는-방법\"><a href=\"#checked-exceptions%EB%A5%BC-%ED%94%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>checked exceptions를 피하는 방법</h3>\n<p>대표적인 예시로, 예외 대신 빈 Optional을 사용하는 방법이 있습니다. (다만, 부가 정보를 담을 수 없습니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 변경 전</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">.</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TheCheckedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 예외 핸들링</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 변경 후</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">actionPermitted</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">.</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 예외 조건 처리</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만 위 코드의 경우 예외에 대해 유연하게 처리할 수는 있지만, 객체 상태가 변할 수 있기 때문에 thread safe하지는 않습니다.</p>\n<br/>\n<h2 id=\"item-72-표준-예외를-사용합니다\"><a href=\"#item-72-%ED%91%9C%EC%A4%80-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 72. 표준 예외를 사용합니다.</h2>\n<p>자바 라이브러리에서는 대부분의 API의 예외 발생 요구 사항을 대부분 처리하는데 도움이 되는 예외를 제공합니다. 따라서 예외도 재사용하는 것이 좋습니다. 예외 클래스의 수가 적을수록 메모리의 사용량이 줄며, 클래스 적재 시간도 적게 걸리며 사용자 입장에서도 읽기 쉽고 익숙합니다.</p>\n<p>하지만, <code class=\"language-text\">Exception</code>, <code class=\"language-text\">RuntimeException</code>, <code class=\"language-text\">Throwable</code>를 재사용하거나 <code class=\"language-text\">Error</code>를 직접적으로 사용하는 경우는 매우 좋지 않습니다.</p>\n<p>주로 사용하는 예외목록은 다음과 같습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">IllegalArgumentException</code></p>\n<ul>\n<li>허용하지 않는 값이 인수로 건네진 경우</li>\n<li>null의 경우는 <code class=\"language-text\">NullPointerException</code>이 처리</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">IllegalStateException</code></p>\n<ul>\n<li>객체가 메서드를 수행하기에 적절하지 않은 상태인 경우</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">NullPointerException</code></p>\n<ul>\n<li>null을 허용하지 않는 메서드에 null을 건낸 경우</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">IndexOutOfBoundsException</code></p>\n<ul>\n<li>인덱스가 범위를 넘은 경우</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ConcurrentModificationException</code></p>\n<ul>\n<li>허용하지 않는 동시 수정이 발생된 경우</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">UnsupportedOperationException</code></p>\n<ul>\n<li>호출된 메서드를 지원하지 않는 경우</li>\n</ul>\n</li>\n</ul>\n<p>이 외에도 더 필요한 경우에는 표준 예외를 확장하는 것이 좋습니다. 하지만, 예외는 직렬화할 수 있으며 이 경우네는 다만 부담이 크므로 사용하지 않는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"item-73-추상화에-수준에-맞는-예외를-던집니다\"><a href=\"#item-73-%EC%B6%94%EC%83%81%ED%99%94%EC%97%90-%EC%88%98%EC%A4%80%EC%97%90-%EB%A7%9E%EB%8A%94-%EC%98%88%EC%99%B8%EB%A5%BC-%EB%8D%98%EC%A7%91%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 73. 추상화에 수준에 맞는 예외를 던집니다.</h2>\n<p>어떤 예외가 발생했을 때, 다른 예외가 발생하면 당황스럽습니다. 이런 경우는 메서드가 저수준 예외를 처리하지 않고, 상위로 전파했을 때 종종 발생합니다. 이를 피할려면 <code class=\"language-text\">exception translation</code> 기법을 사용하면 됩니다. 상위 계층에서 저수준의 예외를 잡아서 추상화 수준에 맞는 예외로 던지는 것입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 저수준 추상화를 이용한다.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LowerLevelException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 추상화 수준에 맞게 번역한다.</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HigherLevelException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만, 무턱대고 예외를 전파하는 것보다는 <code class=\"language-text\">exception translation</code>가 더 좋지만, 이를 남용하는 것은 좋지않습니다. 가능하다면, 저수준 메서드가 반드시 성공해야합니다. 따라서 저수준에서 오류가 발생하지 않도록 상위에서 매개변수 값을 미리 검사하는 것도 방법입니다. 이를 통해서 사용자에게는 문제를 전파하지 않으면서도 개발자가 로그 분석이 가능합니다.</p>\n<br/>\n<h2 id=\"item-74-각-메소드가-던진-모든-예외를-문서화합니다\"><a href=\"#item-74-%EA%B0%81-%EB%A9%94%EC%86%8C%EB%93%9C%EA%B0%80-%EB%8D%98%EC%A7%84-%EB%AA%A8%EB%93%A0-%EC%98%88%EC%99%B8%EB%A5%BC-%EB%AC%B8%EC%84%9C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 74. 각 메소드가 던진 모든 예외를 문서화합니다.</h2>\n<p>메서드가 던지는 예외는 그 메서드를 올바르게 사용하게 하는 중요한 정보입니다. 따라서 문서화하는데 충분한 시간을 써야합니다.</p>\n<p>개발자가 볼 수 있는 오류인 오류(Error)와 예외(Exception)에 대해 구분이 필요합니다. 오류의 경우는 시스템 적으로 정상적이지 않는 상황을 의미하며, 이는 low level에서 발생하기 때문에 개발자가 미리 처리하기 어렵습니다.</p>\n<p>반면에 예외(Exception)의 경우는 개발자가 구현한 로직의 코드에서 발생합니다. 그렇기 때문에 이를 예방하고 대응할 수 있습니다. 따라서 이를 구분하고 이에따른 처리방법을 정리해놓는 것이 중요합니다.</p>\n<h3 id=\"문서화를-하는-방법\"><a href=\"#%EB%AC%B8%EC%84%9C%ED%99%94%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문서화를 하는 방법</h3>\n<p><code class=\"language-text\">checked exception</code>의 경우는 항상 따로 하나씩 선언하고, 각 예외가 발생하는 상황을 <code class=\"language-text\">@throws</code> 태그를 통해서 정확하게 문서화해야합니다. 또한 확인되지 않은 예외에 대해서는 키워드를 사용하지 않는 것이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/*\n * ...\n *\n * @param fileName\n * @throws IOException\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Buffered</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// exception handling</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만, <code class=\"language-text\">checked exception</code>의 경우에 공통적인 상위 클래스로 하나를 선언하는 것은 좋지 않습니다. 즉, <code class=\"language-text\">Exception</code>이라고 던지게 되면, 코드를 사용하는 입장에서 대처해야하는 예외에 대한 힌트를 제공하지 않는 것과 동일합니다. 다만, <code class=\"language-text\">main</code> 메서드에서는 괜찮습니다.</p>\n<p><code class=\"language-text\">unchecked exception</code>의 경우도 문서화를 진행하면 좋습니다. 일반적으로 프로그래밍 오류를 뜻하는데 발생할 수 있는 오류를 명시하면 자엽스럽게 해당 오류가 발생하지 않도록 개발할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**\n * ...\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">divisor</span>\n * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">ArithmeticException</span></span>\n *     Exception may occur when divisor is zero\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 피제수(dividend)</span>\n    <span class=\"token keyword\">int</span> dividend <span class=\"token operator\">=</span> <span class=\"token number\">2_147_483_647</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 몫(quotient)</span>\n    <span class=\"token keyword\">int</span> quotient <span class=\"token operator\">=</span> dividend <span class=\"token operator\">/</span> divisor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> quotient<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// divisor(제수)가 0인 경우</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 <code class=\"language-text\">unchecked exceptions</code>는 메서드의 <code class=\"language-text\">throw</code> 선언에는 넣지 않는 것이 좋습니다. 즉 아래처럼 하는 것이 좋습니다. (시각적으로 구분할 수 있습니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**\n * ...\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">divisor</span>\n * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">ArithmeticException</span></span>\n *     Exception may occur when divisor is zero\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ArithmeticException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// throws 선언에는 제외하는 것을 권장한다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>특정 클래스에 대부분의 메서드가 같은 이유로 모두 동일한 예외를 던지면 이를 클래스에 추가될 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**\n * ...\n * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">NullPointerException</span></span>\n *     All methods throw an exception if the argument is null.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token doc-comment comment\">/**\n   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">paramObj</span>\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">someMethod1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> paramObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>paramObj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">paramObj</span>\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">someMethod2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> paramObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>paramObj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://madplay.github.io/post/document-all-exceptions-thrown-by-each-method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">추가 출처</a></p>\n<br/>\n<h2 id=\"item-75-예외-세부-메시지에-실패-관련-정보를-담습니다\"><a href=\"#item-75-%EC%98%88%EC%99%B8-%EC%84%B8%EB%B6%80-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%97%90-%EC%8B%A4%ED%8C%A8-%EA%B4%80%EB%A0%A8-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EB%8B%B4%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 75. 예외 세부 메시지에 실패 관련 정보를 담습니다.</h2>\n<p>예외를 잡지 못하여 프로그램이 실패하면 시스템에서 자동으로 스택 추적(stack trace) 정보를 출력해줍니다. 이때 출력되는 문자열은 <code class=\"language-text\">Throwable</code> 클래스의 <code class=\"language-text\">toString</code> 메서드에서 반환하는 클래스 이름과 상세 메세지입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token function\">getLocalizedMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>실패 순간을 적절하게 포착할려면 <strong>발생한 예외에 관련된 모든 매개변수와 필드의 값을 실패 메세지에 담아야합니다.</strong> 예를 들어 IndexOutOfBoundsException 이라면 범위의 최솟값, 최댓값 그리고 범위를 벗어난 인덱스의 값을 담아야합니다.</p>\n<p>하지만 주의할 점도 있습니다. 관련된 데이터를 모두 담아야하지만 <strong>실패 원인을 분석할 때 도움이 되는 정보만을 담아야합니다.</strong> 또한 보안과 관련된 정보는 포함하면 안됩니다. 상세 메세지에 비밀번호나 암호화 키 같은 정보는 필요없습니다.</p>\n<p>아래 코드는 그 예시를 보여주는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**\n * Constructs an IndexOutOfBoundsException.\n *\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">lowerBound</span> the lowest legal index value\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">upperBound</span> the highest legal index value plus one\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">index</span>      the actual index value\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lowerBound<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> upperBound<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Generate a detail message that captures the failure</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"Lower bound: %d, Upper bound: %d, Index: %d\"</span><span class=\"token punctuation\">,</span>\n    lowerBound<span class=\"token punctuation\">,</span> upperBound<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Save failure information for programmatic access</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lowerBound <span class=\"token operator\">=</span> lowerBound<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>upperBound <span class=\"token operator\">=</span> upperBound<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"item-76-가능한-한-failure-atomicity으로-만듭니다\"><a href=\"#item-76-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%95%9C-failure-atomicity%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%AD%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 76. 가능한 한 <code class=\"language-text\">failure atomicity</code>으로 만듭니다.</h2>\n<p><code class=\"language-text\">failure atomicity</code>란, <strong>호출한 메서드가 실패해도 호출 전 상태를 유지하는 것을 의미</strong>합니다. 또한 이를 지키는 것이 중요합니다.</p>\n<h3 id=\"failure-atomicity\"><a href=\"#failure-atomicity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">failure atomicity</code></h3>\n<p>호출된 메서드가 실패하더라도, 해당 객체는 메서드 호출 전 상태를 유지하려는 특성을 의미합니다.</p>\n<h3 id=\"메서드를-failure-atomicity로-만드는-방법\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-failure-atomicity%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메서드를 <code class=\"language-text\">failure atomicity</code>로 만드는 방법</h3>\n<h4 id=\"불변-객체로-설계합니다\"><a href=\"#%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EC%84%A4%EA%B3%84%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>불변 객체로 설계합니다.</h4>\n<ul>\n<li>불변 객체는 생성 시점에 고정되어 절대 변하지 않기 때문에 기존 객체가 불안정한 상태가 될 일은 없습니다.</li>\n</ul>\n<h4 id=\"로직을-수행하기-전에-매개변수의-유효성을-검사합니다\"><a href=\"#%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%88%98%ED%96%89%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8%EC%84%B1%EC%9D%84-%EA%B2%80%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로직을 수행하기 전에 매개변수의 유효성을 검사합니다.</h4>\n<ul>\n<li>객체의 내부 상태를 변경하기 전에 잠재적 예외 가능성의 대부분을 걸러냅니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다 쓴 참조 해제</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"실패한-가능성이-있는-모든-코드를-객체의-상태를-바꾸는-코드-앞에-배치합니다\"><a href=\"#%EC%8B%A4%ED%8C%A8%ED%95%9C-%EA%B0%80%EB%8A%A5%EC%84%B1%EC%9D%B4-%EC%9E%88%EB%8A%94-%EB%AA%A8%EB%93%A0-%EC%BD%94%EB%93%9C%EB%A5%BC-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%83%81%ED%83%9C%EB%A5%BC-%EB%B0%94%EA%BE%B8%EB%8A%94-%EC%BD%94%EB%93%9C-%EC%95%9E%EC%97%90-%EB%B0%B0%EC%B9%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실패한 가능성이 있는 모든 코드를, 객체의 상태를 바꾸는 코드 앞에 배치합니다.</h4>\n<ul>\n<li>로직을 수행하기 전에 인수의 유효성을 검사하기 어려울 때 사용할 수 있습니다.</li>\n<li>예를 들어, <code class=\"language-text\">TreeMap</code>의 경우 잘못된 타입의 원소를 추가하는 경우, <code class=\"language-text\">ClassCastException</code> 에러가 발생합니다.</li>\n</ul>\n<h4 id=\"객체의-임시-복사본에서-작업을-수행한-후에-성공적으로-완료되면-원래-객체와-교체합니다\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%9E%84%EC%8B%9C-%EB%B3%B5%EC%82%AC%EB%B3%B8%EC%97%90%EC%84%9C-%EC%9E%91%EC%97%85%EC%9D%84-%EC%88%98%ED%96%89%ED%95%9C-%ED%9B%84%EC%97%90-%EC%84%B1%EA%B3%B5%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%99%84%EB%A3%8C%EB%90%98%EB%A9%B4-%EC%9B%90%EB%9E%98-%EA%B0%9D%EC%B2%B4%EC%99%80-%EA%B5%90%EC%B2%B4%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체의 임시 복사본에서 작업을 수행한 후에 성공적으로 완료되면 원래 객체와 교체합니다.</h4>\n<ul>\n<li>데이터를 임시 자료 구조에 저장해 작업하는 것이 더 빠를 때 적용하기 좋은 방법입니다.</li>\n<li><code class=\"language-text\">List</code> 클래스의 <code class=\"language-text\">compare</code> aptjemrk rmfjgtmqslek.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListIterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"작업-도중에-발생하는-실패를-가로채는-복구-코드를-작성해서-작업-전-상태로-되돌립니다\"><a href=\"#%EC%9E%91%EC%97%85-%EB%8F%84%EC%A4%91%EC%97%90-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%8B%A4%ED%8C%A8%EB%A5%BC-%EA%B0%80%EB%A1%9C%EC%B1%84%EB%8A%94-%EB%B3%B5%EA%B5%AC-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%B4%EC%84%9C-%EC%9E%91%EC%97%85-%EC%A0%84-%EC%83%81%ED%83%9C%EB%A1%9C-%EB%90%98%EB%8F%8C%EB%A6%BD%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>작업 도중에 발생하는 실패를 가로채는 복구 코드를 작성해서 작업 전 상태로 되돌립니다.</h4>\n<p>주로 디스크 기반의 내구성(durability)를 보장해야하는 자료구조에 쓰이는데 자주 사용되는 방법은 아닙니다.</p>\n<h3 id=\"failure-atomicity을-항상-지킬-수-있나요\"><a href=\"#failure-atomicity%EC%9D%84-%ED%95%AD%EC%83%81-%EC%A7%80%ED%82%AC-%EC%88%98-%EC%9E%88%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">failure atomicity</code>을 항상 지킬 수 있나요...</h3>\n<p>예를 들어 <code class=\"language-text\">ConcurrentModificationException</code>을 잡아내도 그 객체를 여전히 사용할 수 있는 상태라고 가정하면 안됩니다. 이런 경우의 오류는 복구할 수 없기 때문에 이를 보존할려고 시도할 필요가 없습니다. 따라서 권장되는 부분이지만, 항상 <code class=\"language-text\">failure atomicity</code>를 지킬 수 없습니다.</p>\n<p><code class=\"language-text\">failure atomicity</code>으로 만들 수 있도록, 항상 그래야하는 것도 아닙니다. 이를 달성하기 위한 비용이 크거나 복잡도가 아주 큰 연산이 있을 수 있기 때문입니다. 이 규칙을 지키지 못하면 실패시의 객체 상태를 API 설명에 명시해야합니다.</p>\n<p>따라서 Error는 복구할 수 없으므로 <code class=\"language-text\">AssertionError</code>에 대해서는 실패 원자적으로는 만들려는 시도가 필요가 없습니다.</p>\n<br/>\n<h2 id=\"item-77-예외를-무시하면-안됩니다\"><a href=\"#item-77-%EC%98%88%EC%99%B8%EB%A5%BC-%EB%AC%B4%EC%8B%9C%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 77. 예외를 무시하면 안됩니다.</h2>\n<p>예외가 선언된 API는 그 메서드를 사용할 때 적절한 조치를 해야합니다. 따라서 catch 블랙을 비워두면 이는 존재할 이유가 없습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 의미 없는 코드</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SomeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>물론 예외를 무시해야하는 경우가 있습니다. 예를 들어 <code class=\"language-text\">FileInputStream</code>을 닫을 때 그렇습니다. 파일의 상태를 변경하지 않으니 복구할 것이 없고 스트림을 닫는 경우는 필요한 내용을 모두 다 읽어야한다는 뜻입니다.</p>\n<p>그래도 예외를 무시하기로 했다면 <code class=\"language-text\">catch</code>블록 안에서 그렇게 결정한 이유를 주석으로 남기고 예외의 이름도 변경해야합니다.</p>\n"}},{"node":{"title":"[Java] Effective Java, Methods","path":"/08-java-effective-java/","date":"24. May 2021","timeToRead":28,"description":"Effective Java 책 중, ch9. 일반화에 대해 정리합니다.","content":"<h1 id=\"general-programming\"><a href=\"#general-programming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>General Programming</h1>\n<p>이번 챕터는 언어의 이론이나 관념이 아닌 실제적인 사실들에 대해 정리합니다. 지역 변수, 제어 구조, 라이브러리, 데이터 유형 및 두가지의 언어 외 기능(<code class=\"language-text\">reflection</code>와 <code class=\"language-text\">native method</code>)에 대해 설명합니다. 그리고 최적화 및 명명 규칙에 대해 정리합니다.</p>\n<h2 id=\"item-57-지역-변수의-범위를-최소화합니다\"><a href=\"#item-57-%EC%A7%80%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 57. 지역 변수의 범위를 최소화합니다.</h2>\n<p><a href=\"https://github.com/Azderica/Book-Record/tree/master/Effective%20Java/ch4#item-15-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-%EB%A9%A4%EB%B2%84%EC%9D%98-%EC%A0%91%EA%B7%BC%EC%84%B1%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">클래스 및 멤버의 접근성 최소화</a>의 내용과 비슷하며, 지역 변수의 점위를 최소화함으로써 <strong>코드의 가독성과 유지 관리성을 높이고 오류 가능성을 줄일 수 있습니다.</strong></p>\n<p>지역 변수의 범위를 최소화하는 가장 강력한 기술은 처음 사용되는 위치에 선언하는 것입니다. 변수를 사용하기 전에 선언하면 프로그램이 무엇을 하려는지 어려워집니다.</p>\n<p>거의 모든 지역 변수 선언에는 이니셜라이저가 필요합니다. 이가 없다면, 선언할 때까지 선언을 연기해야합니다.</p>\n<p>대표적으로 루프는 변수의 범위를 최소화할 수 있는 기능을 제공합니다. 또한 while 루프 보다는 for 루프를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션 또는 배열을 반복하는 데 선호되는 관용구</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> e <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do Something with e</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 반복자가 필요한 경우</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Element</span> e <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e and i</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>일반적으로 for 루프를 선호하는 이유는 while 루프를 잘 못 사용하면 버그가 발생하기 쉽기 때문입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 잘못된 결과를 만들기 쉬움</span>\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i2 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// BUG!</span>\n  <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컴파일시, 에러가 바로 나오게 됩니다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Element</span> e <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e and i</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">// Compile-time error - cannot find symbol i</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i2 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Element</span> e2 <span class=\"token operator\">=</span> i2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e2 and i2</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이렇기 때문에 for loop를 좀 더 선호하는 것이 좋습니다.</p>\n<p>또는, 아채처럼 지역 변수의 범위를 최소화할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token function\">expensiveComputation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with i;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이는, i와 n 모두가 loop 내에서만 범위를 가지고 있습니다.</p>\n<p>마지막 기술은, 지역변수의 범위를 최소화하는 마지막 기술은 메서드를 작고 집중적으로 유지하는 것이 좋습니다. 동일한 방법으로 여러 동작을 수행하면 지역변수가 다른 코드 범위에 있을 수 있기 때문에 이러한 일이 발생하지 않도록 하는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"item-58-전통적인-for-루프-보다는-for-each-루프를-더-선호합니다\"><a href=\"#item-58-%EC%A0%84%ED%86%B5%EC%A0%81%EC%9D%B8-for-%EB%A3%A8%ED%94%84-%EB%B3%B4%EB%8B%A4%EB%8A%94-for-each-%EB%A3%A8%ED%94%84%EB%A5%BC-%EB%8D%94-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 58. 전통적인 <code class=\"language-text\">FOR</code> 루프 보다는 <code class=\"language-text\">FOR-EACH</code> 루프를 더 선호합니다.</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션을 반복하는 것이 가장 좋은 방법은 아닙니다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Element</span> e <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>기존의 for loop 문도, while 문 보다는 낫지만 완벽하지 않습니다. 요소만 필요한 경우, 이는 복잡할 뿐입니다.</p>\n<p>for-each 루프는 이러한 문제를 해결합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션 및 배열을 반복하는 데 선호되는 관용구</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> e <span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do something with e</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 for-each 문은 중첩된 반복문에서 좀 더 도움이 됩니다. 아래는 for문에서 발생하기 쉬운 버그입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Face</span> <span class=\"token punctuation\">{</span>ONE<span class=\"token punctuation\">,</span> TWO<span class=\"token punctuation\">,</span> THREE<span class=\"token punctuation\">,</span> FOUR<span class=\"token punctuation\">,</span> FIVE<span class=\"token punctuation\">,</span> SIX<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Collection</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Face</span><span class=\"token punctuation\">></span></span> faces <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span>allOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Face</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Face</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> faces<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Face</span><span class=\"token punctuation\">></span></span> j <span class=\"token operator\">=</span> faces<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span> next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">+</span> j<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Expected Output : {ONE, ONE}, {ONE, TWO}, ..., {SIX, SIX}</span>\n<span class=\"token comment\">// Real Output : {ONE, ONE}, {TWO, TWO}, ..., {SIX, SIX}</span></code></pre>\n<p>이를 생각하는 값을 나오게 하기 위해서는 아래처럼 구성하면 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션 및 배열에 중첩 된 반복에 대한 기본 관용구</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Suit</span> suit <span class=\"token operator\">:</span> suits<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rank</span> rank <span class=\"token operator\">:</span> ranks<span class=\"token punctuation\">)</span>\n    deck<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">(</span>suit<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>다만 for-each 문을 사용할 수 없는 경우는 세가지 상황이 있습니다.</p>\n<ul>\n<li>\n<p>Destructive filtering(파괴적 필터링)</p>\n<ul>\n<li>선택한 요소를 제거하는 컬렉션을 탐색해야하는 경우, <code class=\"language-text\">remove</code> 메서드를 호출할 수 잇도록 명시적 반복자를 사용해야합니다.</li>\n<li>Java 8에 추가된 Collection의 removeIf 메서드를 사용하여 명시적 순회를 피할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Transforming(변형)</p>\n<ul>\n<li>목록 또는 배열을 탐색하고 해당 요소 값의 일부 또는 전체를 교체해야하는 경우, 요소 값을 바꾸기 위해서 list iterator 또는 array index가 필요합니다.</li>\n</ul>\n</li>\n<li>\n<p>Parallel iteration(병렬 반복)</p>\n<ul>\n<li>여러 컬렉션을 병렬로 트래버스해야하는 경우, 모든 반보기 또는 인덱스 변수를 잠금 단계로 진행할 수 있도록 iterator 또는 인덱스 변수를 명시적으로 제어해야합니다.</li>\n</ul>\n</li>\n</ul>\n<p>for-each 루프를 사용하면, 컬렉션과 배열을 반복할 수 있을 뿐만 아니라, 단일 메서드로 구성된 Iterable 인터페이스를 구현하는 모든 개체를 발복할 수 있습니다. 인터페이스의 모습은 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterable</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//이 반복 가능한 요소에 대한 iterator를 반환합니다.</span>\n  <span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이렇게 하면, 사용자가 for-each 루프를 사용해서 type을 iterator할 수 있습니다. 즉, <strong>for-each 루프는 for 성능 저하없이 명확성, 유연성 및 버그 방지 측면에서 기존 루프에 비해 강력한 이점을 제공합니다.</strong> 또한 최대한 for-each 루프를 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"item-59-라이브러리를-알고-사용해야합니다\"><a href=\"#item-59-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%95%8C%EA%B3%A0-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 59. 라이브러리를 알고 사용해야합니다.</h2>\n<p>예를 들어, random 을 사용해야할 때 random을 쓰려면 여러 버그가 발생할 수 있습니다. 이러한 경우, 여러 결점이 존재하기 때문에 이를 해결해야합니다.</p>\n<p>대표적인 예시로 자바 7의, ThreadLocalRandom이 있습니다. 이를 사용하면, 높은 품질의 난수를 빠르게 생성할 수 있습니다.</p>\n<p>표준 라이브러리 사용은 다음의 장점을 가집니다.</p>\n<ul>\n<li><strong>표준 라이브러리를 사용하면, 이를 작성한 전문가의 지식과 이전에 사용했던 경험을 활용할 수 있습니다.</strong></li>\n<li>업무와 관련 없는 부분에 시간을 낭비할 필요가 없습니다.</li>\n<li>시간이 지남에 따라 성능이 향상되는 경향이 있습니다.</li>\n<li>시간이 지남에 따라 얻는 경향이 있습니다. (누락된 기능이 후속 추가될 수 있습니다.)</li>\n</ul>\n<p>예를 들어 다음과 같이 보여줄 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java 9에 추가 된 transferTo를 사용하여 URL의 내용을 인쇄합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> URL <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> openStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    in<span class=\"token punctuation\">.</span> transferTo <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 라이브러리는 문서들을 공부하기에는 너무 많습니다. 그러나, 모든 프로그래머들은 <code class=\"language-text\">java.lang</code>, <code class=\"language-text\">java.util</code>, <code class=\"language-text\">java.io</code>와 서브패키지의 기본 사항에 대해 잘 알고 있어야합니다.</p>\n<p>이를 요약하면 다음과 같습니다. <strong>라이브러리가 있는 경우 사용해야하고 모르는 경우에는 라이브러리가 있는지 확인해야합니다.</strong> 일반적으로 라이브러리 코드는 사용자가 직접 작성하는 코드보다 좋으며 시간이 지남에 따라 개선 될 가능성이 높습니다.</p>\n<br/>\n<h2 id=\"item-60-정확한-답변이-필요한-경우-float와-double을-피합니다\"><a href=\"#item-60-%EC%A0%95%ED%99%95%ED%95%9C-%EB%8B%B5%EB%B3%80%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%BD%EC%9A%B0-float%EC%99%80-double%EC%9D%84-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 60. 정확한 답변이 필요한 경우, <code class=\"language-text\">FLOAT</code>와 <code class=\"language-text\">DOUBLE</code>을 피합니다.</h2>\n<p><code class=\"language-text\">float</code>와 <code class=\"language-text\">double</code> 유형은 과학 및 공학 계산을 위해서 설게되었습니다. 그렇기 때문에 정확한 근사치를 신속하게 제공하기 위해서 설계된 구조입니다. 따라서, 정확한 결과에 제공하면 안되며 정확한 결과가 필요한 곳에서는 사용하면 안됩니다. (Ex. 금전 계산 등)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Broken - 화폐 계산에 부동 소수점을 사용합니다!</span>\n<span class=\"token comment\">// 사용하면 안됩니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> funds <span class=\"token operator\">=</span> <span class=\"token number\">1.00</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> itemsBought <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> <span class=\"token number\">0.10</span><span class=\"token punctuation\">;</span> funds <span class=\"token operator\">>=</span> price<span class=\"token punctuation\">;</span> price <span class=\"token operator\">+=</span> <span class=\"token number\">0.10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    funds <span class=\"token operator\">-=</span> price<span class=\"token punctuation\">;</span>\n    itemsBought<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>itemsBought <span class=\"token operator\">+</span> <span class=\"token string\">\" items bought.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change: $\"</span> <span class=\"token operator\">+</span> funds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// output : 0.3999999... (잘못된 값)</span></code></pre>\n<p>따라서, 아래처럼 수정해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">BigDecimal</span> TEN_CENTS <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> itemsBought <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">BigDecimal</span> funds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span> price <span class=\"token operator\">=</span> TEN_CENTS<span class=\"token punctuation\">;</span>\n        funds<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TEN_CENTS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    funds <span class=\"token operator\">=</span> funds<span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    itemsBought<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>itemsBought <span class=\"token operator\">+</span> <span class=\"token string\">\" items bought.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Money left over: $\"</span> <span class=\"token operator\">+</span> funds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 경우, BigDecimal을 사용하게 되면 정확한 결과를 만들 수 있습니다. (다만, 원시적인 값에 비해 조금 더 느려집니다.)</p>\n<br/>\n<h2 id=\"item-61-boxed-primitive-보다-primitive-type을-선호합니다\"><a href=\"#item-61-boxed-primitive-%EB%B3%B4%EB%8B%A4-primitive-type%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 61. Boxed Primitive 보다 Primitive type을 선호합니다.</h2>\n<p>자바는 <code class=\"language-text\">int</code>, <code class=\"language-text\">double</code>, <code class=\"language-text\">boolean과</code> 같은 기본(Primitive) 요소와 <code class=\"language-text\">String</code>이나 <code class=\"language-text\">List</code>와 같은 참조(Reference) 유형으로 구성되어 있습니다. 또한 모든 기본 유형(Primitive Type)에는 Boxed Primitive라고 하는 참조 유형이 있습니다. 이것이 바로, <code class=\"language-text\">int</code>, <code class=\"language-text\">double</code>, <code class=\"language-text\">boolean</code>에 해당하는 <code class=\"language-text\">Integer</code>, <code class=\"language-text\">Double</code>, <code class=\"language-text\">Boolean</code> 입니다.</p>\n<p>Primitive와 Boxed Primitive 사이에는 세 가지 주요 차이점이 있습니다.</p>\n<ul>\n<li>Primitive는 값만 가지고 있는 반면에, Boxed Primitive는 값과 구별되는 ID를 가지고 있습니다.</li>\n<li>Primitive는 기본 값만 존재하는 반면에, Boxed Primitive는 null과 같이 비 기능적 값이 있습니다.</li>\n<li>Primitive는 Boxed Primitive보다 시간과 공간 효율적입니다.</li>\n</ul>\n<p>이러한 차이를 참고해서 만들어야 합니다.</p>\n<p>즉, 아래의 코드는 잘못된 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Comparator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> naturalOrder <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> j<span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnaturalOrder<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// output : 1 -> error</span></code></pre>\n<p>이와 같은 문제로, boxed primitives에는 <code class=\"language-text\">==</code> 연산자를 적용하는 것은 거의 대부분 잘못된 것입니다. 따라서 비교를 할때는 primitive를 사용하는 것이 더 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Unbelievable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span> <span class=\"token string\">\"Unbelievable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만, 위의 코드처럼 사용하는 것도 좋지 않습니다. primitive와 boxed primitive를 혼합해서 사용하는 경우, boxed primitive 타입이 박스 해제가 되는 문제가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 매우 느린 코드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">+</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드는 지역 변수 sum을 기본(Primitive) 타입이 아닌, Boxed Primitive 타입을 사용했기 때문에 반복적으로 boxing되고 unboxed 되는 문제가 존재합니다.</p>\n<p>요약하자면, 선택권이 있는 경우에는 Boxed primitive 보다는 primitive를 사용하는 것이 좋습니다. Boxed Primitive를 사용해야하는 상황이면 조심히 사용해야합니다. <strong>Auto boxing은 boxed primitives를 사용하는 위험은 아니지만, 자세한 정도를 줄입니다.</strong></p>\n<p>프로그램이 boxed 및 unboxed primitive 를 포함하는 혼합 계산을 할때는 unboxing을 수행되고, 프로그램이 unboxing을 수행할 때는 <code class=\"language-text\">NullPointerException</code>을 throw할 필요가 있습니다. 프로그램이 Primitive 타입을 Boxed Primitive에 넣으면 비용이 많이 들고 불필요한 개체 생성이 발생할 수 있습니다.</p>\n<br/>\n<h2 id=\"item-62-다른-유형이-적합한-문자열은-피합니다\"><a href=\"#item-62-%EB%8B%A4%EB%A5%B8-%EC%9C%A0%ED%98%95%EC%9D%B4-%EC%A0%81%ED%95%A9%ED%95%9C-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 62. 다른 유형이 적합한 문자열은 피합니다.</h2>\n<p>문자열은 텍스트를 위해 설계되었습니다. 따라서 문자열로 몇가지를 하면 안되는 경우가 있습니다.</p>\n<h3 id=\"문자열은-다른-값-타입을-대체하지-못합니다\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EB%8B%A4%EB%A5%B8-%EA%B0%92-%ED%83%80%EC%9E%85%EC%9D%84-%EB%8C%80%EC%B2%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열은 다른 값 타입을 대체하지 못합니다.</h3>\n<ul>\n<li>입력에서 문자열로 받는 경우가 있지만, 숫자인 경우에는 int, float, BigInteger로 변환해야하고 참/거짓의 경우에는 Enum 또는 boolean으로 처리해야합니다.</li>\n</ul>\n<h3 id=\"문자열은-enum-형을-대체하지-못합니다\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-enum-%ED%98%95%EC%9D%84-%EB%8C%80%EC%B2%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열은 Enum 형을 대체하지 못합니다.</h3>\n<ul>\n<li>Enum은 문자열보다, Enum형 상수를 사용하는 것이 중요합니다.</li>\n</ul>\n<h3 id=\"문자열은-aggregate-타입을-대체하지-못합니다\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-aggregate-%ED%83%80%EC%9E%85%EC%9D%84-%EB%8C%80%EC%B2%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열은 aggregate 타입을 대체하지 못합니다.</h3>\n<ul>\n<li>Entity에 여러 구성이 있는 경우, 사용하지 않는 것이 좋습니다.</li>\n</ul>\n<h3 id=\"문자열은-capabilities를-대체하지-못합니다\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-capabilities%EB%A5%BC-%EB%8C%80%EC%B2%B4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열은 capabilities를 대체하지 못합니다.</h3>\n<ul>\n<li>때때로 문자열은 일부 기능에 대한 액세스 권한을 부여하기위해 사용하는데, 스레드 로컬 변수를 사용할 때 문제가 생길 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Broken - 문자열을 기능으로 부적절하게 사용했습니다!</span>\n<span class=\"token comment\">// 두 클라이언트가 독립적으로 스레드 로컬을 사용하기로 결정하면 의도하지않게 변수를 공유하므로 여러 문제가 발생가능합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// Noninstantiable</span>\n\n  <span class=\"token comment\">// 명명 된 변수에 대한 현재 스레드의 값을 설정합니다.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 명명 된 변수에 대한 현재 스레드의 값을 반환합니다.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 해결하는 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 요약하면, 더 나인 데이터 유형이 존재하거나 쓸 수 있을 때 객체를 문자열로 나타내는 자연스러운 경향을 피해야합니다. 부적절하게 사용되는 문자열은 다른 유형보다 번거롭고 유연성이 떨어지며 느리고, 오류가 발생하기 쉽습니다.</p>\n<br/>\n<h2 id=\"item-63-문자열-연결의-성능에-주의합니다\"><a href=\"#item-63-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%97%B0%EA%B2%B0%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%97%90-%EC%A3%BC%EC%9D%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 63. 문자열 연결의 성능에 주의합니다.</h2>\n<p>문자열 연결 연산자, <code class=\"language-text\">+</code>는 몇개의 문자열을 하나로 결합하는 편리하고 좋은 방법입니다. 작은 범위에서는 좋을 수 있지만, 문자열 연결 연산자를 사용해서 n개의 문자열을 연결하는 경우, n 타임이 걸리게 됩니다.</p>\n<p>즉, 아래는 잘못된 사용 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 부적절한 문자열 연결 사용-성능이 좋지 않습니다!</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">numItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">+=</span> <span class=\"token function\">lineForItem</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// String concatenation</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 해결하기 위해서는 <code class=\"language-text\">StringBuilder</code>를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> statement <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">StringBuilder</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span> <span class=\"token punctuation\">(</span>numItems <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> LINE_WIDTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>numItems <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    b<span class=\"token punctuation\">.</span>append <span class=\"token punctuation\">(</span>lineForItem <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>toString <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>자바 6이후로, 문자열 연결 속도를 높였으나 아직까지는 <code class=\"language-text\">StringBuilder</code>를 사용하는 것이 좋습니다.</p>\n<p>즉, 성능이 관련이 없는 경우가 아니면, 문자열 연결 연산자(<code class=\"language-text\">+</code>)를 사용해서 몇개의 문자열을 결합하지 않는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-64-인터페이스로-객체를-참조합니다\"><a href=\"#item-64-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A1%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%B0%B8%EC%A1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 64. 인터페이스로 객체를 참조합니다.</h2>\n<p>객체를 참조하려면 클래스보다 인터페이스를 사용을 선호해야합니다. <strong>적절한 인터페이스 유형이 있는 경우, 매개 변수, 반환 값, 변수 및 필드는 모두 인터페이스 유형을 사용하여 선언해야합니다.</strong></p>\n<p>즉, 아래처럼 작성하는 것이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Good Case - 인터페이스를 유형으로 사용</span>\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">></span></span> sonSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bad Case - 클래스를 유형으로 사용한 것</span>\n<span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">></span></span> sonSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>인터페이스를 유형으로 사용하게 되면 프로그램이 좀 더 <strong>유연</strong>해집니다. 다만, 적절한 인터페이스가 없는 경우에는 인터페이스가 아닌 클래스에서 객체를 참조하는 것이 전적으로 중요합니다.</p>\n<p>따라서, 인터페이스를 사용할 수 있다면 인터페이스를 사용해서 객체를 참조시켜 프로그램이 더 유연하고 세련되게 구성합니다. 적절한 인터페이스가 없으면 필요한 기능을 제공하는 클래스 계층 구조에서 가장 덜 구체적인 클래스를 사용하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-65-리플렉션보다-인터페이스를-선호합니다\"><a href=\"#item-65-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98%EB%B3%B4%EB%8B%A4-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 65. 리플렉션보다 인터페이스를 선호합니다.</h2>\n<ul>\n<li><a href=\"https://velog.io/@ptm0304/Java-%EC%9E%90%EB%B0%94-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reflection ?</a></li>\n</ul>\n<p>핵심 리플렉션 기능인 <code class=\"language-text\">java.lang.reflect</code>는 임의의 클래스에 대한 프로그래밍 방식 액세스를 제공합니다. Class 객체가 주어지면, Class 인스턴스가 나타내는 생성자, 메서드 및 필드를 나타내는 Constructor, Method, Field 인스턴스를 얻을 수 있습니다.</p>\n<p>그러나 리플렉션을 사용하게 되면, 아래의 단점을 가지게 됩니다.</p>\n<ul>\n<li>예외 검사를 포함하여 컴파일 타임 유형 검사의 모든 이점을 잃게됩니다.</li>\n<li>반사 액세스를 수행하는 데 필요한 코든느 서투르고 장황합니다.</li>\n<li>성능이 저하됩니다.</li>\n</ul>\n<p>일반적으로는 리플렉션을 사용하는 것은 거의 안좋습니다.</p>\n<p>리플렉션은 매우 제한된 형태로만 사용함으로써 비용을 거의 발생시키지 않으면서 리플렉션의 많은 이점을 얻을 수 있습니다. 컴파일 타임에 사용할 수 없는 클래스를 사용해야하는 많은 프로그램의 경우, 컴파일 타임에 클래스를 참조할 적절한 인터페이스 또는 수퍼 클래스가 있습니다. 이 경우, Reflective 인스턴스로 생성하고 해당 interface나 super 클래스를 통해서 정상적으로 액세스 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 인터페이스 액세스를 통한 Reflective instantiation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 클래스 이름을 클래스 객체로 변환</span>\n  <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> cl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    cl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Unchecked cast!</span>\n      <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class not found.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Get the constructor</span>\n  <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> cons <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    cons <span class=\"token operator\">=</span> cl<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchMethodException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No parameterless constructor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Instantiate the set</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> cons<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Constructor not accessible\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class not instantiable.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Constructor threw \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassCastException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class doesn't implement Set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Exercise the set</span>\n  s<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드처럼 피를레션은 강력함을 가지고 있습니다. <code class=\"language-text\">&lt;? extends Set&lt;String&gt;&gt;</code>을 통해서, <code class=\"language-text\">service provider framework</code>등을 구현하는데 도움이 됩니다.</p>\n<p>그러나, reflection의 단점 또한 잘 보입니다.</p>\n<ul>\n<li>런타임에 여러 에러가 발생할 수 있는 가능성이 있습니다.</li>\n<li>클래스에서 인스턴스를 생성하기 위해서는 긴 코드가 필요합니다.</li>\n</ul>\n<p>또한 위 프로그램을 컴파일하면 확인되지 않은 캐스트 경고가 발생합니다.</p>\n<p>드물지만, 합법적인 리플렉션 사용법 중 하나는 런타임에 없을 수 있는 다른 클래스, 메서드, 필드에 대한 클래스의 종속성을 관리하는 것입니다.</p>\n<p>이를 정리하자면, <strong>리플렉션은 정교한 특정 시스템 프로그래밍 작업에는 필요한 기능이지만 많은 단점이 있습니다.</strong> 컴파일 타입에 알려지지 않은 클래스로 작업해야하는 프로그램을 작성하는 경우, 가능하면 리플렉션을 사용해서 개체를 인스턴스화하고 컴파일 타임에 알려진 일부 인터페이서 또는 슈퍼클래스를 사용해서 개체에 액세스 하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-66-네이티브-메서드를-신중하게-사용합니다\"><a href=\"#item-66-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 66. 네이티브 메서드를 신중하게 사용합니다.</h2>\n<p>JNI(Java Native Interface)를 사용하면, Java Program이 C. C++와 같은 <code class=\"language-text\">native programming language</code>로 작성된 메소드인 <code class=\"language-text\">native method</code>를 호출할 수 있습니다. 일반적으로 <code class=\"language-text\">native method</code>의 용도는 3가지입니다.</p>\n<ul>\n<li>레지스토리와 같은 플랫폼 별 기능에 대한 액세스를 제공합니다.</li>\n<li>레거시 데이터에 대한 액세스를 제공하는 레거시 라이브러리를 포함하여 네이티브 코드의 기존 라이브러리에 대한 액세스를 제공하비낟.</li>\n<li>네이티브 메서드는 성능 향상을 위해 애플리케이션의 성능에 중요한 부분을 네이티브 언어로 작성하는데 사용합니다.</li>\n</ul>\n<p>그러나 현재 시점에서는 거의 사용하지 않는 것이 좋습니다. 기본 메서드를 통해서 레지스토리와 같은 플랫폼에 액세스하는 것도 거의 필요하지 않고, <strong>성능향상을 위해 native method를 사용하는 것도 거의 권장하지 않습니다.</strong></p>\n<p>또한 native method를 사용하는 것은 심각한 단점이 있습니다. native method의 경우, 안전하기 않기 때문에 메모리 손상 등 여러 문제가 발생하기 쉽습니다. 그리고 이식성이 떨어지며, 디버그하기 어렵습니다. 가비지컬렉터도 추적하기 힘들며, 성능을 저하시킬 수 있습니다. 그리고 가독성이 매우 부족합니다.</p>\n<p>즉, 네이티브 메서드를 사용할 수 있는 경우는 하위 수준 리소스나 native library에 액세스하는 경우에 한하며, 이 경우에도 최대한 버그를 피하도록 노력해야합니다.</p>\n<br/>\n<h2 id=\"item-67-신중하게-최적화합니다\"><a href=\"#item-67-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 67. 신중하게 최적화합니다.</h2>\n<p>최적화에 대한 세가지 격언이 있습니다.</p>\n<ul>\n<li>어리석음을 포함해서 다른 단일 이유보다 효율성이라는 이름으로 잘못된 문제를 일으키면 안됩니다.</li>\n<li>97% 정도의 작은 효율성은 잊어야합니다. 조기 최적화는 모든 문제의 근원입니다.</li>\n<li>\n<p>최적화에 대해 두가지 규칙을 지켜야합니다.</p>\n<ul>\n<li>최적화하지 마세요.</li>\n<li>완벽하고 최적화되지 않은 solution을 확보할때까지는 수행하지 않습니다.</li>\n</ul>\n</li>\n</ul>\n<p>이처럼, 최적하는 조심히해야하며 특히 조기 최적화는 문제가 생기기 쉽습니다.</p>\n<p>성능을 위해 건전한 아키텍처 원칙을 희생하면 안됩니다. <strong>빠른 프로그램 보다는 좋은 프로그램을 작성하는 것이 중요합니다.</strong> 좋은프로그램이 빠르지 않는 경우에는 아키텍처를 통해서 최적화할 수 있습니다.</p>\n<p>따라서 아래 사항을 고려해야합니다.</p>\n<ul>\n<li>설계 과정에서 성능을 고려하며, 개발도중에 변경에는 시스템이 잘못구성될 수 있습니다.</li>\n<li>성능을 제한하는 설계 결정을 피하기 위해서 노력해야합니다.</li>\n<li>API 설계 결정의 성능 결과를 고려해야합니다. 다만, 좋은 성능을 얻기 위해서 API를 왜곡하는 것은 매우 나쁩니다.</li>\n<li>Java는 성능 모델이 약하기 때문에, C나 C++에 비해 최적화를 좀 더 잘할 필요가 있습니다.</li>\n</ul>\n<p>즉, 빠른 프로그램 보다는 좋은 프로그램을 작성하는 것이 중요합니다. 그렇게 되면 속도가 따라올 것입니다. 다만, 시스템을 설계하는 동안 성능에 대해 생각해야합니다. 그리고, 시스템을 개발 완료 후 에는 성능을 측정하고, 빠른지 확인하고 그렇지 않은 경우에는 프로파일러를 통해서 원인을 찾고 최적화하는 작업을 수행합니다.</p>\n<br/>\n<h2 id=\"item-68-일반적으로-허용되는-명명-규칙을-준수합니다\"><a href=\"#item-68-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%97%88%EC%9A%A9%EB%90%98%EB%8A%94-%EB%AA%85%EB%AA%85-%EA%B7%9C%EC%B9%99%EC%9D%84-%EC%A4%80%EC%88%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 68. 일반적으로 허용되는 명명 규칙을 준수합니다.</h2>\n<p>자바 플랫폼에서는 잘 정립된 naming conventions이 있으며, 대부분은 The Java Language Specification에 포함되어 있습니다.</p>\n<p>패키지, 클래스, 인터페이스, 메서드, 필드 및 형식 변수를 포함하는 여러 naming conventions가 있으며, 이를 위반하면 안됩니다. 이러한 규칙을 위반하면 이후에 사용하기 어려울 수 있습니다.</p>\n<ul>\n<li>패키지 및 모듈은 마침표로 구분된 구성요소와 함께 계층적이며 소문자 알파벳 문자(가끔 숫자)로 구성되어야합니다.</li>\n<li>열거 형 및 주석 유형 이름을 포함한 클래스느 및 인터페이스 이름은 하나 이상의 단어로 구성되어야하며, 각 단어의 앞은 대문자로 표시해야합니다.</li>\n<li>메서드 및 필드 이름은 클래스나 인터페이스와 동일한 방식으로 naming conventions를 사용하지만, 첫 글자는 소문자로 구성해야합니다.</li>\n<li>상수 필드의 경우 하나이상의 대문자와 밑줄 문자로 구성합니다. (EX. <code class=\"language-text\">COIN_VALUE</code>)</li>\n<li>약어의 경우는, 좀 더 신중하게 선정해야합니다.</li>\n</ul>\n<p>이를 예시로 하면 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>식별자 유형</th>\n<th>예</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Package, module</td>\n<td><code class=\"language-text\">org.junit.jupiter.api, com.google.common.collect</code></td>\n</tr>\n<tr>\n<td>Class, Interface</td>\n<td><code class=\"language-text\">Stream, FutureTask, LinkedHashMap, HttpClient</code></td>\n</tr>\n<tr>\n<td>Method, Field</td>\n<td><code class=\"language-text\">remove, groupingBy, getCrc</code></td>\n</tr>\n<tr>\n<td>Constant Field</td>\n<td><code class=\"language-text\">MIN_VALUE, NEGATIVE_INFINITY</code></td>\n</tr>\n<tr>\n<td>Local Variable</td>\n<td><code class=\"language-text\">i, denom, houseNum</code></td>\n</tr>\n<tr>\n<td>Type Parameter</td>\n<td><code class=\"language-text\">T, E, K, V, X, R, U, V, T1, T2</code></td>\n</tr>\n</tbody>\n</table>\n<p>위와 같은 standard naming conventions를 내재회 하고, 그 다음 특성을을 사용하는 방법을 인지하는 것이 좋습니다. 일반적으로 grammatical conventions는 더 복잡하고 느슨합니다. <code class=\"language-text\">The Java Language Specification</code>에서 인용한 글은 \"오래 유지된 관습적 사용이 달라지는 경우, 이러한 관습을 과도하게 따라하면 안됩니다.\"라는 글입니다. 즉, 상식에 한해서 개발하는 것이 필요합니다.</p>\n"}},{"node":{"title":"[Java] Effective Java, Lambdas 와 Streams","path":"/06-java-effective-java/","date":"16. May 2021","timeToRead":22,"description":"Effective Java 책 중, ch7. 람다와 스트림에 대해 정리합니다.","content":"<h1 id=\"lambdas-and-streams\"><a href=\"#lambdas-and-streams\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lambdas and Streams</h1>\n<p>Java 8에서 함수 객체를 더 쉽게 만들 수 있도록, <code class=\"language-text\">functional interface</code>, 람다 및 메소드 참조가 추가되었습니다. 스트림 API는 이러한 언어 변경과 함께 추가되어 데이터 요소들의 시퀀스 처리를 위한 라이브러리 지원을 제공합니다.</p>\n<h2 id=\"item-42-익명-클래스보다-람다를-선택합니다\"><a href=\"#item-42-%EC%9D%B5%EB%AA%85-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4-%EB%9E%8C%EB%8B%A4%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 42. 익명 클래스보다 람다를 선택합니다.</h2>\n<p>과거에는 하나의 추상 메소드를 가진 인터페이스가 function types로 사용되었습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 함수 객체로서의 익명 클래스 인스턴스 - 폐기되었음</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이러한 익명 클래스는 object-oriented 객체를 필요로 하는 고전적인 객체 지향 디자인 패턴(특히. Strategy pattern)에 적합했습니다. 그러나 이는 매우 애매모호했기 때문에 이를 대체할 수단이 필요하게 되었습니다.</p>\n<p>Java 8에서는 단일 추성 메서드와의 인터페이스가 필요하다는 개념을 공식화하였고, 이를 <code class=\"language-text\">function interface</code>라고 알려져 있으며, 람다식이나 람다를 통해서 이를 만들 수 있게 되었습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 함수 객체로서의 람다 표현식 (익명 클래스 대체)</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>sort <span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>compare <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>프로그램이 명확해지지 않는 한, 모든 람다 파라미터의 유형을 생략하는 방법이 좋습니다. (컴파일러가 이를 유추할 수 없기 때문에 그렇습니다.) 그렇기 때문에 <strong>앞선 주제에서 말했듯이 Raw 타입을 사용하지 않는 것</strong>이 여기서 중요합니다.</p>\n<p>또한 이러한 람다식을 통해서 더 짧게 만들 수 있고, 의미적으로도 잘 보일 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Before 코드</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> <span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// After 코드</span>\nwords<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 뒤의 코드가 앞의 코드보다 직관적입니다.</span></code></pre>\n<p>이전 챕터에서 나왔던 Enum형을 아래처럼 수정할 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  PLUS  <span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  MINUS <span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  TIMES <span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">DIVIDE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DoubleBinaryOperator</span> op<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DoubleBinaryOperator</span> op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>op <span class=\"token operator\">=</span> op<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> op<span class=\"token punctuation\">.</span><span class=\"token function\">applyAsDouble</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나, 이러한 <strong>람다는 name과 document가 없기 때문에 계산이 확실하지 않거나, 몇줄을 초과하는 경우에는 람다에 넣는 것은 좋지않습니다.</strong> (일반적으로 1줄 ~ 3줄 사이가 적합)</p>\n<p>현재는 람다의 등장으로 익명 클래스를 거의 사용하지 않지만, 익명 클래스만 할 수 있는 부분이 있습니다.</p>\n<ul>\n<li>람다는 기능 인터페이스로 제한되나, 추상 클래스의 인스턴스를 만들려면 람다가 아닌 익명 클래스로 만들 수 있습니다.</li>\n<li>익명 클래스를 사용해서 여러 추상 메서드가 있는 인터페이스의 인스턴스를 만들 수 있습니다.</li>\n<li>람다는 자신에 대한 참조를 얻을 수 없습니다. 즉, 본문 내에서 함수 객체에 액세스해야하는 경우 익명 클래스를 사용해야합니다.</li>\n</ul>\n<p>람다는 구현 중에 안정적으로 직렬화 및 역 직렬화 할 수 없는 속성은 익명 클래스와 공유합니다. 따라서 람다나 익명 클래스 인스턴스를 직렬화하는 경우는 거의 없습니다. Comparator 등의 직렬화를 쓸때는 nested class를 사용하는 것이 좋습니다.</p>\n<p>이를 요약하면 Java 8에서 람다는 작은 함수 객체를 표현하는 가장 좋은 방법입니다. <strong>기능 인터페이스가 아닌 유형의 인스턴스를 만들어야하는 경우가 아니면, 함수 개체에 익명 클래스를 사용하면 안됩니다.</strong></p>\n<br/>\n<h2 id=\"item-43-람다보다-메서드-참조를-선택합니다\"><a href=\"#item-43-%EB%9E%8C%EB%8B%A4%EB%B3%B4%EB%8B%A4-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 43. 람다보다 메서드 참조를 선택합니다.</h2>\n<p>익명 클래스에 비해 람다의 주요 장점은 더 간결한 것입니다. 그러나 자바에서는 메서드 참조를 하는 람다보다 더 간결한 함수 객체를 생성하는 방법이 존재합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 람다식을 사용한 경우.</span>\nmap<span class=\"token punctuation\">.</span>merge <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> incr<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> count <span class=\"token operator\">+</span> incr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 더 짧은 코드, 메서드 참조</span>\nmap<span class=\"token punctuation\">.</span>merge <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>메서드에 파라미터가 많을수록 메서드 참조로 제거할 수 있는 상용구가 많아집니다. 다음은 그에 대한 주의사항입니다.</p>\n<ul>\n<li>람다로 할 수 없는 경우, 메서드 참조로도 할 수 있는 방법은 없습니다.</li>\n<li>IDE로 프로그래밍하는 경우, 가능한 경우에 한해 람다를 메서드 참조로 대체할 수 있습니다.</li>\n</ul>\n<p>그러나 항상 이가 옳지는 않습니다. 특히 메서드가 같은 클래스에 있을 때 자주 발생합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 메서드 참조</span>\nservice<span class=\"token punctuation\">.</span>execute <span class=\"token punctuation\">(</span><span class=\"token class-name\">GoshThisClassNameIsHumongous</span> <span class=\"token operator\">::</span> <span class=\"token function\">action</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 람다식 사용 (여기서는 이게 더 좋음.)</span>\nservice<span class=\"token punctuation\">.</span>execute <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> action <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>메서드 참조의 종류는 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Method Ref Type</th>\n<th>Example</th>\n<th>Lambda Equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Static</td>\n<td><code class=\"language-text\">Integer::parseInt</code></td>\n<td><code class=\"language-text\">str -&gt; Integer.parseInt(str)</code></td>\n</tr>\n<tr>\n<td>Bound</td>\n<td><code class=\"language-text\">Instant.now()::isAfter</code></td>\n<td><code class=\"language-text\">Instant then = Instant.now();</code><br/><code class=\"language-text\">t-&gt;then.isAfter(t)</code></td>\n</tr>\n<tr>\n<td>UnBound</td>\n<td><code class=\"language-text\">String::toLowerCase</code></td>\n<td><code class=\"language-text\">str -&gt; str.toLowerCase()</code></td>\n</tr>\n<tr>\n<td>Class Constructor</td>\n<td><code class=\"language-text\">TreeMap&lt;K, V&gt;::new</code></td>\n<td><code class=\"language-text\">() -&gt; new TreeMap&lt;K, V&gt;</code></td>\n</tr>\n<tr>\n<td>Array Constructor</td>\n<td><code class=\"language-text\">int[]::new</code></td>\n<td><code class=\"language-text\">len -&gt; new int[len]</code></td>\n</tr>\n</tbody>\n</table>\n<p>이를 정리하면 메서드 참조는 종종 람다보다 간결한 대안을 제공합니다. 따라서, <strong>메소드 참조가 더 짧고 명확한 경우에는 이를 사용하고 그렇지 않은 경우에는 람다를 사용하는 것이 중요합니다.</strong></p>\n<br/>\n<h2 id=\"item-44-표준-기능-인터페이스를-선택합니다\"><a href=\"#item-44-%ED%91%9C%EC%A4%80-%EA%B8%B0%EB%8A%A5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 44. 표준 기능 인터페이스를 선택합니다.</h2>\n<p>Java에 람다가 들어오고 난 이후, API 작성 가이드가 변경되었습니다.</p>\n<p>대표적으로 Map을 쓰는 경우에는 LinkedHashMap 등을 사용하는 것이 좋습니다. 예를 들어 Map에서 removeEldestEntry를 사용한다고 했을 때, LinkedHashMap 의 경우에는 삭제할 수 있지만 Map의 경우에는 수동적으로 생성해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 불필요한 기능 인터페이스; 대신 표준을 사용하십시오.</span>\n<span class=\"token annotation punctuation\">@FunctionalInterface</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EldestEntryRemovalFunction</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> remove <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> eldest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>즉, 표준 기능 인터페이스의 기능을 사용하는 경우, <strong>특수 목적으로 만든 인터페이스보다는 표준 기능 인터페이스를 사용하는 것이 중요합니다.</strong></p>\n<p>아래는 기본적인 기능 인터페이스입니다.</p>\n<table>\n<thead>\n<tr>\n<th>Interface</th>\n<th>Function Signature</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">UnaryOperator&lt;T&gt;</code></td>\n<td><code class=\"language-text\">T apply (T t)</code></td>\n<td><code class=\"language-text\">String::toLowerCase</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">BinaryOperator&lt;T&gt;</code></td>\n<td><code class=\"language-text\">T apply (T t1, T t2)</code></td>\n<td><code class=\"language-text\">BigInteger::add</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Predicate&lt;T&gt;</code></td>\n<td><code class=\"language-text\">boolean test (T t)</code></td>\n<td><code class=\"language-text\">Collection::isEmpty</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Function&lt;T&gt;</code></td>\n<td><code class=\"language-text\">R apply (T t)</code></td>\n<td><code class=\"language-text\">Arrays::asList</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Supplier&lt;T&gt;</code></td>\n<td><code class=\"language-text\">T get ()</code></td>\n<td><code class=\"language-text\">Instant::now</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Consumer&lt;T&gt;</code></td>\n<td><code class=\"language-text\">void accept (T t)</code></td>\n<td><code class=\"language-text\">System.out::println</code></td>\n</tr>\n</tbody>\n</table>\n<p>이를 사용해서 여러 변형 케이스로 만들 수도 있습니다. 이를 사용하는 여러 변형 케이스가 존재하지만, 대부분의 표준 기능 인터페이스는 기본 유형에 대한 지원을 위해 존재합니다.</p>\n<p>즉, 기본 기능 인터페이스 대신 다른 요소(boxed primitives)가 있는 인터페이스를 사용하는 것은 좋지않습니다.</p>\n<p>목적에 맞는 <strong>인터페이스가 필요한 경우</strong>에는 아래의 조건인 경우인지를 잘 생각해봐야합니다.</p>\n<ul>\n<li>일반적으로 사용되며 설명이 포함된 이름이 도움이 될 수 있는 경우.</li>\n<li>관련된 강력한 결합(contract)가 있는 경우.</li>\n<li>사용자 커스텀 메소드가 이점을 가지고 있는 경우.</li>\n</ul>\n<p>다만 이러한 경우에는 신중하게 설계가 필요합니다. 그리고, <code class=\"language-text\">@FunctionalInterface</code>와 같이 기능적 인터페이스에는 어노테이션을 추가해야합니다.</p>\n<p>요약하면, Java에서는 람다가 있기 때문에 이를 생각하고 API를 생계하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-45-스트림을-신중하게-사용합니다\"><a href=\"#item-45-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 45. 스트림을 신중하게 사용합니다.</h2>\n<p>Stream API는 대량 작업을 순차적으로 또는 병렬적으로 수행하는 작업을 쉽게하기 위해서 Java 8에 추가되었습니다.</p>\n<p>Stream API는 다음의 특징을 가집니다.</p>\n<ul>\n<li>Stream pipeline은 source stream과 0개 이상의 intermediate operation, 하나의 terminal operation으로 나눠집니다.</li>\n<li>Stream pipeline은 lazily하게 평가됩니다. (호출될 때까지 시작되지 않으며, 필요없는 데이터 요소는 계산되지 않습니다.)</li>\n<li>Stream API는 유연합니다. (모든 호출이 단일 표현식으로 연결 가능합니다.)</li>\n<li>Stream pipeline은 순차적으로 실행됩니다.</li>\n<li>Stream API는 다재다능하지만, 항상 이렇게 해야하지는 않습니다. (잘못 사용하면, 유지보수성이 떨어집니다.)</li>\n</ul>\n<p>Stream을 남용한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Overuse of streams - don't do this!</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Anagrams</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Path</span> dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> minGroupSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      words<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>word <span class=\"token operator\">-></span> word<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> minGroupSize<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> group<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 경우, 프로그램을 읽고 유지하기가 매우 어렵습니다. Stream을 잘사용한 케이스는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 세련된 스트림 사용으로 명확성과 간결함 향상</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Anagrams</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Path</span> dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> minGroupSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      words\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>word <span class=\"token operator\">-></span> <span class=\"token function\">alphabetize</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> minGroupSize<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>g <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// alphabetize method is the same as in original version</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 표현하면, 프로그램을 이해하기 어렵지 않습니다. 그리고, 람다 매개 변수의 이름도 신중하게 선정해야합니다. 명시적 유형이 없기 때문에, 스트림 파이프파린의 가독성을 높이기 위해서라도 이름 선정은 중요한 역할을 가지고 있습니다.</p>\n<p>또한, <strong>파이프 라인에서는 명시적인 유형 정보와 임시 변수가 없기 때문에 도우미 메서드를 사용하는 것은 반복 코드보다 스트림 파이프라인에서 가독성을 위해 매우 중요합니다.</strong></p>\n<p>예를 들어, 아래 코드는 이러한 스트림을 잘못 사용한 케이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out <span class=\"token operator\">::</span> <span class=\"token function\">print</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 721011081081113211911111410810033 (type을 모르므로)</span>\n\n<span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>print <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 수정한 케이스, but 이렇게 사용하는 것은 좋지않음</span></code></pre>\n<p>이와 같이 스트림 파이프라인에서 사용할 수 없는 몇가지 작업이 있습니다.</p>\n<ul>\n<li>코드 블록에서는 범위의 모든 지역 변수를 읽거나 수정이 가능하지만, 람다에서는 최종만 읽을 수 있기때문에 지역변수를 수정할 수 없습니다.</li>\n<li>코드 블록 return에서 둘러싸는 메서드 break, continue, 예외 throw 등이 가능하지만 람다에서는 불가능합니다.</li>\n</ul>\n<p>그러나 스트림에서 적절한 동작은 다음과 같습니다.</p>\n<ul>\n<li>요소 시퀀스를 균일하게 변경</li>\n<li>요소 시퀀스 필터링</li>\n<li>단일 작업을 사용하여 요소 시퀀스 결합(요소 추가 및 최소값 계산)</li>\n<li>요소의 시퀀스를 컬렉션으로 합쳐서, 공통 속성별로 그룹화</li>\n<li>일부 기준을 충족하는 요소에 대한 요소 시퀀스를 검색</li>\n</ul>\n<p>이러한 경우에 매우 좋습니다.</p>\n<p>스트림을 사용하면 아래처럼 이쁜 코드를 구성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 가장 큰 메르센 소수 20개를 출력하는 코드.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">primes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> TWO<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">intValueExact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>ONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>mersenne <span class=\"token operator\">-></span> mersenne<span class=\"token punctuation\">.</span><span class=\"token function\">isProbablePrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 항상 Stream을 쓸지, 혹은 iteration을 사용할지는 애매한 경우가 많습니다. 이러한 경우에서는 개발자의 취향에 가깝습니다. 즉, <strong>어떤 작업이 Stream이나 Iteration에 의해 더 나은건지 확실하지 않기 때문에, 두가지 모두를 시도하고 어떤 것이 나을지 고르는 것이 중요합니다.</strong></p>\n<br/>\n<h2 id=\"item-46-스트림에서-부작용이-없는-함수를-선택합니다\"><a href=\"#item-46-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%97%90%EC%84%9C-%EB%B6%80%EC%9E%91%EC%9A%A9%EC%9D%B4-%EC%97%86%EB%8A%94-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 46. 스트림에서 부작용이 없는 함수를 선택합니다.</h2>\n<p>스트림은 단순한 API가 아니라, 함수형 프로그래밍을 기반으로 하는 패러다임입니다. 이러한 스트림이 제공해야하는 표현성과 속도, 경우에 따라 병렬화 가능성을 얻기위해서는 패러다임과 API를 채택해야합니다.</p>\n<p>스트림 패러다임의 가장 중요한 부분은 각 단계의 결과가 이전 단계의 <code class=\"language-text\">pure function</code>에 최대한 가까운 변환 시퀀스로 계산을 구성하는 것입니다. (<code class=\"language-text\">pure function</code>은 결과가 입력에만 의존하는 함수입니다. 즉, 변경 가능한 상태에 의존하지 않으며 어떤 상태도 업데이트가 없습니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> freq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 잘못 스트림을 사용한 경우.</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>tokens <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  words<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">(</span>word<span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    freq<span class=\"token punctuation\">.</span>merge <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span>toLowerCase <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 스트림 API를 잘 사용한 경우.</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>tokens <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  freq <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">,</span> <span class=\"token function\">counting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위와 같이 <code class=\"language-text\">forEach</code> 연산은 동작 연산을 수행하지 않게 <strong>스트림 결과를 보고하는 목적으로 사용</strong>해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// freq 테이블에서 상위 10 개 단어 목록을 가져 오는 파이프 라인</span>\n<span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> topTen <span class=\"token operator\">=</span> freq<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>sorted <span class=\"token punctuation\">(</span><span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span>freq<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>collect <span class=\"token punctuation\">(</span>toList <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>그리고 해당 코드처럼, Collectors의 member를 정적으로 가져오는 것이 스트림 파이프라인을 더 읽기 쉽게 만듭니다.</p>\n<p>이외에도 여러개의 Collectors들이 존재합니다. 스트림 파이프 라인 프로그래밍의 본질은 부작용이 없는 함수 객체를 구성하는 것입니다. 이는 스트림 및 관련 개체에 전달된 많은 함수 개체 모두에 적용됩니다.</p>\n<ul>\n<li><code class=\"language-text\">forEach</code> : 계산을 수행하는 것이 목적이 아니라, 스트림에 의해 수행된 계산 결과를 보고해야하는 곳에 사용해야합니다.</li>\n<li><code class=\"language-text\">toList</code>, <code class=\"language-text\">toSet</code>, <code class=\"language-text\">toMap</code>, <code class=\"language-text\">groupingBy</code>, <code class=\"language-text\">joining</code> 등의 Collector factories를 사용하는 것이 중요합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-47-return-타입으로-스트림보다는-컬렉션을-선택합니다\"><a href=\"#item-47-return-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 47. Return 타입으로 스트림보다는 컬렉션을 선택합니다.</h2>\n<p>많은 메서드들은 element 시퀀스를 반환합니다. 그러나 Java 8에서 스트림이 여러 플랫폼에 추가되어서 sequence 반환 방법에 대해 적절한 반환 유형을 선정하는 방법이 어려워졌습니다. 다만 이에 대한 명확한 해결책은 없습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Stream &lt;E>에서 Iterable &lt;E> 로의 Adapter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Iterable</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> iterableOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> stream<span class=\"token operator\">::</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Iterable &lt;E>에서 Stream &lt;E> 로의 Adapter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> streamOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterable</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">StreamSupport</span><span class=\"token punctuation\">.</span>stream <span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">.</span>spliterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 for-each 문으로 변환 할 수 있습니다. Collection 인터페이스 하위 유형 Iterable 및 보유 stream이 반복 스트림 액세스를 모두 제공하기 때문에, <strong>Collection이나 적절한 subType 등이 public, sequence-returning 메서드에 가장 적합합니다.</strong> 다만, <strong>Collection 반환을 위해 메모리에 큰 시퀀스를 저장하는 것은 좋지 않습니다.</strong></p>\n<p>이를 사용한 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Returns the power set of an input set as custom collection</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PowerSet</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> src <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set too big \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbstractList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 to the power src.size()</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Set</span> <span class=\"token operator\">&amp;&amp;</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 입력 목록의 모든 하위 목록 스트림을 반환합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SubLists</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> of <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span>concat <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span>of <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>emptyList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        prefixes <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">(</span><span class=\"token class-name\">SubLists</span> <span class=\"token operator\">::</span> <span class=\"token function\">suffixes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> prefixes <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span>rangeClosed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span>end<span class=\"token operator\">-></span> list<span class=\"token punctuation\">.</span>subList <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> suffixes <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span>range <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span>start<span class=\"token operator\">-></span> list<span class=\"token punctuation\">.</span>subList <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 입력 목록의 모든 하위 목록 스트림을 반환합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> of <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span>range <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span>\n        start<span class=\"token operator\">-</span> <span class=\"token operator\">></span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span>rangeClosed <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span>end<span class=\"token operator\">-></span> list<span class=\"token punctuation\">.</span>subList <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이, element 시퀀스를 반환하는 메서드를 작성할 때, 일부 사용자는 stream으로 처리하고 다른 사용자는 iteration으로 사용하는 것을 좋아할 수 있습니다. 그러나 둘다 잘못된 것이 아니고, 이 두개를 필요에 따라 사용하는 것이 좋습니다. 그리고 Collections로 반환할 수 있으면 좋습니다. (작은 경우, ArrayList / 큰 경우, 사용자 지정 컬렉션)</p>\n<br/>\n<h2 id=\"item-48-스트림을-병렬로-만들-때-주의합니다\"><a href=\"#item-48-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EB%B3%91%EB%A0%AC%EB%A1%9C-%EB%A7%8C%EB%93%A4-%EB%95%8C-%EC%A3%BC%EC%9D%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 48. 스트림을 병렬로 만들 때 주의합니다.</h2>\n<p>Java는 동시 프로그래밍 작업을 용이하게 하기 위해 많은 노력을 했습니다.</p>\n<p>예를 들어 다음의 코드를 병렬로 구성하는 경우입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 처음 20 개의 Mersenne 소수를 생성하는 스트림 기반 프로그램</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  primes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> map <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span> TWO<span class=\"token punctuation\">.</span>pow <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>intValueExact <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> subtract <span class=\"token punctuation\">(</span>ONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">(</span>mersenne<span class=\"token operator\">-></span> mersenne<span class=\"token punctuation\">.</span>isProbablePrime <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>limit <span class=\"token punctuation\">(</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out <span class=\"token operator\">::</span> <span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">></span></span> primes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span>iterate <span class=\"token punctuation\">(</span>TWO<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BigInteger</span> <span class=\"token operator\">::</span> <span class=\"token function\">nextProbablePrime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 작업을 parallel() 스트림 파이프 라인에 호출을 추가해서 속도를 높일려고하면, 이를 병렬화 하는 방법을 모르기 때문에 실패합니다. 즉, <strong>최상의 상황에서 Stream.iteration이거나 intermediate operation limited가 사용되는 경우 파이프 라인을 병렬화해도 성능적인 이득은 없습니다.</strong> 따라서 스트림 파이프라인을 무차별적으로 병렬화하는 것이 좋지 않습니다.</p>\n<p>일반적으로 <code class=\"language-text\">ArrayList</code>, <code class=\"language-text\">HashMap</code>, <code class=\"language-text\">HashSet</code>, <code class=\"language-text\">ConcurrentHashMap</code>, <code class=\"language-text\">arrays</code>, int 범위, long 범위 등이 병렬 처리의 성능 향상을 통해 스트림에 가장 적합합니다.</p>\n<p>스트림을 병렬화를 하게 되었을 때, 장애 및 성능 저하가 발생할 수 있게 되었으며 잘못된 결과 및 예측할 수 없는 동작으로 이어지게 됩니다.</p>\n<p>다만 적절한 상황에서, 스트림 파이프라인에 parallel(병렬) 호출을 추가하는 것만으로 프로세서 코어 수에서 거의 선형에 가까운 속도 향상을 달성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 소수 계산 스트림 파이프 라인-병렬화의 이점</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> pi <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">LongStream</span><span class=\"token punctuation\">.</span>rangeClosed <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span><span class=\"token class-name\">BigInteger</span> <span class=\"token operator\">::</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span>isProbablePrime <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 아래는 parallel()을 통해 시간 단축을 한 경우입니다.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> pi <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">LongStream</span><span class=\"token punctuation\">.</span>rangeClosed <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>parallel <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span><span class=\"token class-name\">BigInteger</span> <span class=\"token operator\">::</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span>isProbablePrime <span class=\"token punctuation\">(</span><span class=\"token number\">50</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>계산의 정확성을 유지하고 속도를 높일 것이라고 믿을 충분한 이유가 없는 경우, 스트림 파이프 라인을 병렬화하는 것은 좋지않습니다.</strong> 이를 사용할 때는, 올바른 상태를 유지하고, 신중한 성능 측정을 수행해서 사용하는 것이 꼭 필요합니다.</p>\n"}},{"node":{"title":"[Java] Effective Java, Methods","path":"/07-java-effective-java/","date":"16. May 2021","timeToRead":24,"description":"Effective Java 책 중, ch8. 메서드에 대해 정리합니다.","content":"<h1 id=\"methods\"><a href=\"#methods\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Methods</h1>\n<p>이 챔터에서는 메서드 디자인의 여러 측면에 대해 이야기합니다. (어떻게 파라미터를 처리하고, 값을 리턴하는지, 메서드 서명을 어떻게 디자인하는 지, 메서드를 어떻게 문서화하는지) 이러한 대부분의 자료들은 생성자와 메서드에에 적용됩니다. 특히, 유용성, 견고성 및 유연성에 중점을 둡니다.</p>\n<h2 id=\"item-49-매개-변수의-유효성을-확인합니다\"><a href=\"#item-49-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8%EC%84%B1%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 49. 매개 변수의 유효성을 확인합니다.</h2>\n<p>대부분의 메서드와 생성자는 매개 변수에 전달할 수 있는 값에 대한 몇가지 제한이 있습니다. 그렇기 때문에, 특정 실패에 대해 예외처리를 해줘야합니다.</p>\n<p>그러나 Java 7에서 추가된 <code class=\"language-text\">Object.requireNonNull</code>처럼, 유연하고 편리한 방법을 통해서 null 검사 등을 수동으로 할 필요가 없게 되었습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java의 null 검사 기능 인라인 사용</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span>requireNonNull <span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">,</span> <span class=\"token string\">\"strategy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>그 이후로, Java 9에서는 범위 검사 기능이 <code class=\"language-text\">java.util.Objects</code>에 추가되었으며, 이러한 방법은 checkFromIndexSize, checkFromToIndex, checkIndex 등을 사용할 수 있습니다.</p>\n<p>nonpublic method는 <code class=\"language-text\">assertions</code>을 사용해서 매개변수를 확인할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 재귀 적 정렬을 위한 private helper function</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">assert</span> a <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">assert</span> offset <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> offset <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">assert</span> length <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> length <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Do the computation</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">assert</code>의 기본 원리는 패키지가 클라이언트에 의해 사용되는 방식에 관계없이 asserted condition이 true라는 주장으로 진행됩니다. 그렇기 때문에, 일반 유효성 검사와 달리 assertions은 만약 실패할시, <code class=\"language-text\">AssertionError</code>가 발생합니다.</p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Assertions 공식 문서</a></li>\n</ul>\n<p>이외에도 여러 조건에 따라 확인할 수 있는 부분이 있고, 확인할 수 없는 부분이 있습니다.</p>\n<p>결론적으로는 <strong>메소드나 생성자를 작성할 때마다, 매개 변수에 어떤 제한이 있는지를 생각</strong>해야합니다. 이러한 제한 사항을 문서화하여야하며, method body의 시작 부분에 명시적인 검사를 적용해야하며, 이러한 습관을 가지고 있어야합니다.</p>\n<br/>\n<h2 id=\"item-50-필요할-때-방어적-사본을-생성합니다\"><a href=\"#item-50-%ED%95%84%EC%9A%94%ED%95%A0-%EB%95%8C-%EB%B0%A9%EC%96%B4%EC%A0%81-%EC%82%AC%EB%B3%B8%EC%9D%84-%EC%83%9D%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 50. 필요할 때, 방어적 사본을 생성합니다.</h2>\n<p>Java의 장점 중 하나는, safe language입니다. 이는 메모리 손상 오류에 영향을 받지않음을 의미하며, 이를 통해서 어떤 일이 일어나도 불변성이 유지될 것이라 확신하고 진행할 수 있습니다.</p>\n<p>다만, 이 경우에도 코드를 개판... 으로 짜면 문제가 발생할 수 있습니다. 따라서 <strong>클래스의 클라이언트가 위험하게 구성될 수 있다는 가정하에, 방어적으로 프로그래밍해야합니다.</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Broken \"immutable\" time period class</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n    start <span class=\"token operator\">+</span> <span class=\"token string\">\" after \"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end   <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> start<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>    <span class=\"token comment\">// Remainder omitted</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Period 인스턴스의 내부를 공격한 경우.</span>\n  <span class=\"token class-name\">Date</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Date</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Period</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  end<span class=\"token punctuation\">.</span><span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p 내부가 수정됩니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 경우처럼, Date가 더이상 사용되지 않으면 이를 새로운 코드에서 사용하면 안됩니다. 따라서 이러한 문제에서 인스턴스 내부를 보호하려면, <strong>생성자에 대한 각 변경 가능한 매개 변수의 방어적 복사본을 만드는 것이 중요합니다.</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 변경된 생성자, 매개 변수의 방어적 복사본을 만듭니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Period</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>getTime <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span>getTime <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>compareTo <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">+</span> <span class=\"token string\">\"after\"</span><span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이렇게 사용하면 위의 문제를 해결할 수 있습니다. 그러나 아래처럼, 데이터를 바꿀 수 도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Date</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Date</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Period</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// p의 내부를 수정합니다!</span></code></pre>\n<p>이를 해결할려면 다음처럼 또 할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 수리 된 접근 자-내부 필드의 방어용 복사본 만들기</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>getTime <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> end <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span>getTime <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 새로운 생성자와 새로운 접근자를 사용함을 통해서 방어적 코딩을 할 수 있습니다.</p>\n<p><strong>클라이언트에서 클래스를 가져오거나, 반환하는 경우에 변경 가능한 요소가 있는 경우에는 클래스는 구성 요소를 방어적으로 복사해야합니다. 복사를 할 수 없는 환경이면, 사용하는 클라이언트를 신뢰하는 구조로 가야하면서, 이를 수정하지 않도록 문서화시켜야합니다.</strong></p>\n<br/>\n<h2 id=\"item-51-메서드-이름을-신중하게-설계합니다\"><a href=\"#item-51-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%84%A4%EA%B3%84%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 51. 메서드 이름을 신중하게 설계합니다.</h2>\n<p>아래의 규칙을 지켜야합니다.</p>\n<h3 id=\"메서드-이름을-신중하게-선택해야합니다\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%84%A0%ED%83%9D%ED%95%B4%EC%95%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메서드 이름을 신중하게 선택해야합니다.</h3>\n<ul>\n<li>이해하기 동일한 패키지의 다른 이름과 일치하는 이름을 선택합니다.</li>\n<li>광범위한 합의와 일치하는 이름을 선택하는 것이 좋습니다.</li>\n</ul>\n<h3 id=\"편리한-방법을-제공하는데-너무-과하게-사용하면-안됩니다\"><a href=\"#%ED%8E%B8%EB%A6%AC%ED%95%9C-%EB%B0%A9%EB%B2%95%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94%EB%8D%B0-%EB%84%88%EB%AC%B4-%EA%B3%BC%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>편리한 방법을 제공하는데 너무 과하게 사용하면 안됩니다.</h3>\n<ul>\n<li>너무 많아지면 이를 사용하고 문서화하고 테스트, 유지하는데 어려워집니다.</li>\n</ul>\n<h3 id=\"너무-긴-매개변수는-피합니다\"><a href=\"#%EB%84%88%EB%AC%B4-%EA%B8%B4-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%8A%94-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>너무 긴 매개변수는 피합니다.</h3>\n<ul>\n<li>4개 이하의 매개변수를 사용하는 것이 좋습니다.</li>\n<li>동일한 형식의 매개 변수 시퀀스가 길면 안좋습니다.</li>\n</ul>\n<p>이를 해결하는 방법은 다음과 같습니다.</p>\n<ul>\n<li>메서드를 여러 메서드로 나눕니다.</li>\n<li>매개 변수 그룹을 보유하는 <code class=\"language-text\">helper class</code>를 만듭니다.</li>\n<li>메서도 호출까지 Builder 패턴을 적용합니다.</li>\n</ul>\n<h3 id=\"매개변수-유형의-경우-클래스보다-인터페이스를-선호합니다\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EC%9C%A0%ED%98%95%EC%9D%98-%EA%B2%BD%EC%9A%B0-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>매개변수 유형의 경우, 클래스보다 인터페이스를 선호합니다.</h3>\n<p>매개 변수를 정의하는데 적합한 인터페이스가 있는 경우, 인터페이스를 구현하는 클래스를 대신 사용하는 것이 좋습니다.</p>\n<h3 id=\"boolean의-의미가-메서드-이름에서-명확하지-않으면boolean-매개-변수-보다는-요소가-두개인-enum-형을-쓰는-것이-중요합니다\"><a href=\"#boolean%EC%9D%98-%EC%9D%98%EB%AF%B8%EA%B0%80-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EB%A6%84%EC%97%90%EC%84%9C-%EB%AA%85%ED%99%95%ED%95%98%EC%A7%80-%EC%95%8A%EC%9C%BC%EB%A9%B4boolean-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98-%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%9A%94%EC%86%8C%EA%B0%80-%EB%91%90%EA%B0%9C%EC%9D%B8-enum-%ED%98%95%EC%9D%84-%EC%93%B0%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A4%91%EC%9A%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>boolean의 의미가 메서드 이름에서 명확하지 않으면,boolean 매개 변수 보다는 요소가 두개인 Enum 형을 쓰는 것이 중요합니다.</h3>\n<p>열거형을 통해서 코드를 더 쉽게 읽고 쓸 수 있습니다.</p>\n<br/>\n<h2 id=\"item-52-오버로딩을-신중하게-사용합니다\"><a href=\"#item-52-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EC%9D%84-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 52. 오버로딩을 신중하게 사용합니다.</h2>\n<p>아래는 집합, 목록, 또는 다른 종류의 컬렉션인지에 따라 컬렉션을 분류하는 의도로 된 목적으로 된 코드입니다. 그러나 잘못된 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectionClassifier</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">classify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">classify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> lst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"List\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">classify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Unknown Collection\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> collections <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">:</span> collections<span class=\"token punctuation\">)</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">classify</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Output\n * : Unknown Collection\n * : Unknown Collection\n * : Unknown Collection\n */</span></code></pre>\n<p>다음과 같이 발생하는 원인은, <code class=\"language-text\">classify</code> 메서드가 overload되고 호출할 overload가 컴파일 타임에 선택되기 때문입니다.</p>\n<p>오버로드된 메서드 중에서 선택이 static이고, 재정의된 메서드 중에서 선택이 <code class=\"language-text\">dynamic</code>이기 때문에 직관적이지 않습니다. 즉, 오버로딩된 메서드의 올바른 버전은 런타임에 선택되고, 메서드가 호출되는 개체의 런타임 유형을 기반으로 합니다.</p>\n<p>즉, 상위 클래스의 메서드 선언과 동일한 시그니처가 있는 메서드 선언이 하위 클래스에 포함되어 있으면 메서드가 재정의 됩니다. 이를 잘표현 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Wine</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"wine\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SparklingWine</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Wine</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"sparkling wine\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Champagne</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SparklingWine</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"champagne\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Overriding</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Wine</span><span class=\"token punctuation\">></span></span> wineList <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Wine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SparklingWine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Champagne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Wine</span> wine <span class=\"token operator\">:</span> wineList<span class=\"token punctuation\">)</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>wine<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Output\n * : wine\n * : sparkling wine\n * : champagne\n */</span></code></pre>\n<p>또 다른 방법으로 아래처럼 <code class=\"language-text\">instanceof</code>를 사용할 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">classify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Set</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Set\"</span> <span class=\"token operator\">:</span>\n    c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">List</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"List\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Unknown Collection\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>오버라이딩(overriding)은 표준이고, 오버로딩(overloading)이기 때문에, 오버라이딩(overriding, 재정의)는 메서드 호출의 동작에 대해 사람들의 예상을 설정할 수 있습니다. 그러나 오버로딩(overloading)은 여러 expectations에 혼란을 줄 수 있습니다.</p>\n<p>이러한 잘못된 오버로딩의 사용은, 어떠한 것이 호출되는지 모르기 때문에 어려움을 겪을 수 있습니다. 따라서 <strong>혼란스러운 오버로딩 사용을 피해야합니다.</strong></p>\n<p>여러 오버로딩을 잘사용하는 방법은 이야기가 많지만, <strong>안전하고 보수적인 정책은 동일한 수의 매개 변수로 두 개의 오버로딩을 내보내지 않는 것입니다.</strong> 이러한 제한을 통해서 메서드를 오버로드하는 대신 항상 다른 이름을 지정할 수 있습니다.</p>\n<p>예를 들면, write 메서드 대신에, writeBoolean, writeInt, writeLong 등이 있으며 이를 통해서 대응하는 메서드를 바로 확인할 수 있다는 점입니다.</p>\n<p>오버로딩을 애매하게 사용하는 부분은 Java 5 이전부터 존재했으며, Java 8에서 람다가 나오고 나서 더 헷갈리게 되었습니다. 또한 동일한 인수 위치에서 서로 다른 기능적 인터페이스를 사용하는 메서드 또는 생성자를 오버로딩하면 혼란을 만듭니다. <strong>동일한 인수 위치에서 다른 기능 인터페이스를 사용하기 위해 메서드를 오버로드하면 안됩니다.</strong></p>\n<p>결론적으로는, 메서드를 오버로드할 수 있다고 꼭 할 필요가 없습니다. 일반적으로 동일한 수의 매개 변수를 가진 여러 시그니처가 있는 메서드를 오버로드하지 않는 곳이 좋습니다. 일부 생성자와 관련되어 이가 힘들 수도 있지만, 캐스트를 통해서 동일한 매개 변수가 다른 오버로딩에 전달되는 것은 막아야합니다.</p>\n<br/>\n<h2 id=\"item-53-varargs를-신중하게-사용합니다\"><a href=\"#item-53-varargs%EB%A5%BC-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 53. Varargs를 신중하게 사용합니다.</h2>\n<p><code class=\"language-text\">variable arity</code> 메서드로 알려진 Varargs 메서드는 지정된 유형의 0개 이상의 이상의 인수를 허용합니다. varargs 기능은 먼저 arguments 배열을 만들고, 다음 argument 값을 배열에 넣고, 마지막으로 배열을 메서드에 전달하는 방식으로 작동합니다.</p>\n<p>아래는 대표적인 예시입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 간단한 varargs 사용</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg <span class=\"token operator\">:</span> args<span class=\"token punctuation\">)</span>\n    sum <span class=\"token operator\">+=</span> arg<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> sume<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 때로는 0 개 이상의 인수가 아닌 특정 유형의 하나 이상의 인수 가 필요한 메서드를 작성하는 것이 적절합니다</p>\n<p>아래는 잘못된 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too few arguments\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span>\n      min <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 문제는 클라이언트가 인수없이 메서드를 호출하면 컴파일 에러가 아닌 런타임 에러가 발생합니다. 이를 해결하기 위해서는 두개의 매개 변수를 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// The right way to use varargs to pass one or more arguments</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> firstArg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> remainingArgs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> firstArg<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg <span class=\"token operator\">:</span> remainingArgs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span>  min <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>성능이 중요한 상황에서 varargs를 사용할 때는 주의해서 사용해야합니다. varargs 메서드를 호출할 때 마다 배열 할당 및 초기화가 발생합니다. 이러한 경우 성능적인 이슈를 해결하기 위해서는 다음과 같은 패턴을 사용할 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> rest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>이는 일반적으로 적절하지않지만, 일부 경우에서 적용될 수 있습니다.</p>\n<p>즉, varargs는 가변 개수의 인수로 메서드를 정의해야할 때 매우 유용합니다. varargs 매개 변수 앞에 필수 매개 변수를 추가하고 varargs 의 성능에 대해 유의해야합니다.</p>\n<br/>\n<h2 id=\"item-54-null이-아닌-빈-컬렉션이나-배열을-반환합니다\"><a href=\"#item-54-null%EC%9D%B4-%EC%95%84%EB%8B%8C-%EB%B9%88-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%B4%EB%82%98-%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 54. Null이 아닌 빈 컬렉션이나 배열을 반환합니다.</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 빈 컬렉션을 나타 내기 위해 null을 반환합니다. -> 좋지 않습니다.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cheese</span><span class=\"token punctuation\">></span></span> cheesesInStock <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cheese</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCheeses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> cheesesInStock<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>cheesesInStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 경우, 클라이언트 측에서는 null을 처리하기 위해서 추가 코드가 필요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cheese</span><span class=\"token punctuation\">></span></span> cheeses <span class=\"token operator\">=</span> shop<span class=\"token punctuation\">.</span><span class=\"token function\">getCheeses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cheeses <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cheeses<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cheese</span><span class=\"token punctuation\">.</span>STILTON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jolly good, just the thing.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이런 처리가 필요없게 하기 위해서는 다음과 같이 작성하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cheese</span><span class=\"token punctuation\">></span></span> cheeses <span class=\"token operator\">=</span> shop<span class=\"token punctuation\">.</span><span class=\"token function\">getCheeses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cheeses <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cheeses<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cheese</span><span class=\"token punctuation\">.</span>STILTON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jolly good, just the thing.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이를 더 최적화하면 아래처럼 표현할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 최적화-빈 컬렉션 할당 방지</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Cheese</span><span class=\"token punctuation\">></span></span> getCheeses <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> cheesesInStock<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>emptyList <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span>cheesesInStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>배열도 비슷한 방식으로 처리할 수 있으며, 최적화할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 최적화-빈 배열 할당 방지</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cheese</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> EMPTY_CHEESE_ARRAY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cheese</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Cheese</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> getCheeses <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> cheesesInStock<span class=\"token punctuation\">.</span>toArray <span class=\"token punctuation\">(</span>EMPTY_CHEESE_ARRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 요약하면, <strong>빈 배열이나 컬렉션 대신에 null을 반환하면 안됩니다.</strong></p>\n<br/>\n<h2 id=\"item-55-optionals를-신중하게-반환합니다\"><a href=\"#item-55-optionals%EB%A5%BC-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EB%B0%98%ED%99%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 55. Optionals를 신중하게 반환합니다.</h2>\n<p>Java 8 이전에는 특정 상황에서 값을 반환 할 수 없는 메서드를 작성할 때, 취할 수 있는 두 가지 접근 방식이 있습니다. 보통 예외를 throw 하거나 반환할 수 있습니다. 하지만 디 두 접근 방식 모두 완벽하지는 않습니다.</p>\n<p>Java 8에는 값을 반환 할 수 없는 메서드를 작성하는 세번 째 접근 방식이 있습니다. (<code class=\"language-text\">Optional&lt;T&gt;</code>)</p>\n<p><code class=\"language-text\">Optional&lt;T&gt;</code>는 개념적으로 T를 반환하지만 그렇게 할 수 없는 경우에는 대신에 Optional<T>를 반환합니다. <code class=\"language-text\">Optional</code>의 반환 값은 예외를 던지거나, null을 던지는 거보다 유연하고 쉽습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션에서 최대 밧 반환, 비어있는 경우 예외 발생</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">E</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty collection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">E</span>  <span class=\"token number\">9</span>result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 <code class=\"language-text\">Optional</code>릍 통해서 수정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">E</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만, <code class=\"language-text\">Optional-returning</code> 메서드에서 null 값을 반환하면 안됩니다. 이는 <code class=\"language-text\">Optional</code>의 목적을 무시하는 것입니다. 또한 <code class=\"language-text\">Optional</code>을 통해서 다른 메서드에서도 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션의 최대 값을 Optional &lt;E>로 반환-스트림을 사용</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> max <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">naturalOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 선택 사항을 사용하여 선택한 기본값 제공</span>\n<span class=\"token class-name\">String</span> lastWordInLexicon <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"No words ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 선택 사항을 사용하여 선택한 예외 발생</span>\n<span class=\"token class-name\">Toy</span> myToy <span class=\"token operator\">=</span> max <span class=\"token punctuation\">(</span>toys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TemperTantrumException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반환 값이 있다는 것을 알고있을 때 선택 사항 사용</span>\n<span class=\"token class-name\">Element</span> lastNobleGas <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Elements</span><span class=\"token punctuation\">.</span>NOBLE_GASES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></code></pre>\n<p>위의 이러한 방법들을 통해서 적절한 해결책을 찾지 못한 경우에는 <code class=\"language-text\">Optional</code>의 <code class=\"language-text\">isPresent().true</code>를 사용하는 것도 나쁘지 않습니다. 또한 snippset을 사용하는 것도 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// snippset 코드</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProcessHandle</span><span class=\"token punctuation\">></span></span> parentProcess <span class=\"token operator\">=</span> ph<span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parent PID: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>parentProcess<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n  <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>parentProcess<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"N/A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Optional의 map 기능을 사용한 코드</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parent PID: \"</span> <span class=\"token operator\">+</span>\n  ph<span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span><span class=\"token function\">pid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N/A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>자바의 Stream을 사용하는 경우, 아래처럼 <code class=\"language-text\">Optional</code>을 적용할 수 있습니다. (Java9에서는 스트림에 <code class=\"language-text\">Optional</code>이 추가되었습니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java 8</span>\nstreamOfOptionals\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Java 9</span>\nstreamOfOptionals\n  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span></code></pre>\n<p>그러나 모든 반환 유형에서 적용되는 것은 아닙니다. <code class=\"language-text\">Collections</code>, <code class=\"language-text\">Maps</code>, <code class=\"language-text\">Streams</code>, <code class=\"language-text\">Arrays</code>, <code class=\"language-text\">Optionals</code> 을 포함하는 컨테이너 유형은 옵션으로 래핑해서는 안됩니다. 이 경우에는 <code class=\"language-text\">Optional&lt;List&lt;T&gt;&gt;</code>를 반환하는 것 보다는 <code class=\"language-text\">List&lt;T&gt;</code>를 반환하는 것이 좋습니다.</p>\n<p>결과를 반환 할 수 없는 경우, <code class=\"language-text\">Optional&lt;T&gt;</code>를 반환하는 메서드를 선언해야하며, 결과가 반환되지 않으면 클라이언트가 특별한 처리를 수행해야합니다.</p>\n<p>boxed primitive type을 포함하는 옵셔널을 반환하는 것은, 비용이 매우 큽니다. 따라서 <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">Byte</code>, <code class=\"language-text\">Character</code>, <code class=\"language-text\">Short</code>, <code class=\"language-text\">Float</code> 형을 제외하고는 <code class=\"language-text\">boxed primitive type</code>을 Optional로 반환하면 안됩니다.</p>\n<p>앞서 Optional 을 반환하고, 치를 처리하는 방법에 대해 설명했습니다. 이를 다른 가능한 사용에 대해 이야기 하지 않은 이유는, 이를 잘 못 사용하면, 불필요한 복잡성을 만들기 때문입니다. Collection이나 array의 key, value, element 로 Optional을 사용하는 것은 적절하지 않습니다.</p>\n<p>이를 정리하면, <strong>항상 값을 반환할 수 없는 메서드를 작성하고 메서드 사용자가 호출 할 때마다, 이 가능성을 고려하는 것을 중요하다고 생각하면 <code class=\"language-text\">Optional</code>을 사용하는 것이 좋습니다.</strong> 그러나, 이 경우 성능에 대한 부분을 고려해야합니다. 성능이 중요한 메서드의 경우에는 null을 반환하거나, throw하는 것이 더 좋을 수 있습니다.</p>\n<br/>\n<h2 id=\"item-56-노출된-모든-api-요소에-대한-문서-주석을-작성합니다\"><a href=\"#item-56-%EB%85%B8%EC%B6%9C%EB%90%9C-%EB%AA%A8%EB%93%A0-api-%EC%9A%94%EC%86%8C%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AC%B8%EC%84%9C-%EC%A3%BC%EC%84%9D%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 56. 노출된 모든 API 요소에 대한 문서 주석을 작성합니다.</h2>\n<p>API를 사용할 수 있으려면 문서화해야합니다. 전통적으로 API 문서는 수동으로 생성되었으며 코드와 동기화를 유지하는 어려운 일입니다.</p>\n<p>문서 주석 규칙은 공식적으로 언어의 일부는 아니지만 모든 Java 프로그래머가 알아야하는 사실상의 API를 구성합니다. 대표적인 문서 태그로 Java 9의 <code class=\"language-text\">{@index}</code>, Java 8의 <code class=\"language-text\">{@implSpec}</code>, Java 5의 <code class=\"language-text\">{@literal}</code>, <code class=\"language-text\">{@code}</code> 등이 있습니다.</p>\n<p>API를 올바르게 문서화하려면 내보낸 모든 클래스, 인터페이스, 생성자, 메소드 및 필드 선언 앞에 주석을 붙여야합니다. 또한 메서드에 대한 문서 주석은 메서드와 클라이언트 간의 계약을 간결하게 설명해야합니다.</p>\n<p>이를 표현한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// ({@code index &lt; 0 || index >= this.size()})</span>\n<span class=\"token class-name\">E</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token comment\">/* 이 컬렉션이 비어 있으면 true를 반환합니다.\n  * @implSpec\n  * 이 구현은 {@code this.size () == 0}을 반환합니다.\n  * @return true if this collection is empty\n  */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> isEmpty <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>문서 주석은 소스 코드와 생성된 문서 모두에서 읽을 수 있어야합니다.</strong> 또한, 클래스 또는 인터페이스의 두 멤버 또는 생성자는 동일한 요약 설명을 가져서는 안됩니다.</p>\n<p>이를 사용한 예제 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**\n * A suspect, such as Colonel Mustard or <span class=\"token punctuation\">{</span><span class=\"token keyword\">@literal</span> Mrs. Peacock<span class=\"token punctuation\">}</span>.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Suspect</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">*</span> <span class=\"token class-name\">This</span> method complies <span class=\"token keyword\">with</span> <span class=\"token namespace\">the</span> <span class=\"token punctuation\">{</span><span class=\"token annotation punctuation\">@index</span> IEEE <span class=\"token number\">754</span><span class=\"token punctuation\">}</span> standard<span class=\"token punctuation\">.</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token doc-comment comment\">/** 키를 값에 매핑하는 객체. 맵은 중복 키를 포함 할 수 없습니다\n  * 각 키는 최대 하나의 값에 매핑 할 수 있습니다. (나머지는 생략 됨)\n  * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">&lt;</span>K<span class=\"token punctuation\">></span></span>이 맵에서 관리하는 키 유형\n  * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">&lt;</span>V<span class=\"token punctuation\">></span></span> 매핑 된 값 유형\n  */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>Enum 형을 문서화할 때는 상수와, 유형 및 공용 메서드를 문서화해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token doc-comment comment\">/**\n  * 심포니 오케스트라의 악기 섹션.\n  */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrchestraSection</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token doc-comment comment\">/** 플루트, 클라리넷, 오보에와 같은 목 관악기. */</span>\n  WOODWIND<span class=\"token punctuation\">,</span>\n\n  <span class=\"token doc-comment comment\">/** 프렌치 호른 및 트럼펫과 같은 금관 악기. */</span>\n  BRASS<span class=\"token punctuation\">,</span>\n\n  <span class=\"token doc-comment comment\">/** 팀파니 및 심벌즈와 같은 타악기. */</span>\n  PERCUSSION<span class=\"token punctuation\">,</span>\n\n  <span class=\"token doc-comment comment\">/** 바이올린과 첼로와 같은 현악기. */</span>\n  STRING<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token doc-comment comment\">/**\n  * 주석이 달린 메서드가 통과하려면 지정된 예외를 throw해야하는 테스트 메서드임을 나타냅니다.\n  */</span>\n<span class=\"token annotation punctuation\">@Retention</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ExceptionTest</span> <span class=\"token punctuation\">{</span>\n <span class=\"token doc-comment comment\">/**\n  * 통과하기 위해 주석이 달린 테스트 메서드가 throw해야하는 예외입니다 .\n  * (테스트는 이 클래스 객체가 설명하는 유형의 하위 유형을 던질 수 있습니다.)\n  */</span>\n  <span class=\"token class-name\">Class</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">></span></span> value <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>를 확장합니다<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>또한 API의 두가지 측면은 스레드 안전성고 직렬화 가능성입니다. 또한 <strong>클래스 또는 정적 메서드가 스레드로부터 안전한지 여부에 관계없이, 스레드 안전성을 문서화</strong>해야합니다. 이를 문서화 해야지, 이후에 관리를 하기 편합니다.</p>\n<p>이를 요약하면 문서 주석은 API를 문서화하는 가장 효과적인 방법입니다. <strong>내보낸 모든 API 요소에 대한 사용은 필수로 간주해야합니다. 따라서 표준 규칙을 준수하는 일관된 스타일을 채택해야합니다.</strong></p>\n"}},{"node":{"title":"[Java] 자바 직렬화","path":"/java-serialize/","date":"12. May 2021","timeToRead":8,"description":"Java 직렬화와 역직렬화에 대해 정리합니다.","content":"<h1 id=\"java-serialize\"><a href=\"#java-serialize\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Serialize</h1>\n<p>이펙티브 자바를 공부하던 중, 마지막 단원을 공부하다보면 자바 직렬화(Serialize)에 대한 개념이 나옵니다. 다만, 이 부분에 대해 지식이 너무 부족해 이를 따로 정리합니다.</p>\n<h2 id=\"자바-직렬화란\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 직렬화란</h2>\n<p>일반적으로 자바의 직렬화와, 역직렬화를 아울러서 직렬화라고 합니다.</p>\n<h3 id=\"직렬화serialize\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94serialize\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화(Serialize)</h3>\n<ul>\n<li>자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도 사용할 수 있도록 바이트 형태로 데이터를 변환하는 기술입니다.</li>\n<li>JVM의 메모리에서 상주되어 있는 객체 데이터를 바이트 형태로 변환하는 기술입니다.</li>\n<li>일반적으로 객체들을 통째로 저장하거나 전송하고 싶을 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"역직렬화deserialize\"><a href=\"#%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94deserialize\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>역직렬화(Deserialize)</h3>\n<ul>\n<li>바이트로 변환된 데이터를 원래대로 객체나 데이터로 변환하는 기술을 역직렬화라고 합니다.</li>\n<li>직렬화된 바이트 형태의 데이터를 개체로 변환해서 JVM으로 상주시키는 형태입니다.</li>\n<li>저장된 파일을 읽거나 전송된 스트림 데이터를 읽어서 원래 객체의 형태로 복원합니다.</li>\n</ul>\n<br/>\n<h2 id=\"자바-직렬화를-사용하기\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 직렬화를 사용하기</h2>\n<h3 id=\"자바-직렬화-방법\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 직렬화 방법</h3>\n<p>자바의 기본(primitive) 타입과 <code class=\"language-text\">java.io.Serializable</code> 인터페이스를 상송받은 객체는 직렬화 할 수 있는 <strong>기본 조건</strong>을 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">myepark<span class=\"token punctuation\">.</span>study</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person{id='%s', email='%s', age='%s'}\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음처럼, 코드 작성시 직렬화 조건을 만족한 상태입니다.</p>\n<p>이를 직렬화하는 방법은 <code class=\"language-text\">java.io.ObjectOutputStream</code> 객체를 이용하는 것입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializableTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"박모씨\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"XXX-XXX\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serializedPerson <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteArrayOutputStream</span> baos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>baos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 직렬화된 Person 객체</span>\n        serializedPerson <span class=\"token operator\">=</span> baos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>serializedPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드를 실행시키면, 이에 대한 결과를 확인할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">rO0ABXNyAAxzdHVkeS5QZXJzb25ntzRTK7/dGgIAA0kAA2FnZUwAAmlkdAASTGphdmEvbGFuZy9TdHJpbmc7TAAEbmFtZXEAfgABeHAAAAAadAAHWFhYLVhYWHQACeuwleuqqOyUqA==</code></pre>\n<p>이는 바이트 배열 형태이기 때문에 사용자가 봤을때는 확인할 수 없습니다.</p>\n<h3 id=\"자바-역직렬화-방법\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 역직렬화 방법</h3>\n<p>자바 역직렬화를 사용하기 위해서는 아래의 조건을 만족해야합니다.</p>\n<ul>\n<li>\n<p>직렬화 대상이 된 객체의 클래스가 클래스 패스에 존재해야하며 <code class=\"language-text\">import</code> 되어야 합니다.</p>\n<ul>\n<li>중요한 점 중 하나는 직력화와 역직렬화를 진행하는 시스템이 서로 다를 수 있기 때문에 이를 <strong>반드시 고려</strong>해야합니다.</li>\n</ul>\n</li>\n<li>자바 직렬화 대상 객체는 동일한 <code class=\"language-text\">serialVersionUID</code> 를 가지고 있어야합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이를 통해서 위의 바이트 코드를 다음과 같이 수정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeserializableTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> base64Memeber <span class=\"token operator\">=</span> <span class=\"token string\">\"rO0ABXNyAAxzdHVkeS5QZXJzb25ntzRTK7/dGgIAA0kAA2FnZUwAAmlkdAASTGphdmEvbGFuZy9TdHJpbmc7TAAEbmFtZXEAfgABeHAAAAAadAAHWFhYLVhYWHQACeuwleuqqOyUqA==\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serializedPerson <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>base64Memeber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteArrayInputStream</span> bais <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>serializedPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>bais<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 역직렬화된 Person 객체를 읽어옵니다.</span>\n        <span class=\"token class-name\">Object</span> objectPerson <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> objectPerson<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드를 실행하면 아래처럼 결과가 나옵니다.</p>\n<p><code class=\"language-text\">Person{name=&#39;박모씨&#39;, id=&#39;XXX-XXX&#39;, age=&#39;26&#39;}</code></p>\n<p>이처럼 직렬화와 역직렬화를 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"직렬화-사용시-주의할-부분\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EB%B6%80%EB%B6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화 사용시 주의할 부분.</h2>\n<ul>\n<li>자바 직렬화 사용할 때는 최대하게 신중하게 사용합니다.</li>\n<li><code class=\"language-text\">Serializable</code>을 구현할때는 신중히 결정합니다,</li>\n<li>커스텀 직렬화 형태를 고려해서 개발합니다.</li>\n<li><code class=\"language-text\">readObject</code> 메서드는 방어적으로 작성합니다.</li>\n<li>인스턴스 수를 통제해야한다면 <code class=\"language-text\">readObject</code> 보다는 <code class=\"language-text\">Enum</code> 타입을 사용합니다.</li>\n<li>직렬화된 인스턴스보다는 <code class=\"language-text\">직렬화 프록시 사용</code>을 검토합니다.</li>\n</ul>\n<p><a href=\"https://github.com/Azderica/Book-Record/tree/master/Effective%20Java/ch12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">좀 더 자세하게</a></p>\n<br/>\n<h2 id=\"직렬화의-사용-이유\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94%EC%9D%98-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화의 사용 이유.</h2>\n<p>자바 직렬화 외에 다른 데이터 직렬화 종류는 아래와 같습니다.</p>\n<h3 id=\"문자열-형태의-직렬화-방법\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%98%95%ED%83%9C%EC%9D%98-%EC%A7%81%EB%A0%AC%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>문자열 형태의 직렬화 방법</h3>\n<p>일반적으로 직접 데이터를 문자열 형태로 확인 가능한 직렬화 방법입니다. 범용적인 API나 데이터를 변환하여 추출할 때 많이 사용합니다.</p>\n<ul>\n<li>CSV</li>\n<li>XML</li>\n<li>JSON</li>\n</ul>\n<h3 id=\"이진-직렬화-방법\"><a href=\"#%EC%9D%B4%EC%A7%84-%EC%A7%81%EB%A0%AC%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이진 직렬화 방법</h3>\n<p>데이터 변환 및 전송 속도에 최적화하여 별도의 직렬화 방법을 제시하는 구조입니다.</p>\n<ul>\n<li>Protocol Buffer</li>\n<li>Apache Avro</li>\n</ul>\n<h3 id=\"자바-직렬화의-필요성\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A7%81%EB%A0%AC%ED%99%94%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 직렬화의 필요성</h3>\n<p>앞서 여러 직렬화 방법이 있지만 자바의 직렬화를 쓰는 이유는 자바 직렬화가 가지는 장점이 있기 때문입니다.</p>\n<ul>\n<li>자바 시스템에서 개발에 최적화가 되어 있습니다.</li>\n<li>복잡한 데이터 구조의 클래스의 객체라도 직렬화의 기본 조건만 지키게 되면, 큰 작업없이 바로 직렬화나 역직렬화가 됩니다.</li>\n<li>역직렬화하면 기존 객체처럼 바로 사용할 수 있습니다.</li>\n</ul>\n<p>다만 직렬화가 가지는 단점 또한 있습니다.</p>\n<ul>\n<li>보안에 신경을 써야합니다. (직렬화 공격)</li>\n<li>예외 처리에 신경을 써야합니다.</li>\n<li>용량이 큽니다.</li>\n<li>역직렬화 또한 일종의 생성자이기 때문에, 신경을 써야하는 부분이 많습니다.</li>\n</ul>\n<br/>\n<h2 id=\"직렬화를-사용하는-경우\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>직렬화를 사용하는 경우</h2>\n<p>JVM의 메모리에서만 상주되어있는 객체 데이터를 그대로 영석화(Persistence)가 필요할 때 사용됩니다. 또한 시스템이 종료되더라도 없어지지 않는 장점을 가지며 영속화된 데이터이기 때문에 네트워크 전송도 가능합니다. 그리고 필요할 때 직렬화된 객체 데이터를 가져와서 역직렬화 해서 객체를 바로 사용할 수 있게됩니다.</p>\n<p>주로 아래의 경우에서 쉽게 사용됩니다.</p>\n<ul>\n<li>\n<p>서블릿 세션(Servlet Session)</p>\n<ul>\n<li>서블릿 기반의 WAS(톰캣, 웹로직 등)는 대부분 세션의 자바 직렬화를 지원합니다.</li>\n<li>파일로 저장, 세션 클러스터링, DB 저장 등을 할 때 직렬화되어서 저장됩니다.</li>\n</ul>\n</li>\n<li>\n<p>캐시(Cache)</p>\n<ul>\n<li>시스템에서는 퍼포먼스를 위해서 캐시를 사용하는데, 이때 자바 직렬화된 데이터를 저장해서 사용합니다.</li>\n</ul>\n</li>\n<li>\n<p>자바 RMI(Remote Method Invocation)</p>\n<ul>\n<li>원격 시스템 간의 메시지 교환을 위해 사용하는 자바에서 지원하는 기술입니다.</li>\n<li>RMI는 시스템과의 통신에서 필요한 IP, 포트를 통해서 소켓통신을 하는데 이를 추상화하여 로컬 시스템 메서드인 것처럼 호출할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/platform/serialization/spec/serial-arch.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/platform/serialization/spec/serial-arch.html</a></li>\n<li><a href=\"https://woowabros.github.io/experience/2017/10/17/java-serialize.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://woowabros.github.io/experience/2017/10/17/java-serialize.html</a></li>\n<li><a href=\"https://ryan-han.com/post/java/serialization/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ryan-han.com/post/java/serialization/</a></li>\n<li><a href=\"https://ryan-han.com/post/java/java-serialization/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ryan-han.com/post/java/java-serialization/</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Effective Java, Enums와 Annotation","path":"/05-java-effective-java/","date":"3. May 2021","timeToRead":18,"description":"Effective Java 책 중, ch6. 열거형과 어노테이션에 대해 정리합니다.","content":"<h1 id=\"enums-와-annotation\"><a href=\"#enums-%EC%99%80-annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enums 와 Annotation</h1>\n<p>Java는 두 가지 특수 목적의 참조 유형 패밀리를 지원합니다.</p>\n<ul>\n<li>enum</li>\n<li>annotation</li>\n</ul>\n<p>아래에서는 이를 이용하는 좋은 사례입니다.</p>\n<h2 id=\"item-34-상수형-대신-열겨형을-사용합니다\"><a href=\"#item-34-%EC%83%81%EC%88%98%ED%98%95-%EB%8C%80%EC%8B%A0-%EC%97%B4%EA%B2%A8%ED%98%95%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 34. 상수형 대신 열겨형을 사용합니다.</h2>\n<p>Enum 형은 고정 세트로 구성된 유형이며, 이는 형식에 대한 안전성을 제공합니다. Java의 Enum 형의 기본 개념은 <code class=\"language-text\">public static final field</code>를 통해서 각각의 Enum 상수를 하나의 인스턴스로 내보내는 클래스입니다. 특히 이에 대한 액세스가 불가능하기 때문에 수정할 수 없습니다.</p>\n<p>아래는 간단한 Enum 형 타입입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Apple</span> <span class=\"token punctuation\">{</span>FUJI<span class=\"token punctuation\">,</span> PIPPIN<span class=\"token punctuation\">,</span> GRANNY_SMITH<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Orange</span> <span class=\"token punctuation\">{</span>NAVEL<span class=\"token punctuation\">,</span> TEMPLE<span class=\"token punctuation\">,</span> BLOOD<span class=\"token punctuation\">}</span></code></pre>\n<p>아래는 data와 behavior이 있는 열거형 타입입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Enum type with data and behavior</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Planet</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MERCURY</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.302e+23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.439e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  VENUS  <span class=\"token punctuation\">(</span><span class=\"token number\">4.869e+24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.052e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  EARTH  <span class=\"token punctuation\">(</span><span class=\"token number\">5.975e+24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.378e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  MARS   <span class=\"token punctuation\">(</span><span class=\"token number\">6.419e+23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.393e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">JUPITER</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.899e+27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7.149e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  SATURN <span class=\"token punctuation\">(</span><span class=\"token number\">5.685e+26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.027e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  URANUS <span class=\"token punctuation\">(</span><span class=\"token number\">8.683e+25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.556e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">NEPTUNE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.024e+26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.477e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> mass<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// In kilograms</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// In meters</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> surfaceGravity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// In m / s^2</span>\n\n  <span class=\"token comment\">// 범용 중력 상수 (m ^ 3 / kg s ^ 2</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">G</span> <span class=\"token operator\">=</span> <span class=\"token number\">6.67300E-11</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Constructor</span>\n  <span class=\"token class-name\">Planet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> mass<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mass <span class=\"token operator\">=</span> mass<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n    surfaceGravity <span class=\"token operator\">=</span> <span class=\"token class-name\">G</span> <span class=\"token operator\">*</span> mass <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">mass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>           <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> mass<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">radius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> radius<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">surfaceGravity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> surfaceGravity<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">surfaceWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> mass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mass <span class=\"token operator\">*</span> surfaceGravity<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// F = ma</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드에서 데이터를 Enum 상수와 연결하려면 인스턴스 필드를 선언하고 데이터를 가져와 필드에 저장하는 생성자를 작성해줘야 합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeightTable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> earthWeight <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> mass <span class=\"token operator\">=</span> earthWeight <span class=\"token operator\">/</span> <span class=\"token class-name\">Planet</span><span class=\"token punctuation\">.</span>EARTH<span class=\"token punctuation\">.</span>surfaceGravity <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Planet</span> p <span class=\"token operator\">:</span> <span class=\"token class-name\">Planet</span><span class=\"token punctuation\">.</span>values ​​<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Weight on %s is %f %n\"</span><span class=\"token punctuation\">,</span>\n        p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>surfaceWeight <span class=\"token punctuation\">(</span>mass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Enum 상수와 메소드를 결합한 코드를 작성할 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 상수 특정 클래스 본문과 데이터가있는 열거 형 유형</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">PLUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">MINUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">TIMES</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">DIVIDE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Operation</span> op <span class=\"token operator\">:</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">.</span>values ​​<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>printf <span class=\"token punctuation\">(</span> <span class=\"token string\">\"%f %s %f = %f %n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Output</span>\n  <span class=\"token comment\">// 2.000000 + 4.000000 = 6.000000</span>\n  <span class=\"token comment\">// 2.000000 - 4.000000 = -2.000000</span>\n  <span class=\"token comment\">// 2.000000 * 4.000000 = 8.000000</span>\n  <span class=\"token comment\">// 2.000000 / 4.000000 = 0.500000</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>전략적으로 사용하는 enum 패턴 코드는 다음과 같습니다. (근로자 근무 급여 계산 메서드)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 전략 enum 패턴</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">PayrollDay</span> <span class=\"token punctuation\">{</span>\n  MONDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TUESDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> WEDNESDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  THURSDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FRIDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  SATURDAY <span class=\"token punctuation\">(</span>WEEKEND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SUNDAY <span class=\"token punctuation\">(</span>WEEKEND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PayType</span> payType<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">PayrollDay</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PayType</span> payType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>payType <span class=\"token operator\">=</span> payType<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">int</span> pay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minutesWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> payType<span class=\"token punctuation\">.</span>pay <span class=\"token punctuation\">(</span>minutesWorked<span class=\"token punctuation\">,</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 전략 enum 유형</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">PayType</span> <span class=\"token punctuation\">{</span>\n    WEEKDAY <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> overtimePay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> minsWorked <span class=\"token operator\">&lt;=</span> MINS_PER_SHIFT<span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span>\n          <span class=\"token punctuation\">(</span>minsWorked<span class=\"token operator\">-</span>MINS_PER_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> payRate <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    WEEKEND <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> overtimePay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> minsWorked <span class=\"token operator\">*</span> payRate <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> overtimePay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mins<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MINS_PER_SHIFT <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> pay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> basePay <span class=\"token operator\">=</span> minsWorked <span class=\"token operator\">*</span> payRate<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> basePay <span class=\"token operator\">+</span> overtimePay <span class=\"token punctuation\">(</span>minsWorked<span class=\"token punctuation\">,</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>열거형의 Switch는 상수 특정 behavior을 enum types을 늘리는데 유용합니다.</p>\n<p>컴파일 타임에 멤버가 알려진 상수 집합이 필요할 때마다, Enum 형을 사용하는 것이 좋습니다. 다만, 열거형 유형의 상수 집합이 항상 고정되어 있을 필요는 없습니다.</p>\n<p>이를 정리하면 다음과 같습니다. int 상수에 비해 Enum 형은 더 <strong>읽기 쉽고 안전하며, 강력</strong>합니다.</p>\n<br/>\n<h2 id=\"item-35-ordinals-대신에-인스턴스-필드를-사용합니다\"><a href=\"#item-35-ordinals-%EB%8C%80%EC%8B%A0%EC%97%90-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%95%84%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 35. Ordinals 대신에 인스턴스 필드를 사용합니다.</h2>\n<p>많은 Enum 형은 Int와 관련되어 있으며, ordinal 등을 통해서 위치를 반환할 수 있습니다. 그러나 이를 남용하면 유지보수 및 관리에서 문제가 생길 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 문제가 되는 코드, 순서를 바꾸면 망함.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Ensemble</span> <span class=\"token punctuation\">{</span>\n  SOLO<span class=\"token punctuation\">,</span>   DUET<span class=\"token punctuation\">,</span>   TRIO<span class=\"token punctuation\">,</span> QUARTET<span class=\"token punctuation\">,</span> QUINTET<span class=\"token punctuation\">,</span>\n  SEXTET<span class=\"token punctuation\">,</span> SEPTET<span class=\"token punctuation\">,</span> OCTET<span class=\"token punctuation\">,</span> NONET<span class=\"token punctuation\">,</span>  DECTET<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numberOfMusicians</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드를 해결하는 방법은, 파생하지 않고 <strong>인스턴스 필드에 저장</strong>하는 것입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Ensemble</span> <span class=\"token punctuation\">{</span>\n  SOLO <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DUET <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TRIO <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> QUARTET <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> QUINTET <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  SEXTET <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SEPTET <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> OCTET <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DOUBLE_QUARTET <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  NONET <span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DECTET <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TRIPLE_QUARTET <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> numberOfMusicians<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Ensemble</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfMusicians <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> numberOfMusicians <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> numberOfMusicians<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"item-36-비트-필드-대신에-enumset을-사용합니다\"><a href=\"#item-36-%EB%B9%84%ED%8A%B8-%ED%95%84%EB%93%9C-%EB%8C%80%EC%8B%A0%EC%97%90-enumset%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 36. 비트 필드 대신에 <code class=\"language-text\">EnumSet</code>을 사용합니다.</h2>\n<p>비트 필드 표현을 통하면 비트 연산을 통해서 합집합이나 교차 집합 연산을 효율적으로 계산할 수 있습니다. 그러나 이러한 방법들은 int형 상수이 가지고 있는 단점이 있기 때문에, <code class=\"language-text\">java.util</code> 패키지의 <code class=\"language-text\">EnumSet</code>을 사용하는 것이 중요합니다.</p>\n<p>이를 사용한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Style</span> <span class=\"token punctuation\">{</span>BOLD<span class=\"token punctuation\">,</span> ITALIC<span class=\"token punctuation\">,</span> UNDERLINE<span class=\"token punctuation\">,</span> STRIKETHROUGH<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 모든 세트를 전달할 수 있지만 EnumSet은 분명히 가장 좋습니다</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> applyStyles <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">></span></span> styles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\">text<span class=\"token punctuation\">.</span>applyStyles <span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span>of <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>ITALIC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>즉, 이를 요약하면, Enum 형이 집합에서 사용되기 때문에 비트 필드로 표현할 이유가 없습니다.</p>\n<br/>\n<h2 id=\"item-37-ordinals-indexing-대신-enummap을-사용합니다\"><a href=\"#item-37-ordinals-indexing-%EB%8C%80%EC%8B%A0-enummap%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 37. <code class=\"language-text\">Ordinals Indexing</code> 대신 <code class=\"language-text\">EnumMap</code>을 사용합니다.</h2>\n<p>때때로 ordinal 메서드를 사용해서 배열로 인덱싱 하는 코드를 볼 수 있습니다.</p>\n<p>이는 그러한 경우의 예시입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Plant</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">LifeCycle</span> <span class=\"token punctuation\">{</span> ANNUAL<span class=\"token punctuation\">,</span> PERENNIAL<span class=\"token punctuation\">,</span> BIENNIAL <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">LifeCycle</span> lifeCycle<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Plant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LifeCycle</span> lifeCycle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lifeCycle <span class=\"token operator\">=</span> lifeCycle<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드를 배열로 인덱싱한 코드입니다. (잘못된 코드)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Plant</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> plantsByLifeCycle <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Plant</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> plantsByLifeCycle<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  plantsByLifeCycle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Plant</span> p <span class=\"token operator\">:</span> garden<span class=\"token punctuation\">)</span>\n  plantsByLifeCycle<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>lifeCycle<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> plantsByLifeCycle<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: %s%n\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> plantsByLifeCycle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드는 문제가 있습니다. 배열은 제네릭과 호환되지 않기 때문에 깔끔하게 컴파일되지 않습니다.그리고, 사용자가 인덱싱 배열을 사용할 때 신경을 써야하는 부분이 많습니다.</p>\n<p>짧은 코드를 통해서 이보다 좀 더 좋은 코드를 구성하는 것은 <code class=\"language-text\">EnumMap</code>을 사용하는 것입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// EnumMap을 사용하여 데이터를 열거 형과 연결</span>\n<span class=\"token class-name\">Map</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Plant</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> plantsByLifeCycle\n  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span> lc <span class=\"token operator\">:</span> <span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">.</span>values ​​<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  plantsByLifeCycle<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span>lc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Plant</span> p <span class=\"token operator\">:</span> garden<span class=\"token punctuation\">)</span>\n  plantsByLifeCycle<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>lifeCycle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>plantsByLifeCycle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Stream과 EnumMap을 사용하여 데이터를 열거 형과 연결</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>stream <span class=\"token punctuation\">(</span>garden<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>collect <span class=\"token punctuation\">(</span>groupingBy <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>lifeCycle<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LifeCycle</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> toSet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>두 개의 Enum 형을 사용하는 경우에도 EnumMap을 사용하는 것이 좀 더 안전성이 높습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 중첩 된 EnumMap을 사용하여 데이터를 열거 형 쌍과 연결</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Phase</span> <span class=\"token punctuation\">{</span>\n  SOLID<span class=\"token punctuation\">,</span> LIQUID<span class=\"token punctuation\">,</span> GAS<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Transition</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">MELT</span><span class=\"token punctuation\">(</span>SOLID<span class=\"token punctuation\">,</span> LIQUID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FREEZE</span><span class=\"token punctuation\">(</span>LIQUID<span class=\"token punctuation\">,</span> SOLID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">BOIL</span><span class=\"token punctuation\">(</span>LIQUID<span class=\"token punctuation\">,</span> GAS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token function\">CONDENSE</span><span class=\"token punctuation\">(</span>GAS<span class=\"token punctuation\">,</span> LIQUID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">SUBLIME</span><span class=\"token punctuation\">(</span>SOLID<span class=\"token punctuation\">,</span> GAS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">DEPOSIT</span><span class=\"token punctuation\">(</span>GAS<span class=\"token punctuation\">,</span> SOLID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Phase</span> from<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Phase</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Transition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Phase</span> from<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Phase</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>from <span class=\"token operator\">=</span> from<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// the phase transition map 초기화</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Phase</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Phase</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transition</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>\n      m <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Phase</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Phase</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Transition</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Phase</span> from<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Phase</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위으 코드의 경우에는 오류가 발생할 가능성이 거의 없으며, 명확성과 안전성 및 유지 관리성을 높이며 공간/시간 비용이 지불되지 않습니다.</p>\n<p>따라서, <strong>ordinal을 사용해서 배열로 인덱싱하는 것은 적절하지 않으며 대신에 EnumMap을 사용하는 것이 중요합니다.</strong></p>\n<br/>\n<h2 id=\"item-38-인터페이스로-확장-가능한-enum을-모방합니다\"><a href=\"#item-38-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A1%9C-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-enum%EC%9D%84-%EB%AA%A8%EB%B0%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 38. 인터페이스로 확장 가능한 Enum을 모방합니다.</h2>\n<p>표준 enum을 정의해서 임의의 인터페이스를 구현할 수 있습니다. 이를 표현한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 인터페이스를 사용하여 확장 가능한 열거 형 에뮬레이션</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">BasicOperation</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">PLUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">MINUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">TIMES</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">DIVIDE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">BasicOperation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 확장한 enum입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Emulated extension enum</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ExtendedOperation</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">EXP</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">REMAINDER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> x <span class=\"token operator\">%</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">ExtendedOperation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 테스트하는 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  test <span class=\"token punctuation\">(</span> <span class=\"token class-name\">ExtendedOperation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> test <span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">Class</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> opEnumType <span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Operation</span> op <span class=\"token operator\">:</span> opEnumType<span class=\"token punctuation\">.</span>getEnumConstants <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>printf <span class=\"token punctuation\">(</span> <span class=\"token string\">\"%f %s %f = %f %n \"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 방법이 아니더라도, 아래처럼 <code class=\"language-text\">Collection&lt;? extends Operation&gt; Class T</code>를 사용할 수 있습니다. 이는 덜 복잡하고 유연합니다. (다만, EnumSet이나 EnumMap을 사용할 수 없는 코드입니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  test <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>asList <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExtendedOperation</span><span class=\"token punctuation\">.</span>values ​​<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> test <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Collection</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">></span></span> opSet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Operation</span> op <span class=\"token operator\">:</span> opSet<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>printf <span class=\"token punctuation\">(</span> <span class=\"token string\">\"%f %s %f = %f %n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>두 코드 모두 결과값은 이와 같습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">4.000000 ^ 2.000000 = 16.000000\n4.000000 % 2.000000 = 0.000000</code></pre>\n<p>결론적으로 확장 가능한 Enum 유형을 작성할 수는 없지만, 인터페이스를 구현하는 Enum 타입과 함께 제공되는 인터페이스를 작성해서 동작시킬 수 있습니다.</p>\n<br/>\n<h2 id=\"item-39-naming-patterns-보다-annotation을-선호합니다\"><a href=\"#item-39-naming-patterns-%EB%B3%B4%EB%8B%A4-annotation%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 39. <code class=\"language-text\">Naming Patterns</code> 보다 <code class=\"language-text\">Annotation</code>을 선호합니다.</h2>\n<p>기존의 Naming Patterns의 문제는 다음과 같습니다.</p>\n<ul>\n<li>기존의 JUnit3의 경우, 메서드 명이 test로 시작하지 않으면 실패합니다.</li>\n<li>적절한 프로그램 요소에서만 사용되도록 할 수 없습니다.</li>\n<li>매개 변수 값을 프로그램 요소와 연관시키는 좋은 방법을 제공하지 않습니다.</li>\n</ul>\n<p>JUnit4부터는 annotation을 통해서 테스트 프레임 워크를 구성할 수 있게 되었습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Marker annotation type declaration</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n *  - 주석이 달린 메서드가 테스트 메서드임을 나타냅니다.\n *  - 매개 변수가없는 정적 메서드에만 사용합니다.\n */</span>\n\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용하는 코드가 아래와 같이 있을 때, 되는 코드와 안되는 코드를 보면 그 차이를 확인할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// marker 어노테이션이 포함된 프로그램</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// Test should pass</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// Test should fail</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Boom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// INVALID USE: nonstatic method</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// Test should fail</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Crash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 위의 Sample 클래스에서 Test 어노테이션이 포함된 테스트 메서드는 4가지이나, m5은 static을 붙이지 않았기 때문에 유효하지 않습니다. m1만 성공을 하고, m3과 m7은 실패하게 됩니다.</p>\n<p>이를 아래의 코드로 실행할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Program to process marker annotations</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunTests</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> tests <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> passed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> testClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> testClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        tests<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          passed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> wrappedExc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token class-name\">Throwable</span> exc <span class=\"token operator\">=</span> wrappedExc<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token string\">\" failed: \"</span> <span class=\"token operator\">+</span> exc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid @Test: \"</span> <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Passed: %d, Failed: %d%n\"</span><span class=\"token punctuation\">,</span>\n        passed<span class=\"token punctuation\">,</span> tests <span class=\"token operator\">-</span> passed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// output</span>\n<span class=\"token comment\">// public static void Sample.m3() failed: RuntimeException: Boom</span>\n<span class=\"token comment\">// Invalid @Test: public void Sample.m5()</span>\n<span class=\"token comment\">// public static void Sample.m7() failed: RuntimeException: Crash</span>\n<span class=\"token comment\">// Passed: 1, Failed: 3</span></code></pre>\n<p>이외에도 여러 테스트 코드 및 어노테이션을 사용하는 방법이 있습니다. 다중 어노테이션이나, 특정 에러만 동작하게 하는 어노테이션을 구성할 수도 있습니다. 이를 다 작성하기에는 내용이 많아서 작성하지는 않겠습니다.</p>\n<p>이러한 어노테이션에서의 핵심은 다음과 같습니다.</p>\n<ul>\n<li>어노테이션을 사용할 수 있는 경우에는, Naming Patterns 을 사용할 필요가 없습니다.</li>\n<li>모든 프로그래머는 Java가 제공하는 사전 정의된 어노테이션을 사용하는 것이 중요합니다.</li>\n<li>또한 IDE나 분석 툴에서 제공하는 어노테이션을 사용하는 것이 중요합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-40-override-어노테이션을-일관되게-사용해야합니다\"><a href=\"#item-40-override-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EC%9D%BC%EA%B4%80%EB%90%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 40. <code class=\"language-text\">Override</code> 어노테이션을 일관되게 사용해야합니다.</h2>\n<p>Java 라이브러리에서는 여러 어노테이션이 포함되어 있는데, 그중에서 중요한 어노테이션으로 <code class=\"language-text\">@Override</code>를 고를 수 있습니다. <code class=\"language-text\">@Override</code>는 메서드 선언에서만 사용할 수 있으며, 어노테이션이 달린 메서드 선언이 상위 유형을 재정의 함을 나타냅니다. 이를 지속적으로 사용하면 많은 종류의 버그를 예방할 수 있습니다.</p>\n<p>이를 보여주는 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bigram</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> second<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first  <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bigram</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> first <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">.</span>second <span class=\"token operator\">==</span> second<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">;</span> ch<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드는 그냥 보면, 문제를 인지할 수 없습니다. 위 코드는 2개의 동일한 소문자로 이루어진 26개의 Bigram을 Set에 반복적으로 추가합니다. (Set은 집합이므로) 26세트가 나와야한다고 생각하지만, 위의 코드는 260세트가 나오게 됩니다.</p>\n<p>위의 코드에서의 문제는 equals를 오버로딩하지 않아 그렇습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Bigram</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> first <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">.</span>second <span class=\"token operator\">==</span> second<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 구성할 때, 생각했던 26세트가 나오게 됩니다.</p>\n<p>즉, <strong>super class를 재정의하는 경우 생각하는 모든 메서드 선언에 <code class=\"language-text\">Override</code> 어노테이션을 사용해야합니다.</strong> <code class=\"language-text\">Override</code>어노테이션을 통해서 많은 오류로 부터 사용자를 보호할 수 있습니다.</p>\n<br/>\n<h2 id=\"item-41-타입을-정의하기-위해-marker-interface를-사용합니다\"><a href=\"#item-41-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-marker-interface%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 41. 타입을 정의하기 위해 <code class=\"language-text\">Marker Interface</code>를 사용합니다.</h2>\n<p><code class=\"language-text\">Marker Interface</code>는 메서드를 포함하지 않고 일부 구현 속성을 가지는 인터페이스입니다. (Ex. <code class=\"language-text\">Serializable</code> 인터페이스)</p>\n<p><code class=\"language-text\">Marker Interface</code>는 <code class=\"language-text\">Marker Annotation</code>보다 2가지의 장점이 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">marker interface</code>는 표시된 클래스의 인스턴스에 의해 구현되는 유형을 정의합니다.</p>\n<ul>\n<li>이를 통해서 런타임까지 잡을 수 없는 에러를 컴파일 타임에 잡을 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">marker interface</code>는 <code class=\"language-text\">marker interface</code> 보다 더 정확하게 타겟팅할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">market annotation</code>은 타겟으로 적용해야하는 반면에, <code class=\"language-text\">marker interface</code>는 인터페이스를 확장하여, 적용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>이에 반해 <code class=\"language-text\">Marker Annotation</code>의 장점은 어노테이션의 일부라는 것입니다. 그렇기 때문에 <code class=\"language-text\">Marker Annotation</code>은 어노테이션 기반 프레임 워크의 일관성을 위해 사용할 때 좋습니다.</p>\n<h3 id=\"marker-interface와-marker-annotation의-사용-경우\"><a href=\"#marker-interface%EC%99%80-marker-annotation%EC%9D%98-%EC%82%AC%EC%9A%A9-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Marker Interface와 Marker Annotation의 사용 경우.</h3>\n<p><code class=\"language-text\">Marker Interface</code></p>\n<ul>\n<li>새로운 메서드가 연결되지 않은 유형과 정의하는 경우</li>\n<li>클래스와 인터페이스에서 적용되는 경우, 하나 이상의 메서드에서 필요하다고 판단되는 경우</li>\n</ul>\n<p><code class=\"language-text\">Marker Annotation</code></p>\n<ul>\n<li>클래스 및 인터페이스 이외의 프로그램 요소를 표시하는 경우</li>\n<li>어노테이션을 많이 사용하는 프레임 워커에 마커를 맞추려는 경우</li>\n</ul>\n<blockquote>\n<p>Marker Interface (마커 인터페이스, 태그 인터페이스)</p>\n</blockquote>\n<p>내부에 메서드나 상수가 없는 인터페이스</p>\n<p>Ex) <code class=\"language-text\">Serializable</code> 인터페이스, <code class=\"language-text\">Clonable</code> 인터페이스</p>\n<blockquote>\n<p>Marker Annotation (마커 어노테이션)</p>\n</blockquote>\n<p>멤버를 포함하지 않으며 데이터로 구성되지 않으며, 그저 어노테이션 선언을 표시하기 위해 존재합니다.</p>\n<p>Ex) <code class=\"language-text\">@Override</code></p>\n"}},{"node":{"title":"[Java] Effective Java, 제네릭","path":"/04-java-effective-java/","date":"26. April 2021","timeToRead":15,"description":"Effective Java 책 중, ch5. 제네릭에 대해 정리합니다.","content":"<h1 id=\"제네릭\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>제네릭</h1>\n<p>Java 5이후로, 제네릭은 언어의 일부였습니다. 제네릭을 사용하면 각 컬렉션에서 허용되는 개체 유형을 컴파일러에 알리고, 자동으로 캐스트를 삽입합니다. 대부분 프로그램이 더 안전하고 명확하지만, collections에만 한정적이지 않기 때문에 신경을 써야하는 부분이 있습니다.</p>\n<h2 id=\"item-26-raw-타입을-사용하면-안됩니다\"><a href=\"#item-26-raw-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 26. Raw 타입을 사용하면 안됩니다.</h2>\n<p>Raw 타입을 잘못 사용한 코드와 잘된 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Raw collection type</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Collection</span> stamps <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Parameterized collection type - typesafe</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Stamp</span><span class=\"token punctuation\">></span></span> stamps <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Raw 타입을 사용하면, 제네릭의 안전성과 표현력 이점을 잃게 되므로 사용하면 안됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 제한되지 않은 와일드 카드 유형을 사용 - typesafe하고, 유연합니다.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> numElementsInCommon <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre>\n<p>클래스 리터럴에는 원시 유형을 사용할 수 있는데, 대표적으로 <code class=\"language-text\">instanceof</code> 가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// raw type의 합법적 사용 - instanceof 연산자</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Raw type</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Wildcard type</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>즉, 정리하면 raw type을 사용하면 런타임에 예외가 발생할 수 있기 때문에 사용하지 않는 것이 중요하며, 제네릭 도입 이전의 레거시 코드와의 호환성 및 상호 운용성을 위해서만 사용해야합니다.</p>\n<br/>\n<h2 id=\"item-27-확인되지-않은-경고를-제거합니다\"><a href=\"#item-27-%ED%99%95%EC%9D%B8%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EA%B2%BD%EA%B3%A0%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 27. 확인되지 않은 경고를 제거합니다.</h2>\n<p>제네릭으로 프로그래밍할 때 확인되지 않은 캐스트 경고, 확인되지 않은 메서드 호출 경고, 확인되지않은 매개 변수인 vararg 유형 경고 및 다양한 컴파일러 경고가 발생합니다.</p>\n<p>이 경우에, <strong>확인되지 않은 모든 경고를 제거해야합니다.</strong></p>\n<p>일부 경고를 제거할 수는 없지만, 경고를 유발한 코드가 typesafe하다는 것을 증명할 수 있는 경우 <code class=\"language-text\">@SuppressWarnings(&quot;unchecked&quot;)</code> 주석으로 경고를 억제할 수 있습니다. (다만, 이는 가능한 작은 범위에서 사용하는 것이 중요합니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// @SuppressWarnings의 범위를 줄이기 위해 지역 변수를 추가합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이 캐스트는 우리가 만들고있는 배열이기 때문에 정확합니다.</span>\n    <span class=\"token comment\">// 전달 된 것과 동일한 유형, 즉 T []입니다.</span>\n\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span>\n      <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> size<span class=\"token punctuation\">)</span>\n    a<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>추가적으로, <code class=\"language-text\">@SuppressWarnings(&quot;unchecked&quot;)</code> 주석을 사용할 때마다, 안전한 이유를 설명하는 주석을 추가하는 것이 필요합니다.</p>\n<br/>\n<h2 id=\"item-28-arrays-보다는-list를-선호합니다\"><a href=\"#item-28-arrays-%EB%B3%B4%EB%8B%A4%EB%8A%94-list%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 28. Arrays 보다는 List를 선호합니다.</h2>\n<p>Array는 제네릭 유형과 두가지 중요한 측면에서 다릅니다.</p>\n<ul>\n<li>\n<ol>\n<li>배열은 covariant(함께 변할 수 있고), 제네릭은 erasure(불변)입니다.</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Runtime에 실패함.</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objectArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nobjectArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"I don't fit in\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ArrayStoreException 에러가 발생합니다.</span>\n\n<span class=\"token comment\">// Compile되지 않습니다.</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> ol <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 호환되지 않음</span>\nol<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I don't fit in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<ol start=\"2\">\n<li>배열은 reified</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 배열 생성이 불가능하며 컴파일되지 않습니다.</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> stringLists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> stringLists<span class=\"token punctuation\">;</span>\nobjects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intList<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> stringLists<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"item-29-generic-types을-선호합니다\"><a href=\"#item-29-generic-types%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 29. Generic types을 선호합니다.</h2>\n<p>일반적으로 선언을 매개 변수화하고 JDK에서 제공하는 제네릭 유형 및 메소드를 사용하는 것은 어렵지 않으며, 그만한 가치가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 객체 기반 컬렉션-제네릭의 주요 후보</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 요소 배열에는 push (E)의 E 인스턴스 만 포함됩니다.</span>\n  <span class=\"token comment\">// 이것은 타입 안전성을 보장하기에 충분하지만</span>\n  <span class=\"token comment\">// 배열 의 런타임 타입은 E []가 아닙니다; 항상 Object []입니다!</span>\n  <span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elements <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 일반 스택을 실행하는 작은 프로그램</span>\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">E</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Eliminate obsolete reference</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n      elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 경고 창을 제거할 수 있습니다.</p>\n<br/>\n<h2 id=\"item-30-generic-methods를-선호합니다\"><a href=\"#item-30-generic-methods%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 30. Generic methods를 선호합니다.</h2>\n<p>클래스가 제네릭일 수 있는 것처럼 메소드도 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Uses raw types - 허용되지 않습니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Set</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Generic method</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 generic method를 사용하는 간단한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> guys <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dick\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Harry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stooges <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Larry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Moe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Curly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> aflCio <span class=\"token operator\">=</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>guys<span class=\"token punctuation\">,</span> stooges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>aflCio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>식별함 후 디스펜서를 작성하면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 일반 싱글 톤 팩토리 패턴</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">UnaryOperator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> IDENTITY_FN <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> t<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">UnaryOperator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> identityFunction <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnaryOperator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> IDENTITY_FN<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>컬렉션의 최대 값을 계산하는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션에서 최대 값을 반환합니다. 재귀 유형 바인딩을 사용합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">E</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty collection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">E</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 내용을 요약하면 다음과 같습니다.</p>\n<p>generic type과 같은 generic methods는 클라이언트가 입력 매개 변수에 명시적 캐스트를 입력하고 값을 반환해야하는 메서드보다 안전하고 사용하기 쉽습니다. 이를 위해 캐스트 없이 메소드를 사용할 수 있게 해야합니다. (generic)</p>\n<br/>\n<h2 id=\"item-31-api-유연성을-향상시키기-위해서-제한된-wildcards를-사용합니다\"><a href=\"#item-31-api-%EC%9C%A0%EC%97%B0%EC%84%B1%EC%9D%84-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%A0%9C%ED%95%9C%EB%90%9C-wildcards%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 31. API 유연성을 향상시키기 위해서, 제한된 Wildcards를 사용합니다.</h2>\n<p>고정된 유형보다는 더 많은 유연성을 제공하는 것이 필요합니다. 아래의 코드는 이러한 유연성을 표현한 public API입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용하는 와일드 카드 유형은 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// E producer 역할을 수행하는 매개 변수의 와일드 카드 유형</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pushAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> src<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// E consumer 역할을하는 매개 변수의 와일드 카드 유형</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">popAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> dst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    dst<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드처럼, 유연성을 최대화려면 Producer와 Consumer를 나타내는 입력 매개 변수에 와일드 카드 유형을 사용하면 됩니다.</p>\n<p>PECS(Producer extends and Consumer super)</p>\n<ul>\n<li>Get 과 Put 원칙이며, structure에서 값을 얻을 때 <code class=\"language-text\">extends</code> 와일드 카드를 사용하고, structure에서 값을 넣을때 <code class=\"language-text\">super</code> 와일드 카드를 사용합니다.</li>\n</ul>\n<p>그러나, 클래스 사용자가 와일드 카드 유형에 대해 생각하고 개발해야한다면, API에 문제가 발생할 수 있습니다. 즉, 아래의 코드는 문제가 발생하는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s2<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> 정수 <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span>of <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> doubles <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span>of <span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 에러 발생, #1과 #2가 교차 유형이므로</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> union <span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">,</span> doubles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이를 해결하는 코드는 아래와 같습니다.</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token class-name\">Union</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">,</span> doubles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>아래의 swap 메서드는 컴파일 구현에 깔끔하며, 와일드 카드 기반 선언을 잘 표현한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">swapHelper</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 와일드 카드 캡처를위한 private 도우미 메서드</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">swapHelper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이, API에서 와일드카드 유형을 사용하는 것은 일부 까다롭지만 API를 훨씬 더 유연하게 만듭니다. 특히, <strong>자주 사용되는 라이브러리를 작성하는 경우에는 와일드 카드 유형의 사용은 필수적</strong>이며 기본 규칙인 <strong>PECS</strong>를 기억하는 것이 중요합니다. 추가적으로 모든 비교 대상들은 consumer입니다.</p>\n<br/>\n<h2 id=\"item-32-제네릭과-가변인수를-신중하게-합칩니다\"><a href=\"#item-32-%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%9D%B8%EC%88%98%EB%A5%BC-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%ED%95%A9%EC%B9%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 32. 제네릭과 가변인수를 신중하게 합칩니다.</h2>\n<p>가변인수 메소드와 제네릭은 Java 5에서 생겼기 때문에 같이 사용할 수 있다고 생각되지만 이는 그렇지 않습니다.</p>\n<p><strong>가변 인수의 목적</strong>은 클라이언트가 파라미터 인수를 메서드에 전달할 수 있도록 하는 것입니다.</p>\n<p>아래의 코드는 가변인수 배열의 매개 변수에 값을 저장하는 것이 안전하지 않음을 보여줍니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 제네릭과 가변 인수를 혼합하면 유형 안전성을 위반할 수 있습니다!</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dangerous</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> stringLists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> stringLists<span class=\"token punctuation\">;</span>\n  objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intList<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Heap pollution</span>\n  <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> stringLists<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ClassCastException</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">SafeVarargs</code> annotation은 typesafe 된것의 method를 보장합니다. 다만, 컴파일러가 하는 호출 경고가 사용자에게 가지 않기 때문에 이를 사용할 때는 annotation이 필요합니다.</p>\n<p>아래는 일반적인 가변인수 메서드를 사용할 때 중요한 부분입니다.</p>\n<ul>\n<li>가변인수 매개 변수 배열에 아무것도 저장하지 않습니다.</li>\n<li>신뢰할 수 없는 배열을 만들면 안됩니다. 이를 위반하면 수정해야합니다.</li>\n</ul>\n<p>아래는 좋은 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 제네릭 가변 인수 매개 변수가 있는 안전한 메서드</span>\n<span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">:</span> lists<span class=\"token punctuation\">)</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용한 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\">audience <span class=\"token operator\">=</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>friends<span class=\"token punctuation\">,</span> romans<span class=\"token punctuation\">,</span> countrymen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이를 정리하면, 가변 인수 기능은 배열 위의 생성된 leaky abstraction이므로, 가변 인수와 제네릭은 제대로 상호작용하지 않으며, 배열에는 generics와 다른 유형의 규칙이 있습니다. 일반 가변 인수의 매개변수는 형식이 안전하지 않습니다.</p>\n<p>즉, 정적 팩토리 메서드를 통해서 개발하는 방법이 <code class=\"language-text\">@SafeVarargs</code> annotation을 신경쓸 필요가 없습니다.</p>\n<br/>\n<h2 id=\"item-33-typesafe한-혼성-컨테이너를-고려합니다\"><a href=\"#item-33-typesafe%ED%95%9C-%ED%98%BC%EC%84%B1-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 33. Typesafe한 혼성 컨테이너를 고려합니다.</h2>\n<p>아래 코드는, 혼성 컨테이너를 보여주는 대표적인 코드 예시입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Typesafe 혼성 컨테이너 패턴 - implementation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Favorites</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> favorites <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">putFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    favorites<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>favorites<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 Favorities 객체를 읽거나, 추가 하는 경우에는 Key에 해당하는 Class 객체를 전달해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Typesafe 혼성 컨테이너 패턴 - client</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Favorites</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Favorites</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">putFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">putFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xcafebabe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">putFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Favorites</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">String</span> favoriteString <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> favoriteInteger <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> favoriteClass <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %x %s%n\"</span><span class=\"token punctuation\">,</span> favoriteString<span class=\"token punctuation\">,</span> favoriteInteger<span class=\"token punctuation\">,</span> favoriteClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드 대신에 Map을 통해서 구현할 수는 있지만, 이 경우에는 데이터를 가져오는 과정에 <code class=\"language-text\">ClassCastException</code> 런타임 에러가 발생할 수 있기 때문에 타입 안전이 보장되는 혼성 컨테이너에 비해 위험합니다.</p>\n<p>앞서 나온 Favorites의 클래스에는 2가지 문제가 존재합니다.</p>\n<ul>\n<li>악의적인 client가 Favorites의 원시 형식 Class 객체를 사용해서 인스턴스의 안전성을 손상시킬 수 있습니다.</li>\n<li>수정 불가능한 유형에서 사용할 수 없습니다.</li>\n</ul>\n<p>이러한 문제를 해결하기 위해, asSubClass를 사용할 수 있으며 컴파일 타임에 type을 알 수 없는 annotation을 읽을 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// asSubclass를 사용하여 제한된 유형 토큰으로 안전하게 캐스트</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">Annotation</span> <span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotatedElement</span> element<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> annotationTypeName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationType <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unbounded type token</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    annotationType <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>annotationTypeName<span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">asSubclass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>요약하면, 컬렉션 API의 예시가 된 제네릭 사용은 컨테이너당 고정된 수의 유형 매개 변수로 제한입니다. <strong>컨테이너가 아닌 키에 type매개 변수를 배치하여 이 제한을 피할 수 있습니다.</strong> 이러한 방법로 혼성 컨테이너의 키로 안전한 Class 객체를 사용할 수 있습니다.</p>\n<blockquote>\n<p>Heterogeneous Container (혼성 컨테이너)</p>\n</blockquote>\n<p>만약 컨테이너 자체가 아닌, 요소의 키에 타입 매개변수를 두면 서로 다른 타입의 요소가 저장될 수 있는 컨테이너이며, 이를 혼성 컨테이너라고 합니다.</p>\n"}},{"node":{"title":"[Java] Effective Java, 클래스와 인터페이스","path":"/03-java-effective-java/","date":"21. April 2021","timeToRead":18,"description":"Effective Java 책 중, ch4. 클래스와 인터페이스에 대해 정리합니다.","content":"<h1 id=\"클래스와-인터페이스\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스와 인터페이스</h1>\n<p>Class와 Interface는 추상화의 기본 단위이며, 이를 위해 여러 요소 등을 사용할 수 있습니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/05-java-study/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">클래스 란</a></li>\n<li><a href=\"https://azderica.github.io/08-java-study/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">인터페이스 란</a></li>\n</ul>\n<h2 id=\"item-15-클래스-및-멤버의-접근성을-최소화합니다\"><a href=\"#item-15-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-%EB%A9%A4%EB%B2%84%EC%9D%98-%EC%A0%91%EA%B7%BC%EC%84%B1%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 15. 클래스 및 멤버의 접근성을 최소화합니다.</h2>\n<ul>\n<li>정보 은닉은 개발, 테스트, 최적화, 사용, 이해 및 수정에서 큰 용이성을 가집니다.</li>\n<li><strong>각 클래스 또는 멤버를 가능한 한 액세스 할 수 없게 처리합니다.</strong></li>\n</ul>\n<p>액세스 수준은 다음과 같이 4가지로 구성됩니다.</p>\n<ul>\n<li>private : 선언된 최상위 클래스에서만 액세스 가능</li>\n<li>package-private(default) : 선언된 패키지의 모든 클래스에서 액세스 가능</li>\n<li>protected : 선언된 클래스의 하위 클래스 및 선언된 패키지의 모든 클래스에서 액세스 가능</li>\n<li>public : 어디서나 액세스 가능</li>\n</ul>\n<p>추가적으로 지켜야하는 룰은 다음과 같습니다.</p>\n<ul>\n<li>public 클래스의 인스턴스 필드는 public이면 안됩니다.</li>\n<li><strong>변경가능한 public 필드가 있는 class는 일반적으로 스레드로부터 안전하지 않습니다.</strong></li>\n<li>\n<p>클래스에 public static final array field 또는 이러한 필드를 반환하는 접근자가 있으면 안됩니다.</p>\n<ul>\n<li>해결책은 2개가 있습니다.</li>\n<li>public array를 비공개로 바꾸고, public static 목록에 추가합니다.</li>\n<li>array를 private로 만들고, public method를 추가합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 잠재적인 보안 구멍</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> VALUES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>결론적으로, 프로그램 요소의 접근성을 최대한 줄여야합니다.</strong></p>\n<blockquote>\n<p>고민 점.</p>\n</blockquote>\n<ul>\n<li>모든 메서드에 테스트 코드를 작성하는 것이 중요하다고 생각하는데, private으로 선언해버리면 테스트 코드에서 쓸 수가 없어서 어떤식으로 해야할지.</li>\n</ul>\n<br/>\n<h2 id=\"item-16-public-class에서는-public-field가-아닌-접근자-메소드를-사용합니다\"><a href=\"#item-16-public-class%EC%97%90%EC%84%9C%EB%8A%94-public-field%EA%B0%80-%EC%95%84%EB%8B%8C-%EC%A0%91%EA%B7%BC%EC%9E%90-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 16. public class에서는 public field가 아닌, 접근자 메소드를 사용합니다.</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이런식으로 짜면, 캡슐화의 이점이 없습니다.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>클래스가 패키지 외부에서 액세스 가능한 경우, 접근자 메소드를 제공합니다.</li>\n<li>그러나, 클래스가 <code class=\"language-text\">package-private 클래스</code>이거나 <code class=\"language-text\">private 중첩 클래스</code>인 경우, 데이터 필드를 노출하는데 본질적인 문제는 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-17-변경-가능성을-최소화합니다\"><a href=\"#item-17-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%EC%84%B1%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 17. 변경 가능성을 최소화합니다.</h2>\n<p>분변 클래스는 단순히 인스턴스를 수정할 수 없는 클래스이며 이는 설계, 구현 및 사용하기에 더 쉬우며 오류 가능성이 적고 더 안전합니다.</p>\n<p>클래스를 불변으로 만들려면 <code class=\"language-text\">5가지 규칙</code>을 지켜야합니다.</p>\n<ul>\n<li>객체의 상태(state)를 수정하는 메소드를 제공하면 안됩니다.</li>\n<li>클래스를 확장할 수 없는지 확인합니다.</li>\n<li>모든 필드를 final으로 만듭니다.</li>\n<li>모든 필드를 private로 설정합니다.</li>\n<li>변경 가능한 구성 요소에 대한 독점적인 액세스를 보장합니다.</li>\n</ul>\n<p>변경 불가능한 객체는 이러한 장점을 가지고 있습니다.</p>\n<ul>\n<li>단순합니다.</li>\n<li>생성된 시점의 상태를 파괴될 때까지 그대로 간직합니다.</li>\n<li>스레드로부터 안전하며 동기화가 필요하지 않습니다. 그렇기에 이러한 객체는 자유롭게 공유할 수 있습니다.</li>\n<li>다른 개체를 위해서 좋은 <strong>building block</strong>을 만듭니다.</li>\n<li>상태는 변경되지 않기 때문에, 일시적인 불일치 가능성이 없습니다.</li>\n</ul>\n<p>다만 이러한 단점을 가지고 있습니다.</p>\n<ul>\n<li>값이 다르면 반드시 독립된 객체로 만들어야합니다.</li>\n<li><code class=\"language-text\">getter</code>가 있다고 반드시 <code class=\"language-text\">setter</code>가 필요한 것은 아닙니다.</li>\n<li>대부분이 장점이며, 단점은 단시 일정 상황에서 잠재석인 성능 저하가 발생할 수 있습니다. 다만 모든 클래스를 불변으로 만들 수 없습니다.</li>\n<li>대부분의 클래스를 변경할 수 있는 부분으로 최소화해야합니다.</li>\n<li>그리고 다른 이유가 없으면, 모든 필드를 private final로 선언해야합니다.</li>\n<li>생성자는 모든 불변성을 설정하여, 완전히 초기화된 객체를 만들어야합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-18-inheritance상속보다-composition구성을-선호합니다\"><a href=\"#item-18-inheritance%EC%83%81%EC%86%8D%EB%B3%B4%EB%8B%A4-composition%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 18. Inheritance(상속)보다 Composition(구성)을 선호합니다.</h2>\n<p>상속은 코드 재사용을 달성하는 방법이지만 좋은 방법은 아닙니다.</p>\n<ul>\n<li>메서드 호출과 달리 상속은 캡슐화를 위반합니다.</li>\n<li>즉, 상속의 취약점을 피하기 위해서는 상속 대신 컴포지션과 전달을 사용하는 것이 좋습니다.</li>\n</ul>\n<p>특히 래퍼 클래스로 구현할 적당한 인터페이스가 있다면 더 사용하는 것이 좋습니다. 아래는 그러한 좋은 케이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Wrapper Class - 상속 대신 합성을 사용하는 경우.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InstrumentedSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ForwardingSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> addCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">InstrumentedSet</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    addCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    addCount <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAddCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> addCount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Reusable forwarding class</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForwardingSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ForwardingSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                 <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span>           <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위와 같은 코드는 인터페이스를 통해서 <strong>클래스의 디자인이 가능하며 매우 유연</strong>합니다.</p>\n<p>상속은 하위 클래스가 실제로 수퍼 클래스의 하위 유형인 상황에서만 적절합니다. 즉, <code class=\"language-text\">is-a</code> 관계인 경우에만 주로 사용하는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"item-19-상속을-고려해-설계하고-문서화합니다-그렇지-않으면-상속을-사용하지-않습니다\"><a href=\"#item-19-%EC%83%81%EC%86%8D%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%B4-%EC%84%A4%EA%B3%84%ED%95%98%EA%B3%A0-%EB%AC%B8%EC%84%9C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4-%EA%B7%B8%EB%A0%87%EC%A7%80-%EC%95%8A%EC%9C%BC%EB%A9%B4-%EC%83%81%EC%86%8D%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 19. 상속을 고려해 설계하고 문서화합니다. 그렇지 않으면 상속을 사용하지 않습니다.</h2>\n<p>상속을 위해 클래스를 설계하고 문서화하는 것은 아래를 의미합니다.</p>\n<ul>\n<li>클래스는 메서드 재정의의 효과를 정확하게 문서화해야합니다. 즉, <strong>클래스는 재정의 가능한 메서드의 자체 사용을 문서화해야합니다.</strong></li>\n<li>클래스 내부 동작 과정 중간에 끼어들 수 잇는 훅을 잘 선별해서 <code class=\"language-text\">protected</code> 메서드 형태로 수정해야할 수도 있습니다.</li>\n<li>상속용으로 설계한 클래스는 배포전에 하위 클래스를 작성하여 클래스를 테스트해야합니다.</li>\n<li>상속용 클래스의 생성자는 재정의 가능한 메서드를 직접 혹은 간접으로 호출하면 안됩니다.</li>\n<li>clone이나 readObject 모두 직접적이나 간접적으로든 재정의 가능 메서드를 호출하면 안됩니다.</li>\n</ul>\n<p>즉, 클래스를 상속용으로 설계하려면 매우 까다로우며 제약사항이 있습니다. 이를 해결하는 좋은 방법은 상속용으로 설계하지 않는 클래스는 상속을 금지합니다. (<code class=\"language-text\">final</code>이나 외부접근이 불가능하도록 클래스를 구성합니다./)</p>\n<br/>\n<h2 id=\"item-20-추상-클래스보다는-인터페이스를-선호합니다\"><a href=\"#item-20-%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 20. 추상 클래스보다는 인터페이스를 선호합니다.</h2>\n<p>자바에서는 type을 구현하는 두가지 방법은 인터페이스와 추상클래스가 있습니다.</p>\n<ul>\n<li>기존클래스를 쉽게 개조하여 새 인터페이스를 구현할 수 있습니다.</li>\n<li>\n<p>인터페이스는 <code class=\"language-text\">믹스인(mixin)</code>를 정의하는 것에 이상적입니다.</p>\n<ul>\n<li>mixin : 클래스가 기본유형에 추가하여 구현할 수 있는 유형이며 선택적 동작을 제공함</li>\n</ul>\n</li>\n<li>인터페이스는 계층구조가 없는 타입 프레임워크를 만들 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Singer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">AudioClip</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Song</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Songwriter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Song</span> compose <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> chartPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SingerSongwriter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Singer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Songwriter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">AudioClip</span> <span class=\"token function\">strum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">actSensitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>인터페이스는 wrapper 클래스를 통해 안전하고 강력한 기능 향상을 가능하게합니다.</li>\n</ul>\n<h3 id=\"template-method-pattern\"><a href=\"#template-method-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template Method Pattern</h3>\n<p>인터페이스와 함께, abstract skeletal 구현 클래스를 제공해서 장점을 결합한 패턴입니다. 인터페이스는 유형을 정의하고, 기본 메소드를 제공하며 skeletal 구현하며 클래스는 나머지 non-primitive 인터페이스를 구현합니다.</p>\n<p>인터페이스 자체에 있는 기본 메소드의 이점을 사용할 수 있고 skeletal 구현 클래스는 구현의 작업을 지원할 수 있습니다,.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Skeletal implementation class</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractMapEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Entries in a modifiable map must override this method</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Implements the general contract of Map.Entry.equals</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Implements the general contract of Map.Entry.hashCode</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">^</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>skeletal 구현은 상속을 위해 설계되었으므로 skeletal 구현에서는 좋은 문서가 절대적으로 필요합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-21-인터페이스는-구현하는-쪽을-생각해-설계합니다\"><a href=\"#item-21-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%AA%BD%EC%9D%84-%EC%83%9D%EA%B0%81%ED%95%B4-%EC%84%A4%EA%B3%84%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 21. 인터페이스는 구현하는 쪽을 생각해 설계합니다.</h2>\n<p>Java 8 이후로, default method 구성이 추가되었습니다. 또한 주로 람다 사용을 용이하기 위해서 Java 8의 핵심 Collection Interface에 많은 기본 메서드가 추가됩니다. Java의 라이브러리의 기본 메소드는 잘 구현되어 있으며, 대부분 제대로 작동합니다.</p>\n<p>그러나 <strong>모든 가능한 구현의 모든 불변을 유지하는 default 메서드를 작성하는 것은 어렵습니다.</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java 8의 Collection 인터페이스에 추가 된 기본 메소드</span>\n<span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> removeIf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Predicate</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드가 removeIf 메소드에 대해 작성할 수 있는 코드이지만, 실제 Collection 구현에서는 실패합니다.</p>\n<p>기본 메서드가 있는 경우, 인터페이스의 기존 구현이 오류나 경고없이 컴파일 될 수 있지만 런타임에는 실패합니다.</p>\n<p>기본 메소드가 Java 플랫폼의 일부이지만, <strong>인터페이스를 신중하게 디자인하는 것이 여전히 가장 중요합니다</strong>.</p>\n<p>인터페이스 출시 이후에, 몇 가지 인터페이스 결함을 수정하는 것이 가능하지만 이를 믿을 수 없습니다. 따라서 release 하기 전에는 새 인터페이스를 테스트하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-22-인터페이스는-타입을-정의하는-용도로만-사용합니다\"><a href=\"#item-22-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EB%8A%94-%EC%9A%A9%EB%8F%84%EB%A1%9C%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 22. 인터페이스는 타입을 정의하는 용도로만 사용합니다.</h2>\n<p>클래스가 인터페이스를 구현할 때, 인터페이스는 클래스의 인스턴스를 참조하는데 사용할 수 있는 type으로 사용됩니다.</p>\n<p>상수 인터페이스 패턴은 인터페이스를 제대로 사용하지 못하는 것입니다. 상수 유틸리티 클래스로 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 상수 유틸리티 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PhysicalConstants</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">PhysicalConstants</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 인스턴스화 방지</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> AVOGADROS_NUMBER <span class=\"token operator\">=</span> <span class=\"token number\">6.022_140_857e23</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> BOLTZMANN_CONST <span class=\"token operator\">=</span> <span class=\"token number\">1.380_648_52e-23</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> ELECTRON_MASS <span class=\"token operator\">=</span> <span class=\"token number\">9.109_383_56e-31</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>즉, 인터페이스는 type을 정의하는데만 사용해야합니다. 상수를 내보낼 때는 사용해서는 안됩니다.</p>\n<br/>\n<h2 id=\"item-23-태그가-있는-클래스보다-클래스-계층-구조를-활용합니다\"><a href=\"#item-23-%ED%83%9C%EA%B7%B8%EA%B0%80-%EC%9E%88%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 23. 태그가 있는 클래스보다 클래스 계층 구조를 활용합니다.</h2>\n<p>경우에 따라 인스턴스가 둘 이상의 특징으로 제공되는 인스턴스의 특징을 나타내는 tag field를 포함하는 클래스를 실행할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Tagged class - 클래스 계층보다 안좋습니다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Figure</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>RECTANGLE<span class=\"token punctuation\">,</span> CIRCLE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Tag field : the shape of this figure</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Shape</span> shape<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// These fields are used only if shape is RECTANGLE</span>\n  <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// This field is used only if shape is CIRCLE</span>\n  <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Constructor for circle</span>\n  <span class=\"token class-name\">Figure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shape <span class=\"token operator\">=</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span>CIRCLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Constructor for rectangle</span>\n  <span class=\"token class-name\">Figure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shape <span class=\"token operator\">=</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span>RECTANGLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> RECTANGLE<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> CIRCLE<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span>PI <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드는 매우 지저분합니다. 즉, <strong>태그가 지정된 클래스는 장황하고 오류가 발생하기 쉬우며 비효율적입니다.</strong> 이러한 클래스는 클래스 계층 구조를 모방한 것입니다.</p>\n<p>이를 클래스 계층으로 나타내면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Class hierarchy replacement for a tagged class</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Figure</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Figure</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span>PI <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Figure</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width  <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같은 클래스 계층은 태그 지정된 클래스의 모든 단점을 해결하고, 자연스러운 계층 관계를 반영하여 유연성을 높이고 컴파일시 유형 검사를 향상 시킬수 있습니다.</p>\n<br/>\n<h2 id=\"item-24-멤버-클래스는-되도록-static으로-만듭니다\"><a href=\"#item-24-%EB%A9%A4%EB%B2%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EB%90%98%EB%8F%84%EB%A1%9D-static%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%AD%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 24. 멤버 클래스는 되도록 static으로 만듭니다.</h2>\n<p>nested(중첩된) class는 다른 클래스내에 정의된 클래스입니다. nested class가 다른 컨텍스트에서 유용하다면 최상위 클래스여야지 의미가 있습니다.</p>\n<p>중첩 클래스는 다음으로 나눠집니다.</p>\n<ul>\n<li>static member class</li>\n<li>non-static member class</li>\n<li>anonymous class</li>\n<li>local class</li>\n</ul>\n<h3 id=\"static-member-class\"><a href=\"#static-member-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>static member class</h3>\n<p>static member class (정적 멤버 클래스)은 public helper class로, 외부 클래스와 함께 사용하는 경우 유용합니다.</p>\n<h3 id=\"non-static-member-class\"><a href=\"#non-static-member-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>non-static member class</h3>\n<p>정적 멤버 클래스와 비정적 멤버 클래스의 유일한 차이점은 static 선언에 수정자가 있다는 점입니다.</p>\n<p>일반적으로 nonstatic member class의 일반적인 용도 중 하나 는 외부 클래스의 인스턴스를 관련없는 일부 클래스의 인스턴스로 볼 수 있도록 허용하는 Adapter이며, 다음과 같이 구현됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// nonstatic member class의 일반적인 사용</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Bulk of the class omitted</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyIterator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>둘러싸는 인스턴스에 액세스할 필요가 없는 멤버 클래스를 선언하는 경우, 항상 해당 선언에 static modifier을 넣습니다.</p>\n<h3 id=\"anonymous-class\"><a href=\"#anonymous-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>anonymous class</h3>\n<p>익명 클래스는 이름이 없고, 적용 가능성에는 많은 제한이 있습니다. 선언된 시점을 제외하고는 인스턴스화할 수 없습니다. 또한 길어지면 가독성이 떨어지기 때문에 짧게 유지해야합니다.</p>\n<h3 id=\"local-class\"><a href=\"#local-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>local class</h3>\n<p>가장 자주 사용되지 않으며, 지역 변수가 선언될 수 있고 동일한 scope 내에 지정 규칙을 지킵니다.</p>\n<br/>\n<h2 id=\"item-25-단일-최상-클래스는-한-파일에-하나만-담습니다\"><a href=\"#item-25-%EB%8B%A8%EC%9D%BC-%EC%B5%9C%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%ED%95%9C-%ED%8C%8C%EC%9D%BC%EC%97%90-%ED%95%98%EB%82%98%EB%A7%8C-%EB%8B%B4%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 25. 단일 최상 클래스는 한 파일에 하나만 담습니다.</h2>\n<p>Java 컴파일러를 사용하면 단일 소스 파일에 여러 최상위 클래스를 정의할 수 있지만, 이에 대한 이점이 없으며 위험이 있습니다.</p>\n<p>즉, 아래의 코드는 매우 위험합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 하나의 파일에 정의 된 두 개의 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Utensil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"pan\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dessert</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"cake\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드보다 나은 케이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 여러 최상위 클래스 대신 정적 멤버 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Utensil</span><span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">+</span> <span class=\"token class-name\">Dessert</span><span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Utensil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"pan\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dessert</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"cake\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이, <strong>단일 소스에는 여러 최상이 클래스 또는 인터페이스를 넣으면 안됩니다.</strong></p>\n"}},{"node":{"title":"[Java] Effective Java, 모든 객체에 공통적인 메소드","path":"/02-java-effective-java/","date":"12. April 2021","timeToRead":12,"description":"Effective Java 책 중, ch3 모든 객체에 공통적인 메소드에 대해 정리합니다.","content":"<h1 id=\"모든-객체의-공통적인-메소드\"><a href=\"#%EB%AA%A8%EB%93%A0-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B3%B5%ED%86%B5%EC%A0%81%EC%9D%B8-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모든 객체의 공통적인 메소드</h1>\n<p><code class=\"language-text\">Object</code>는 자바에서 모든 오브젝트의 최상위 클래스이며, 상속을 통해서 사용하도록 설계되었습니다. 따라서 <code class=\"language-text\">Object</code> 클래스에서 final이 아닌 메서드들(대표적인 예시로, equals, hashCode, toString, clone, finalize 등)이 모두 오버라이딩을 염두하고 설계되었습니다.</p>\n<p>아래에서는 이를 재정의하는 것에 대해서 정리합니다.</p>\n<h2 id=\"item-10-equals를-오버라이딩-할-때-일반적인-룰을-준수합니다\"><a href=\"#item-10-equals%EB%A5%BC-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-%ED%95%A0-%EB%95%8C-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EB%A3%B0%EC%9D%84-%EC%A4%80%EC%88%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 10. <code class=\"language-text\">Equals</code>를 오버라이딩 할 때, 일반적인 룰을 준수합니다.</h2>\n<p>equals 메서드를 재정의하는 방법은 여러가지가 있지만, 잘못된 사용은 끔찍한 결과를 만듭니다. 따라서 다음의 룰을 준수해야합니다.</p>\n<ul>\n<li>클래스의 각 인스턴스는 본질적으로 unique합니다.</li>\n<li>클래스에 대해 <code class=\"language-text\">logical equality(지역적 동일성)</code> 테스트를 제공할 필요가 없습니다.</li>\n<li>슈퍼 클래스는 이미 equals를 이미 오버라이딩하였으므로, 슈퍼클래스의 동작은 이미 클래스의 적합합니다.</li>\n<li>클래스는 private나 package-private이므로, 해당 'equals'는 호출되지 않을것이라고 확신합니다.</li>\n</ul>\n<h3 id=\"equivalence-relation의-조건\"><a href=\"#equivalence-relation%EC%9D%98-%EC%A1%B0%EA%B1%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>equivalence relation의 조건.</h3>\n<p>equivalence relation 이란, 요소 집합에서 요소가 서로 동일한 것으로 간주하는 하위 집합으로 분할하는 연산자이며 이를 <code class=\"language-text\">equivalence class</code>라고 합니다. 이를 위해서는 5가지의 요구 사항을 지켜야합니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Reflexivity(반사성)</code></p>\n<ul>\n<li>객체가 자신과 동일해야합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Symmetry(대칭)</code></p>\n<ul>\n<li>두 객체가 동일한 지 여부에 대해 동의해야합니다.</li>\n<li>equals 를 위반한 경우, 해당 객체가 다른 객체를 비교하게 되면 어떻게 동작할지 알 수가 없습니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 대칭을 위반한 케이스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 대칭을 위반한 경우</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 단방향 상호 운용성</span>\n      <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>equalsIgnoreCase <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 대칭을 준수한 코드</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>equalsIgnoreCase <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">Transitivity</code></p>\n<ul>\n<li>한 객체가 두번째 객체와 같고, 두번째 객체가 세번째 객체와 같으면 첫번째 객체와 세번째 객체가 같아야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// equals contract를 위반하지 않는 값 구성 요소</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorPoint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Point</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">asPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ColorPoint</span> cp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> cp<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> cp<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">Consistency</code></p>\n<ul>\n<li>두 객체가 같은 경우에, 둘 중 하나가 변경되지 않는 한 항상 동일하게 유지되어야합니다.</li>\n<li>신뢰할 수 없는 리소스에 의존하는 경우, equals를 사용하면 안됩니다.</li>\n<li>대표적으로 사용하면 안되는 것이, <code class=\"language-text\">java.net.url</code>에서의 equals이며, 이는 IP를 사용하기 때문에 시간이 바뀌면서 바뀔 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Non-nullity</code></p>\n<ul>\n<li>모든 객체는 null과 같으면 안됩니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Implicit null check - preferred</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">MyType</span> mt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyType</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>s\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"좋은-equals-사용-방법\"><a href=\"#%EC%A2%8B%EC%9D%80-equals-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>좋은 equals 사용 방법</h3>\n<ul>\n<li><code class=\"language-text\">==</code>를 사용하여 인수가 이 객체에 대한 참조인지 확인합니다.</li>\n<li><code class=\"language-text\">instanceof</code>를 사용해서 argument의 유형한 타입인지 확인합니다.</li>\n<li>올바른 유형으로 캐스트합니다.</li>\n<li>클래스의 각 중요한 필드에 대해 인수의 해당 필드가, 이 객체의 해당 필드와 일치하는 지 확인합니다.</li>\n</ul>\n<p>이러한 방법으로 equals를 작성하고 나서는 세가지를 확인해야합니다.</p>\n<ul>\n<li><code class=\"language-text\">symmetric</code>, <code class=\"language-text\">transitive</code>, <code class=\"language-text\">consistent</code></li>\n</ul>\n<p>그 외의 주의사항은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">equals</code>를 재정의할 때는, <code class=\"language-text\">hashCode</code>를 재정의합니다.</li>\n<li>너무 영리하게 할 필요가 없습니다. 복잡하게 구성하면 안됩니다.</li>\n<li><code class=\"language-text\">equals</code>를 선언할 때는, 객체를 다른 타입으로 대체하면 안됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-11-equals를-오버라이딩-할때-hashcode를-항상-오버라이딩합니다\"><a href=\"#item-11-equals%EB%A5%BC-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-%ED%95%A0%EB%95%8C-hashcode%EB%A5%BC-%ED%95%AD%EC%83%81-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 11. <code class=\"language-text\">Equals</code>를 오버라이딩 할때, <code class=\"language-text\">Hashcode</code>를 항상 오버라이딩합니다.</h2>\n<ul>\n<li><code class=\"language-text\">equals</code>를 재정의하는 모든 클래스에서는 반드시 <code class=\"language-text\">hashCode</code>를 재정의해야합니다.</li>\n<li>동일한 개체에 동일한 해시 코드가 있어야합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 전형적인 hashCode method</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>areaCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>성능을 향상시키기 위해 hash code 계산에서 중요한 필드를 제외하면 안됩니다. (품질이 급격하게 떨어짐)</li>\n<li><code class=\"language-text\">hashCode</code>에서 반환한 값에 대해 자세한 스펙을 제공하면 안됩니다. 이 경우, 클라이언트 값에 합리적으로 의존할 수 없습니다. 따라서, 유연성을 제공해야합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-12-tostring을-항상-오버라이딩합니다\"><a href=\"#item-12-tostring%EC%9D%84-%ED%95%AD%EC%83%81-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 12. <code class=\"language-text\">ToString</code>을 항상 오버라이딩합니다.</h2>\n<p>아래의 부분을 중시해야합니다.</p>\n<ul>\n<li>equals나 hashCode를 준수하는 것만큼의 비중은 아니지만, 좋은 <code class=\"language-text\">toString</code>을 제공하면, 클래스를 더 좋게 사용할 수 있고 이후에 디버깅을 하기도 편해집니다.</li>\n<li>가능한 경우, <code class=\"language-text\">toString</code> 메소드는 객체에서 포함하고 있는 중요한 정보를 반환해야합니다.</li>\n<li>형식 지정 여부와 관계없이, 의도를 명확하게 문서화해야합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* 휴대폰 번호를 세 부분으로 나누는 것은 너무 작기때문에,\n * 이러한 필드값을 채우기 위해, 다음과 같이 진행했습니다.\n * Ex. lineNum이 123인 경우, \"0123\"으로 나타냅니다.\n */</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%03d-%03d-%04d\"</span><span class=\"token punctuation\">,</span> areaCode<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>형식을 지정했든 말든, <code class=\"language-text\">toString</code>로 반환되는 값에 포함된 정보에 대해 프로그램 액세스를 제공해야합니다.</li>\n</ul>\n<p>정리하자면, toString을 사용한다면 <strong>가급적 해당 객체가 가지고 있는 모든 정보들을 노출시키는 것이 좋습니다.</strong></p>\n<br/>\n<h2 id=\"item-13-신중하게-clone을-오버라이딩합니다\"><a href=\"#item-13-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-clone%EC%9D%84-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 13. 신중하게 <code class=\"language-text\">Clone</code>을 오버라이딩합니다.</h2>\n<p><code class=\"language-text\">Cloneable</code> 인터페이스는 복제가능한 클래스를 명시하는 인터페이스이지만, 그 목적을 수행하지 못합니다. 즉, 여러 객체를 복사하는 경우 잘못되는 경우가 쉽게 발생합니다.</p>\n<p>대표적인 예시로 <code class=\"language-text\">immutable class</code>의 경우에는 낭비적인 복사를 사용하기 때문에, <code class=\"language-text\">clone</code> 메소드를 제공하면 안됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 사용하지 않는 참조</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n      elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 위의 스택 클래스를 clone을 하는 경우, 복제된 Stack 클래스의 경우 동일한 elements 주소를 참조하기 때문에, 복제본의 불변성이 파괴됩니다.</p>\n<p>즉, clone 메서드는 생성자 역할을 수행하기 때문에, 원본 객체에 해를 끼치지 않고 복제본에 불변을 수행하는 지 확인해야합니다.</p>\n<p>또한 <strong>추가적으로 생성자를 호출하지 않고, 객체를 생성할 수도 있기 때문에 이는 큰 위험을 가지고 있습니다.</strong></p>\n<p>따라서 다음과 같이 clone()을 사용해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Stack</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CloneNotSupportedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">Cloneable</code> 아키텍처는 변경가능한 객체을 참조하는 final 필드의 일반적인 사용과 호환되지 않습니다.</p>\n<p>따라서 아래와 같은 복사를 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반복적인 복사, 깨끗하지만 맹목적으로 복사본을 덮어씁니다.</span>\n<span class=\"token class-name\">Entry</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Entry</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> p <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 이러한 방법보다, 가장 좋은 방법 중 하나는 <strong>복사 생성자 또는 복사 팩토리를 제공하는 것</strong>입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 복사 생성자, Copy constructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Yum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Yum</span> yum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 복사 팩토리, Copy factory</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Yum</span> <span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Yum</span> yum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이러한 방법은 클래스가 구현한 인터페이스 타입 인스턴스를 인수로 받을 수 있기 때문에, 클라이언트는 원본의 구현 타입에 얽매이지 않고 복제본의 타입을 정할 수 있습니다.</p>\n<p>결론적으로, <code class=\"language-text\">Cloneable</code>을 확장하는 것은 좋지 않으며 생성자와 팩토리를 사용하는 것이 좋습니다. 다만 배열의 경우는 clone 메서드를 사용하는 것이 좋습니다.</p>\n<blockquote>\n<p>추가적으로 알면 좋은 글</p>\n</blockquote>\n<p>clone() 메서드의 경우, deep copy이고 arraycopy()의 경우, shallow clone입니다.</p>\n<ul>\n<li><a href=\"https://masima305.tistory.com/36\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">clone() vs arraycopy()</a></li>\n<li><a href=\"https://velog.io/@coin46/Shallow-copy-vs-Deep-copy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shallow Copy vs Deep Copy</a></li>\n</ul>\n<p>[추가적으로 ]</p>\n<br/>\n<h2 id=\"item-14-comparable을-개발할때-고려합니다\"><a href=\"#item-14-comparable%EC%9D%84-%EA%B0%9C%EB%B0%9C%ED%95%A0%EB%95%8C-%EA%B3%A0%EB%A0%A4%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 14. <code class=\"language-text\">Comparable</code>을 개발할때 고려합니다.</h2>\n<p><code class=\"language-text\">compareTo</code> 메서드는 <code class=\"language-text\">Comparable</code> 인터페이스의 유일한 메서드입니다. (Object 메서드가 아닙니다.) 이는 Comparable 객체의 컬렉션 유지 관리에도 편하는 장점이 있습니다.</p>\n<p>sgn에 대한 여러가지 수학적 조건이 있으나 여기서는 너무 수학적으로 설명되기에 이를 생략합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 개체 참조 필드와 비교 가능한 단일 필드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span> cis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> cis<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">Object</code>의 <code class=\"language-text\">equals</code>나 <code class=\"language-text\">==</code>와 주로 비교대상이 되며 이를 특징별로 정리하면 다음과 같습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">compareTo</code></p>\n<ul>\n<li>기준에 따라 비교합니다. 동일성 비교에 더해 순서까지 비교할 수 있으며 제네릭합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">equals</code></p>\n<ul>\n<li>두 객체의 값의 동일성 여부를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">==</code></p>\n<ul>\n<li>두 객체의 동일성 여부를 반환합니다.</li>\n</ul>\n</li>\n</ul>\n<p>이중에서 <code class=\"language-text\">compareTo</code>에 대해서 좀 더 알아보자면 지켜야하는 3가지의 규약이 있습니다.</p>\n<ul>\n<li>두 객체의 참조의 순서를 바꿔 비교해도 항상 예상한 결과가 같아야합니다.</li>\n<li>a &#x3C; b, b &#x3C; c라면 a &#x3C; c가 성립해야합니다.</li>\n<li>같은 객체들끼리는 어떤 객체와 비교하더라도 항상 같아야합니다.</li>\n</ul>\n<h3 id=\"comparable-vs-comparator\"><a href=\"#comparable-vs-comparator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comparable VS Comparator</h3>\n<p><code class=\"language-text\">Comparable</code> 인터페이스의 경우 <code class=\"language-text\">compareTo()</code> 메서드를 오버라이딩 하여서 인자로 넘어온 같은 타입의 다른 객체와 대소 비교합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Fields, Getters, Setters 생략</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">Comparator</code> 인터페이스의 경우, 정렬 대상 클래스를 수정할 수 없을 때 주로 사용합니다. 주로 <code class=\"language-text\">Arrays.sort()</code>, <code class=\"language-text\">Collections.sort()</code> 등을 사용하며, 이를 통해서 정렬을 합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span> comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Player</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> comparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>다만 보통은 람다함수로 표현합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이에 대한 상세 내용은 아래르 참고하면 좋습니다.</p>\n<ul>\n<li><a href=\"https://www.daleseo.com/java-comparable-comparator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">comparable vs comparator</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Effective Java, 객체 생성과 삭제","path":"/01-java-effective-java/","date":"11. April 2021","timeToRead":25,"description":"Effective Java 책 중, ch2 객체 생성과 삭제에 대해 정리합니다.","content":"<h1 id=\"객체-생성과-삭제\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%82%AD%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 생성과 삭제</h1>\n<h2 id=\"item-1-생성자-대신-정적-팩토리-메서드-고려\"><a href=\"#item-1-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B3%A0%EB%A0%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 1. 생성자 대신 정적 팩토리 메서드 고려</h2>\n<h3 id=\"정적-팩토리-메서드의-장점\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 팩토리 메서드의 장점</h3>\n<p>다음과 같이 정적 팩토리 메서드를 통해 생성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rank</span><span class=\"token punctuation\">></span></span> faceCards <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>JACK<span class=\"token punctuation\">,</span> QUEEN<span class=\"token punctuation\">,</span> KING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BigInteger</span> prime <span class=\"token operator\">=</span> <span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">StackWalker</span> luke <span class=\"token operator\">=</span> <span class=\"token class-name\">StackWalker</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"1-정적-팩토리-메서드의-한-가지-장점은-생성자와-달리-이름이-존재합니다\"><a href=\"#1-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%ED%95%9C-%EA%B0%80%EC%A7%80-%EC%9E%A5%EC%A0%90%EC%9D%80-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%A1%B4%EC%9E%AC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 정적 팩토리 메서드의 한 가지 장점은 생성자와 달리 이름이 존재합니다.</h4>\n<ul>\n<li>정적 팩토리가 사용하기 쉽고, 읽기 쉬운 클라이언트 코드를 제공합니다.</li>\n<li>여러 생성자가 필요하다고 판단되면, 정적 팩토리 메서드를 사용하는 것이 좋습니다.</li>\n</ul>\n<h4 id=\"2-생성자와-달리-호출될-때마다-새-개체를-만들-필요가-없습니다\"><a href=\"#2-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%ED%98%B8%EC%B6%9C%EB%90%A0-%EB%95%8C%EB%A7%88%EB%8B%A4-%EC%83%88-%EA%B0%9C%EC%B2%B4%EB%A5%BC-%EB%A7%8C%EB%93%A4-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 생성자와 달리 호출될 때마다 새 개체를 만들 필요가 없습니다.</h4>\n<ul>\n<li>생성된 인스턴스를 캐시하고 불필요한 중복 객체 생성을 방지하고 반복적으로 분배 가능합니다.</li>\n<li>반복 된 호출에서 동일한 객체를 반환하는 정적 팩토리 메서드의 기능을 통해 클래스는 언제든지 존재하는 인스턴스를 엄격하게 제어 할 수 있습니다.</li>\n</ul>\n<h4 id=\"3-생성자와-달리-반환-유형의-모든-하위-유형의-객체를-반환할-수-있습니다\"><a href=\"#3-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%EB%B0%98%ED%99%98-%EC%9C%A0%ED%98%95%EC%9D%98-%EB%AA%A8%EB%93%A0-%ED%95%98%EC%9C%84-%EC%9C%A0%ED%98%95%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 생성자와 달리 반환 유형의 모든 하위 유형의 객체를 반환할 수 있습니다.</h4>\n<ul>\n<li>이러한 유연함을 이용해 특정 응용 프로그램은 API가 클래스를 공개하지 않고도 객체를 반환 할 수 있습니다.</li>\n<li>Java 8에서는 인터페이스에 정적 메서드를 포함 할 수 없다는 제한이 제거되었으므로 편하게 사용할 수 있습니다.</li>\n</ul>\n<h4 id=\"4-반환-된-개체의-클래스가-입력-매개-변수의-함수로-호출마다-다를-수-있다\"><a href=\"#4-%EB%B0%98%ED%99%98-%EB%90%9C-%EA%B0%9C%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%9E%85%EB%A0%A5-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98%EC%9D%98-%ED%95%A8%EC%88%98%EB%A1%9C-%ED%98%B8%EC%B6%9C%EB%A7%88%EB%8B%A4-%EB%8B%A4%EB%A5%BC-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 반환 된 개체의 클래스가 입력 매개 변수의 함수로 호출마다 다를 수 있다.</h4>\n<ul>\n<li>구현 클래스의 존재는 클라이언트에 보이지 않기 때문에 RegularEnumSet과 같은 작은 열거 유형에 대한 성능적 이점이 있습니다.</li>\n</ul>\n<h4 id=\"5-메서드를-포함하는-클래스가-작성될-때-반환-된-객체의-클래스가-존재할-필요가-없다\"><a href=\"#5-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%9E%91%EC%84%B1%EB%90%A0-%EB%95%8C-%EB%B0%98%ED%99%98-%EB%90%9C-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%A0-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 메서드를 포함하는 클래스가 작성될 때 반환 된 객체의 클래스가 존재할 필요가 없다.</h4>\n<ul>\n<li>유연한 정적 팩토리 메소드는 JDBC (Java Database Connectivity API)와 같은 Service provider framework 기반을 형성합니다.</li>\n<li>\n<p>서비스 공급자 프레임워크는 세가지 필수 구성 요소가 존재합니다.</p>\n<ul>\n<li>구현을 나타내는 서비스 인터페이스 (<code class=\"language-text\">a service interface</code>)</li>\n<li>공급자가 구현을 등록하느데 사용하는 공급자 등록 API (<code class=\"language-text\">a provider registration APi</code>)</li>\n<li>클라이언트가가 서비스의 인스턴스를 얻기 위해 사용하느 서비스 액세스 API (<code class=\"language-text\">a service access API</code>)</li>\n<li>(선택적 네 번째 구성 요소) 서비스 제공 업체 인터페이스 (<code class=\"language-text\">service provider interface</code>)</li>\n</ul>\n</li>\n</ul>\n<p>서비스 제공 업체 프레임 워크 패턴에는 다양한 변형이 존재합니다.</p>\n<ul>\n<li>서비스 액세스 API는 공급자가 제공하는 것보다 더 풍부한 서비스 인터페이스를 클라이언트에 반환 가능 (<code class=\"language-text\">Bridge 패턴</code>)</li>\n</ul>\n<h3 id=\"정적-팩토리-메서드의-단점\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 팩토리 메서드의 단점</h3>\n<h4 id=\"1-public-또는-protected-생성자가-없는-클래스는-하위-클래스화-할-수-없습니다\"><a href=\"#1-public-%EB%98%90%EB%8A%94-protected-%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80-%EC%97%86%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%ED%95%98%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%99%94-%ED%95%A0-%EC%88%98-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. public 또는 protected 생성자가 없는 클래스는 하위 클래스화 할 수 없습니다.</h4>\n<ul>\n<li>Collections Framework에서 편의 구현 클래스를 하위 클래스로 만드는 것은 불가능합니다.</li>\n<li>프로그래머가 상속(inheritance)보다 합성(composition) 를 사용하는 것을 장려하며, immutable types에 필요합니다.</li>\n</ul>\n<h4 id=\"2-프로그래머가-찾기-어렵습니다\"><a href=\"#2-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EC%B0%BE%EA%B8%B0-%EC%96%B4%EB%A0%B5%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 프로그래머가 찾기 어렵습니다.</h4>\n<ul>\n<li>API 문서에서 눈에 띄지 않습니다.</li>\n<li>생성자가 수행하므로 생상자 대신 정적 팩토리 메서드를 제공하는 클래스를 인스턴스화 하는 방법을 파악하기 어렵습니다.</li>\n</ul>\n<h3 id=\"대표적-팩토리-메서드\"><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대표적 팩토리 메서드</h3>\n<p>다음은 대표적인 일반적인 이름입니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">from</code></p>\n<ul>\n<li>단일 매개 변수를 취하고이 유형 의 해당 인스턴스를 반환하는 유형 변환 메소드</li>\n<li><code class=\"language-text\">Date d = Date.from(instant)</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">of</code></p>\n<ul>\n<li>여러 매개 변수를 사용하고이를 통합하는이 유형의 인스턴스를 반환하는 집계 메서드</li>\n<li><code class=\"language-text\">Set &lt;Rank&gt; faceCards = EnumSet.of (JACK, QUEEN, KING);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">valueOf</code></p>\n<ul>\n<li>from및 of에 대한 보다 자세한 대안</li>\n<li><code class=\"language-text\">BigInteger prime = BigInteger.valueOf (Integer.MAX_VALUE);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">instance</code> or <code class=\"language-text\">getInstance</code></p>\n<ul>\n<li>매개 변수 (있는 경우)로 설명되지만 같은 값을 가질 수없는 인스턴스를 반환</li>\n<li><code class=\"language-text\">StackWalker luke = StackWalker.getInstance (옵션);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">create</code> or <code class=\"language-text\">newInstance</code></p>\n<ul>\n<li>instance또는 getInstance. 단, 메서드가 각 호출이 새 인스턴스를 반환하도록 보장한다는 점은 예외</li>\n<li><code class=\"language-text\">Object newArray = Array.newInstance (classObject, arrayLen);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">getType</code></p>\n<ul>\n<li>getInstance비슷하지만 팩토리 메서드가 다른 클래스에있는 경우 사용</li>\n<li><code class=\"language-text\">FileStore fs = Files.getFileStore (경로);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">newType</code></p>\n<ul>\n<li>newInstance비슷하지만 팩토리 메서드가 다른 클래스에있는 경우 사용</li>\n<li><code class=\"language-text\">BufferedReader br = Files.newBufferedReader (경로);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">type</code></p>\n<ul>\n<li>get유형 과 new유형의 간결한 대안</li>\n<li><code class=\"language-text\">List &lt;Complaint&gt; litany = Collections.list (legacyLitany);</code></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"item-2-생성자-매개-변수가-많은-경우-빌더를-고려\"><a href=\"#item-2-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98%EA%B0%80-%EB%A7%8E%EC%9D%80-%EA%B2%BD%EC%9A%B0-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EA%B3%A0%EB%A0%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 2. 생성자 매개 변수가 많은 경우, 빌더를 고려</h2>\n<p>Static factories 와 생성자는 제한을 고유하므로, 잘 확장되지 않습니다.</p>\n<h3 id=\"telescoping-constructor-패턴\"><a href=\"#telescoping-constructor-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>telescoping constructor 패턴</h3>\n<ul>\n<li>생성자에 필수 매개 변수만 제공하고, 다른 하나에는 단일 선택적 매개 변수, 다른 하나는 두 개의 선택적 맥개 변수가 있는 등의 방식으로 생성자를 제공하는 패턴입니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sodium<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>텔레 스코핑 생성자 패턴은 작동하지만 매개 변수가 많으면 클라이언트 코드를 작성하기 어렵고 여전히 읽기가 어렵습니다.</li>\n</ul>\n<h3 id=\"javabeans-패턴\"><a href=\"#javabeans-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaBeans 패턴</h3>\n<p>이를 해결하는 방법은 setter 메소드 호출(<code class=\"language-text\">JavaBeans 패턴</code>)입니다. (이 경우는 텔레 스코핑 생성자 패턴을 해결하기에는 유리하나 <strong>불일치를 허용하고 가변성을 요구</strong>한다는 단점이 존재합니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> servingSize <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수; 기본값 없음</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> servings <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수; 기본값 없음</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> calories <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> fat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sodium <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p>JavaBeans 패턴은 구성이 여러 호출로 분할되기 때문에 JavaBean은 구성 과정에서 일관성없는 상태에 있을 수 있습니다.</p>\n<ul>\n<li>유효성을 확인하는 것으로 일관성을 유지할 수 있는 옵션이 따로 없습니다.</li>\n<li>클래스를 불변으로 만들 가능성을 배제하고 스레드 안전성을 보장하기 위해 노력이 필요합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"builder-패턴\"><a href=\"#builder-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Builder 패턴</h3>\n<p>텔레 스코핑 생성자 패턴의 안전성 + JavaBeans 패턴의 가독성을 결합</p>\n<ul>\n<li>클라이언트는 필요한 모든 매개 변수를 사용하여 생성자 (또는 정적 팩토리)를 호출하고 빌더 객체를 가져옵니다.</li>\n<li>그런 다음 클라이언트는 빌더 개체에서 setter와 유사한 메서드를 호출하여 관심있는 각 선택적 매개 변수를 설정합니다.</li>\n<li>클라이언트는 매개 변수가없는 build메서드를 호출하여 일반적으로 변경할 수없는 개체를 생성합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필수 매개 변수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 선택적 매개 변수-기본값으로 초기화</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> calories <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> fat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sodium <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servingSize <span class=\"token operator\">=</span> servingSize<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servings <span class=\"token operator\">=</span> 서빙<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">NutritionFacts</span> cocaCola <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NutritionFacts<span class=\"token punctuation\">.</span>Builder</span> <span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>calories <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>sodium <span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>carbohydrate <span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>build <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<p>해당 코드는 작성하기 쉽고 읽기 쉽습니다.</p>\n<ul>\n<li>스프링은 <code class=\"language-text\">@Builder</code> 어노테이션이 있습니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스 계층 구조를위한 빌더 패턴</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Topping</span> <span class=\"token punctuation\">{</span>HAM<span class=\"token punctuation\">,</span> MUSHROOM<span class=\"token punctuation\">,</span> ONION<span class=\"token punctuation\">,</span> PEPPER<span class=\"token punctuation\">,</span> SAUSAGE<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">EnumSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span>noneOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> addTopping <span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span> topping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     toppings<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span>requireNonNull <span class=\"token punctuation\">(</span>topping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> self <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Pizza</span> build <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Subclasses must override this method to return \"this\"</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">T</span> self <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toppings <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// See Item  50</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 추상 self메서드 와 함께 메서드 체이닝이 캐스트 없이도 하위 클래스에서 제대로 작동합니다. 따라서 아래의 장점을 가집니다.</p>\n<ul>\n<li>빌더 패턴은 매우 유연합니다. (반복 사용을 통해 여러 개체를 빌드할 수 있음)</li>\n</ul>\n<p>다만, 이러한 단점이 있습니다.</p>\n<ul>\n<li>개체를 만들기 위해서는 작성기를 만들어야 하기 때문에, 만드는 비용 및 성능이 중요한 상황에서 문제가 될 수 있습니다. (처음부터 시작하는 경우에 빌더를 선택하면 좋습니다.)</li>\n</ul>\n<p>따라서 <strong>빌더 패턴은 생성자 또는 정적 팩토리에 소수 이상의 매개 변수가 있는 클래스를 디자인할 때 장점</strong>을 가집니다.</p>\n<br/>\n<h2 id=\"item-3-private-생성자-또는-열거형을-통해-싱글-톤-속성을-적용\"><a href=\"#item-3-private-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%98%90%EB%8A%94-%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%8B%B1%EA%B8%80-%ED%86%A4-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 3. private 생성자 또는 열거형을 통해 싱글 톤 속성을 적용</h2>\n<p>singleton은 정확하게 한번만 인스턴스화 되고, stateless 또는 unique한 시스템 컴포넌트입니다. <strong>클래스를 싱글톤으로 만들면, 클라이언트 테스트가 어려울 수 있습니다.</strong> 왜냐하면 해당 유형으로 사용되는 인터페이스를 구현하지 않는 이상에 싱글톤을 mock으로 구현할 수 없기 때문입니다.</p>\n<p>일반적으로 싱글톤을 구현하는 방법에 따라 구분할 수 있습니다.</p>\n<h3 id=\"1-public-final-field를-통한-singleton-구현\"><a href=\"#1-public-final-field%EB%A5%BC-%ED%86%B5%ED%95%9C-singleton-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. public final field를 통한 singleton 구현</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public final field가 있는 singleton</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Elvis</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>private 생성자는 public static final 필드를 초기화하기 위해 한번만 호출되며, Elvis.INSTANCE는 public, protected 생성자가 없기 때문에 monoelvistic(단일성)이 보장됩니다.</li>\n<li>\n<p><code class=\"language-text\">public final field</code>는 해당 장점을 가집니다.</p>\n<ul>\n<li>API가 클래스가 싱글톤임을 명확하게 합니다.</li>\n<li>퍼블릭 정적 필드는 최종이므로 항상 동일한 객체 참조를 포함합니다.</li>\n<li>매우 간단합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-정적-팩토리를-통한-싱글톤\"><a href=\"#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%8B%B1%EA%B8%80%ED%86%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 정적 팩토리를 통한 싱글톤</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Singleton with static factory</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Elvis</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Elvis</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code class=\"language-text\">Elvis.getInstance</code> 을 사용하는 모든 호출은 동일한 객체 참조를 반환하고, 다른 Elvis 인스턴스는 생성되지 않습니다.</li>\n<li>\n<p>정잭 팩토리의 장점은 아래와 같습니다.</p>\n<ul>\n<li>API를 변경하지 않고도 클래스가 싱글톤인지 여부에 대해 바꿀 수 있는 유연성을 제공합니다.</li>\n<li>애플리케이션에서 필요한 경우, <code class=\"language-text\">genericwe singleton factory</code> 를 작성할 수 있습니다.</li>\n<li><code class=\"language-text\">method reference(메소드 참조)</code> 를 supllier(공급자)로 사용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>그러나 1번이나 2번의 접근 방식은 싱글톤은 <code class=\"language-text\">serializabe(직렬화)</code> 하는 경우에는 <code class=\"language-text\">implements Serializable</code> 만으로는 충분하지 않기 때문에 모든 인스턴스 필드(<code class=\"language-text\">transient</code>)를 선언하고 <code class=\"language-text\">readResolve</code> 메소드를 제공해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 싱글톤 속성을 보존하는 readResolve 메서드</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> readResolve <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// true Elvis를 반환하고 가바지 커렉터가 Elvis의 복사품을 처리합니다.</span>\n  <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"3-단일-요소-열거-형-선언\"><a href=\"#3-%EB%8B%A8%EC%9D%BC-%EC%9A%94%EC%86%8C-%EC%97%B4%EA%B1%B0-%ED%98%95-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 단일 요소 열거 형 선언</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Enum sigleton - the preferred approach</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  INSTANCE<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>public field 접근 방식과 유사하지만 더 <strong>간결하고 직렬화를 제공</strong>합니다.</li>\n<li>종종 singleton을 구현하는 가장 좋은 방법입니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-4-private-생성자를-통해-noninstantiability비인스턴스성을-적용합니다\"><a href=\"#item-4-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%ED%86%B5%ED%95%B4-noninstantiability%EB%B9%84%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%84%B1%EC%9D%84-%EC%A0%81%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 4. private 생성자를 통해 noninstantiability(비인스턴스성)을 적용합니다.</h2>\n<ul>\n<li><code class=\"language-text\">java.lang.Math</code> 나 <code class=\"language-text\">java.util.Arrays</code>, <code class=\"language-text\">java.util.Colletions</code> 와 같은 유틸리티 클래스는 인스턴스화되도록 설계되어 있지 않습니다.</li>\n<li>추상 클래스를 만들어서 noninstantiability를 적용하려는 것은 동작하지 않습니다.</li>\n<li>다만 기본 생성자는 클래스에 명시적 생성자가 없는 경우에 생성되므로, private constructor을 포함함으로서 class를 noninstantiable 상태로 만들 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Noninstantiable utility class</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UtilityClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Suppress default constructor for noninstantiability</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">UtilityClass</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>explict constructor(명시적 생성자)는 private 이므로, 외부에서 접근할 수 없습니다.</li>\n<li><code class=\"language-text\">AssertionError()</code> 는 생성자가 실수로 클래스 내에서 호출되는 경우에 보험을 제공합니다. 즉, 어떤 상황에서도 클래스가 인스턴스화 되지않음을 보장합니다.</li>\n<li>다만, 이러한 방법은 클래스가 하위 클래스로 분류되는 것을 방지합니다. 즉, 서브 클래스에는 호출할 액세스 가능한 super class 생성자가 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-5-hardwiring-자원에-의존성-주입dependency-injection을-선호합니다\"><a href=\"#item-5-hardwiring-%EC%9E%90%EC%9B%90%EC%97%90-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85dependency-injection%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 5. Hardwiring 자원에 의존성 주입(Dependency Injection)을 선호합니다.</h2>\n<p>많은 클래스가 하나 이상의 기본 리소스에 의존합니다.</p>\n<p>부정적인 케이스는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 유연하지 않고, 테스트할 수 없는 잘못 사용된 유틸리티</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lexicon</span> dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Noninstantiable</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isValid <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggests</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>즉, Static utility classes 와 싱글톤은 기본 리스스에 의해 동작이 매개변수화 된 클래스에 적합하지 않습니다.</li>\n<li>따라서 이를 해결하는 패턴은 <strong>새 인스턴스를 만들때, 생성자에 리소스를 전달하는 방법</strong>입니다. (DI, Dependency Injection)</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Dependency injection provides flexibility and testability</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellCheker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lexicon</span> dictionary<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpellChecker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lexicon</span> dictionary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggestions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Dependency Injection Pattern(의존성 주입 패턴)은 다음의 장점을 가집니다.</p>\n<ul>\n<li>immutabiliy(불변성)을 보존합니다.</li>\n<li>\n<p>resource factory를 전달함으로서 패턴을 변경할 수 있습니다. (<strong>Factory Method Pattern</strong>)</p>\n<ul>\n<li>자바8에 도입된 <code class=\"language-text\">Supplier&lt;T&gt;</code> 인터페이스는 Factories를 표현하는데 효과적입니다.</li>\n<li><code class=\"language-text\">Supplier&lt;T&gt;</code> 메소드는 <code class=\"language-text\">bounded wildcard type(제한된 와일드카드 유형)</code> 을 사용해서 팩토리의 매개변수를 제한하여, 클라이언트가 지정된 유형의 하위 유형의 생성하는 팩토리를 전달해야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mosaic</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Tile</span><span class=\"token punctuation\">></span></span> tileFactory<span class=\"token punctuation\">)</span></code></pre>\n<p>결론적으로는 <strong>singleton 이나 static utility class를 사용하여 하나 이상의 기본 리소스에 의존하는 클래스를 구현하지 않고, 클래스가 이러한 리소스를 직접 생성하지 않도록 설정</strong>해야합니다. 대신에, Resource 또는 Factory를 통해서 생성자에 전달해야합니다. (또는 static factory 나 builder) <strong>DI를 통해서 클래스의 유연성과 재사용성, 테스트 기능을 향상</strong> 시킬 수 있습니다.</p>\n<br/>\n<h2 id=\"item-6-불필요한-객체를-생성하는-것을-줄입니다\"><a href=\"#item-6-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%84-%EC%A4%84%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 6. 불필요한 객체를 생성하는 것을 줄입니다.</h2>\n<p>필요할때마다 기능적으로 동등한 새 객체를 만드는 것보다 단일 객체를 재사용하는 것이 적절합니다.</p>\n<ul>\n<li>나쁜 케이스 : <code class=\"language-text\">String s = new String(&quot;clothes&quot;)</code></li>\n</ul>\n<p>좀 더 개선하면 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">String s = &quot;clothes&quot;</code></li>\n</ul>\n<p><code class=\"language-text\">static factory method</code> 를 사용하면, 불필요한 객체 생성을 피할 수 있습니다. 따라서 다음과 같이 작성하여 성능이 향상 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 성능 향상 가능.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isRomanNumeral <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^(?=.)M*(C[MD]|D?C{0,3})\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다만 문자열이 정규식과 일치하는지 확인하는 가장 쉬운 방법이지만 String.matches` 성능이 중요한 상황에서 반복적으로 사용하기에는 적합하지 않습니다. 이를 개선하면 아래처럼 바뀝니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 성능 향상을 위해 값 비싼 객체 재사용합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RomanNumerals</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> ROMAN <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>compile <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"^ (? =.) M * (C [MD] | D? C {0,3})\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"( X [CL] | L? X {0,3}) (I [XV] | V? I {0,3}) $ \"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isRomanNumeral <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ROMAN<span class=\"token punctuation\">.</span>matcher <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>matches <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>이러한 버전은 isRomanNumeral을 자주 호출할 경우 높은 성능을 얻으며, 명확성도 향상되었고 사용자가 보기 쉽습니다.</li>\n</ul>\n<p>Autoboxing는 애매하지만, primitive 와 boxed primitive types간의 구분을 없애버리지는 않습니다. 이러한 잘못된 사용은 속도를 느리게 만듭니다. 따라서, boxed primitives 보다, primitive를 선호하고 의도하지 않은 오토 박싱을 조심해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 느리게 만들어버림.</span>\n    sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"item-7-사용하지-않는-개체의-참조를-제거합니다\"><a href=\"#item-7-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B0%9C%EC%B2%B4%EC%9D%98-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 7. 사용하지 않는 개체의 참조를 제거합니다.</h2>\n<p>흔히. 가비지컬렉터를 사용하는 언어의 경우에는 메모리 관리에 대해 생각할 필요가 없다고 생각을 하지만 그렇지 않습니다.</p>\n<h3 id=\"메모리-낭비의-원인-1---미-참조\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-1---%EB%AF%B8-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 1 - 미 참조</h3>\n<p>다음은 간단하게 스택을 구성한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n      elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음 코드에서 스택이 커졌다가 줄어든 경우, 프로그램에 더 이상 참조가 없더라고 스택에서 참조된 객체는 가비지 수집이 되지 않습니다.</p>\n<p>이를 수정하는 방법은 참조가 쓸모 없게 되면 <strong>null out</strong> 참조를 하면 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> pop <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 사용하지 않는 참조</span>\n  <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>객체 참조를 무효화하는 것은 표준이 아니라 예외로 처리해야합니다.</li>\n<li>클래스가 자체 메모리를 관리할 때마다 프로그래머는 메모리 누수에 대해 경고해야합니다. 해제시 개체 참조를 null로 처리해야합니다.</li>\n</ul>\n<h3 id=\"메모리-낭비의-원인-2---캐시\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-2---%EC%BA%90%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 2 - 캐시</h3>\n<p>캐시에 넣어놓으면 참조가 있다는 사실을 이후에 잊고, 관련성이 없어진 이후에도 남아있을 확률이 높습니다. 대부분의 캐시에서 사용하는 데이터의 가치는 시간과 반비례하기 때문에 항목을 정리할 필요가 있습니다. <code class=\"language-text\">LinkedHashMap</code> 는 <code class=\"language-text\">removeEldestEntry</code> 방법을 통해서 이러한 낭비를 피하기 위해 노력합니다.</p>\n<h3 id=\"메모리-낭비의-원인-3-리스너-및-기타-콜백\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-3-%EB%A6%AC%EC%8A%A4%EB%84%88-%EB%B0%8F-%EA%B8%B0%ED%83%80-%EC%BD%9C%EB%B0%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 3. 리스너 및 기타 콜백</h3>\n<p>클라이언트가 콜백을 등록하지만, 명시적으로 취소하지 않으면 누적됩니다.</p>\n<p>이러한 부분을 삭제하는 방법은 <code class=\"language-text\">.NET Framework</code> 의 <code class=\"language-text\">WeakHashMap</code> 과 같습니다.</p>\n<p><strong>이렇듯이 메모리 낭비는 명백한 오류로 나타나지 않기 때문에, 미리 예상하고 예방하는 방법을 배우는 것이 매우 바람직합니다.</strong></p>\n<br/>\n<h2 id=\"item-8-finalizers종료자와-cleaners클리너를-피합니다\"><a href=\"#item-8-finalizers%EC%A2%85%EB%A3%8C%EC%9E%90%EC%99%80-cleaners%ED%81%B4%EB%A6%AC%EB%84%88%EB%A5%BC-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 8. Finalizers(종료자)와 Cleaners(클리너)를 피합니다.</h2>\n<p><code class=\"language-text\">Finalizers</code> 는 얘측할 수 없고 종종 위험하고 일반적으로 불필요합니다.</p>\n<ul>\n<li>비정상적인 동작, 성능 저하, 이식성의 문제가 발생할 수 있습니다.</li>\n</ul>\n<p>Java 9부터는 Finalizers를 더이상 사용하지는 않지만, Cleaners를 사용합니다. 그러나, <code class=\"language-text\">Cleaner</code>는 <code class=\"language-text\">Finalizers</code> 보다 덜 위험하지만 그래도 예측할 수 없고, 느리고, 일반적으로 불필요합니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-1---즉시-실행될-것이라는-보장이-없음\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-1---%EC%A6%89%EC%8B%9C-%EC%8B%A4%ED%96%89%EB%90%A0-%EA%B2%83%EC%9D%B4%EB%9D%BC%EB%8A%94-%EB%B3%B4%EC%9E%A5%EC%9D%B4-%EC%97%86%EC%9D%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 1 - 즉시 실행될 것이라는 보장이 없음</h3>\n<p>종료자나 클리너가 실행되는 시간 사이에 임의의 시간이 걸릴 수 있습니다. 즉, <strong>종료자 또는 클리너에서 시간이 중요한 작업을 수행하면 안됩니다.</strong></p>\n<h3 id=\"finalizers와-cleaner의-단점-2---종료-중에-발생한-예외는-무시됩니다\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-2---%EC%A2%85%EB%A3%8C-%EC%A4%91%EC%97%90-%EB%B0%9C%EC%83%9D%ED%95%9C-%EC%98%88%EC%99%B8%EB%8A%94-%EB%AC%B4%EC%8B%9C%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 2 - 종료 중에 발생한 예외는 무시됩니다.</h3>\n<p>이러한 예외가 손상된 상태로 종료된 경우, 다른 스레드가 이를 사용할려고 하면 비 결정적인 동작이 발생할 수 있습니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-3---심각한-성능-저하\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-3---%EC%8B%AC%EA%B0%81%ED%95%9C-%EC%84%B1%EB%8A%A5-%EC%A0%80%ED%95%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 3 - 심각한 성능 저하</h3>\n<p><code class=\"language-text\">Try-with-resource</code>와 가비지 컬렉터를 쓰는 경우 12ns가 걸리는데 종료자를 사용하면 시간이 550ns가 발생합니다. Cleaner는 조금 더 빠르지만 66ns가 걸립니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-4---심각한-보안-문제-존재\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-4---%EC%8B%AC%EA%B0%81%ED%95%9C-%EB%B3%B4%EC%95%88-%EB%AC%B8%EC%A0%9C-%EC%A1%B4%EC%9E%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 4 - 심각한 보안 문제 존재</h3>\n<p><code class=\"language-text\">finalizer attacks(종료자 공격)</code>을 사용하는 경우, 문제가 발생합니다.</p>\n<p>이를 막기 위해서는 생성자에서 예외를 던지는 경우, 객체가 존재하지 않도록 방지할 수 있으나 종료자가 이를 불가능하게 만듭니다. 이를 <strong>해결하기 위해서는 <code class=\"language-text\">finalize</code> 와 같은 최종 메서드를 사용</strong>해야합니다.</p>\n<h3 id=\"finalizers나-cleaner를-쓰지-않기-위해서\"><a href=\"#finalizers%EB%82%98-cleaner%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers나 Cleaner를 쓰지 않기 위해서.</h3>\n<ul>\n<li><code class=\"language-text\">AutoCloseable</code> 을 통해서 클래스를 구현합니다.</li>\n<li><code class=\"language-text\">try-with-resource</code> 를 통해서 종료를 보장합니다.</li>\n</ul>\n<h3 id=\"finalizers나-cleaner의-합법적인-용도\"><a href=\"#finalizers%EB%82%98-cleaner%EC%9D%98-%ED%95%A9%EB%B2%95%EC%A0%81%EC%9D%B8-%EC%9A%A9%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers나 Cleaner의 합법적인 용도</h3>\n<ul>\n<li>\n<p>리소스 소유자가 close method 호출을 무시할 경우, 안전막 역할을 하는 것입니다.</p>\n<ul>\n<li><code class=\"language-text\">FileInputStream</code>, <code class=\"language-text\">FileOutputStream</code>, <code class=\"language-text\">ThreadPoolExecutor</code> 등이 finalizers를 통해서 안전망 역할을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">native peer</code>가 있는 객체와 관련된 경우에 사용합니다.</p>\n<ul>\n<li>이러한 객체는 일반 객체가 아니므로 가비지 컬렉터가 이에 대해 모르기 때문에, 회수할 수 엇습니다.</li>\n<li>다만, 이렇게 사용을 하더라도 <code class=\"language-text\">close method</code>를 사용해야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클리너를 안전망을 사용하는 경우.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Room</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutoCloseable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cleaner</span> cleaner <span class=\"token operator\">=</span> <span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// cleaning이 필요합니다. Room을 참조하면 안됩니다.</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 방의 쓰레기 더미 수</span>\n    <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numJunkPiles <span class=\"token operator\">=</span> numJunkPiles<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// close 메소드 또는 클리너에 의해 호출</span>\n\t\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cleaning room\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      numJunkPiles <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// room의 상태, cleanable과 공유됨</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">State</span> state<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// cleanable, gc에 의해 가능할때 room이 청소됩니다.</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cleaner<span class=\"token punctuation\">.</span>Cleanable</span> cleanable<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span>numJunkPiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcleanable <span class=\"token operator\">=</span> cleaner<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcleanable<span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=kbh3983&#x26;logNo=220908731253&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">추가적인 참고자료</a></p>\n<p>다음과 같이 State 인스턴스가 Room을 참조하지 않도록 사용합니다.</p>\n<br/>\n<h2 id=\"item-9-try-with-resource-를-try-finally-보다-선호합니다\"><a href=\"#item-9-try-with-resource-%EB%A5%BC-try-finally-%EB%B3%B4%EB%8B%A4-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 9. TRY-WITH-RESOURCE 를 TRY-FINALLY 보다 선호합니다.</h2>\n<p>Java 라이브러리에서는 close 메소드를 호출하는 경우, 많은 자원이 소모되기 때문에 다른 방법을 사용해야합니다.</p>\n<p><code class=\"language-text\">Try-finally</code> 는 2개 이상의 경우에서는 사용하기 어렵기 때문에, <code class=\"language-text\">try-with-resource</code> 를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> firstLineOfFile <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> firstLineOfFile <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> defaultVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> defaultVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n"}},{"node":{"title":"[Java] Java Lambda Detail","path":"/15-java-study/","date":"4. March 2021","timeToRead":11,"description":"Java Lambda에 대해 좀 더 자세하게 정리합니다.","content":"<h1 id=\"java-lambda\"><a href=\"#java-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h1>\n<p>백기선님의 자바 스터디 15주차(마지막) 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>람다식 사용법</li>\n<li>함수형 인터페이스</li>\n<li>Variable Capture</li>\n<li>메소드, 생성자 레퍼런스</li>\n</ul>\n<br/>\n<h2 id=\"java-lambda-1\"><a href=\"#java-lambda-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h2>\n<p>사실 자바 람다에 대해서는 따로 개인적으로 공부한 적이 있습니다. 다만 오늘은 스터디와 함께 더불어서 더 자세하게 공부해보려고 합니다.</p>\n<p>지난 게시글은 아래의 링크를 참고해주세요.</p>\n<p><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></p>\n<p>해당 게시글에서는 다음의 내용을 소개합니다.</p>\n<ul>\n<li>람다식이란.</li>\n<li>람다식 사용 방법</li>\n<li>람다식 예제</li>\n<li>람다식의 장단점</li>\n</ul>\n<br/>\n<h2 id=\"자바-람다식-사용법\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 람다식 사용법</h2>\n<h3 id=\"람다식이란\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>람다식이란</h3>\n<p><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></p>\n<p>해당 게시글을 내용이며 한번 더 이야기 하면 다음과 같이 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>매개변수<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> 실행문 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>자바의 Lambda는 <strong>메소드를 하나의 식(Expression)</strong>으로 표현한 것입니다. 익명메소드(함수) 생성 문법이라고도 이야기 할 수 있습니다.</p>\n<p>다만 주의해야하는 부분 중 하나는 자바의 메소드는 메소드 자체로 혼자 선언하여 선언하여 쓰일 수 없습니다. 반드시 클래스 구성 멤버로 선언되어 있어야합니다. 즉, 람다식을 통해서 생성되는 것은 메소드가 아닌 해당 메소드를 가지는 객체입니다. 람다식은 일반적인 객체가 아닌 <strong>인터페이스를 구현한 익명구현객체</strong>입니다.</p>\n<p>함수적 프로그래밍을 지원하기 위해서 자바 8부터 람다식을 지원하게 되었는데, 이를 통해서 기존의 코드 패턴이 많이 달라지기도 하며, 문법이 간결한 만큼 가독성면에서 큰 장점을 가집니다.</p>\n<h3 id=\"람다식-예제\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>람다식 예제.</h3>\n<p>다음과 같이 예시를 작성합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 함수형 인터페이스 선언</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 추상 메소드</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    alc minNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minNum<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output : 3</span>\n\n    <span class=\"token class-name\">Calc</span> calcNum <span class=\"token operator\">=</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calcNum<span class=\"token punctuation\">.</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// output : 4</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 예시에서 로직이 한줄이기 때문에 구현 로직에서 { x &#x3C; y ? x : y } 대신에 x &#x3C; y ? x : y 로 {}를 뺄수도 있고 return도 없앨 수 있습니다.</p>\n<p>추가적으로 매개변수가 하나 일때는 () 또한 삭제가 가능합니다.</p>\n<h3 id=\"자바-람다식의-장단점\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%9E%8C%EB%8B%A4%EC%8B%9D%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 람다식의 장단점</h3>\n<p>장점</p>\n<ul>\n<li>코드를 간결하게 만들 수 있습니다.</li>\n<li>가독성이 좋아집니다.</li>\n<li>함수를 만드는 과정 없이 한번에 처리할 수 있으므로 코딩하는 시간이 줄어듭니다.</li>\n<li>병렬 프로그래밍에 유리합니다.</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>재사용이 불가능합니다.</li>\n<li>일부 디버깅이 까다롭습니다.</li>\n<li>너무 남발하면 코드가 지저분해집니다.</li>\n<li>재귀로 만드는 경우에는 성능적 이슈가 있을 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"함수형-인터페이스\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>함수형 인터페이스</h2>\n<p>함수형 인터페이스(Functional Interface) 는 <strong>추상 메소드를 딱 하나만 가지고 있는 인터페이스</strong>입니다.</p>\n<p>자바 8부터 Functional Interface 기반의 <code class=\"language-text\">java.util.function</code> 패키지를 지원합니다.</p>\n<p>대표적인 예시는 아래와 같습니다.</p>\n<h3 id=\"1-predicate\"><a href=\"#1-predicate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Predicate</h3>\n<p><code class=\"language-text\">Predicate</code> 인터페이스는 T타입의 값을 받아서 boolean을 반환하는 함수 인터페이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Predicate Sample</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n  <span class=\"token comment\">// Predicate - and</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateAnd <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateAnd<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span>\n\n  <span class=\"token comment\">// Predicate - negate</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateNegate <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">negate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateNegate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span>\n\n  <span class=\"token comment\">// Predicate - or</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateOr <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateOr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">and(Predicate&lt;? super T&gt; other)</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 기존 Predicate와 and 조건으로 결합된 Predicate를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">negate()</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 부정을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">or(Predicate&lt;? super T&gt; other)</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 기존 Predicate와 or 조건으로 결합된 Predicate를 반환합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-consumer\"><a href=\"#2-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Consumer</h3>\n<p><code class=\"language-text\">Consumer</code> 인터페이스는 제너릭 형식의 T 객체를 받아, void를 반환하는 accept 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> firstConsumer <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first: \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> secondConsumer <span class=\"token operator\">=</span> b <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second: \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> combineConsumer <span class=\"token operator\">=</span> firstConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>secondConsumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  combineConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// first: test \\n second : test</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">andThen(Consumer&lt;? super T&gt; after)</code></p>\n<ul>\n<li>Consumer의 default 메소드로서, accept 메소드를 실행하고, 인수로 받은 Consumer의 accept 메소드를 호출하도록 정의합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-function\"><a href=\"#3-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Function</h3>\n<p><code class=\"language-text\">Function&lt;T, R&gt;</code> 인터페이스는 제너릭 형식의 T 객체를 받아, R 객체를 반환하는 apply 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">R</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> a <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 300</span>\n\n  <span class=\"token comment\">// function - andThen</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function1 <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function1<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 150</span>\n  <span class=\"token comment\">// 3 -> 300 -> 150</span>\n\n  <span class=\"token comment\">// function - compose</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function2 <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function2<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n  <span class=\"token comment\">// 3 -> 1 -> 100</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">andThen(Function&lt;? super R, ? extends T&gt; after)</code></p>\n<ul>\n<li>Function의 default 메소드로서, apply 메소드를 실행후 반환 값을 인수로 받은 Function의 apply 메소드의 인수로 전달하고 결과를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compose(Function&lt;? super V, ? extends T&gt; after)</code></p>\n<ul>\n<li>Function의 default 메소드로서, 인수로 받은 Function의 apply 메소드를 먼저 실행 및 반환 후 apply 메소드를 실행하여 결과를 반환합니다.</li>\n<li><code class=\"language-text\">andThen</code> 메소드와 반대로 동작합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-supplier\"><a href=\"#4-supplier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Supplier</h3>\n<p>Supplier 인터페이스는 매개변수는 없으며 T 객체를 반환하는 get 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// supplier</span>\n  <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> supplier <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-operator\"><a href=\"#5-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Operator</h3>\n<p><code class=\"language-text\">Operator</code> 인터페이스는 특정한 정수나 실수형 데이터를 처리하는데 사용되는 인터페이스입니다.</p>\n<br/>\n<h2 id=\"variable-capture\"><a href=\"#variable-capture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Variable Capture</h2>\n<p>Lambda의 body에서 인자로 넘어온 것 이외의 변수를 접근하는 것을 <strong>Variable Capture</strong>라고 합니다.</p>\n<p>Lambda는 인스턴스, 정적 변수와 final로 선언된 혹은 final처럼 사용되고 있는 <strong>지역 변수를 참조</strong>할 수 있습니다.</p>\n<p>지역변수를 사용할 때에는 해당 변수에게 값의 재할당이 일어나면 안됩니다.</p>\n<p>즉, 다음의 경우와 같이 새로운 scope를 통해서 <strong>로컬변수로 재정의</strong>하여 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week15</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableCapture</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// val - 1</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> anonymosClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// val - 2</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        anonymosClass<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만 이를 람다식처럼 재정의 할려고 하면 에러가 발생합니다. (같은 scope이므로.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableCapture</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lambdaExpression <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error. Variable 'val' is already defined in the scope</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        lambdaExpression<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>람다는 이를 새도윙(shadowing)하지 않습니다.</p>\n<ul>\n<li><strong>새도윙?</strong> 변수, 메소드, 클래스, 인터페이스의 이름을 같은 영역에서 동일하게 사용하는 것</li>\n</ul>\n<h3 id=\"finaleffective-final\"><a href=\"#finaleffective-final\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final/effective final</h3>\n<p>람다식에서는 scope를 공유하기 때문에 <code class=\"language-text\">final</code> 또는 <code class=\"language-text\">effective final</code> 만 사용가능합니다.</p>\n<p>람다식에서 사용되는 외부 지역 변수는 복사본이고 해당 stack에서만 생성되고, 해당 블럭이 끝나면 stack에서 접근되는 구조이기 때문에 이후에 참조할 수 없습니다.</p>\n<p>따라서 지역 변수를 관리하는 쓰레드와 람다식이 실행되는 쓰레드는 다를 수도 있기 때문에 어떤 데이터가 최신일지 모른다는 문제가 있습니다. 그렇기 때문에 이러한 값을 보장하기 위해서 <code class=\"language-text\">final</code>이나 <code class=\"language-text\">effective final</code>만 사용가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lambdaExpression <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// error: local variables referenced from a lambda expression must be final or effectively final</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  val<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n  lambdaExpression<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"메소드-생성자-레퍼런스\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드, 생성자 레퍼런스</h2>\n<h3 id=\"메소드-레퍼런스\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 레퍼런스</h3>\n<p>메소드 레퍼런스는 람다식을 더 간단하게 만드는 표현식입니다.</p>\n<p>전달하는 인수와 사용하는 메소드의 인수 형태가 같을시 메소드 레퍼런스를 통해서 간결하게 표현가능합니다.</p>\n<p>종류는 다음과 같습니다.</p>\n<h4 id=\"1-static-method-reference\"><a href=\"#1-static-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Static Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{타입}::(Static Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> refConsumer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"2-instance-method-reference\"><a href=\"#2-instance-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Instance Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{Object Reference}::(Instance Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> operator <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> refOperator <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"3-constructor-method-reference\"><a href=\"#3-constructor-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Constructor Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{타입}::(Static Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringOperator <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> refStringOperator <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://azderica.github.io/00-java-lambda/</a></li>\n<li><a href=\"https://giyeon95.github.io/whiteship/whiteship_study_week15/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://giyeon95.github.io/whiteship/whiteship_study_week15/</a></li>\n<li><a href=\"https://www.notion.so/758e363f9fb04872a604999f8af6a1ae\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/758e363f9fb04872a604999f8af6a1ae</a></li>\n<li><a href=\"https://soy.me/2014/04/05/name_reuse/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://soy.me/2014/04/05/name_reuse/</a></li>\n<li></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Generic","path":"/14-java-study/","date":"28. February 2021","timeToRead":8,"description":"Java Generic에 대해 정리합니다.","content":"<h1 id=\"java-generic\"><a href=\"#java-generic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Generic</h1>\n<p>백기선님의 자바 스터디 14주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>제네릭 사용법</li>\n<li>제네릭 주요 개념 (바운디드 타입, 와일드 카드)</li>\n<li>제네릭 메소드 만들기</li>\n<li>Erasure</li>\n</ul>\n<br/>\n<h2 id=\"자바-제네릭\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭</h2>\n<p>자바 제네릭스는 JDK 1.5에서 처음 도입되었습니다.</p>\n<p>자바의 제네릭은 다양한 타입의 객체를 다루는 메소드나 컬렉션 클래스에 <strong>컴파일 시의 타입 체크(compile-time type check)를 해주는 기능</strong>입니다.</p>\n<p>그래서 다음과 같은 <strong>장점</strong>이 있었습니다.</p>\n<ul>\n<li>\n<p>객체의 타입을 컴파일 시에 체크하기 때문에 <strong>객체의 타입 안정성을 높이고 형변환의 번거로움이 줄어듭니다.</strong></p>\n<ul>\n<li>타입의 안정성이 높다는 것은 의도하지 않은 타입의 객체가 저장되는 것을 막고, 저장된 객체를 꺼내올 때 원래의 타입과 다른 타입으로 잘못 형변환되어 발생할 수 있는 오류를 줄여줍니다.</li>\n</ul>\n</li>\n</ul>\n<p>따라서 <strong>제네릭의 장점</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p><strong>타입의 안정성을 제공합니다.</strong></p>\n<ul>\n<li>컴파일 타임에 타입 체크를 하기 때문에 런타임에서 ClassCastException과 같은 UncheckedException을 보장합니다.</li>\n</ul>\n</li>\n<li>타입체크와 형변환을 생략할 수 있으므로 <strong>코드가 간결</strong>해집니다.</li>\n</ul>\n<h3 id=\"제네릭-클래스-선언\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>제네릭 클래스 선언</h3>\n<p>다음과 같이 클래스가 있을 때,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>아래처럼 제네릭 클래스로 변경할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 <code class=\"language-text\">T</code>를 <strong>타입 변수(type variable)</strong> 라고 합니다.</p>\n<p>이를 사용하면 다음과 같이 사용가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New String data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// output : New String data</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>일반적으로 Type이라는 단어의 첫 스펠링을 따서 T라고 하며, T가 아닌 다른 것을 사용해도 됩니다.</p>\n<p>일반적으로 상황에 맞는 경우의 약자를 사용합니다. 다음과 같은 예제가 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">ArrayList&lt;E&gt;</code></p>\n<ul>\n<li>E 는 Element의 약자입니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Map&lt;K, V&gt;</code></p>\n<ul>\n<li>타입 변수가 여러개인 경우는 콤마로 구분해서 나열합니다.</li>\n<li>K는 Key, V는 Value를 의미합니다.</li>\n</ul>\n</li>\n</ul>\n<p>일반적으로 다음과 같은 타입 매개변수를 주로 사용합니다.</p>\n<ul>\n<li>E(Element), K(Key), N(Number), T(Type), V(Value)</li>\n</ul>\n<br/>\n<h2 id=\"자바-제네릭의-주요-개념\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭의 주요 개념</h2>\n<h3 id=\"자바-제네릭-용어\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%9A%A9%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭 용어</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li><code class=\"language-text\">Data&lt;T&gt;</code> : 제네릭 클래스</li>\n<li><code class=\"language-text\">T</code> : 타입 변수</li>\n<li><code class=\"language-text\">Data</code> : 원시 타입(raw type)</li>\n</ul>\n<h3 id=\"자바-제네릭의-제한\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%A0%9C%ED%95%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭의 제한</h3>\n<p>자바 제네릭은 인스턴스별로 다르게 동작하도록 만들었기 때문에 여러 기능을 제공합니다.</p>\n<p>다만 다음의 특징을 가지고 있습니다.</p>\n<ul>\n<li>\n<p>static 멤버에 타입 변수 T를 사용할 수 없습니다.</p>\n<ul>\n<li><code class=\"language-text\">static T staticItem</code> : 불가능</li>\n</ul>\n</li>\n<li>\n<p>제네릭 타입의 배열을 생성하는 것은 허용하지 않습니다.</p>\n<ul>\n<li><code class=\"language-text\">T[] itemArray</code> : 불가능</li>\n</ul>\n</li>\n<li>\n<p>참조 변수와 생성자 대입된 타입이 일치해야합니다.</p>\n<ul>\n<li><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new Box&lt;Grape&gt;()</code> : 불가능</li>\n<li><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new Box&lt;Apple&gt;()</code> : 가능</li>\n<li>\n<p><code class=\"language-text\">Box&lt;Apple&gt; appleBox = new FruitBox&lt;Apple&gt;()</code> : 가능</p>\n<ul>\n<li><code class=\"language-text\">FruitBox&lt;T&gt; extends Box</code> : 상속인 경우에 한해서 가능합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"바운디드-타입\"><a href=\"#%EB%B0%94%EC%9A%B4%EB%94%94%EB%93%9C-%ED%83%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>바운디드 타입</h3>\n<p>제네릭 타입에서 타입 인자로 사용할 수 있는 타입을 제한하는 경우가 있을 수 있습니다. 이때 <strong>바운디드 타입이 사용</strong>됩나다.</p>\n<p>바운디드 타입 파라미터를 사용하기 위해서는 <code class=\"language-text\">extends</code>를 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>인터페이스를 구현하는 경우에도 <code class=\"language-text\">implements</code>를 사용하지 않으며, <code class=\"language-text\">extends</code>를 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Eatable</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>자식이면서 인터페이스를 같이 구현하는 경우에는 다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Eatable</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"와일드-카드\"><a href=\"#%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>와일드 카드</h3>\n<p>와일드카드는 기호 <code class=\"language-text\">?</code>로 표현을 하며, 와일드 카드는 어떠한 타입도 될 수 있습니다.</p>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">&lt;? extends T&gt;</code> : 와일드 카드의 상한 제한, T와 그 자손들만 가능</li>\n<li><code class=\"language-text\">&lt;? super T&gt;</code> : 와일드 카드의 하한 제한, T와 그 조상들만 가능</li>\n<li><code class=\"language-text\">&lt;?&gt;</code> : 제한이 없으며 모든 타입이 가능합니다. <code class=\"language-text\">&lt;? extends Object&gt;</code>와 동일합니다.</li>\n</ul>\n<h4 id=\"-extends-t-와일드-카드의-상한-제한-예제\"><a href=\"#-extends-t-%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C%EC%9D%98-%EC%83%81%ED%95%9C-%EC%A0%9C%ED%95%9C-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">&lt;? extends T&gt;</code>, 와일드 카드의 상한 제한 예제</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Juicer</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">Juice</span> <span class=\"token function\">makeJuice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> box<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> fruit <span class=\"token operator\">:</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      temp <span class=\"token operator\">+=</span> fruit <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Juice</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"-super-t--와일드-카드의-하한-제한-예제\"><a href=\"#-super-t--%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C%EC%9D%98-%ED%95%98%ED%95%9C-%EC%A0%9C%ED%95%9C-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">&lt;? super T&gt;</code> : 와일드 카드의 하한 제한 예제.</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitComp</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> t1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Fruit</span> t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> t1<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> t2<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"제네릭-메서드\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>제네릭 메서드</h2>\n<p>메서드의 선언부에 제네릭 타입이 선언된 메서드를 제네릭 메서드라고 합니다.</p>\n<p>일반적으로 컬렉션 메소드 <code class=\"language-text\">Collections.sort()</code>와 같은 메소드가 대표적인 제네릭 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span></code></pre>\n<p>다만, 제네릭 메서드와 제네릭 클래스의 매개변수는 별개의 것을 의미합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FruitBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// T-1</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// T - 2</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// T-1과 T-2는 다릅니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"자바-제네릭-타입의-제거-erasure\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A0%9C%EA%B1%B0-erasure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 제네릭 타입의 제거 (Erasure)</h2>\n<p>컴파일러는 제네릭 타입을 이용해서 소스파일을 체크하고, 필요한 곳에 형변환을 넣어주고 제네릭 타입을 제거합니다.</p>\n<p>컴파일된 파일(*.class)에는 제네릭 타입이 없기 때문에 이를 처리해줄 필요가 있습니다. 따라서 이전의 소스코드와의 호환성을 위해서 만들어졌습니다.</p>\n<p>다음의 순으로 진행됩니다.</p>\n<h4 id=\"1-제네릭-타입의-경계를-제거합니다\"><a href=\"#1-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%98-%EA%B2%BD%EA%B3%84%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 제네릭 타입의 경계를 제거합니다.</h4>\n<ul>\n<li><code class=\"language-text\">&lt;T extends Fruit&gt;</code> : Fruit로 치환됩니다.</li>\n<li><code class=\"language-text\">&lt;T&gt;</code> : Object로 치환됩니다.</li>\n</ul>\n<p>AS-IS</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>TO-Be</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"2-제네릭-타입을-제거한-후에-타입이-일치하지-않는-경우-형변환을-추가합니다\"><a href=\"#2-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A0%9C%EA%B1%B0%ED%95%9C-%ED%9B%84%EC%97%90-%ED%83%80%EC%9E%85%EC%9D%B4-%EC%9D%BC%EC%B9%98%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%BD%EC%9A%B0-%ED%98%95%EB%B3%80%ED%99%98%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 제네릭 타입을 제거한 후에 타입이 일치하지 않는 경우, 형변환을 추가합니다.</h4>\n<ul>\n<li>일반적으로 Object 타입으로 변환이 일어나지만, 와일드 카드가 포함시 적절한 타입으로 형변환이 추가됩니다.</li>\n</ul>\n<p>AS-IS</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>TO-Be</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Fruit</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">)</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.notion.so/4735e9a564e64bceb26a1e5d1c261a3d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/4735e9a564e64bceb26a1e5d1c261a3d</a></li>\n<li><a href=\"https://rockintuna.tistory.com/102\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rockintuna.tistory.com/102</a></li>\n<li><a href=\"https://b-programmer.tistory.com/275\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/275</a></li>\n<li><a href=\"https://blog.naver.com/hsm622/222251602836\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/hsm622/222251602836</a></li>\n<li><a href=\"https://sujl95.tistory.com/73\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/73</a></li>\n<li><a href=\"https://redbean88.github.io/study/whiteship-study-14week/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://redbean88.github.io/study/whiteship-study-14week/</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java I/O","path":"/13-java-study/","date":"21. February 2021","timeToRead":9,"description":"Java I/O에 대해 정리합니다.","content":"<h1 id=\"java-io\"><a href=\"#java-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JAVA I/O</h1>\n<p>13주차 내용은 자바의 I/O에 관련된 내용입니다.</p>\n<ul>\n<li>스트림 (Stream) / 버퍼 (Buffer) / 채널 (Channel) 기반의 I/O</li>\n<li>InputStream 과 OutputStream</li>\n<li>Byte 와 Character 스트림</li>\n<li>표준 스트림 (System.in, System.out, System.err)</li>\n<li>파일 읽고 쓰기</li>\n</ul>\n<br/>\n<h2 id=\"스트림-버퍼-채널-기반-io\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EB%B2%84%ED%8D%BC-%EC%B1%84%EB%84%90-%EA%B8%B0%EB%B0%98-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림, 버퍼, 채널 기반 I/O</h2>\n<h3 id=\"자바-nionew-inputoutput\"><a href=\"#%EC%9E%90%EB%B0%94-nionew-inputoutput\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 NIO(New Input/Output)</h3>\n<p>자바 1.4버전부터 추가된 API로 Non-blocking 처리가 가능하며, 스트림이 아닌 채널을 사용합니다.</p>\n<p>기존의 I/O와는 다음의 차이가 있습니다.</p>\n<ul>\n<li>기존 IO 방식의 경우에서는 각각의 스트림에서 read()와 write()가 호출이 되면 데이터가 입력 되고, 데이터가 출력되기전까지, 스레드는 멈춤상태가 됩니다. 이 경우에는 작업이 끝날때까지 사용할 수 없으며, 그전에는 해당 IO 스레드는 사용할 수 없고 인터럽트도 할 수 없습니다. (스트림을 닫는 방법이 유일합니다.)</li>\n<li>NIO의 블로킹 상태에서는 Interrupt를 통해서 빠져 나올 수 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>--</th>\n<th>IO</th>\n<th>NIO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>입출력 방식</td>\n<td>스트림</td>\n<td>채널</td>\n</tr>\n<tr>\n<td>비동기 방식 지원</td>\n<td>X</td>\n<td>O</td>\n</tr>\n<tr>\n<td>Blocking/Non-Blocking</td>\n<td>Blocking Only</td>\n<td>Both</td>\n</tr>\n<tr>\n<td>사용 경우</td>\n<td>연결 클라이언트가 적고</td>\n<td>연결 클라이언트가 많고</td>\n</tr>\n<tr>\n<td></td>\n<td>I/O처리가 큰 경우(대용량)</td>\n<td>I/O처리가 작은 경우(저용량)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"스트림stream\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BCstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림(Stream)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108591789-ccf3d380-73ad-11eb-9cd6-625d393cf111.png\" alt=\"image\"></p>\n<ul>\n<li>FIFO(First In First Out)</li>\n<li>단방향이기 때문에 입력 스트림과 출력 스트림을 별도로 사용합니다.</li>\n<li>연속된 데이터의 흐름으로 입출력 진행시 다른 작업을 할 수 없는 블로킹(Blocking) 상태가 됩니다.</li>\n<li>입출력 대상을 변경하기 편하며 동일한 프로그램 구조를 유지할 수 있습니다.</li>\n</ul>\n<h3 id=\"버퍼buffer\"><a href=\"#%EB%B2%84%ED%8D%BCbuffer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>버퍼(Buffer)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108591844-21974e80-73ae-11eb-90af-b3353a464654.png\" alt=\"image\"></p>\n<ul>\n<li>byte, char, int 등의 기본 데이터 타입을 저장할 수 있는 저장소로서, 배열과 마찬가지로 제한된 크기(capacity)에 순서대로 데이터를 저장합니다.</li>\n<li>버퍼는 데이터를 저장하기 위한 것이며, 실제로 버퍼가 사용되는 것은 채널을 통해서데이터를 주고 받을 때 사용됩니다.</li>\n<li><strong>채널을 통해서 소켓, 파일 등에서 데이터를 전송할 때나 읽어올 때 버퍼를 사용하게 됨으로써 가비지량을 최소화 시키며 이는 가비지 콜렉션의 회수를 줄임으로써 서버의 전체 처리량을 증가시킵니다.</strong></li>\n</ul>\n<h3 id=\"채널channel-기반-io\"><a href=\"#%EC%B1%84%EB%84%90channel-%EA%B8%B0%EB%B0%98-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>채널(Channel) 기반 I/O</h3>\n<p>채널은 서버와 클라인트간의 통신 수단을 나타냅니다. 일종의 데이터가 다니는 통로라는 점에서 비슷하지만 <strong>양방향</strong>이기 때문에 읽기와 쓰기가 동시에 가능합니다.</p>\n<p>대표적으로 다음과 같이 있습니다.</p>\n<ul>\n<li>SocketChannel (소켓과 연결)</li>\n<li>FileChannel (파일 채널)</li>\n<li>Pipe.SinkChannel (파이프와 연결)</li>\n<li>Pipe.SourceChannel (파이프와 연결)</li>\n<li>ServerSocketChannel (서버소켓과 연결)</li>\n</ul>\n<br/>\n<h2 id=\"inputstream-outputstream\"><a href=\"#inputstream-outputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>InputStream, OutputStream</h2>\n<h3 id=\"inputstream\"><a href=\"#inputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>InputStream</h3>\n<ul>\n<li>바이트 기반의 <strong>입력 스트림의 최상위 추상 클래스</strong>입니다.</li>\n<li>모든 바이트 기반 입력 스트림은 해당 클래스 상속 받아서 만들어집니다.</li>\n<li>버퍼, 파일, 네트워크 단에서 입력되는 데이터를 읽어오는 기능을 수행합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read()</td>\n<td>입력 스트림으로부터 1바이트를 읽어서 바이트를 리턴</td>\n</tr>\n<tr>\n<td>read(byte[] b)</td>\n<td>입력 스트림으로부터 읽은 바이트들을 매개값으로 주어진 바이트 배열 b에 저장하고 실제로 읽은 바이트 수를 리턴</td>\n</tr>\n<tr>\n<td>read(byte[] b, int off, int len)</td>\n<td>입력 스트림으로부터 len 개의 바이트만큼 읽고 매개값으로 주어진 바이트 배열 b[off]부터 len 개까지 저장</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>사용한 시스템 자원을 반납하고 입력 스트림 닫기</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputstream\"><a href=\"#outputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OutputStream</h3>\n<ul>\n<li>바이트 기반의 <strong>출력 스트림의 최상위 추상 클래스</strong>입니다.</li>\n<li>모든 바이트 기반 출력 스트림은 해당 클래스를 상속 받아서 만들어집니다.</li>\n<li>버퍼, 파일, 네트워크 단으로 데이터를 내보내는 기능을 수행합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>write(int b)</td>\n<td>출력 스트림으로부터 1바이트를 보냅니다.</td>\n</tr>\n<tr>\n<td>write(byte[] b</td>\n<td>출력 스트림으로부터 주어진 바이트 배열 b의 모든 바이트를 보낸다</td>\n</tr>\n<tr>\n<td>write(byte[] b, int off, int len)</td>\n<td>출력 스트림으로 주어진 바이트 배열 b[off]부터 len 개까지의 바이트를 보내야한다</td>\n</tr>\n<tr>\n<td>flush()</td>\n<td>버퍼에 잔류하는 모든 바이트를 출력한다.</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>사용한 시스템 자원을 반납하고 입력 스트림 닫기</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"byte와-character-스트림\"><a href=\"#byte%EC%99%80-character-%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Byte와 Character 스트림</h2>\n<p>스트림의 객체도는 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600189-14438980-73d9-11eb-82cb-75b83bb27abf.png\" alt=\"image\"></p>\n<h3 id=\"byte-stream\"><a href=\"#byte-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Byte Stream</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600070-325cba00-73d8-11eb-8538-8f81084f99c7.png\" alt=\"image\"></p>\n<ul>\n<li>binary 데이터를 입출력하는 스트림</li>\n<li>데이터는 <strong>1바이트</strong> 단위로 처리합니다.</li>\n<li>이미지, 동영상 등을 송수신할 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"character-stream\"><a href=\"#character-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Character Stream</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600068-2d980600-73d8-11eb-9e03-79e0abf2700f.png\" alt=\"image\"></p>\n<ul>\n<li>text 데이터를 입출력하는 스트림</li>\n<li>데이터는 <strong>2바이트</strong> 단위로 처리합니다.</li>\n<li>일반적인 테스트 및 JSON, HTML 등을 송수신할 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"보조-stream\"><a href=\"#%EB%B3%B4%EC%A1%B0-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>보조 Stream</h3>\n<ul>\n<li>FilterInputStream과 FilterOutputStream을 상속받는 클래스들로 기본 스트림과 결합하여 특정 상황에서 편하게 사용할 수 있습니다.</li>\n<li>\n<p>BufferedInputStream/BufferedOutputStream</p>\n<ul>\n<li>버퍼를 사용하여 입출력 효율과 편의를 위해 사용할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>BufferedReader/BufferedWriter</p>\n<ul>\n<li>라인단위의 입출력이 편리합니다.</li>\n</ul>\n</li>\n<li>\n<p>InputStreamReader/OutputStreamReader</p>\n<ul>\n<li>바이트 스트림을 문자 스트림처러 쓸 수 있도록하며 문자 인코딩 변환을 지원합니다.</li>\n</ul>\n</li>\n<li>\n<p>DataInputStream/DataOutputStream</p>\n<ul>\n<li>자바 원시 자료형 데이터 처리에 적합합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"표준-스트림-systemin-systemout-systemerr\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%8A%A4%ED%8A%B8%EB%A6%BC-systemin-systemout-systemerr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>표준 스트림 (System.in, System.out, System.err)</h2>\n<p>표준 스트림은 콘솔(console,도스창)을 통한 데이터 입력과 콘솔로의 데이터 출력을 의미합니다. 자바에서는 표준 스트림을 3가지 제공을 합니다.(System.in, System.out, System.err)</p>\n<p>해당 표준 스트림은 <code class=\"language-text\">java.lang</code> 패키지의 System 클래스 내부에 선언되어 있습니다. 또한 이 표준 스트림들은 자바 어플리케이션의 실행과 동시에 사용할 수 있도록 자동적으로 생성이 됩니다. 그렇기 때문에 개발자가 별도로 스트림을 생성하는 코드를 작성하지 않고도 사용이 가능합니다.</p>\n<p>이를 확인해보면 다음과 같이 구성되어 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">System</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">InputStream</span> in<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PrintStream</span> out<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PrintStream</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같은 의미를 가집니다,</p>\n<ul>\n<li><code class=\"language-text\">System.out</code> 은 콘솔 화면에 문자열을 출력하기 위한 용도로 사용되는 출력 스트림입니다.</li>\n<li><code class=\"language-text\">System.in</code> 은 키보드의 입력을 받아들이기 위해 사용되는 입력 스트림입니다.</li>\n<li>\n<p><code class=\"language-text\">System.out</code> 와 <code class=\"language-text\">System.err</code></p>\n<ul>\n<li>둘다 출력 스트림입니다.</li>\n<li><code class=\"language-text\">System.err</code> 는 좀 더 정확하고 빠르게 출력해야하기 때문에 버퍼링을 지원하지 않습니다. (버퍼링 도중 프로그램이 멈추면 버퍼링 내용이 출력이 되지않기 때문에.)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"파일-읽고-쓰기\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B3%A0-%EC%93%B0%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>파일 읽고 쓰기</h2>\n<p>텍스트 파일의 경우에는 문자 스트림 클래스를 사용하고, 바이너리 파일의 경우에는 바이트 스트림을 기본적으로 사용합니다.</p>\n<ul>\n<li>입출력 효율을 위해 Buffered 계열의 보조 스트림을 사용하는 것이 좋습니다.</li>\n</ul>\n<p><strong>텍스트 파일</strong> 의 경우</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  br<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>이진 파일</strong> 의 경우</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedInputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedOutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">100000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://bingbingpa.github.io/java/whiteship-live-study-week13/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bingbingpa.github.io/java/whiteship-live-study-week13/</a></li>\n<li>\b<a href=\"https://github.com/LeeWoooo/Java_LiveStudy/tree/master/week13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/LeeWoooo/Java_LiveStudy/tree/master/week13</a></li>\n<li><a href=\"https://github.com/JJongSue/javastudy/tree/master/src/main/java/week13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/JJongSue/javastudy/tree/master/src/main/java/week13</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 자바 POJO란","path":"/00-java-pojo/","date":"15. February 2021","timeToRead":10,"description":"자바 POJO개념에 대해 정리합니다.","content":"<h1 id=\"pojoplain-object-java-object\"><a href=\"#pojoplain-object-java-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO(Plain Object Java Object)</h1>\n<p>오늘은 자바나 스프링 프레임워크에서 주로 사용하는 POJO에 대한 개념을 정리합니다.</p>\n<br/>\n<h2 id=\"pojo-란\"><a href=\"#pojo-%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO 란?</h2>\n<ul>\n<li>POJO란 <strong>Plain Old Java Object</strong>의 약자로서, 오래된 방식의 간단한 자바 오브젝트라는 말로 해석할 수 있습니다. 이를 다른 말로 표현하자면, Java EE 등의 무거운 프레임워크 들을 사용하게 되면서 해당 프레임워크에 종속된 \"무거운\" 객체를 사용함에 대해 이를 반발해서 사용되게 된 용어입니다.</li>\n<li>2009년에 마틴 파울러, 레베카 파슨스, 조시 맥켄지에 의해 만들어졌습니다. 아래는 POJO에 대한 기원입니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">&quot;We wondered why people were so against using regular objects in their systems and concluded that it was because simple objects lacked a fancy name. So we gave them one, and it&#39;s caught on very nicely.&quot;\n\n우리는 왜 사람들이 자기들 시스템에 일반적인 오브젝트를 사용하는 것에 반대하는지 궁금했고, 그 이유는 단순한 오브젝트에 멋진 이름이 없기 때문이라고 결론을 지었습니다. 그래서 우리는 멋진 이름을 지었고, 매우 인기를 얻었습니다.</code></pre>\n<ul>\n<li>\"POJO\"라는 용어는 주요 Java 오브젝트 모델, 컨벤션 또는 <strong>프레임워크를 따르지 않는 Java 오브젝트</strong>를 의미합니다.</li>\n<li>예를 들자면, 다음과 같습니다. ORM 기술을 적용하기 위해 ORM 프레임 워크인 Hibernate을 사용하기 위해 이를 직접 의존하는 경우 POJO가 아니게됩니다. 이를 사용하기 위해서는 <strong>JPA라는 특정 표준 인터페이스를 통해서 사용해야합니다. (스프링의 PSA로 이야기할 수 있습니다.)</strong></li>\n</ul>\n<br/>\n<h2 id=\"pojo의-정의\"><a href=\"#pojo%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO의 정의</h2>\n<p>앞서 설명한 POJO를 좀 더 자세하게 설명하면 다음과 같이 설명할 수 있습니다.</p>\n<p>이상적인 POJO는 Java 언어 규약에 의해 강제된 것 이외의 제한에 구속되지 않는 Java 오브젝트입니다.</p>\n<p>따라서 POJO는 다음과 같은 것을 하면 안됩니다.</p>\n<ul>\n<li>미리 지정된 클래스를 extends하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span>HttpServlet</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>미리 정의된 인터페이스를 implement하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>ejb<span class=\"token punctuation\">.</span></span>EntityBean</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>미리 정의된 Annotation을 포함하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@javax.persistence.Entity</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 기술적인 어려움과 다른 이유로 인해서 POJO-compliant은 기술된 많은 소프트웨어 제품이나 프레임워크들은 실제로 미리 정의된 Annotation을 제대로 동작하는 기능을 구현하기 위해 필요합니다.</p>\n<p>이와 같은 것들의 특징은 Annotation을 추가하기 전에는 POJO이고 Annotation이 제거된다면 POJO 상태로 되돌아간다면, 이를 POJO로 간주할 수 있습니다.</p>\n<br/>\n<h2 id=\"pojo에-대한-다양한-이야기\"><a href=\"#pojo%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO에 대한 다양한 이야기.</h2>\n<h3 id=\"javabeans\"><a href=\"#javabeans\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaBeans</h3>\n<ul>\n<li>JavaBean은 특별한 POJO의 변형으로 이야기 할 수 있습니다. JavaBean은 <code class=\"language-text\">Serializable</code> 인터페이스를 상속받고, 인수가 없는 생성자를 가지며 <code class=\"language-text\">getter/setter</code> 메소드를 사용하여서 속성에 액세스할 수 있습니다. 이러한 규칙을 통해서 JavaBeans에 대해 간단한 참조를 사용할 수 있습니다.</li>\n<li>이러한 방법을 통해서 프레임워크에서는 Bean의 정확한 유형을 알 필요없이 사용할 수 있습니다. 다만 JavaBeans가 완전히 구현되는 경우에는 <code class=\"language-text\">Serializable</code>를 구현해야기 때문에 POJO 모델을 약간 깨트릴 수도 있습니다. 하지만 이는 큰 부담이 되지는 않습니다.</li>\n</ul>\n<p>POJO를 구현한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> someProperty<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSomeProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> someProperty<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSomeProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> someProperty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someProperty <span class=\"token operator\">=</span> someProperty<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"ejbenterprise-javabeans\"><a href=\"#ejbenterprise-javabeans\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EJB(Enterprise JavaBeans)</h3>\n<p>기업의 IT 시스템의 요구사항이 늘어나고 기초적인 JDK로는 한계가 있어서 EJB 기술이 등장하였습니다. EJB의 경우에 아래의 문제를을 해결하기 위해 등장했습니다.</p>\n<ul>\n<li>기업의 업무 복잡도가 증가함에 따라 비지니스 로직이 복잡해졌습니다.</li>\n<li>사용자의 처리의 요구를 빠르고 안정이고 확장 가능한 형태로 유지하기 위해 필요한 로우레벨의 기술적인 처리요구가 필요합니다. (트랜잭션 처리, 상태 관리, 멀티스레딩, 리소스 풀링, 보안 등)</li>\n</ul>\n<p>다만 <strong>EJB의 경우에는 현실적이지 않고 과도한 엔지니어링으로 실패</strong>했습니다. EJB는 필요한 것이 많고, 복잡하며 컨테이너 밖에서는 정상적으로 동작하지 않았습니다.</p>\n<p>특히, <strong>EJB 스펙을 따르는 비지니스 오브젝트들은 객체지향적인 특징과 장점을 포기해야합니다.</strong> EJB는 상속과 다형성 등을 사용할 수 없고, 간단한 기능 하나를 위해서 많은 인터페이스와 EJB 의존적인 상속을 해야했습니다.</p>\n<p>EJB는 <strong>형편없는 생산성과 느린 성능, 불필요한 기술적인 복잡도, 과도한 스펙 등의 문제</strong>로 인해 POJO 방식으로 돌아가게 됩니다.</p>\n<br/>\n<h2 id=\"pojo-프레임워크\"><a href=\"#pojo-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO 프레임워크</h2>\n<ul>\n<li>POJO를 사용하는 장점과 EJB의 문제를 해결하고, 엔터프라이즈 서비스와 기술을 사용할 수 있게 하는 프레임워크입니다. 많은 POJO 프레임워크가 있지만 그중에 손에 꼽히는 것은 Hibernate와 Spring입니다.</li>\n<li>Hibernate는 Persistence 기술과 오브젝트-관계형 DB 매핑을 순수한 POJO를 이용해서 사용할 수 있게 만드는 POJO 기반의 <strong>퍼스스턴스 프레임워크(Persistence Framework)</strong> 입니다.</li>\n<li>스프링은 앤터프라이즈 서비스들을 POJO 기반으로 만든 비지니스 오브젝트로 사용할 수 있게 합니다.</li>\n<li>대표적인 기술로 선언적인 트랜잭션과 보안이 있습니다. 또한 오브젝트 컨테이너를 제공해서 인스턴스들의 라이프사이클을 관리하고, OOP를 더 OOP답게 쓸수 있게 해주는 AOP 기술을 적용하여 POJO 개발을 더 쉽게 만들어줍니다.</li>\n</ul>\n<blockquote>\n<p>Persistence Framework</p>\n</blockquote>\n<ul>\n<li>데이터의 저장, 조회, 변경, 삭제를 다루는 클래스 및 설정 파일들의 집합</li>\n<li>퍼시스턴스 프레임워크를 사용하면 JDBC 프로그래밍의 복잡함이나 번거로움 없이 간단한 작업만으로 데이터베이스와 연동되는 시스템을 빠르게 개발할 수 있으며 안정적인 구동도 보장합니다.</li>\n</ul>\n<br/>\n<h2 id=\"pojo를-지향해야하는-이유\"><a href=\"#pojo%EB%A5%BC-%EC%A7%80%ED%96%A5%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POJO를 지향해야하는 이유</h2>\n<p>POJO 프로그래밍의 목적은 <strong>자바의 객체지향적인 특징을 살려 비지니스 로직에 충실한 개발이 가능하도록 하는 것입니다.</strong></p>\n<p>또한 복잡한 요구조건을 가진 엔터프라이즈 개발의 필요조건을 충족시킬 수 있도록 POJO 기반의 프레임워크를 적절히 이용하는 것이 요구됩니다.</p>\n<p>단순히 POJO 프레임워크를 사용하는 것이 아니라 그에 대한 여러 기준을 준수해야합니다.</p>\n<ul>\n<li>\n<p>객체지향적인 설계원칙에 충실하도록 개발</p>\n<ul>\n<li>POJO의 자바 오브젝트는 객체지향언어로서 자바 오브젝트의 특징을 가져야합니다.</li>\n<li>반복적인 템플릿 구조와 테스트하기 힘든 구조, 확장이나 재활용이 어려움이 있으면 안됩니다.</li>\n</ul>\n</li>\n<li>\n<p>테스트 코드를 잘 작성했는지</p>\n<ul>\n<li><strong>수정-빌드-배포-테스트</strong>의 사이클을 유지하는 것은 EJB와 같은 문제를 가지고 있습니다.</li>\n<li>잘 만들어진 POJO는 자동화된 테스트 코드 작성이 편리합니다,</li>\n<li>반복적으로 테스트를 실행할 수 있으므로 코드 검증과 품질 향상에 유리합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rich-domain-model\"><a href=\"#rich-domain-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rich Domain Model</h3>\n<ul>\n<li>POJO의 자바 오브젝트가 가진 기본적인 특징은 하나의 오브젝트 안에 상태(State)와 행위(Behavior)을 모두 가지고 있습니다. 즉, <strong>인스턴스 변수</strong>와 <strong>로직을 가진 메소드</strong>가 있습니다.</li>\n<li>객체지향 원리에 충실하게 도메인 모델을 만드는 것을 풍성한 도메인 모델(Rich Domain Model)이라고 이야기합니다.</li>\n</ul>\n<h3 id=\"올바른-pojo-프로그래밍\"><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-pojo-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>올바른 POJO 프로그래밍</h3>\n<p>앞서 이야기했듯이 POJO를 잘 사용하면 최소한의 코드와 좋은 코드를 만들 수 있습니다. 특히 가장 중요한 내용은 반드시 <strong>자동화된 테스트 코드를 개발하는 것입니다. 이를 통해 만들어진 테스트 코드는 지속적인 변화에 유현하게 대응할 수 있습니다.</strong></p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Plain_old_Java_object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Plain_old_Java_object</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Jakarta_Enterprise_Beans\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Jakarta_Enterprise_Beans</a></li>\n<li><a href=\"http://bywoong.com/post/832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://bywoong.com/post/832</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%8B%9C%EC%8A%A4%ED%84%B4%EC%8A%A4_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%8B%9C%EC%8A%A4%ED%84%B4%EC%8A%A4_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC</a></li>\n<li><a href=\"https://velog.io/@dion/what-is-POJO\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@dion/what-is-POJO</a></li>\n<li><a href=\"https://siyoon210.tistory.com/120\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://siyoon210.tistory.com/120</a></li>\n<li><a href=\"https://happyer16.tistory.com/entry/POJOplain-old-java-object%EB%9E%80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://happyer16.tistory.com/entry/POJOplain-old-java-object%EB%9E%80</a></li>\n<li><a href=\"https://jobc.tistory.com/121\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jobc.tistory.com/121</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Annotation","path":"/12-java-study/","date":"5. February 2021","timeToRead":6,"description":"Java Annotation에 대해 정리합니다.","content":"<h1 id=\"java-annotation\"><a href=\"#java-annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Annotation</h1>\n<p>12주차 내용은 자바의 Annotation 에 대한 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>애노테이션 정의하는 방법</li>\n<li><code class=\"language-text\">@retention</code></li>\n<li><code class=\"language-text\">@target</code></li>\n<li><code class=\"language-text\">@documented</code></li>\n<li>애노테이션 프로세서</li>\n</ul>\n<br/>\n<h2 id=\"어노테이션annotation-이란\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 이란</h2>\n<p>일반적으로 Annotation 을 해석하면 주석이라는 의미를 가집니다.</p>\n<p>다만, 자바에서의 Annotation은 <code class=\"language-text\">//</code> 나 <code class=\"language-text\">/* */</code> 등의 주석과는 차이가 있습니다.</p>\n<p>자바의 어노테이션은 Java 5부터 등장하였으며 어노테이션이 붙은 코드는 어노테이션에 구현된 정보에 따라 연결되는 방향이 결정됩니다. 즉, <strong>비지니스 로직에는 영향이 없지만 해당 타켓의 연결방법이나 소스코드의 구조를 변경할 수 있습니다.</strong></p>\n<p>이를 좀 더 간단하게 설명하자면, 일종의 라벨의 개념으로 <strong>역할은 주석과 비슷하지만 코드를 작성할 수 있습니다.</strong>. 이러한 목적은 <strong>소스 코드에 메타데이터를 표현하는 것</strong>입니다.</p>\n<br/>\n<h2 id=\"어노테이션annotation-정의-방법\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EC%A0%95%EC%9D%98-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 정의 방법</h2>\n<p>어노테이션은 다음과 같은 구조를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AnnotationEx</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// content</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Annotation은 <code class=\"language-text\">java.lang.annotation.Annotation</code> 을 상속받습니다.</p>\n<p>좀 더 자세하게 어노테이션을 선언한다면 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Inherited</span>  <span class=\"token comment\">// 자식이 상속 받을 수 있음</span>\n<span class=\"token annotation punctuation\">@Documented</span> <span class=\"token comment\">// 문서에도 어노테이션 정보가 표현됨</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 컴파일 이후 JVM에 의해 접근 가능</span>\n<span class=\"token comment\">//@Retention(RetentionPolicy.CLASS) // 컴파일러가 클래스를 참조할 때 까지 유효</span>\n<span class=\"token comment\">//@Retention(RetentionPolicy.SOURCE) // 어노테이션 정보는 컴파일 이후 사라짐</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>PACKAGE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 패키지 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>CONSTRUCTOR<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 생성자 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 멤버 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 메소드 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 어노테이션 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>LOCAL_VARIABLE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 지역 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 매개 변수 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE_PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 매개 변수 타입 선언시</span>\n        <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE_USE <span class=\"token comment\">// 타입 사용시</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">CustomAnnotation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* enum 타입을 선언 */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Quality</span> <span class=\"token punctuation\">{</span>BAD<span class=\"token punctuation\">,</span> GOOD<span class=\"token punctuation\">,</span> VERYGOOD<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* String은 기본 자료형은 아니지만 사용 가능합니다. */</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 배열 형태로도 사용할 수 있습니다. */</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* enum 형태를 사용하는 방법입니다. */</span>\n    <span class=\"token class-name\">CustomAnnotation<span class=\"token punctuation\">.</span>Quality</span> <span class=\"token function\">quality</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">CustomAnnotation<span class=\"token punctuation\">.</span>Quality</span><span class=\"token punctuation\">.</span>GOOD<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://jdm.kr/blog/216\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처</a></p>\n<br/>\n<h2 id=\"어노테이션annotation-규칙\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EA%B7%9C%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 규칙</h2>\n<p>어노테이션은 다음의 규칙이 적용됩니다.</p>\n<ul>\n<li>요소의 타입은 기본, String, enum, Annotation, Class만 허용됩니다.</li>\n<li>매개변수는 선언할 수 없습니다.</li>\n<li>예외를 선언할 수는 없습니다.</li>\n<li>요소를 타입 매개변수로 정의할 수 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"표준-어노테이션annotation\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>표준 어노테이션(Annotation)</h2>\n<p>자바에서 제공되는 어노테이션은 크게 2가지로 구성되며, 하나는 자바 코드를 사용할 때 사용되는 어노테이션이고 다른 하나는 어노테이션의 정의를 위해 필요한 것입니다.</p>\n<br/>\n<blockquote>\n<p>기본적으로 제공하는 어노테이션</p>\n</blockquote>\n<h3 id=\"override\"><a href=\"#override\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Override</code></h3>\n<ul>\n<li>메소드가 오버라이드 됐는지 검증합니다</li>\n<li>부모 클래스나 구현할 인터페이스에서 해당 메소드를 찾지못하면 컴파일 오류가 발생합니다.</li>\n</ul>\n<h3 id=\"deprecated\"><a href=\"#deprecated\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Deprecated</code></h3>\n<ul>\n<li>메소드를 사용하지 않도록 유도합니다.</li>\n<li>사용시 컴파일 경고를 일으킵니다.</li>\n</ul>\n<h3 id=\"suppresswarnings\"><a href=\"#suppresswarnings\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@SuppressWarnings</code></h3>\n<ul>\n<li>컴파일 경고를 무시하도록 합니다.</li>\n</ul>\n<h3 id=\"safevarargs\"><a href=\"#safevarargs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@SafeVarargs</code></h3>\n<ul>\n<li>제네릭 같은 가변인자 매개변수를 사용시 경고를 무시합니다.</li>\n<li>자바 7이상에서 적용됩니다.</li>\n</ul>\n<h3 id=\"functionalinterface\"><a href=\"#functionalinterface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@FunctionalInterface</code></h3>\n<ul>\n<li>람다 함수등을 위한 인터페이스를 지정합니다.</li>\n<li>메소드가 없거나 두개 이상이 되면 컴파일 오류가 납니다.</li>\n<li>자바 8이상에서 적용됩니다.</li>\n</ul>\n<br/>\n<blockquote>\n<p>Meta Annotations(메타 어노테이션)</p>\n</blockquote>\n<h3 id=\"retention\"><a href=\"#retention\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Retention</code></h3>\n<ul>\n<li>어노테이션의 범위입니다.</li>\n<li>어떤 시점까지 어노테이션의 영향이 미치는지를 결정합니다.</li>\n</ul>\n<h3 id=\"documented\"><a href=\"#documented\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Documented</code></h3>\n<ul>\n<li>문서에도 어노테이션의 정보가 표현됩니다.</li>\n</ul>\n<h3 id=\"target\"><a href=\"#target\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Target</code></h3>\n<ul>\n<li>어노테이션이 적용할 위치를 결정합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>요소 타입</th>\n<th>대상</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONSTRUCTOR</td>\n<td>생성자 선언시</td>\n</tr>\n<tr>\n<td>FIELD</td>\n<td>필드 값 선언시</td>\n</tr>\n<tr>\n<td>LOCAL_VARIABLE</td>\n<td>지역 변수 선언시</td>\n</tr>\n<tr>\n<td>METHOD</td>\n<td>메소드 선언시</td>\n</tr>\n<tr>\n<td>PACKAGE</td>\n<td>패키지 선언시</td>\n</tr>\n<tr>\n<td>PARAMETER</td>\n<td>매개 변수 선언시</td>\n</tr>\n<tr>\n<td>TYPE</td>\n<td>클래스, 인터페이스, enum 등의 선언시</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"inherited\"><a href=\"#inherited\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Inherited</code></h3>\n<ul>\n<li>자식 클래스가 어노테이션을 상속받을 수 있습니다.</li>\n</ul>\n<h3 id=\"repeatable\"><a href=\"#repeatable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Repeatable</code></h3>\n<ul>\n<li>반복적으로 어노테이션을 선언할 수 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>요소 타입</th>\n<th>대상</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SOURCE</td>\n<td>어노테이션 정보는 컴파일 이후 사라짐</td>\n</tr>\n<tr>\n<td>CLASS</td>\n<td>컴파일러가 클래스를 참조할 때 까지 유효</td>\n</tr>\n<tr>\n<td>RUNTIME</td>\n<td>컴파일 이후 JVM에 의해 접근 가능</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"어노테이션annotation-프로세서\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>어노테이션(Annotation) 프로세서</h2>\n<p>자바 컴파일러의 컴파일 단계에서 유저가 정의한 어노테이션의 소스코드를 분석하고 처리하기 위해 사용되는 훅입니다. 컴파일 에러나 컴파일 경고를 만들기도 하고 소스코드와 바이트 코드를 내보내기도 합니다.</p>\n<p>대표적인 예제로 <strong>롬복(Lombok)</strong> 라이브러리가 있습니다. 이 롬복 라이브러리를 사용하면 <code class=\"language-text\">@Getter</code>, <code class=\"language-text\">@Setter</code> 등을 사용하면 get이나 set, toString() 등을 선언할 필요없이 컴파일 시에 미리 생성되어 편리하게 사용할 수 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.nextree.co.kr/p5864/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.nextree.co.kr/p5864/</a></li>\n<li><a href=\"https://jdm.kr/blog/216\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/216</a></li>\n<li><a href=\"https://sujl95.tistory.com/67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/67</a></li>\n<li><a href=\"https://gowoonsori.site/java/annotation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gowoonsori.site/java/annotation/</a></li>\n<li><a href=\"https://b-programmer.tistory.com/264\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/264</a></li>\n<li><a href=\"https://sujl95.tistory.com/67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/67</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Enum","path":"/11-java-study/","date":"1. February 2021","timeToRead":3,"description":"Java Enum에 대해 정리합니다.","content":"<h1 id=\"java-enum\"><a href=\"#java-enum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Enum</h1>\n<p>11주차 내용은 자바의 Enum에 관련된 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>enum 정의하는 방법</li>\n<li>enum이 제공하는 메소드 (values()와 valueOf())</li>\n<li>java.lang.Enum</li>\n<li>EnumSet</li>\n</ul>\n<h2 id=\"enum-정의\"><a href=\"#enum-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 정의</h2>\n<p><strong>enum</strong>은 열겨형이라 불리며, 관련된 상수를 편리하게 선언하기 위해 상수를 여러개 정의할 때 사용됩니다.</p>\n<p>간단하게 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Language</span> <span class=\"token punctuation\">{</span>\n    JAVASCRIPT<span class=\"token punctuation\">,</span> JAVA<span class=\"token punctuation\">,</span> PYTHON<span class=\"token punctuation\">,</span> TYPESCRIPT\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용할려면 다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printEnumOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>JAVASCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>JAVA<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>PYTHON<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>TYPESCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>output</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106461852-ae9a6680-64d8-11eb-9431-d97516e46b24.png\" alt=\"output-1\"></p>\n<p>다음과 같기 때문에 순서를 조심히 해야합니다.</p>\n<h3 id=\"상수-데이터-추가\"><a href=\"#%EC%83%81%EC%88%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상수 데이터 추가</h3>\n<p>다음처럼 상수 데이터를 넣어줄 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ItCompany</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">GOOGLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">APPLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">NAVER</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">KAKAO</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ItCompany</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"enum-값-사용\"><a href=\"#enum-%EA%B0%92-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 값 사용</h2>\n<p>Enum에서 값을 꺼내는 방법은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">Language.JAVASCRIPT</code></li>\n<li><code class=\"language-text\">Language.valueOf(&quot;JAVA&quot;)</code></li>\n<li><code class=\"language-text\">Enum.valueOf(Language.class, &quot;PYTHON&quot;)</code></li>\n<li><code class=\"language-text\">Language.TYPESCRIPT.name()</code></li>\n</ul>\n<p>해당 코드의 결과는 다음과 같이 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106462114-fde09700-64d8-11eb-80bf-fdd498b1c92f.png\" alt=\"output-2\"></p>\n<br/>\n<h2 id=\"enum-메소드\"><a href=\"#enum-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 메소드</h2>\n<p>enum에서 제공되는 메소드는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">ordinal()</code> : enum의 순서</li>\n<li><code class=\"language-text\">name()</code> : 각 요소들의 이름</li>\n<li><code class=\"language-text\">valeOf()</code> : 문자열로 enum 요소의 이름을 찾아서 이름을 리턴</li>\n<li>\n<p><code class=\"language-text\">values()</code> : 모든 enum의 요소들을 배열로 만들어줍니다.</p>\n<ul>\n<li><code class=\"language-text\">Language[] values = Language.values();</code></li>\n<li>output : JAVASCRIPT, JAVA, PYTHON, TYPESCRIPT</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compareTo()</code> : 비교를 할 수 있습니다.</p>\n<ul>\n<li>A.compareTo(B) : 같으면 0, A > B인 경우 1, A &#x3C; B 인 경우는 -1 입니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"javalangenum\"><a href=\"#javalangenum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>java.lang.Enum</h2>\n<p>Enum클래스를 보면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// method</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 해당 <code class=\"language-text\">java.lang.enum</code>은 모든 열겨형의 조상으로서, 여러 메소드 등을 사용할 수 있습니다.</p>\n<p>그 중에서 여러 눈에 뛰는 메소드로는 아래와 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Class&lt;E&gt; getDeclaringClass()</code></td>\n<td>열거형의 Class 객체 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">String name()</code></td>\n<td>열거형 상수의 이름을 문자열로 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">int ordinal()</code></td>\n<td>열거형 상수가 정의된 순서 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">T valueOf(Class&lt;T&gt; enumType, String name)</code></td>\n<td>지정된 열거형에서 name과 일치하는 열거형 상수 반환</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"enum-멤버-추가\"><a href=\"#enum-%EB%A9%A4%EB%B2%84-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 멤버 추가</h2>\n<p>열거형을 구분할 때나 확인하는 경우에는 ordinal() 보다는 멤버를 추가하는 방식이 일반적으로는 좋습니다. 특히 불연속적인 경우가 필요할 경우에는 다음과 같이 사용하는 방식이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"></code></pre>\n<br/>\n<h2 id=\"enumset\"><a href=\"#enumset\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EnumSet</h2>\n<p>Enum을 사용하여서 Set 자료구조를 만들 수 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">allOf</code> : enum에서 정의된 정보를 모두 추가할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">EnumSet.allOf(Language.class)</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">noneOf</code> : 아무것도 추가하지 않습니다.</li>\n<li>\n<p><code class=\"language-text\">of</code> : 요소를 넣을 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">EnumSet&lt;Language&gt; languageSet = EnumSet.of(Language.JAVA);</code></li>\n</ul>\n</li>\n</ul>\n<p>그 외에도 다양한 메소드가 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://b-programmer.tistory.com/262\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/262</a></li>\n<li><a href=\"https://wisdom-and-record.tistory.com/52\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wisdom-and-record.tistory.com/52</a></li>\n<li><a href=\"https://www.notion.so/Enum-6ffa87530c424d8ab7a1b585bfb26fa2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/Enum-6ffa87530c424d8ab7a1b585bfb26fa2</a></li>\n<li><a href=\"https://parkadd.tistory.com/50\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://parkadd.tistory.com/50</a></li>\n</ul>\n"}},{"node":{"title":"[Akka] Akka이란?","path":"/00-akka-starter/","date":"24. January 2021","timeToRead":6,"description":"Akka에 대한 기본 내용을 정리합니다.","content":"<h1 id=\"akka\"><a href=\"#akka\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Akka</h1>\n<p>회사에서는 주로 사용하는 언어는 C#과 Java인데, 분산처리 환경에 대한 이야기를 보다보면 Akka에 대해 들어보게 됩니다. 그러나 저에게는 너무 생소한 개념이라 한번 정리의 필요성을 느꼈습니다.</p>\n<h2 id=\"akka란\"><a href=\"#akka%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Akka란?</h2>\n<ul>\n<li><strong>JVM 상의 동시성과 분산 어플리케이션을 단순화 하는 오픈 소스 툴킷</strong>입니다.</li>\n<li>동시성을 위해 여러 프로그래밍 모델을 지원하며, Erlang으로부터 영향을 받아서 actor기반의 동시성이 두드러집니다.</li>\n<li>\n<p>Akka는 Java환경 및 .net Framework에서 이용가능하며, Actor 모델은 이제 대부분으 개발플랫폼에서 툴킷형태로 사용가능합니다.</p>\n<ul>\n<li><a href=\"https://doc.akka.io/docs/akka/2.4/scala.html#scala-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Akka Scala Document</a></li>\n<li><a href=\"https://doc.akka.io/docs/akka/2.4/java.html#java-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Akka Java Document</a></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"왜-필요해요\"><a href=\"#%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%B4%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>왜 필요해요?</h2>\n<blockquote>\n<p>Amdahl's Law : 멀티코어를 사용하는 프로그램의 속도는 프로그램 내부에 존재하는 순차적 부분이 사용하는 시간에 의해서 제한됩니다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105619519-ae45ff80-5e36-11eb-9e17-a460356274d3.png\" alt=\"Amdahl&#x27;s Law\"></p>\n<p>동시성 구현을 위해 Thread나 Task를 ExecutorService에 제출하는 코드를 구성하고, 이를 실행하면 여러개의 Thread가 동시에 작업을 합니다. 하지만 코드 중에서는 Thread나 Task를 사용하지 않는 순차적 작업을 진행하는 곳이 존재합니다. 이러한 순차적인 작업의 시간 때문에 프로그램이 낼 수 잇는 속도의 최대치는 정해집니다.</p>\n<p>이러한 문제를 해결하기 위해서 Akka는 곳곳에 존재하는 순차적인 부분을 전부 없애거나 최소한으로 만들기 위해서 사용합니다.</p>\n<br/>\n<h2 id=\"akka의-기술\"><a href=\"#akka%EC%9D%98-%EA%B8%B0%EC%88%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Akka의 기술</h2>\n<h3 id=\"1-actor\"><a href=\"#1-actor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Actor</h3>\n<ul>\n<li>배포, 동시성, 병렬성을 위하 단순하고 높은 수준의 추상화를 제공합니다.</li>\n<li>비동기식, 비차단식, 고성능 메시지 기반의 프로그래밍 모델입니다.</li>\n<li>매우 가벼운 이벤트 기반의 프로세스입니다. (GB당 수백만의 힙 메모리)</li>\n</ul>\n<h3 id=\"2-fault-tolerance-내결함성\"><a href=\"#2-fault-tolerance-%EB%82%B4%EA%B2%B0%ED%95%A8%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Fault Tolerance (내결함성)</h3>\n<ul>\n<li>\"let-it-crash\" 의미가 있는 Supervisor hierarchies(감독 계층구조)를 가집니다.</li>\n<li>Actor 시스템은 여러 JVM을 포괄해서 내결함성 시스템을 제공할 수 있습니다.</li>\n<li>스스로 문제를 해결하고, 멈추지 않는 내결함성이 높은 시스템을 작성하는데 유리합니다.</li>\n</ul>\n<h3 id=\"3-location-transparency-위치-투영성\"><a href=\"#3-location-transparency-%EC%9C%84%EC%B9%98-%ED%88%AC%EC%98%81%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Location Transparency (위치 투영성)</h3>\n<ul>\n<li>Akka의 모든 것은 분산 환경에서 작동하도록 설계되었습니다.</li>\n<li>Actor의 모든 상호작용은 순수한 메시지 전달을 사용하며, 모든 것은 비동기적입니다.</li>\n</ul>\n<h3 id=\"4-persistence-지속성\"><a href=\"#4-persistence-%EC%A7%80%EC%86%8D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Persistence (지속성)</h3>\n<ul>\n<li>Actor가 경험하는 상태 변경은 Actor은 시작하거나 다시 시작할 때 지속할 수 있습니다.</li>\n<li>그렇기 때문에 JVM이 충돌하거나 다른 노드로 마이그레이션된 경우에도 행위자가 자신의 상태를 복구할 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"actor-model\"><a href=\"#actor-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Actor Model</h2>\n<p>Actor Model은 모든 것이 Actor 라는 철학을 가지고 있습니다. 이는 모든 것이 객체라는 객체지향프로그래밍의 철학과 일부 비슷합니다.</p>\n<p>Actor Model은 기본 개념은 아래와 같습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Send a finite number of messages to other actors</code></p>\n<ul>\n<li>다른 Actor에 한정된 개수의 메세지를 보낼 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Create a finite number of new actors</code></p>\n<ul>\n<li>유한한 개수의 Actor를 만들 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Designate the behavior to be used for the next message it receives</code></p>\n<ul>\n<li>다른 Actor가 받을 메세지에 사용할 행동을 지정할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">There is no assumed sequence to the above actions and they could be carried out in parallel.</code></p>\n<ul>\n<li>위에서 언급된 조치는 정해진 순서가 없으며, 동시에 수행될 수 잇습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"akka의-특징\"><a href=\"#akka%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Akka의 특징</h2>\n<ul>\n<li>\n<p>Throughput(처리율)</p>\n<ul>\n<li>암달의 법칙에서 설명하는 순차적인 부분이 차지하는 면적을 최소한으로 줄이면서 프로그램의 전체적인 처리율은 그와 반비례해서 급등합니다.</li>\n</ul>\n</li>\n<li>\n<p>Scale Out</p>\n<ul>\n<li>구성 파일의 내용을 약간 수정함을 통해서 Scale out 할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Modularity</p>\n<ul>\n<li>Akka를 이용하여 클래스나 객체를 중심으로 설계하는 방식에서 Actor 방식으로 바뀌게 됩니다.</li>\n<li>Actor는 서로 완벽하게 독립적이며, 메세지를 주고 받는 방식으로만 통신하기 때문에 <strong>코드의 응집성(coherenece), 느슨한 결합(loosely coupled), 캡슐화(encapsulation)</strong>이 보장됩니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>오늘은 Akka의 개념에 대해 정리했습니다. 아직까지 실무에서 동시성이 필요한 로직을 구성할 일은 크게 없으나 이러한 지식을 알고 있다면 매우 좋을 것 같습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://doc.akka.io/docs/akka/2.4/intro/what-is-akka.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://doc.akka.io/docs/akka/2.4/intro/what-is-akka.html</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Actor_model</a></li>\n<li><a href=\"https://elky84.github.io/2018/06/21/akka/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://elky84.github.io/2018/06/21/akka/</a></li>\n<li><a href=\"https://hamait.tistory.com/657\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hamait.tistory.com/657</a></li>\n<li><a href=\"http://wiki.webnori.com/display/AKKA/Akka-Home\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://wiki.webnori.com/display/AKKA/Akka-Home</a></li>\n<li><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=adaylily&#x26;logNo=221614034610&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://m.blog.naver.com/PostView.nhn?blogId=adaylily&#x26;logNo=221614034610&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Multi Thread","path":"/10-java-study/","date":"22. January 2021","timeToRead":15,"description":"Java 멀티쓰레드에 대해 정리합니다.","content":"<h1 id=\"java-interface\"><a href=\"#java-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Interface</h1>\n<p>10 주차 내용은 멀티쓰레드 프로그래밍에 관련된 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>Thread 클래스와 Runnable zmffotm</li>\n<li>쓰레드의 상태</li>\n<li>쓰레드의 우선순위</li>\n<li>Main 쓰레드</li>\n<li>동기화</li>\n<li>데드락</li>\n</ul>\n<br/>\n<h2 id=\"들어가기-앞서\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>들어가기 앞서.</h2>\n<h3 id=\"process와-thread의-차이\"><a href=\"#process%EC%99%80-thread%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Process와 Thread의 차이</h3>\n<p><strong>Process란</strong></p>\n<ul>\n<li>단순히 실행 중인 프로그램</li>\n<li>사용자가 작성한 프로그램이 OS에 의해 메모리 공간을 할당 받아 실행 중인 것</li>\n<li>프로세스는 프로그램에 사용되는 데이터, 메모리, 쓰레드로 구성됩니다.</li>\n</ul>\n<p><strong>Thread란</strong></p>\n<ul>\n<li>프로세스 내에서 실제로 작업을 수행하는 주체</li>\n<li>가장 작은 실행 단위 입니다.</li>\n<li>모든 프로세스에서는 1개 이상의 쓰레드가 존재하여 작업을 수행합니다.</li>\n<li>두개 이상의 쓰레드를 가지면 멀티 쓰레드 프로세스라고 합니댜.</li>\n</ul>\n<p>이 차이를 그림으로 나타내면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105566319-d9651c00-5d6e-11eb-92a9-fe7cd625276a.png\" alt=\"process-thread-diff\"></p>\n<br/>\n<h2 id=\"thread-클래스와-runnable-인터페이스\"><a href=\"#thread-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-runnable-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thread 클래스와 Runnable 인터페이스</h2>\n<p>자바에서 쓰레드를 생성하는 방법은 크게 두가지로 구성됩니다.</p>\n<ul>\n<li><code class=\"language-text\">Thread</code> 클래스를 사용</li>\n<li><code class=\"language-text\">Runnable</code> 인터페이스를 사용</li>\n</ul>\n<p>다만, Thread 클래스 Runnable 인터페이스와 차이가 있는 것이 아닌 구현한 클래스이므로, 어떤 것을 적용하는 지의 차이로 볼 수 있습니다. 둘 모두 <code class=\"language-text\">java.lang</code> 패키지에 포함되어 있습니다..</p>\n<h3 id=\"thread-클래스\"><a href=\"#thread-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thread 클래스</h3>\n<p>쓰레드의 클래스는 다음과 같이 구성됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnbale</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerNatives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용한 예제 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"runnable-인터페이스\"><a href=\"#runnable-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Runnable 인터페이스</h3>\n<p>Runnable Interface는 다음과 같이 구성됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 구현하면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunnableExample</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"예제-코드를-통한-쓰레드-구현\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%93%B0%EB%A0%88%EB%93%9C-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예제 코드를 통한 쓰레드 구현</h3>\n<p>코드를 구현해보면 다음과 같이 동작하는 것을 알 수 있습니다.</p>\n<p>해당 코드와 결과를 보면, 순차적으로 일어나고 있지 않음을 알수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105505206-046a5400-5d0c-11eb-8e38-bb01725cf329.png\" alt=\"start-example\"></p>\n<p><code class=\"language-text\">run()</code> 호출 시에는 그저 메소드 호출의 의미를 가지기 때문에 아래와 같은 결과가 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105505781-b73ab200-5d0c-11eb-9975-18e75f3bdec6.png\" alt=\"run-example\"></p>\n<p><code class=\"language-text\">start()</code>를 함으로써 쓰레드를 생성하고 각 쓰레드는 각각의 호출스택을 가지게 됩니다.</p>\n<br/>\n<h2 id=\"쓰레드의-상태\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%83%81%ED%83%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쓰레드의 상태</h2>\n<p>Thread의 상태는 크게 6가지로 구성됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105506399-59f33080-5d0d-11eb-9e0f-acae0353ec69.png\" alt=\"image\"></p>\n<p>이를 하나씩 설명하면 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">NEW</code> : 쓰레드 인스턴스가 생성은 되었으나 아직 start 하지 않은 상태입니다.</li>\n<li><code class=\"language-text\">RUNNABLE</code> : 쓰레드가 start 한 상태, 동작 가능한 상태임을 의미합니다. (동작 중일 수도 dlT고 아닐 수 도 있습니다.)</li>\n<li><code class=\"language-text\">BLOCKED</code> : Monitor lock을 획득하기 위해 다른 스레드가 락을 풀기를 기다리는 상태입니다.</li>\n<li><code class=\"language-text\">WAITING</code> : 대기상태에 들어간 쓰레드입니다.</li>\n<li><code class=\"language-text\">TIME_WAITING</code> : WAITING과 비슷하지만, 정해진 시간동안 대기시간에 들어갑니다.</li>\n<li><code class=\"language-text\">TERMINATED</code> : 쓰레드가 동작을 완료한 상태입니다.</li>\n</ul>\n<p>이를 사용하는 Thread method로는 아래와 같은 함수 들이 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">static void sleep(long millis)</code>, <code class=\"language-text\">static void sleep(long millis, int nanos)</code></p>\n<ul>\n<li>지정된 시간동안 쓰레드를 일시정지시켜 그 시간이 지나면 자동적으로 다시 실행대기상태가 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void join()</code>, <code class=\"language-text\">void join(long millis)</code>, <code class=\"language-text\">void join(long millis, int nanos)</code></p>\n<ul>\n<li>지정된 시간동안 쓰레드가 실행되도록 한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void interrupt()</code></p>\n<ul>\n<li>sleep()이나 join()에 의해 일시정지상태인 쓰레드를 깨워서 실행대기 상태로 만든다.</li>\n<li>해당 쓰레드에서는 InterruptedException이 발생함으로써 일시정지상태를 벗어나게 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void stop()</code></p>\n<ul>\n<li>쓰레드를 즉시 종료 시킨다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void suspend()</code></p>\n<ul>\n<li>쓰레드를 일시정지시킨다. resume()을 호출하면 다시 실행대기상태가 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void resume()</code></p>\n<ul>\n<li>suspend()에 의해 일시정지상태에 있는 쓰레드를 실행대기상태로 만든다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">static void yield()</code></p>\n<ul>\n<li>실행 중에 자신에게 주어진 실행시간을 다른 쓰레드에게 양보하고 자신은 실행대기상태가 된다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"쓰레드의-우선순위\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쓰레드의 우선순위</h2>\n<p>다중작업을 진행할 때는 멀티쓰레드 방식을 하는데 이 경우는 크게 <strong>동시성(Concurrency)</strong> 와 <strong>병렬성(Parallelism)</strong> 으로 나눠집니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105507187-3da3c380-5d0e-11eb-91c3-3e1fb63c091d.png\" alt=\"java-concurrency-parallelism\"></p>\n<p><strong>동시성</strong>의 경우는 싱글코어에 멀티 스레드를 번갈아가면서 실행합니다. <strong>병렬성</strong>의 경우에는 멀티코어에 개별 스레드를 동시에 실행시킵니다.</p>\n<h3 id=\"우선순위-할당-방식\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%95%A0%EB%8B%B9-%EB%B0%A9%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>우선순위 할당 방식</h3>\n<p>Java에서는 각 쓰레드는 우선순위에 관한 필드값을 가지고 있고 우선순위에 따라 특정 쓰레드가 더 많은 시간동안 작업을 할 수 있습니다.</p>\n<p>쓰레드의 우선 순위는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">static int MAX_PROPERTY</code> : 쓰레드가 가질 수 있는 최대 우선순위</li>\n<li><code class=\"language-text\">static int MIN_PROPERTY</code> : 쓰레드가 가질 수 있는 최소 우선순위</li>\n<li><code class=\"language-text\">static int NORM_PROPERTY</code> : 쓰레드가 생성될 때 가지는 기본 우선순위</li>\n</ul>\n<p><code class=\"language-text\">setPriority()</code> 을 통해서 쓰레드의 우선순위를 변경할 수 있으며, 범위는 1~10 입니다. 번호가 높아질 수록 우선순위가 높으나, 상대적인 순위입니다. (기본은 5로 정의되어 있습니다)</p>\n<p>아래의 코드처럼 사용할 수 있으며, 이 결과로 우선순위가 높은 쓰레드가 좀 더 많이 실행됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> threadExample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> runnableExample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RunnableExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        runnableExample<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        threadExample<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        runnableExample<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"순환-할당-방식\"><a href=\"#%EC%88%9C%ED%99%98-%ED%95%A0%EB%8B%B9-%EB%B0%A9%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>순환 할당 방식</h3>\n<p>할당량(Time Slice)을 정해서 하나의 스레드를 정해진 시간만큼 실행하고 다른 스레드를 실행하는 방식입니다. 이는 <code class=\"language-text\">JVM</code>에 의해 결정됨으로 임의로 수정이 불가능합니다.</p>\n<br/>\n<h2 id=\"main-쓰레드\"><a href=\"#main-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Main 쓰레드</h2>\n<p>Java에서 main() 메소드는 프로그램의 시작점입니다. 이 main() 메소드 또한 쓰레드에 의해 실행되기 때문에 main 쓰레드라고 하기도 합니다.</p>\n<p>해당 코드처럼 로직이 돌아갑니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// main thread tart</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>   <span class=\"token comment\">// main thread end</span></code></pre>\n<p>다만 Main 쓰레드는 <strong>싱글 쓰레드</strong>인지, 혹은 <strong>멀티 쓰레드</strong>인지에 따라서도 동작이 다릅니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105510514-12bb6e80-5d12-11eb-912d-10ef0e099dc1.png\" alt=\"Thread-Diff\"></p>\n<p>싱글 쓰레드 어플리케이션의 경우에는 main thread가 종료되면 프로세스도 종료되지만, <strong>멀티 쓰레드 어플리케이션의 경우에는 main Thread가 종료되더라도 실행중인 thread가 하나라도 있으면 프로세스는 종료되지 않습니다.</strong></p>\n<h3 id=\"daemon-thread\"><a href=\"#daemon-thread\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Daemon Thread</h3>\n<ul>\n<li>Main 쓰레드의 작업을 돕습니다.</li>\n<li>Main 쓰레드가 종료되면 보조역할을 하는 Daemon Thread은 강제적으로 종료됩니다.</li>\n<li><strong>Daemon 쓰레드</strong>는 Daemon 쓰레드가 될 쓰레드에 <code class=\"language-text\">setDaemon(true)</code>를 호출하면 됩니다.</li>\n<li>일반적으로 부가적인 작업을 수행할 때, Main 쓰레드가 종료되면 같이 종료되게 하기 위해서 사용합니다.</li>\n</ul>\n<br/>\n<h2 id=\"동기화\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동기화</h2>\n<p>멀티 쓰레드의 경우에는 여러 쓰레드가 같은 프로세스 내의 자원을 공유하기 때문에 서로의 작업에 영향을 줄 수 있습니다. 이를 방지하기 위해 한 쓰레드가 특정 작업을 끝마치기 전까지 다른 쓰레드에 방해받지 않도록 하는 개념이 필요하여 <code class=\"language-text\">critical section(입계 영역)</code> 과 <code class=\"language-text\">lock(잠금)</code> 입니다.</p>\n<p>공유데이터로 사용하는 코드 영역을 <code class=\"language-text\">critical section</code>으로 지정하여, lock을 획득한 하나의 쓰레드만 이 영역 내에서 코드를 수행할 수 있게 합니다. 해당 쓰레드가 임계 영역 내에서 모든 코드를 수행하고 나서 lock 을 반납하고 나가야, 다른 쓰레드가 반납된 lock을 얻어 임계 영역의 코드를 수행할 수 있습니다.</p>\n<p>이 때 한 쓰레드가 진행중인 작업을 다른 쓰레드가 간섭하지 못하도록 막는 것을 <strong>쓰레드의 동기화</strong>라고 합니다.</p>\n<p>자바에서 동기화하는 방법은 크게 3가지로 분류됩니다.</p>\n<ul>\n<li><code class=\"language-text\">Synchronized</code></li>\n<li><code class=\"language-text\">Atomic</code> 클래스</li>\n<li><code class=\"language-text\">Volatile</code> 클래스</li>\n</ul>\n<h3 id=\"synchronized\"><a href=\"#synchronized\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Synchronized</h3>\n<p>Java의 예약어 중 하나입니다. 크게 두 가지 방법으로 사용됩니다.</p>\n<ul>\n<li>synchronized methods : 메소드 자체를 <code class=\"language-text\">synchronized</code> 키워드로 선언한는 방법</li>\n<li>synchronized statements ; 메소드 내의 특정 문장을 <code class=\"language-text\">synchronized</code>로 감싸는 방법</li>\n</ul>\n<p>다음과 같이 코드를 짤 수 있습니다. 해당 코드는 결과값을 2개의 쓰레드에서 10000번 더하는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SyncCalculator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SyncCalculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">-=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalcThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SyncCalculator</span> calc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CalcThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SyncCalculator</span> calc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>calc <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            calc<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드를 실행시키면 결과는 다음과 같습니다.</p>\n<ul>\n<li>Synchronized 사용시.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105567926-1209f300-5d79-11eb-9e2d-56561fb2e8a8.png\" alt=\"image\"></p>\n<ul>\n<li>Synchronized 미사용시</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105567911-f7377e80-5d78-11eb-9c2a-c025778292ad.png\" alt=\"image\"></p>\n<p>다음과 같이 Synchronized을 사용하면 동기화가 되는 것을 확인할 수 있습니다.</p>\n<h3 id=\"atomic-클래스\"><a href=\"#atomic-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Atomic 클래스</h3>\n<p><code class=\"language-text\">Atomicity(원자성)</code>의 개념은 <strong>쪼갤 수 없는 가장 작은 단위</strong>를 의미합니다. 자바의 Atomic Type은 Wrapping 클래스의 일종으로서 CAS(Compare-And-Swap) 알고리즘을 사용해 lock 없이 동기화 처리를 할 수 있습니다.</p>\n<p><code class=\"language-text\">AtomicBoolean</code>, <code class=\"language-text\">AtomicInteger</code> 등의 클래스가 있으며 <code class=\"language-text\">java.util.concurrent.atomic</code> 패키지에 정의된 클래스입니다.</p>\n<h4 id=\"atomic-method\"><a href=\"#atomic-method\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Atomic Method</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">get()</code>, <code class=\"language-text\">set()</code></p>\n<ul>\n<li>기존 기능과 동일합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">getAndSet(newValue)</code></p>\n<ul>\n<li>atomic하게 값을 업데이트 하고, 원래의 값을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compareAndSet(expect, update)</code></p>\n<ul>\n<li>현재 값이 예상되는 값과 동일하다면, update하고 true을 반환합니다.</li>\n<li>현재 값이 예상되는 값이 다르다면, update를 하지않고 false를 반환합니다.</li>\n</ul>\n</li>\n<li>그외에도 여러가지 mehtod가 있습니다.</li>\n</ul>\n<p><strong>Compae And Swap(CAS)</strong></p>\n<ul>\n<li>현재 주어진 값(현재 쓰레드에서의 데이터)와 실제 데이터가 저장된 데이터를 비교하여 두 개가 일치할 때만 값을 업데이트합니다. 이 역활을 수행하는 method는 <code class=\"language-text\">compareAndSet</code> 입니다.</li>\n</ul>\n<h3 id=\"volatile-클래스\"><a href=\"#volatile-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Volatile 클래스</h3>\n<h4 id=\"volatile-이란\"><a href=\"#volatile-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Volatile 이란.</h4>\n<ul>\n<li><code class=\"language-text\">volatile</code> keyword는 Java 변수를 Main Memory에 저장하겠다는 것을 명시합니다.</li>\n<li>변수의 값을 읽을 때, CPU cache에 저장된 것이 아닌 Main Memory에서 읽습니다.</li>\n<li>변수의 값을 쓸 때, Main Memory에 작성을 합니다.</li>\n</ul>\n<h4 id=\"volatile-사용-이유\"><a href=\"#volatile-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Volatile 사용 이유.</h4>\n<p><code class=\"language-text\">volatile</code> 변수를 사용하지 않는 MultiThread 애플리케이션은 작업을 수행하는 동안 성능 향상을 위해서 아래 그림과 같이 Main Memory에서 읽은 변수를 CPU Cache에 저장하게 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105566601-593fb600-5d70-11eb-8804-a267a7970c67.png\" alt=\"why-volatile\"></p>\n<p>다만 Multi Thread 환경에서 Thread가 변수 값을 읽어올 때 각각의 CPU Cache에 저장된 값이 달라 변수 값이 다른 수도 있습니다. 이를 가시성 문제라고 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105566665-c05d6a80-5d70-11eb-85ed-32b695af397a.png\" alt=\"why-volatile-2\"></p>\n<p>이를 해결하기 위해서 <code class=\"language-text\">volatile</code> 키워드를 추가하여 해당 문제를 해결합니다. <code class=\"language-text\">volatile</code> 키워드를 통해 변수의 read/write 를 Main Memory에서 진행하게 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>다만</strong>, CPU Cache보다 Main Memory에서 비용이 더 크기 때문에 <strong>변수 값 일치를 보장</strong>해야 하는 경우에만 이를 사용합니다.</p>\n<br/>\n<h2 id=\"데드락deadlock\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BDdeadlock\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락(Deadlock)</h2>\n<h3 id=\"deadlock-이란\"><a href=\"#deadlock-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deadlock 이란.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/105568052-e9cec400-5d79-11eb-98d8-2e806812fcf8.png\" alt=\"deadlock\"></p>\n<p>Deadlock이란 둘 이상의 쓰레드가 lock을 획득하기 위해 대기를 하는데, 이 lock을 잡고 있는 쓰레드들 또한 다른 lock을 기다리면서 서로 block 상태에 놓이는 것을 의미합니다.</p>\n<p>이러한 Deadlock 상태가 되기 위해서는 4가지 조건을 만족해야합니다.</p>\n<ul>\n<li><strong>Mutual exclusion(상호배제)</strong> : 프로세스들이 필요로 하는 자원에 대해 배타적인 통제권을 요청합니다.</li>\n<li><strong>Hold and wait(점유대기)</strong> : 프로세스가 할당된 자원을 가진 상태에서 다른 자원을 기다립니다.</li>\n<li><strong>No preemption(비선점)</strong> : 프로세스가 어떤 자원의 사용을 끝날 때까지 그 자원을 뺏을 수 없습니다.</li>\n<li><strong>Circular wait(순환대기)</strong> : 각 프로세스는 순환적으로 다음 프로세스가 요구하는 자원을 가지고 있습니다.</li>\n</ul>\n<h3 id=\"deadlock-해결\"><a href=\"#deadlock-%ED%95%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deadlock 해결</h3>\n<p>이를 해결하는 방법은 크게 3가지(예방, 회피, 무시)로 구성됩니다.</p>\n<h4 id=\"데드락-예방\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD-%EC%98%88%EB%B0%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락 예방</h4>\n<p>앞서 이야기한 4가지 조건 중 하나를 제거합니다. 다만 이러한 방법들은 자원 사용의 효율성이 떨어집니다.</p>\n<h4 id=\"데드락-회피\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD-%ED%9A%8C%ED%94%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락 회피</h4>\n<p>자원이 어떻게 요청될지에 대한 추가정보를 제공하도록 요구하는 것이며, 이를 검사하는 알고리즘을 사용합니다.</p>\n<ul>\n<li>Resource Allocation Graph Algorithm</li>\n<li>Banker's Algorithm</li>\n</ul>\n<h4 id=\"데드락-무시\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD-%EB%AC%B4%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락 무시</h4>\n<p>일반적으로 예방과 회피를 사용하면 자연적으로 성능적으로 낮아집니다. 일반적으로 데드락 발생이 드물게 일어나고 그에 대한 코스트가 적다면 무시하는 방법을 선택할 수도 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://sujl95.tistory.com/63\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/63</a></li>\n<li><a href=\"https://www.notion.so/Thread-5fdb5d603a6a473186bf2738f482cedc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/Thread-5fdb5d603a6a473186bf2738f482cedc</a></li>\n<li><a href=\"https://www.notion.so/ac23f351403741959ec248b00ea6870e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/ac23f351403741959ec248b00ea6870e</a></li>\n<li><a href=\"https://www.notion.so/10-4a588c3795c3455fb8c498a040696ce8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/10-4a588c3795c3455fb8c498a040696ce8</a></li>\n<li><a href=\"https://velog.io/@jaden_94/10%EC%A3%BC%EC%B0%A8-%ED%95%AD%ED%95%B4%EC%9D%BC%EC%A7%80-Multi-Thread-Programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@jaden_94/10%EC%A3%BC%EC%B0%A8-%ED%95%AD%ED%95%B4%EC%9D%BC%EC%A7%80-Multi-Thread-Programming</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Exception","path":"/09-java-study/","date":"15. January 2021","timeToRead":7,"description":"자바의 예외에 대해 정리합니다.","content":"<h1 id=\"java-exception\"><a href=\"#java-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Exception</h1>\n<p>백기선님의 자바 스터디 9주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>자바가 제공하는 예외 계층 구조</li>\n<li>자바에서 예외 처리 방법 (try, catch, throw, throws, finally)</li>\n<li>Exception과 Error의 차이는?</li>\n<li>RuntimeException과 RE가 아닌 것의 차이는?</li>\n<li>커스텀한 예외 만드는 방법</li>\n</ul>\n<br/>\n<h2 id=\"자바가-제공하는-예외-계층-구조\"><a href=\"#%EC%9E%90%EB%B0%94%EA%B0%80-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%98%88%EC%99%B8-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바가 제공하는 예외 계층 구조</h2>\n<p>자바에서는 예외를 이야기 할 때는 <code class=\"language-text\">오류(Error)</code> 와 <code class=\"language-text\">예외(Exception)</code> 의 개념이 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104693052-58919900-574c-11eb-8a77-cd7568ed23e7.png\" alt=\"java-error-exception\"></p>\n<p>자바의 예외 클래스의 구조는 다음과 같이 구성되어 있습니다.</p>\n<h3 id=\"오류error\"><a href=\"#%EC%98%A4%EB%A5%98error\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>오류(Error)</h3>\n<p>시스템의 비정상적인 상황이 생겼을 때 발생하는 것을 <code class=\"language-text\">오류</code> 라고 합니다. 이는 시스템 레벨에서 발생하므로 시스템 자체에 영향을 줄 수도 있기 때문에 심각한 오류로 볼 수 있습니다. 다만 개발자는 이를 예측하여 처리하는 것은 어렵기 때문에 크게 신경을 쓰지 않아도 됩니다.</p>\n<p>아래와 같은 예시가 있습니다.</p>\n<ul>\n<li>VirtualMachineError</li>\n<li>OutOfMemoryError</li>\n<li>StackOverflowError</li>\n</ul>\n<h3 id=\"예외exception\"><a href=\"#%EC%98%88%EC%99%B8exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외(Exception)</h3>\n<p>개발자의 잘못된 코딩으로 인해 구현한 로직에서 발생합니다. 따라서 이는 미리 예측하여 처리할 수 있고, 일반적으로 try-catch 문을 사용하여 해결합니다.</p>\n<br/>\n<h2 id=\"자바에서-예외-처리-방법-try-catch-throw-thorws-finally\"><a href=\"#%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-try-catch-throw-thorws-finally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바에서 예외 처리 방법 (try, catch, throw, thorws, finally)</h2>\n<h3 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>try-catch-finally</h3>\n<p>예외 처리를 위해 try-catch-finally 문을 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 예외가 발생할 수 있는 가능성이 있는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception1</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Exception1이 발생시, 이를 처리하는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception2</span> e2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략 가능</span>\n        <span class=\"token comment\">// 만약 Exception1에서 에러 발생시, 해당 로직에는 작동을 하지 않음</span>\n        <span class=\"token comment\">// Exception2이 발생시, 이를 처리하는 코드</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략 가능</span>\n        <span class=\"token comment\">// 예외가 발생해도 마지막에 실행됩니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>try 블럭에는 여러 catch 블록이 올 수 있으며, 이 중에서 발생한 에외의 종류와 일치하는 단 한 개의 catch 블록만 수행됩니다.</p>\n<h3 id=\"multi-catch\"><a href=\"#multi-catch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>multi catch</h3>\n<p>다음과 같이, 자바 7이후 여러 catch 블럭을 '|' 기호를 통해 나의 catch 블럭으로 합칠 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionA</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ExceptionB</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"try-with-resources\"><a href=\"#try-with-resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>try-with-resources</h3>\n<ul>\n<li>회수를 해야하는 자원을 다룰 때, 도움이 됩니다.</li>\n<li>코드를 더 간결하고 예외정보도 유리하게 사용할 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstLineInFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> defaultVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> defaultVal<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"throw\"><a href=\"#throw\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>throw</h3>\n<p>throw 키워드를 통해서 고의로 예외를 발생할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exceptionThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Exception</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"고의로 발생한 예외\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"throws\"><a href=\"#throws\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>throws</h3>\n<p>메서드 선언부에서 throws 키워드를 통해서 해당 메서드를 호출한 메서드로 예외를 던집니다. 예외를 선언함으로서 메서드를 사용할 때 발생할 수 잇는 에러를 명시적으로 알 수 있습니다. 이 때 예외는 해당 메서드를 호출하는 곳에서 한 번은 <code class=\"language-text\">try-catch</code> 로 처리해주어야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CustomException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">CustomException</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"내가 만든 예외\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Custome Exception\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>좀 더 Clean Code로 짜는 방법</p>\n</blockquote>\n<ul>\n<li>try 블럭에서 무슨 일이 생기든지 catch 블록은 프로그램 상태를 일관성있게 유지합니다.</li>\n<li>\n<p>예외에 의미를 제공합니다.</p>\n<ul>\n<li>오류가 발생한 윈언과 위치를 찾기 쉽도록 오류메세지에 정보를 담고, 실패한 연산 이름과 실패 유형을 언급합니다.</li>\n</ul>\n</li>\n<li>\n<p>호출자를 고려해서 예외 클래스를 구성합니다.</p>\n<ul>\n<li>아래는 그 예시입니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ACMEPort</span> port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ACMEPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n     port<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeviceResponseException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Device response exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ATM1212UnlockedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unlock exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">GMXError</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">reportPortError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Device response exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>정상 흐름을 정의합니다.</li>\n<li>null을 반환하거나 전달하는 습관은 좋지 않습니다.</li>\n</ul>\n<br/>\n<h2 id=\"runtimeexception과-re가-아닌-것의-차이는\"><a href=\"#runtimeexception%EA%B3%BC-re%EA%B0%80-%EC%95%84%EB%8B%8C-%EA%B2%83%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RuntimeException과 RE가 아닌 것의 차이는?</h2>\n<p>자바의 <code class=\"language-text\">RuntimeException</code>은 <strong>Unchecked Exception</strong>으로 <code class=\"language-text\">RuntimeExcption이 아닌 것</code>은 <strong>Checked Exception</strong>으로 분류됩니다.</p>\n<p>둘의 차이는 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>Check Exception</th>\n<th>Unckecked Exception</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>처리여부</strong></td>\n<td>반드시 필요</td>\n<td>강제성이 없음</td>\n</tr>\n<tr>\n<td>확인시점</td>\n<td>컴파일 시점</td>\n<td>실행 시점</td>\n</tr>\n<tr>\n<td><strong>예외 발생시 트랜잭션</strong></td>\n<td>Roll-back X</td>\n<td>Roll-back</td>\n</tr>\n<tr>\n<td>대표적인 예시</td>\n<td>- IO Exception</td>\n<td>- NullPointerException</td>\n</tr>\n<tr>\n<td></td>\n<td>- SQL Exception</td>\n<td>- IllegalArgumentException</td>\n</tr>\n<tr>\n<td></td>\n<td>- ...</td>\n<td>- IndexOutOfBoundException...</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"커스텀한-예외-만드는-방법\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-%EC%98%88%EC%99%B8-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>커스텀한 예외 만드는 방법</h2>\n<p>Custom한 예외 클래스를 만드는 조건은 다음과 같습니다. 해당 조건 중 하나가 필요하다면 예외 클래스를 적용합니다.</p>\n<ol>\n<li>Java 플랫폼에 없는 예외 유형이 필요합니까?</li>\n<li>다른 벤더가 작성한 클래스에서 제공한 예외 사항과 차별화할 수 있다면 어떻겠습니까?</li>\n<li>코드가 하나 이상의 관련 예외를 발생합니까?</li>\n<li>다른 사용자의 예외를 사용할 경우 해당 예외에 대한 액세스 권한이 사용자에게 부여됩니까?</li>\n</ol>\n<h3 id=\"custom-checked-exception\"><a href=\"#custom-checked-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Checked Exception</h3>\n<p>FileNotFoundException 의 경우는 정확한 예외 원인을 정확하게 알지 못합니다. 파일 이름이 없을 수도 있고 파일이 존재하지 않을 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncorrectFileNameException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isCorrectFileName</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"filename is incorrect : \"</span> <span class=\"token operator\">+</span> fileName <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 커스텀 예외를 사용하여 정확한 원인을 확인할 수 있습니다.</p>\n<h3 id=\"custom-unchecked-exception\"><a href=\"#custom-unchecked-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Unchecked Exception</h3>\n<p>확장자가 없는 경우, 런타임 시 문제가 발생하는데 이를 커스텀 예외로 확인할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncorrectFileExtensionException</span>\n  <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IncorrectFileExtensionException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> errorMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isCorrectFileName</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileNameException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"filename is incorrect : \"</span> <span class=\"token operator\">+</span> fileName <span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IncorrectFileExtensionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">containsExtension</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IncorrectFileExtensionException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"Filename does not contain extension : \"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 구성할 수 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://velog.io/@youngerjesus/%EC%9E%90%EB%B0%94-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@youngerjesus/%EC%9E%90%EB%B0%94-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC</a></li>\n<li><a href=\"https://i-am-clap.tistory.com/12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://i-am-clap.tistory.com/12</a></li>\n<li><a href=\"https://rebeccacho.gitbooks.io/java-study-group/content/chapter8.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rebeccacho.gitbooks.io/java-study-group/content/chapter8.html</a></li>\n<li><a href=\"https://sujl95.tistory.com/62\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sujl95.tistory.com/62</a></li>\n<li><a href=\"https://wisdom-and-record.tistory.com/46\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wisdom-and-record.tistory.com/46</a></li>\n<li><a href=\"https://www.notion.so/3565a9689f714638af34125cbb8abbe8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/3565a9689f714638af34125cbb8abbe8</a></li>\n<li><a href=\"https://github.com/kongduboo/whiteship-java-study/blob/main/week9.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/kongduboo/whiteship-java-study/blob/main/week9.md</a></li>\n<li><a href=\"http://amazingguni.github.io/blog/2016/05/Clean-Code-7-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://amazingguni.github.io/blog/2016/05/Clean-Code-7-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 자바 상속","path":"/06-java-study/","date":"13. January 2021","timeToRead":8,"description":"자바의 상속에 대해 정리합니다.","content":"<h1 id=\"java-inherit\"><a href=\"#java-inherit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Inherit</h1>\n<p>백기선님의 자바 스터디 6주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>자바 상속의 특징</li>\n<li>super 키워드</li>\n<li>메소드 오버라이딩</li>\n<li>다이나믹 메소드 디스패치 (Dynamic Method Dispatch)</li>\n<li>추상 클래스</li>\n<li>final 키워드</li>\n<li>Object 클래스</li>\n</ul>\n<br/>\n<h2 id=\"자바-상속\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%83%81%EC%86%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 상속</h2>\n<p>상속이란, <strong>부모 클래스의 변수와 메소드를 물려 받는 것</strong>으로 이러한 상속은 코드의 재사용성을 통해 코드의 간결성을 확보해줍니다.</p>\n<p>일반적으로 <code class=\"language-text\">extends</code>라는 키워드를 통해 이루어집니다.</p>\n<h3 id=\"자바-상속의-특징\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%83%81%EC%86%8D%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 상속의 특징</h3>\n<p>자바 상속은 다음의 특징을 가집니다.</p>\n<ul>\n<li>\n<p>Single inheritance</p>\n<ul>\n<li>자바는 단일 상속만 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>Object를 제외한 모든 클래스는 암묵적으로 Object의 서브 클래스입니다.</p>\n<ul>\n<li>자바 계층 구조 최상위에는 java.lang.Object 클래스가 존재합니다.</li>\n</ul>\n</li>\n<li>\n<p>Multi-level inheritance</p>\n<ul>\n<li>자바에서는 상속의 횟수에 제한이 없습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"super-키워드\"><a href=\"#super-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>super 키워드</h2>\n<p>suuper 키워드는 자식클래스가 부모클래스로부터 상속받은 멤버를 사용할 때 사용됩니다.</p>\n<p>부모 생성자를 호출하는 경우를 <code class=\"language-text\">constructor chanining</code> 이라고 불립니다.</p>\n<p>만약에 자식 클래스의 생성자에서 <code class=\"language-text\">super()</code>를 명시적으로 사용하지 않으면, 컴파일러가 부모 클래스의 기본 생성자를 호출하도록 코드를 삽입되며, 만약 부모 클래스에 기본 생성자가 없으면 컴파일 에러가 발생합니다.</p>\n<br/>\n<h2 id=\"메소드-오버라이딩\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 오버라이딩</h2>\n<p><strong>super 클래스가 가지고 있는 메소드를 서브 클래스에서 새롭게 다른 로직으로 정의하고 싶을 때 사용하는 문법</strong>입니다.</p>\n<p><strong>상속관계에 있는 클래스간에 같은 이름의 메서드를 정의하는 문법</strong>을 오버라이딩이라고 합니다. 이러한 오버라이딩 annotation은 생략할 수도 있습니다.</p>\n<p>다음과 같은 규칙을 준수합니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>부모 클래스 instance method</th>\n<th>부모 클래스 static method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>자식 클래스 instance method</td>\n<td>overrides</td>\n<td>compile error</td>\n</tr>\n<tr>\n<td>자식 클래스 static method</td>\n<td>compile error</td>\n<td>hides</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>hides : 부모 클래스의 메소드를 부를 수 없습니다.</li>\n<li>overrides : 오버라이딩 된 메소드의 부모 메소드를 직접적으로 호출할 수 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"메소드-디스패치method-dispatch\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 디스패치(Method Dispatch)</h2>\n<p>메소드 디스패치는 <strong>어떤 메소드를 호출할 지 결정하여 실제로 실행시키는 과정</strong>을 의미합니다.</p>\n<p>메소드 디스패치는 <strong>정적 메소드 디스패치(Static Method Dispatch), 동적 메소드 디스패치(Dynamic Method Dispatch), 더블 디스패치(Double Dispatch)</strong>로 구성됩니다.</p>\n<h3 id=\"정적-메소드-디스패치static-method-dispatch\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98static-method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 메소드 디스패치(Static Method Dispatch)</h3>\n<p>정적 메소드 디스패치는 구현 클래스를 통해 컴파일 시점에서 컴파일러가 어떤 메소드를 호출할지 명확하게 알고 있는 경우, 컴파일 시 생성된 바이트코드에도 정보가 남아있으면 애플리케이션 실행 전에 호출할 메소드를 결정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 스태틱 메소드 디스패치</span>\n        <span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"동적-메소드-디스패치static-method-dispatch\"><a href=\"#%EB%8F%99%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98static-method-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동적 메소드 디스패치(Static Method Dispatch)</h3>\n<p>인터페이스나 추상 클래스에 정의된 추상 메소드를 호출하는 경우이며 호출되는 메소드가 런타임 시 동적으로 결정됩니다.</p>\n<p>인터페이스 또는 추상 클래스로 선언하고 구현/상속 받은 하위 클래스이 인스턴스를 생성합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 스태틱 메소드 디스패치</span>\n        <span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>런타임 전에는 컴파일러가 <code class=\"language-text\">Dog</code>가 생성됨을 모름므로 <code class=\"language-text\">Animal</code>이 정의한 <code class=\"language-text\">bark()</code> 메소드만 접근 가능합니다.</p>\n<h3 id=\"더블-디스패치double-dispatch\"><a href=\"#%EB%8D%94%EB%B8%94-%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98double-dispatch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>더블 디스패치(Double Dispatch)</h3>\n<p>다이나믹 메소드 디스패치가 2번 발생하는 것입니다. 디자인 패턴 중 <strong>방문자 패턴(Visitor Pattern)</strong>과 밀접한 관계를 가지고 있습니다.</p>\n<ul>\n<li>방문자 패턴 : 여러 객체에 대해 각 객체의 동작들을 지정하는 패턴</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dispatch</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Picture</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SNS</span> sns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Facebook</span> <span class=\"token keyword\">implements</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Twitter</span> <span class=\"token keyword\">implements</span> SNS<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Post</span><span class=\"token punctuation\">></span></span> posts <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Picture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>SNS<span class=\"token punctuation\">></span></span> sns <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Facebook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        posts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>sns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">postOn</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"추상-클래스\"><a href=\"#%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>추상 클래스</h2>\n<p>츠상클래스는 클래스를 만들기 위한 일종의 설계도로 인스턴스를 생성할 수 없는 클래스입니다. 이를 사용하기 위해서는 반드시 자식 클래스에서 상속을 받아 클래스를 모두 구현해야합니다.</p>\n<p>다음의 형태를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> 클래스이름 <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>추상 클래스는 반드시 하나 이상의 추상 메서드를 포함하고 있으며, 생성자와 멤버변수, 일반 메서드를 가질 수 있습니다.</p>\n<p>다음의 특징을 가집니다.</p>\n<ul>\n<li>자체 인스턴스 생성이 불가능합니다.</li>\n<li>생성자와 멤버 변수, 일반 메서드를 모두 가질 수 있습니다.</li>\n<li>하나 이상의 추상 메서드를 포함합니다.</li>\n</ul>\n<br/>\n<h2 id=\"final-키워드\"><a href=\"#final-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 키워드</h2>\n<p>final 키워드는 엔티티를 한 번만 할당하겠다는 의미로 자바에서는 3가지의 의미로 사용됩니다.</p>\n<h3 id=\"final-변수\"><a href=\"#final-%EB%B3%80%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 변수</h3>\n<p>일반적으로 알고 있는 상수를 의미합니다. 생성자나 대입연산자를 통해 단 한번만 초기화 가능한 변수입니다.</p>\n<h3 id=\"final-메소드\"><a href=\"#final-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 메소드</h3>\n<p>오버라이드하거나 숨길 수 없는 메서드 입니다.</p>\n<h3 id=\"final-클래스\"><a href=\"#final-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final 클래스</h3>\n<p>해당 클래스를 상속할 수 없음을 의미합니다. 상속을 할 수 없기 때문에 상속 계층에서 마지막 클래스라는 의미를 지닙니다.</p>\n<br/>\n<h2 id=\"object-클래스\"><a href=\"#object-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object 클래스</h2>\n<p><code class=\"language-text\">java.lang.Object</code> 클래스는 모든 클래스의 최상위 클래스입니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">boolean equals(Object obj)</code></p>\n<ul>\n<li>두 객체가 같은 지 비교합니다.(같으면 true 틀리면 false)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">String toString()</code></p>\n<ul>\n<li>객체의 문자열을 반환합니다</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">protected Object clone()</code></p>\n<ul>\n<li>객체를 복사합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">protected void finalize()</code></p>\n<ul>\n<li>가비지 컬렉션 직전에 객체의 리소스를 정리할때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Class getClass()</code></p>\n<ul>\n<li>객체의 클레스형을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">int hashCode()</code></p>\n<ul>\n<li>객체의 코드값을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void notify()</code></p>\n<ul>\n<li>wait된 스레드 실행을 재개할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void notifyAll()</code></p>\n<ul>\n<li>wait된 모든 스레드 실행을 재개할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void wait()</code></p>\n<ul>\n<li>스레드를 일시적으로 중지할 때 호출합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void wait(long timeout)</code>, <code class=\"language-text\">void wait(long timeout, int nanos)</code></p>\n<ul>\n<li>주어진 시간만큼 스레드를 일시적으로 중지할 때 호출합니다.</li>\n</ul>\n</li>\n</ul>\n<p>모든 클래스는 정의할 때부터 명시적으로 java.lang.Object 클래스를 상속 받게 됩니다. 따라서 위의 함수들은 어떤 클래스에서도 호출이 가능합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/</a></li>\n<li><a href=\"https://velog.io/@roeniss/%EC%9E%90%EB%B0%94-%EA%B8%B0%EC%B4%88%EC%A7%80%EC%8B%9D-%EC%A0%95%EB%A6%AC#6%EC%A3%BC%EC%B0%A8--%EC%83%81%EC%86%8D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@roeniss/%EC%9E%90%EB%B0%94-%EA%B8%B0%EC%B4%88%EC%A7%80%EC%8B%9D-%EC%A0%95%EB%A6%AC#6%EC%A3%BC%EC%B0%A8--%EC%83%81%EC%86%8D</a></li>\n<li><a href=\"https://blog.naver.com/swoh1227/222181505425\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/swoh1227/222181505425</a></li>\n<li><a href=\"https://leemoono.tistory.com/20\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leemoono.tistory.com/20</a></li>\n<li><a href=\"https://github.com/mongzza/java-study/blob/main/study/6%EC%A3%BC%EC%B0%A8.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/mongzza/java-study/blob/main/study/6%EC%A3%BC%EC%B0%A8.md</a></li>\n<li><a href=\"https://roeldowney.tistory.com/486\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://roeldowney.tistory.com/486</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 자바 클래스","path":"/05-java-study/","date":"12. January 2021","timeToRead":8,"description":"자바의 클래스에 대해 정리합니다.","content":"<h1 id=\"java-operatore\"><a href=\"#java-operatore\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Operatore</h1>\n<p>백기선님의 자바 스터디 5주차, 클래스에 대해 정리해보겠습니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>클래스 정의하는 방법</li>\n<li>객체 만드는 방법 (new 키워드 이해하기)</li>\n<li>메소드 정의하는 방법</li>\n<li>생성자 정의하는 방법</li>\n<li>this 키워드 이해하기</li>\n</ul>\n<p>과제</p>\n<ul>\n<li>int 값을 가지고 있는 이진 트리를 나타내는 Node 라는 클래스를 정의하세요.</li>\n<li>int value, Node left, right를 가지고 있어야 합니다.</li>\n<li>BinrayTree라는 클래스를 정의하고 주어진 노드를 기준으로 출력하는 bfs(Node node)와 dfs(Node node) 메소드를 구현하세요.</li>\n<li>DFS는 왼쪽, 루트, 오른쪽 순으로 순회하세요.</li>\n</ul>\n<br/>\n<h2 id=\"객체-지향이란\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 지향이란.</h2>\n<p>먼저 자바의 클래스 개념에 대해 알기 전에 <strong>객체지향 프로그램</strong>에 대해서 정확하게 인지를 하고 넘어가야합니다.</p>\n<p>객체지향 프로그래밍이란 실제 세계에 존재하는 모든 것을 <strong>객체</strong>로 취급하여 프로그래밍 하는 방법입니다. 이러한 객체 지향은 실제 세계의 모습을 표현하기 위해 나온 것이며 아래의 특징을 가집니다.</p>\n<ul>\n<li>\n<p><strong>캡슐화(Encapsulation)</strong></p>\n<ul>\n<li>데이터(속성)와 데이터를 처리하는 함수를 하나로 묶는 것</li>\n<li>캡슐화된 객체의 세부 내용이 외부에 은폐(정보 은닉)되어, 변경이 발생할 때 오류의 파급효과가 적고 재사용에 편리합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>정보은닉(Information Hiding)</strong></p>\n<ul>\n<li>다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통하여 접근을 허용하는 것입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>추상화(Abstarction)</strong></p>\n<ul>\n<li>불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화하는 것, 즉 모델화 하는 것입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>상속성(Inheritance)</strong></p>\n<ul>\n<li>이미 정의된 상위 클래스(부모 클래스)의 모든 속성솨 연산을 하위 클래스가 물려받는 것</li>\n<li>상속성을 이용하면 하위 클래스는 상위 클래스의 모든 속성과 연산을 자신의 클래스 내에서 다시 정의하지 않고서도 즉시 자신의 속성으로 사용할 수 있습니다.</li>\n<li>ex) <code class=\"language-text\">extends</code></li>\n</ul>\n</li>\n<li>\n<p><strong>다형성(Polymorphism)</strong></p>\n<ul>\n<li>메시지에 의해 개체(클래스)가 연산을 수행하게 될 때 하나의 메시지에 대해 각 객체(클래스)가 가지고 있는 고유한 방법(특성)으로 응답할 수 있는 능력</li>\n<li>객체(클래스)들은 동일한 메소드명을 사용하며 같은 의미의 응답을 합니다.</li>\n<li>ex) <code class=\"language-text\">1+2=3 / A+B=AB</code></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"클래스\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스.</h2>\n<p>클래스란 객체를 생성하기 위해 <strong>상태(state)와 행동(behavior)을 정의하는 일종의 설계도</strong>라고 볼 수 있습니다.</p>\n<p>이를 표현하는 용어로 일반적으로 붕어빵 틀로 묘사하고는 합니다. 붕어빵은 일종의 객체로서 여러 개를 만들 수 있고, 붕어빵 틀은 이러한 객체를 만들 수 있는 클래스입니다.</p>\n<p>클래스는 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// attribute</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// method</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"객체-만들기\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 만들기</h2>\n<p>객체는 클래스를 인스턴스화 시킨 것으로 표현할 수 있습니다. 일반적으로 <code class=\"language-text\">new</code> 키워드를 통해서 생성할 수 있으며, 이러한 <code class=\"language-text\">new</code> 키워드는 객체에 메모리를 할당하는 과정으로 볼 수 있습니다.</p>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassTest</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 객체 1</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ClassTest</span> object1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// object 1</span>\n        <span class=\"token class-name\">ClassTest</span> object2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// object 2</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음처럼 <code class=\"language-text\">new</code> 키워드를 통해 여러개의 객체를 선언할 수 있습니다.</p>\n<h3 id=\"new-연산자\"><a href=\"#new-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>new 연산자</h3>\n<p>new 연산자는 클래스 타입의 인스턴스를 생성해주는 역할을 하는 연산자이며, 메모리(Heap 영역)에 공간을 할당 받고 그 공간의 참조값을 객체에게 반환해주는 역할을 합니다.</p>\n<br/>\n<h2 id=\"메서드-정의\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메서드 정의</h2>\n<p>메서드는 다음과 같은 형태로 구성됩니다. 일반적으로 어떠한 기능을 수행한다고 이해하면 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104312556-1e40b580-551a-11eb-820c-4a6d4041d314.png\" alt=\"method\"></p>\n<p>메서드의 접근 제어자는 여러 게시물에서 소개했지만, 한번 더 정리하자면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104312777-6e1f7c80-551a-11eb-9892-329bd9312921.png\" alt=\"image\"></p>\n<p>이는 일종의 범위로 이해하면 됩니다.</p>\n<br/>\n<h2 id=\"생성자-정의\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성자 정의</h2>\n<p>생성자는 객체가 생성된 직후에 클래스의 객체를 초기화하는데 사용됩니다. 생성자를 명시하지 않으면 컴파일러가 자동으로 기본 생성자를 생성합니다. 하지만 다른 생성자를 명시했다면 기본 생성자는 컴파일 시 생성되지 않습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 기본 생성자</span>\n\n<span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"this-키워드-이해하기\"><a href=\"#this-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>this 키워드 이해하기</h2>\n<p><code class=\"language-text\">this</code> 키워드는 인스턴스의 자기 자신을 의미합니다. <code class=\"language-text\">this</code> 키워드를 사용해서 지역변수와 구별도 가능합니다. 다만, 클래스 메서드에서는 인스턴스가 생성되지 않을 수도 있기 때문에 <code class=\"language-text\">this</code>를 사용할 수 없습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 2</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1 &lt;- 2</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1 &lt;- 2</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"과제\"><a href=\"#%EA%B3%BC%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>과제.</h2>\n<p>다음의 요구사항을 가지는 클래스를 만듭니다.</p>\n<ul>\n<li>int 값을 가지고 있는 이진 트리를 나타내는 Node 라는 클래스를 정의하세요.</li>\n<li>int value, Node left, right를 가지고 있어야 합니다.</li>\n<li>BinrayTree라는 클래스를 정의하고 주어진 노드를 기준으로 출력하는 bfs(Node node)와 dfs(Node node) 메소드를 구현하세요.</li>\n<li>DFS는 왼쪽, 루트, 오른쪽 순으로 순회하세요.</li>\n</ul>\n<h3 id=\"node-class\"><a href=\"#node-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Node Class</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addLeftNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addRightNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"binary-tree-class\"><a href=\"#binary-tree-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Binary Tree Class</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> bfsList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> dfsList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Node</span> n <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bfsList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        dfsList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>좀 더 상세한 코드는 아래에 적어놓았습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-Java-With-WhiteShip/tree/master/src/main/java/week5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 예제</a></li>\n</ul>\n<p>이상입니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://blog.naver.com/swoh1227/222174170682\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/swoh1227/222174170682</a></li>\n<li><a href=\"https://jeeneee.dev/java-live-study/week5-class/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jeeneee.dev/java-live-study/week5-class/</a></li>\n<li><a href=\"https://leemoono.tistory.com/17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://leemoono.tistory.com/17</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Interface","path":"/08-java-study/","date":"8. January 2021","timeToRead":7,"description":"Java Interface에 대해 정리합니다.","content":"<h1 id=\"java-interface\"><a href=\"#java-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Interface</h1>\n<p>백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 8주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>인터페이스 정의하는 방법</li>\n<li>인터페이스 구현하는 방법</li>\n<li>인터페이스 레퍼런스를 통해 구현체를 사용하는 방법</li>\n<li>인터페이스 상속</li>\n<li>인터페이스의 기본 메소드 (Default Method), 자바 8</li>\n<li>인터페이스의 static 메소드, 자바 8</li>\n<li>인터페이스의 private 메소드, 자바 9</li>\n</ul>\n<h2 id=\"인터페이스의-개념과-역할\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%97%AD%ED%95%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 개념과 역할</h2>\n<p>가끔 인터페이스와 추상클래스의 차이에 대해 혼란을 가지고 있는 사람이 있는데, 인터페이스의 가장 큰 특징은 <strong>협업을 위한 기능</strong>이라고 생각합니다. 즉, 가이드 라인이나 규격을 제공해주는 <strong>일종의 설계도</strong>로 이해하면 됩니다.</p>\n<p>이러한 인터페이스는 구현이 없으며 <strong>추상 메서드</strong>와 <strong>상수</strong>만을 멤버로 가질 수 있습니다. 다만, Java 8 이후에는 <code class=\"language-text\">default method</code>와 <code class=\"language-text\">static method</code>가 추가되었고, Java 9 이후에는 <code class=\"language-text\">private method</code>를 정의할 수 있습니다.</p>\n<h3 id=\"인터페이스를-왜-쓰나요\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%99%9C-%EC%93%B0%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스를 왜 쓰나요?</h3>\n<ul>\n<li>\n<p>개발 기간의 단축이 가능합니다.</p>\n<ul>\n<li>인터페이스를 통해 분업이 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>클래스간의 결합도를 낮출 수 있습니다.</p>\n<ul>\n<li>코드의 종속성을 줄이고 유지보수성을 높일 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>표준화가 가능합니다.</p>\n<ul>\n<li>클래스의 기본틀을 제공하여, 정형화된 개발이 가능합니다.</li>\n<li><strong>자바의 다형성을 극대화하여서 코드의 수정을 줄이고 유지보수성을 높일 수 있습니다.</strong></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"인터페이스-정의하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%A0%95%EC%9D%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 정의하는 방법</h2>\n<p>인터페이스의 선언은 class 대신 <code class=\"language-text\">interface</code> 를 사용하며, 접근 제어자는 <code class=\"language-text\">default</code> 혹은 <code class=\"language-text\">public</code>을 사용합니다.</p>\n<p>형태는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> 인터페이스 명 <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 상수 : 해당 값을 함부로 바꾸지 말고 사용합니다.</span>\n    <span class=\"token comment\">// type 상수명 = value;</span>\n    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 추상 메소드 : 가이드 라인을 통해 오버라이딩을 재구현해서 사용합니다.</span>\n    type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 디폴트 메소드 : 인터페이스에서 기본적인 부분을 제공하지만, 원하지 않으면 오버라이딩에서 재구현해서 사용합니다.</span>\n    <span class=\"token keyword\">default</span> type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 정적 메소드 : 인터페이스에서 제공하는 것으로 무조건 사용합니다.</span>\n    <span class=\"token keyword\">static</span> type 메소드명<span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이후에 해당 인터페이스를 상속받는 구현체에서는 추상 메소드를 반드시 구현해야합니다.</p>\n<br/>\n<h2 id=\"인터페이스-구현하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 구현하는 방법</h2>\n<p>인터페이스는 <code class=\"language-text\">implements</code> 키워드를 사용해서 구현할 수 있습니다.</p>\n<p>아래는 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스-레퍼런스를-통해-구현체를-사용하는-방법\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4%EB%A5%BC-%ED%86%B5%ED%95%B4-%EA%B5%AC%ED%98%84%EC%B2%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 레퍼런스를 통해 구현체를 사용하는 방법</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"고등어\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멍멍\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"개사료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Animal</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Animal</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 야옹</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 멍멍</span>\n\n        <span class=\"token comment\">// 캐스팅</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token punctuation\">)</span> cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 고등어</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">)</span> dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 개사료</span>\n\n        <span class=\"token comment\">// 불가능.</span>\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Animal 클래스로 선언되었기 때문에, 이를 상속받은 메소드를 바로 사용할 수는 없습니다. 다만, 캐스팅을 통해서 호출이 가능합니다.</p>\n<br/>\n<h2 id=\"인터페이스-상속\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%83%81%EC%86%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스 상속</h2>\n<p>인터페이스는 앞서 이야기 했듯이 상속을 받아 사용합니다. 추가적으로 자바에는 다중 상속이 불가능 하지만 인터페이스는 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Tv</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Internet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">internet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartTv</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Internet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">internet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 구현...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 인터페이스 다중 상속이 가능합니다.</p>\n<br/>\n<h2 id=\"인터페이스의-기본-메소드-default-method-자바-8\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%A9%94%EC%86%8C%EB%93%9C-default-method-%EC%9E%90%EB%B0%94-8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 기본 메소드 (Default Method), 자바 8</h2>\n<ul>\n<li>인터페이스에서 메소드 선언이 아니라 <strong>구현체</strong>를 제공하는 방법입니다.</li>\n<li>해당 인터페이스를 구현한 클래스의 어떠한 영향 없이 새로운 기능을 추가하는 방법입니다.</li>\n<li>\n<p><code class=\"language-text\">default method</code>는 해당 인터페이스에서 <strong>구현체가 모르는 기능을 구현했기 때문에 리스크가 존재</strong>합니다.</p>\n<ul>\n<li>컴파일 에러는 발생하지는 않지만, 특정 구현의 로직에 런타임 에러가 발생가능합니다.</li>\n</ul>\n</li>\n</ul>\n<p>다음과 같은 예제 코드가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">int</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// default로 선언함으로 메소드를 구현합니다.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCalc</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCaclExam</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Calc</span> cal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// output:3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스의-static-메소드-자바-8\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-static-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9E%90%EB%B0%94-8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 static 메소드, 자바 8</h2>\n<p><code class=\"language-text\">static method</code>이므로 상속이 불가능합니다. 인스턴스 없이 수행할 수 있는 작업을 정의할 수 있습니다.</p>\n<p>다음은 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"인터페이스의-private-메소드-자바-9\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-private-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9E%90%EB%B0%94-9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터페이스의 private 메소드, 자바 9</h2>\n<p><code class=\"language-text\">default method</code>와 <code class=\"language-text\">static method</code> 모두 내부 method이나, 외부에 공개되는 <code class=\"language-text\">public method</code>이기 때문에 이에 대한 문제가 존재했습니다. 이러한 interface가 다른 곳에서 상속을 하거나 접근하는 것을 막기 위해 <code class=\"language-text\">private</code>이 등장했습니다.</p>\n<p>java 9에서는 <code class=\"language-text\">private method</code>와 <code class=\"language-text\">private static method</code>가 새롭게 등장했습니다. 이 방법을 통해서 interface에 대한 캡슐화를 유지할 수 있습니다.</p>\n<p>다음은 예제 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"연산 시작\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">multiple</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">startMultiple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startMultiple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"곱셈 시작\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>default 메소드는 static, instance를 호출할 수 있고, static 메서드에서는 static 메서드만 호출 가능합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/9/language/toc.htm#JSLAN-GUID-E409CC44-9A8F-4043-82C8-6B95CD939296\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/9/language/toc.htm#JSLAN-GUID-E409CC44-9A8F-4043-82C8-6B95CD939296</a></li>\n<li><a href=\"https://www.notion.so/4b0cf3f6ff7549adb2951e27519fc0e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/4b0cf3f6ff7549adb2951e27519fc0e6</a></li>\n<li><a href=\"https://blog.baesangwoo.dev/posts/java-livestudy-8week/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.baesangwoo.dev/posts/java-livestudy-8week/</a></li>\n<li><a href=\"https://limkydev.tistory.com/197\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://limkydev.tistory.com/197</a></li>\n<li><a href=\"https://enjoyplaying.tistory.com/33\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://enjoyplaying.tistory.com/33</a></li>\n<li><a href=\"https://wonyong-jang.github.io/java/2021/01/04/Java-Interface.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wonyong-jang.github.io/java/2021/01/04/Java-Interface.html</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 자바 제어문","path":"/04-java-study/","date":"2. January 2021","timeToRead":7,"description":"자바의 제어문에 대해 정리합니다.","content":"<h1 id=\"java-control\"><a href=\"#java-control\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Control</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 4주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>선택문</li>\n<li>반복문</li>\n<li>과제. JUnit 5</li>\n<li>과제. live-study dashboad</li>\n<li>과제. Linked List</li>\n<li>과제. Stack</li>\n<li>과제. ListNode Stack</li>\n<li>과제. Queue</li>\n</ul>\n<p>제어문이란 코드의 실행을 제어하는 구문을 나타냅니다. 대표적으로 선택문과 반복문 등이 있습니다.</p>\n<br/>\n<h2 id=\"선택문\"><a href=\"#%EC%84%A0%ED%83%9D%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>선택문</h2>\n<p>선택문은 일반적으로 if 문과 swtich 문으로 나눠집니다.</p>\n<h3 id=\"if-문\"><a href=\"#if-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>If 문</h3>\n<p>if 문은 다음과 같은 <code class=\"language-text\">if (조건문) {실행조건}</code>의 형태를 가집니다. 좀 더 자세하게 설명을 하기 위해서는 해당 코드를 보면서 설명하겠습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ifExample</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> caseNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>caseNum <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>caseNum <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Others\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음의 경우, caseNum 가 1인 경우, One을 출력하고, caseNum가 2인 경우 Two, 그 외의 경우는 모두 Others가 출력됩니다. if문에서 <code class=\"language-text\">else if</code> 와 <code class=\"language-text\">else</code> 는 없어도 됩니다.</p>\n<h3 id=\"switch-문\"><a href=\"#switch-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Switch 문</h3>\n<p>이와 비슷한 예제문으로 Switch 문이 있습니다. 아래와 같은 형태를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchExample</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> caseNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>caseNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 해당 라인이 없으면, 출력으로 One \\n Two 가 나오게 됩니다.</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Others\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 if문과 같이 기능은 똑같은 코드입니다. 마찬가지로 <code class=\"language-text\">default</code>는 생략이 가능합니다. <code class=\"language-text\">break</code>문을 사용하지 않으면, 해당 조건에서 끝나지 않고, 아래의 조건까지 계속 실행됩니다.</p>\n<br/>\n<h2 id=\"반복문\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>반복문</h2>\n<p>반복문은 일반적으로 <code class=\"language-text\">for 문</code>과 <code class=\"language-text\">while 문</code>으로 나눠집니다.</p>\n<h3 id=\"for-문\"><a href=\"#for-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>for 문</h3>\n<p>다음 코드는 구구단의 9단을 예시로 만든 코드입니다. for문은 다음과 같이 <code class=\"language-text\">for(initialization; 종료 조건; 반복 수행){}</code>의 형태를 가지고 있습니다. 특히 처음 for문을 배울 때 신경써야하는 부분은 반복 수행은 마지막에 end state가 만족하지 않는 경우 수행됩니댜.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" * 9 = \"</span> <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"while-문\"><a href=\"#while-%EB%AC%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>while 문</h3>\n<p>while 문도 이전 코드의 기능과 같습니다. while문은 다음과 같이 <code class=\"language-text\">while(종료 조건){}</code>의 형태를 구성해야합니다. 마찬가지로 조심해야하는 부분으로 종료 조건이 끝나지 않으면 무한 루프가 발생하여 끝나지 않게됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whileExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" * 9 = \"</span> <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 비슷하게 <code class=\"language-text\">do {} while(종료 조건)</code>의 형태가 있습니다. while문과 기능은 비슷하지만, 반드시 한번은 수행된다는 점이 다릅니다.</p>\n<br/>\n<h2 id=\"junit-5\"><a href=\"#junit-5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit 5</h2>\n<p>이에 관련해서는 기존에 Springboot Test 관련으로 공부한 내용이 있어서, 아래의 글을 참고하면 됩니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/01-springboot-test/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Springboog Test</a></li>\n</ul>\n<br/>\n<h2 id=\"live-study-dashboad\"><a href=\"#live-study-dashboad\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>live-study dashboad</h2>\n<p>요구사항</p>\n<ul>\n<li>깃헙 이슈 1번부터 18번까지 댓글을 순회하며 댓글을 남긴 사용자를 체크 할 것.</li>\n<li>참여율을 계산하세요. 총 18회에 중에 몇 %를 참여했는지 소숫점 두자리가지 보여줄 것.</li>\n<li>Github 자바 라이브러리를 사용하면 편리합니다.</li>\n<li>깃헙 API를 익명으로 호출하는데 제한이 있기 때문에 본인의 깃헙 프로젝트에 이슈를 만들고 테스트를 하시면 더 자주 테스트할 수 있습니다.</li>\n</ul>\n<p>코드는 아래의 링크에 있습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-Java-With-WhiteShip/tree/master/src/main/java/week4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">예제 코드</a></li>\n</ul>\n<br/>\n<h2 id=\"linked-list\"><a href=\"#linked-list\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Linked List</h2>\n<p>요구사항</p>\n<ul>\n<li>LinkedList에 대해 공부하세요.</li>\n<li>정수를 저장하는 ListNode 클래스를 구현하세요.</li>\n<li>ListNode add(ListNode head, ListNode nodeToAdd, int position)를 구현하세요.</li>\n<li>ListNode remove(ListNode head, int positionToRemove)를 구현하세요.</li>\n<li>boolean contains(ListNode head, ListNode nodeTocheck)를 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> nodeToAdd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> target <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> position <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    nodeToAdd<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> nodeToAdd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> nodeToAdd<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> positionToRemove<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> target <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> before <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> positionToRemove <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      before <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n      target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    before<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> nodeTocheck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>nodeTocheck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"stack\"><a href=\"#stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stack</h2>\n<p>요구사항</p>\n<ul>\n<li>int 배열을 사용해서 정수를 저장하는 Stack을 구현하세요.</li>\n<li>void push(int data)를 구현하세요.</li>\n<li>int pop()을 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"listnode-stack\"><a href=\"#listnode-stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ListNode Stack</h2>\n<p>요구사항</p>\n<ul>\n<li>ListNode head를 가지고 있는 ListNodeStack 클래스를 구현하세요.</li>\n<li>void push(int data)를 구현하세요.</li>\n<li>int pop()을 구현하세요.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNodeStack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNodeStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> curNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n    curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ListNode</span> curNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> before <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      before <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">;</span>\n      curNode <span class=\"token operator\">=</span> curNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    before<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> curNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"queue\"><a href=\"#queue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Queue</h2>\n<p>요구사항</p>\n<ul>\n<li>배열을 사용해서 한번</li>\n<li>ListNode를 사용해서 한번.</li>\n</ul>\n<p>해당 요구사항을 충족시키는 코드입니다.</p>\n<ul>\n<li>배열을 사용한 코드</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayQueue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> queue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>ListNode를 사용한 코드</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNodeQueue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNodeQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n"}},{"node":{"title":"[Java] 자바 연산자","path":"/03-java-study/","date":"1. January 2021","timeToRead":8,"description":"자바가 제공하는 다양한 연산자에 대해 정리합니다.","content":"<h1 id=\"java-operator\"><a href=\"#java-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Operator</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 3주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>산술 연산자</li>\n<li>비트 연산자</li>\n<li>관계 연산자</li>\n<li>논리 연산자</li>\n<li>instanceof</li>\n<li>assignment(=) operator</li>\n<li>화살표(->) 연산자</li>\n<li>3항 연산자</li>\n<li>연산자 우선 순위</li>\n<li>(optional) Java 13. switch 연산자</li>\n</ul>\n<br/>\n<h2 id=\"산술-연산자\"><a href=\"#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>산술 연산자</h2>\n<p>산술 연산자는 크게 4가지로 구성됩니다. 덧셈 연산자, 뺄셈 연산자, 곱셈 연산자, 나머지 연산자로 이루어지며, 이는 일반적인 수학 수식처럼 이해하면 됩니다.</p>\n<h3 id=\"코드-예시\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">calcOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 8</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 15</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1 (실수형이라면 1.666 이지만 정수형이므로 내림으로 1이 나온다.)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"비트-연산자\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>비트 연산자</h2>\n<p>비트 연산은 일반적으로 1과 0으로 이루어지며 0은 거짓, 그 외의 값은 참을 의미합니다. 대표적인 비트 연산자로는 <code class=\"language-text\">~(not), &amp;(and), |(or), ^(xor)</code> 이 있습니다.</p>\n<h3 id=\"not-\"><a href=\"#not-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NOT, ~</h3>\n<table>\n<thead>\n<tr>\n<th>입력</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"and-\"><a href=\"#and-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AND, &#x26;</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"or\"><a href=\"#or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OR,</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"xor-\"><a href=\"#xor-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XOR, ^</h3>\n<table>\n<thead>\n<tr>\n<th>입력1</th>\n<th>입력2</th>\n<th>결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"코드-예시-1\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bitOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n  <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001111</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>num1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -11</span>\n  <span class=\"token comment\">// 11111111 11111111 11111111 11110101</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&amp;</span> num2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">|</span> num2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 15</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00001111</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">^</span> num2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 비트 연산을 사용할 수 있습니다. 일반적으로 자주 사용하지는 않으나, 종종 알고리즘을 풀 때 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"관계-연산자\"><a href=\"#%EA%B4%80%EA%B3%84-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>관계 연산자</h2>\n<p>연산자를 중심으로 양쪽의 값이 어떤 관계를 갖는지 확인하는 연산입니다. 관계 연산자로는 <code class=\"language-text\">==, !=, &gt;, &gt;=, &lt;, &lt;=, instance of</code> 가 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>이름</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>같음</td>\n<td>양쪽이 같으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>다름</td>\n<td>양쪽이 다르면 참, 같으면 거짓</td>\n</tr>\n<tr>\n<td>></td>\n<td>보다 큼</td>\n<td>왼쪽이 크면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>>=</td>\n<td>보다 크거나 같음</td>\n<td>왼쪽이 크거나 같으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>&#x3C;</td>\n<td>보다 작음</td>\n<td>왼쪽이 작으면 참, 아니면 거짓</td>\n</tr>\n<tr>\n<td>&#x3C;=</td>\n<td>보다 작거나 같음</td>\n<td>왼쪽이 작거나 같으면 참, 아니면 거짓</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"코드-예시-2\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relationOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">>=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"논리-연산자\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>논리 연산자</h2>\n<p>비트 연산과 비슷하지만, 대상이 boolean 타입의 논리 값입니다. <code class=\"language-text\">!</code>은 논리적인 부정을 의미하고, <code class=\"language-text\">&amp;&amp;(and)</code>와 <code class=\"language-text\">||(or)</code> 연산은 비트 연산자와 비슷한 개념을 가집니다.</p>\n<h3 id=\"코드-예시-3\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relativeOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> boo_true <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> boo_false <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>boo_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">&amp;&amp;</span> boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">||</span> boo_false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>boo_true <span class=\"token operator\">&amp;&amp;</span> boo_true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만 신경써야하는 부분은, &#x26;와 &#x26;&#x26;, |과 ||은 <strong>두번째 조건</strong>의 확인이 다릅니다.</p>\n<p>&#x26;&#x26;는 첫번째 조건이 참이 아니면 두번째 조건을 보지않지만, &#x26;는 두번째 조건을 봅니다. 마찬가지로 ||은 첫번째 조건이 참이면 두번째 조건을 확인하지않지만, |은 두번째 조건을 확인합니다.</p>\n<br/>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>instanceof</h2>\n<p><strong>레퍼런스 타입 변수가 레퍼런스 타입의 데이터 티입인지 확인해 보는 연산</strong>입니다. 일반적으로 레퍼런스 타입 변수가 레퍼런스 타입으로 타입 변환이 가능한지 확인하기 위해서 사용합니다.</p>\n<p><code class=\"language-text\">(레퍼런스 타입 변수) instance of (레퍼런스 데이터 타입)</code>의 형태를 가집니다.</p>\n<h3 id=\"코드-예시-4\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C-4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드 예시.</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> interType<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type2 <span class=\"token keyword\">extends</span> type1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> type3 <span class=\"token keyword\">implements</span> interType <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Week3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">instanceOfExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    type1 myType1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    type2 myType2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    type3 myType3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">type3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType1 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType2 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType3 <span class=\"token keyword\">instanceof</span> interType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myType2 <span class=\"token keyword\">instanceof</span> type2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"assignment-operator\"><a href=\"#assignment-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>assignment(=) operator</h2>\n<p>일반적으로 대입 연산자 혹은 할당 연산자라고 부릅니다. 오른쪽의 피연산자를 왼쪽의 피연산자의 값으로 할당합니다. 따라서, 왼쪽에는 변수, 오른쪽에는 리터럴이나 리터럴이 담긴 변수가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">assignmentOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 <code class=\"language-text\">variable = literal</code>의 형태를 가집니다.</p>\n<p>이외에도 시프트 연산이 존재합니다. 다음과 같은 <code class=\"language-text\">&gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</code>와 같은 시프트 연산이 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shiftOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 00000000 00000000 00000000 00001010</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 80</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 01010000</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token comment\">// 00000000 00000000 00000000 00000101</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 작동합니다. <code class=\"language-text\">&gt;&gt;</code>와 <code class=\"language-text\">&gt;&gt;&gt;</code>의 차이는 오른쪽으로 비트 이동시, 왼쪽에 추가로 넣는 값에 MSB값으로 채우는지 0으로 채우는지의 차이입니다.</p>\n<p><code class=\"language-text\">&gt;&gt;</code>의 경우는 MSB로 부족한 비트값을 채우고, <code class=\"language-text\">&gt;&gt;&gt;</code>은 0으로 부족한 값을 채웁니다.</p>\n<br/>\n<h2 id=\"화살표--연산자\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C--%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>화살표(->) 연산자</h2>\n<p>자바에 람다가 도입하면서 등장하였습니다. 자바 람다에 대해서는 <a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">java lambda</a> 글을 참고하면 됩니다.</p>\n<p>해당 글을 간략하게 정리하자면 화살표 연산자는 <code class=\"language-text\">() -&gt; {}</code> 의 형태를 가지고 있으며, 매개변수를 받아, 메소드(함수)를 실행합니다.</p>\n<br/>\n<h2 id=\"3항-연산자\"><a href=\"#3%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3항 연산자</h2>\n<p>다음과 같은 형태를 지니고 있습니다.이 연산자를 통해서 코드를 짧게 할 수 있습니다.</p>\n<p><code class=\"language-text\">(조건) ? (조건이 참일 시, 실행) : (조건이 거짓일 시, 실행)</code></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">binomialOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"okay\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"okay\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 나타낼 수 있습니다.</p>\n<br/>\n<h2 id=\"연산자-우선-순위\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>연산자 우선 순위</h2>\n<p>연산자의 우선 순위는 다음과 같습니다. 해당 우선순위가 앞에 있을수록 먼저 실행됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>우선순위</th>\n<th>연산자</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code class=\"language-text\">(), []</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code class=\"language-text\">!, ~, ++, --</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code class=\"language-text\">*, /, %</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code class=\"language-text\">+, -</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code class=\"language-text\">&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code class=\"language-text\">&lt;, &lt;=, &gt;, &gt;=</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code class=\"language-text\">=, !=</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code class=\"language-text\">&amp;</code></td>\n</tr>\n<tr>\n<td>9</td>\n<td><code class=\"language-text\">^</code></td>\n</tr>\n<tr>\n<td>10</td>\n<td><code class=\"language-text\">|</code></td>\n</tr>\n<tr>\n<td>11</td>\n<td><code class=\"language-text\">&amp;&amp;</code></td>\n</tr>\n<tr>\n<td>12</td>\n<td><code class=\"language-text\">||</code></td>\n</tr>\n<tr>\n<td>13</td>\n<td><code class=\"language-text\">?:</code></td>\n</tr>\n<tr>\n<td>14</td>\n<td><code class=\"language-text\">=, +=, -=, *=, /=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, ~=</code></td>\n</tr>\n</tbody>\n</table>\n<p>다음과 같은 우선순위를 가지며, 일반적으로 괄호를 잘 쓰는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"java-13-switch-연산자\"><a href=\"#java-13-switch-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 13. switch 연산자</h2>\n<p>switch 문법의 가독성과 실행 속도를 향상 시키기 위해 있는 문법입니다. 자바 13에서의 switch 는 statement가 아닌 operator에 더 가깝고, 이미 처리된 결과를 통해서 해당 연산을 수행합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchOperator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">swtichExample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"c\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Document.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Document.html</a></li>\n<li><a href=\"https://blog.naver.com/hsm622/222150928707\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/hsm622/222150928707</a></li>\n<li><a href=\"https://nipafx.dev/java-13-switch-expressions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nipafx.dev/java-13-switch-expressions/</a></li>\n</ul>\n"}},{"node":{"title":"[Java] 데이터 타입, 변수, 배열","path":"/02-java-study/","date":"31. December 2020","timeToRead":5,"description":"자바 데이터 타입, 변수, 배열을 사용하는 방법을 익힙니다.","content":"<h1 id=\"java-package\"><a href=\"#java-package\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Package</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 2주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>프리미티브 타입 종류와 값의 범위 그리고 기본 값</li>\n<li>프리미티브 타입과 레퍼런스 타입</li>\n<li>리터럴</li>\n<li>변수 선언 및 초기화하는 방법</li>\n<li>변수의 스코프와 라이프타임</li>\n<li>타입 변환, 캐스팅 그리고 타입 프로모션</li>\n<li>1차 및 2차 배열 선언하기</li>\n<li>타입 추론, var</li>\n</ul>\n<br/>\n<h2 id=\"프리미티브-타입-종류와-값의-범위-그리고-기본-값\"><a href=\"#%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85-%EC%A2%85%EB%A5%98%EC%99%80-%EA%B0%92%EC%9D%98-%EB%B2%94%EC%9C%84-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B8%B0%EB%B3%B8-%EA%B0%92\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프리미티브 타입 종류와 값의 범위 그리고 기본 값</h2>\n<p>프리미티브 타입은 <strong>기본 타입</strong>을 의미합니다.</p>\n<p>자바의 기본 타입은 8종류입니다.</p>\n<table>\n<thead>\n<tr>\n<th>타입 종류</th>\n<th>메모리 크기</th>\n<th>값 범위</th>\n<th>기본 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>1byte</td>\n<td>-128 ~ 127</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>1byte</td>\n<td>-32,768 ~ 32,767</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>2byte</td>\n<td>-2,147,483,648 ~ 2,147,483,647</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4byte</td>\n<td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>8byte</td>\n<td>(3.4 X 10^-38) ~ (3.4 X 10^38)</td>\n<td>0.0F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>4byte</td>\n<td>(1.7 X 10^-308) ~ (1.7 X 10^308)</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>char</td>\n<td>8byte</td>\n<td>0 ~ 65,535</td>\n<td>'\\u0000'</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>2byte</td>\n<td>true/false</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"프리미티브-타입과-레퍼런스-타입\"><a href=\"#%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85%EA%B3%BC-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4-%ED%83%80%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프리미티브 타입과 레퍼런스 타입</h2>\n<h3 id=\"primitive-type\"><a href=\"#primitive-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Primitive type</h3>\n<ul>\n<li>기본 타입</li>\n<li>byte, short, signed/unsigned int, signed/unsigned long, float, double, boolean, char</li>\n<li>not object</li>\n<li><strong>값을 저장</strong>합니다</li>\n</ul>\n<h3 id=\"reference-type\"><a href=\"#reference-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference type</h3>\n<ul>\n<li>참조 타입</li>\n<li>class, interface, enum, array, String type</li>\n<li><strong>주소를 저장</strong>합니다.</li>\n</ul>\n<br/>\n<h2 id=\"리터럴\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>리터럴</h2>\n<ul>\n<li><strong>데이터</strong>를 의미합니다.</li>\n<li>변수의 값이 변하지 않습니다.</li>\n</ul>\n<p>다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> alphabet <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"변수-선언-및-초기화하는-방법\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%EB%B0%8F-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변수 선언 및 초기화하는 방법</h2>\n<p>일반적으로 초기화하는 방법으로 2가지 방법이 있습니다.</p>\n<h3 id=\"1-변수-선언-후-이후에-초기화\"><a href=\"#1-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%ED%9B%84-%EC%9D%B4%ED%9B%84%EC%97%90-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 변수 선언 후 이후에 초기화</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output : 1</span></code></pre>\n<h3 id=\"2-변수-선언과-동시에-초기화\"><a href=\"#2-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EA%B3%BC-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 변수 선언과 동시에 초기화</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output : 2</span></code></pre>\n<br/>\n<h2 id=\"변수의-스코프와-라이프타임\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84%EC%99%80-%EB%9D%BC%EC%9D%B4%ED%94%84%ED%83%80%EC%9E%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변수의 스코프와 라이프타임</h2>\n<p>프로그램에서 사용되는 변수들은 사용 가능한 범위를 가집니다. 그 범위를 <strong>변수의 스코프</strong>라고 합니다. 변수가 선언된 블럭이 그 변수의 사용 범위입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VarScopeExam</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> globalValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">localScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> localValue <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>globalValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 전체 범위</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// localScope 범위</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// localScope 범위</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"타입-변환-캐스팅-그리고-타입-프로모션\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98-%EC%BA%90%EC%8A%A4%ED%8C%85-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%ED%83%80%EC%9E%85-%ED%94%84%EB%A1%9C%EB%AA%A8%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입 변환, 캐스팅 그리고 타입 프로모션</h2>\n<p>타입 변환은 <strong>하나의 타입을 다른 타입으로 바꾸는 것을 의미</strong>합니다.</p>\n<h3 id=\"primitive-type-1\"><a href=\"#primitive-type-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Primitive type</h3>\n<ul>\n<li>\n<p>Widening type cast : 더 넓은 타입으로 형을 변환합니다.</p>\n<ul>\n<li>ex. int to long, byte to short...</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> value2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<p>Narrow type case : 더 좁은 타입으로의 형을 변환합니다.</p>\n<ul>\n<li>값이 손실될 수 있습니다.</li>\n<li>ex. long to int, short to byte...</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> value <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> value2 <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"reference-type-1\"><a href=\"#reference-type-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reference type</h3>\n<ul>\n<li>Inheritance 관계에서만 가능</li>\n<li>\n<p>Upcast : subclass -> superclass</p>\n<ul>\n<li>모든 subclass는 superclass의 컨텐츠를 가지고 있으므로, superclass 로의 casting이 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>Downcase : superclass -> subclass</p>\n<ul>\n<li>모든 superclass는 subclass의 컨텐츠를 가지고 있지 않을 수 도 있습니다. 그래서 오류가 발생할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"1차-및-2차-배열-선언하기\"><a href=\"#1%EC%B0%A8-%EB%B0%8F-2%EC%B0%A8-%EB%B0%B0%EC%97%B4-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1차 및 2차 배열 선언하기</h2>\n<p>배열 길이를 초과하게 되면, ArrayIndexOutOfBounds 예외가 발생합니다.</p>\n<h3 id=\"1차-배열\"><a href=\"#1%EC%B0%A8-%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1차 배열</h3>\n<ul>\n<li><code class=\"language-text\">타입[] 배열이름 = new 타입[배열길이];</code>의 형태를 가지고 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nnumber<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// number = { 1, 2, 3};</span></code></pre>\n<h3 id=\"2차-배열\"><a href=\"#2%EC%B0%A8-%EB%B0%B0%EC%97%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2차 배열</h3>\n<ul>\n<li><code class=\"language-text\">타입[][] 배열이름 = new 타입[열 길이][행 길이];</code>의 형태를 가지고 있습니다.</li>\n<li>2차원 배열은 배열 요소로 1차원 배열을 가지는 배열입니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// arr</span>\n<span class=\"token comment\">// {  0,  1,  2 }</span>\n<span class=\"token comment\">// { 10, 11, 12 }</span></code></pre>\n<br/>\n<h2 id=\"타입-추론-var\"><a href=\"#%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0-var\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타입 추론, var</h2>\n<p><strong>타입 추론</strong>은 <strong>변수 타입을 명시하지 않고 컴파일러가 데이터 타입이 무엇인지 추론한다는 것을 의미</strong>합니다.</p>\n<p>var</p>\n<ul>\n<li>지역 변수에서만 사용 가능합니다.</li>\n<li>선언과 동시에 반드시 초기화를 해야합니다.</li>\n<li>null 초기화하면 작동하지 않습니다.</li>\n<li>람다 표현식에는 var을 사용할 수 없습니다.</li>\n<li>타입이 없어서 배열에 초기값을 넘겨도 작동하지 않습니다.</li>\n</ul>\n<p>예제코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.naver.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/generics/methods.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/tutorial/java/generics/methods.html</a></li>\n<li><a href=\"https://www.baeldung.com/java-type-erasure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-type-erasure</a></li>\n<li><a href=\"https://www.baeldung.com/java-10-local-variable-type-inference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-10-local-variable-type-inference</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Package.","path":"/07-java-study/","date":"30. December 2020","timeToRead":7,"description":"Package에 대해 정리합니다.","content":"<h1 id=\"java-package\"><a href=\"#java-package\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Package</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다. 아래는 7주차 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>package 키워드</li>\n<li>import 키워드</li>\n<li>클래스패스</li>\n<li>CLASSPATH 환경변수</li>\n<li>-classpath 옵션</li>\n<li>접근지시자</li>\n</ul>\n<br/>\n<h2 id=\"package란\"><a href=\"#package%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Package란.</h2>\n<h3 id=\"java-package란\"><a href=\"#java-package%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Package란?</h3>\n<p>자바의 패키지란 <strong>비슷한 성격의 클래스를 모아서 만든 자바의 디렉토리</strong>입니다.</p>\n<p>자바에서는 다수의 클래스를 정의하기 때문에 애플리케이션에서 클래스를 정리할 필요가 있습니다. 그래서 이를 정리하기 위해 <strong>패키지</strong>를 사용합니다.</p>\n<p>패키지는 다음과 같은 특성을 가집니다.</p>\n<ul>\n<li>자바는 패키의 가장 상위 디렉토리에서 실행한다는 약속이 있습니다.</li>\n<li>소스 코드 맨 첫 줄에 있어야하고, 패키지 선언은 소스 코드에 단 하나만 있어야합니다.</li>\n<li>패키지 이름과 위치한 폴더는 동일 해야합니다.</li>\n<li>패키지 이름은 'java'로 시작하면 안됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PackageExample</span> <span class=\"token punctuation\">{</span>\n\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printPackage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is Package\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"package name : package week7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드에서 package week7이 자바의 패키지입니다.</p>\n<h3 id=\"package-이름-규칙\"><a href=\"#package-%EC%9D%B4%EB%A6%84-%EA%B7%9C%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Package 이름 규칙</h3>\n<ul>\n<li>java 패키지 이름은 모두 소문자로 구성되어 있습니다.</li>\n<li>자바의 예약어를 사용하면 안됩니다.</li>\n<li>\n<p>다음과 같은 시작 패키지 규칙이 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">java</code> : 자바 기본 패키지 개발</li>\n<li><code class=\"language-text\">javax</code> : 자바 확장 패키지 개발</li>\n<li><code class=\"language-text\">org</code> : 오픈소스 패키지</li>\n<li><code class=\"language-text\">com</code> : 회사 패키지</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>FQCN</p>\n</blockquote>\n<p><strong>FQCN</strong>이란, Fully Qualified Class Name의 약자입니다.</p>\n<p>즉, String의 클래스 패키지는 <code class=\"language-text\">java.lang</code>이고 FQCN은 <code class=\"language-text\">java.lang</code>이며 FQCN은 <code class=\"language-text\">java.lang.String</code>이 됩니다.</p>\n<blockquote>\n<p>JAR</p>\n</blockquote>\n<ul>\n<li>Java ARchive의 약자입니다.</li>\n<li>클래스 파일을 하나로 묶기위해 필요한 명령이입니다.</li>\n<li>JAR을 만드는 클래스 파일을 효과적으로 배포하기위해 여러 클래스 파일들을 하나로 묶어 단일 파일로 만드는 확장자(.jar)이자 이를 가능하게하는 명령어(jar.exe)입니다.</li>\n<li>여러 옵션을 사용할 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"import란\"><a href=\"#import%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Import란.</h2>\n<p>다음과 같은 구성을 가지고 있습니다.</p>\n<p>아래는 예제 코드입니다. (아시아 현재 시간을 가져오는 예제 코드)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeZone</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImportExample</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TimeZone</span> time<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DateFormat</span> df <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 현재 아시아 시간 가져오기</span>\n        time <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeZone</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTimeZone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        df<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeZone</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %n %s %n\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드에서 확인할 수 있듯이, <code class=\"language-text\">import</code>는 <code class=\"language-text\">import 패키지명.클래스명</code>의 구조를 가집니다. 일반적으로 다른 패키지명에 있는 클래스를 찾지 못할 때 사용합니다.</p>\n<p>여러가지 팁을 가지는데.</p>\n<ul>\n<li><code class=\"language-text\">import 패키지명.*</code> 을 사용한다면 해당 패키지의 다수 클래스를 <code class=\"language-text\">import</code> 할 수도 있습니다.</li>\n<li><code class=\"language-text\">command(mac)/alt(window) + Enter</code>시, 바로 import 기능을 사용할 수 있습니다. (Intelij 기능)</li>\n<li><code class=\"language-text\">import static</code>을 사용하는 경우, static한 변수나 메소드를 사용할 때 용이합니다.</li>\n<li><code class=\"language-text\">java.lang</code> 패키지나 같은 패키지의 경우에는 <code class=\"language-text\">import</code>를 하지 않아도 됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"classpath에-대해서\"><a href=\"#classpath%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CLASSPATH에 대해서.</h2>\n<p><strong>클래스를 찾기 위한 경로</strong>를 의미합니다.</p>\n<p>JVM이 프로그램을 실행할 때, 클래스 파일을 찾기 위해서 클래스 패스를 이용합니다. 이를 다르게 말하자면 JVM은 클래스 패스의 경로를 확인해서 라이브러리의 위치를 참조합니다.</p>\n<p>이를 좀 더 자세하게 설명하기 위해서는 자바 프로그램의 실행과정을 아는 것이 중요한데, 이를 간단하게 순서를 정리하자면.</p>\n<ol>\n<li>프로그램이 실행시, JVM은 프로그램이 필요로 하는 메모리를 할당받습니다.</li>\n<li>자바 컴파일러가 자바 코드를 바이트 코드로 변환합니다.</li>\n<li>클래스 로더를 통해 클래스 파일을 JVM에 올려놓습니다.</li>\n<li>올려진 클래스 파일을 Execution Engine을 통해 해석합니다.</li>\n<li>해석된 바이트 코드는 Runtime Data Area에서 수행됩니다.</li>\n</ol>\n<p>좀 더 자세하게 알고 싶으면 <a href=\"https://Azderica.github.io/00-java-jvm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 게시글</a>을 참고하면 좋습니다.</p>\n<p>다음 자바 프로그래밍 과정 중에서 2번이 끝나고, 소스 코드가 바이트 코드가 되었을 때, java runtime으로 .class 파일에 있는 명령을 하기 위해서는 클래스 패스로 파일을 찾을 수 있어야합니다.</p>\n<p>일반적으로 이 클래스 패스를 찾는 방법은 크게 2가지 방법이 있습니다.</p>\n<h3 id=\"classpath-환경-변수\"><a href=\"#classpath-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CLASSPATH 환경 변수.</h3>\n<p>이 방법은 컴퓨터 시스템 변수 설정을 통해서 지정합니다.</p>\n<p><code class=\"language-text\">CLASSPATH=.;C:\\Program Files\\Java\\jdk-10.0.1\\lib\\tools.jar</code></p>\n<p>일반적으로 윈도우에서 자바를 설정할 때, 아래의 사진을 많이 보게됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103354435-dfa90500-4aee-11eb-8bc4-eb0794fc146b.png\" alt=\"class-path-1\"></p>\n<h3 id=\"-classpath-옵션\"><a href=\"#-classpath-%EC%98%B5%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>-classpath 옵션.</h3>\n<p><code class=\"language-text\">javac &lt;options&gt; &lt;source files&gt;</code>와 같은 형식을 가집니다. 이 방법은 자바 컴파일러가 컴파일 시, 필요로 하는 참조 클래스 파일을 찾기 위해 경로를 지정해주는 옵션입니다.</p>\n<p>예를 들자면 다음과 같은 명령어로 진행합니다. (<code class=\"language-text\">;</code> 으로 구분 가능합니다.)</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">javac -classpath .;C:\\Java\\Example;C:\\Java\\Test.java</code></pre>\n<br/>\n<h2 id=\"접근-지시자\"><a href=\"#%EC%A0%91%EA%B7%BC-%EC%A7%80%EC%8B%9C%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>접근 지시자.</h2>\n<p>크게 4가지로 구성됩니다. (public, protected, default, private)</p>\n<table>\n<thead>\n<tr>\n<th>접근 지시자</th>\n<th>클래스 내부</th>\n<th>동일 패키지</th>\n<th>상속받은 클래스</th>\n<th>import한 클래스</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>o</td>\n<td>o</td>\n<td>o</td>\n<td>o</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>o</td>\n<td>o</td>\n<td>o</td>\n<td>x</td>\n</tr>\n<tr>\n<td>default</td>\n<td>o</td>\n<td>o</td>\n<td>x</td>\n<td>x</td>\n</tr>\n<tr>\n<td>private</td>\n<td>o</td>\n<td>x</td>\n<td>x</td>\n<td>x</td>\n</tr>\n</tbody>\n</table>\n<p>다음과 같은 특징을 가집니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://kils-log-of-develop.tistory.com/430\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kils-log-of-develop.tistory.com/430</a></li>\n<li><a href=\"https://blog.opid.kr/62\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.opid.kr/62</a></li>\n<li><a href=\"https://effectivesquid.tistory.com/entry/%EC%9E%90%EB%B0%94-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%8C%A8%EC%8A%A4classpath%EB%9E%80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://effectivesquid.tistory.com/entry/자바-클래스패스classpath란</a></li>\n<li><a href=\"http://blog.naver.com/PostView.nhn?blogId=minsuk0123&#x26;logNo=44865799\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.naver.com/PostView.nhn?blogId=minsuk0123&#x26;logNo=44865799</a></li>\n<li><a href=\"https://hyoje420.tistory.com/7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hyoje420.tistory.com/7</a></li>\n</ul>\n"}},{"node":{"title":"[Java] JVM이란.","path":"/01-java-study/","date":"29. December 2020","timeToRead":9,"description":"JVM 대해 정리합니다.","content":"<h1 id=\"jvmjava-vitual-machine\"><a href=\"#jvmjava-vitual-machine\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM(Java Vitual Machine)</h1>\n<p>최근 백기선님의 자바 스터디를 알게되어서, 한번 자바에 대한 개념을 스터디를 통해서 잡고 가면 좋을 듯해서 글에 대해서 정리해보겠습니다.</p>\n<br/>\n<h2 id=\"java의-특징\"><a href=\"#java%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java의 특징.</h2>\n<p>기본적으로 자바 프로그램은 JVM위에서 동작합니다. 이러한 JVM위에 동작하기 위해서는 자바 바이트 코드가 필요합니다. 이러한 자바 바이트코드는 개발자에 의해서 작성된 자바 소스코드(<code class=\"language-text\">*.java</code>)가 자바 컴파일러(<code class=\"language-text\">javac</code>)로 인해 변환된 코드(<code class=\"language-text\">*.class</code>)를 의미합니다.</p>\n<h3 id=\"java-프로그램의-특징\"><a href=\"#java-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 프로그램의 특징</h3>\n<ul>\n<li>JVM은 Bytecode를 구동하고 있는 OS에 맞춰 Binary code로 해석됩니다. 그렇기 때문에 <strong>OS에 독립적</strong>입니다.</li>\n<li>Bytecode는 클래스 단위(<code class=\"language-text\">*.class</code>)로 생성되기 때문에 프로그램의 수정이 일어나도 전체 소스코드를 컴파일할 필요는 없습니다.</li>\n<li>JVM은 OS로부터 메모리를 할당받아 스스로 관리합니다. 대표적으로 Garbage Collection이 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"jvm이란\"><a href=\"#jvm%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM이란?</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103287755-ac02a800-4a26-11eb-9ed9-a44972821597.png\" alt=\"JVM\"></p>\n<p>JVM이란 Java Virtual Machine의 약자입니다. 이를 번역하면 자바 가상머신입니다. (프로그램을 실행하기 위해 물리적 머신과 유사한 머신을 소프트에어로 구현하였습니다.)</p>\n<p>JVM의 역할은 자바 Application을 클래스 로더를 통해 읽어서 자바 Application을 클래서 로더를 통해 읽어서 자바 API와 함께 실행하는 것입니다. 그리고 JVM은 <strong>Java와 OS사이에서 중개자 역할을 수행</strong>하며 Java가 OS에 구애받지 않고 <strong>재사용 가능</strong>하게 해줍니다.</p>\n<h3 id=\"jvm의-기능\"><a href=\"#jvm%EC%9D%98-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 기능</h3>\n<ul>\n<li>JAVA가 OS에 상관없이 동작할 수 있도록 중계자 역할을 합니다.</li>\n<li>GC(Garabage Collection)등의 기능을 제공합니다.</li>\n</ul>\n<h3 id=\"jvm의-용도\"><a href=\"#jvm%EC%9D%98-%EC%9A%A9%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 용도</h3>\n<ul>\n<li>자바 프로그램이 어느 기기, 또는 어느 운영체제 상에서도 실행될 수 있게 합니다.</li>\n<li>프로그램 메모리를 관리하고 최적화합니다.</li>\n</ul>\n<h3 id=\"바이트-코드란\"><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8-%EC%BD%94%EB%93%9C%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>바이트 코드란?</h3>\n<ul>\n<li>JVM이 이해할 수 있는 형태의 언어.</li>\n</ul>\n<br/>\n<h2 id=\"jvm의-구성과-구동과정\"><a href=\"#jvm%EC%9D%98-%EA%B5%AC%EC%84%B1%EA%B3%BC-%EA%B5%AC%EB%8F%99%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JVM의 구성과 구동과정.</h2>\n<p>기존의 자바는 C++ 처럼 빠르지 못하다는 비평을 받았으나, 다양한 알고리즘과 접근방식이 제안되어 개선되고 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103288668-c0e03b00-4a28-11eb-8e0f-554cda0e3bc5.png\" alt=\"JVM의 구동\"></p>\n<p>JVM의 구동은 다음과 같이 진행됩니다. 이를 하나씩 설명해보면 다음과 같습니다.</p>\n<h3 id=\"class-loader클래스-로더\"><a href=\"#class-loader%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A1%9C%EB%8D%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Class Loader(클래스 로더)</h3>\n<ul>\n<li><strong>JVM내로 클래스(.class파일)을 로드하고 링크를 통해 배치하는 작업을 수행하는 모듈</strong>입니다.</li>\n<li>Runtime 시 동적으로 클래스를 로드합니다.</li>\n<li>jar 파일 내에 저장된 클래스를 JVM 위에 탑재하고 사용하지 않는 클래스들은 메모리에서 삭제합니다.</li>\n</ul>\n<h3 id=\"execution-engine실행-엔진\"><a href=\"#execution-engine%EC%8B%A4%ED%96%89-%EC%97%94%EC%A7%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Execution Engine(실행 엔진)</h3>\n<ul>\n<li>클래스 로더에서 <strong>분석된 클래스 파일의 데이터를 저장하고 실행 도중에 필요한 데이터를 저장하고 실행 도중에 필요한 데이터를 실행</strong>합니다.</li>\n</ul>\n<h3 id=\"runtime-data-area\"><a href=\"#runtime-data-area\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Runtime Data Area</h3>\n<ul>\n<li>JVM의 메모리 영역입니다.</li>\n<li>\n<p>크게 4가지로 구분할 수 있습니다.</p>\n<ul>\n<li>\n<p>클래스 영역</p>\n<ul>\n<li><strong>실행에 필요한 클래스를 로드해서 저장</strong>합니다.</li>\n<li>내부에서 메소드 영역과 상수 영역으로 나눠집니다.</li>\n</ul>\n</li>\n<li>\n<p>가비지 컬렉션 힙 영역</p>\n<ul>\n<li><strong>GC에 의해 관리되는 영역</strong>입니다.</li>\n<li>동적 메모리 할당 영역이며, 일반적으로 <code class=\"language-text\">new</code>를 사용해 객체를 선언할 때 할당되는 영역입니다.</li>\n</ul>\n</li>\n<li>\n<p>런타임 스택 영역</p>\n<ul>\n<li>프로그램 <strong>실행 중 발생하는 메소드 호출과 복귀에 대한 정보를 저장</strong>합니다.</li>\n</ul>\n</li>\n<li>\n<p>네이티브 메소드 스택 영역</p>\n<ul>\n<li>자바는 하드웨어를 직접 제어하는 기능이 없어서 C언어와 같은 다른 언어의 기능을 빌려 사용합니다.</li>\n<li>이때 사용하는 기술이 JNI 기술이며 네이티브 메소드들을 바이트 코드로 변환되고 사용되고 기록됩니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"garbage-collector\"><a href=\"#garbage-collector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Garbage Collector</h3>\n<ul>\n<li>비지 컬렉션이란 프로세스를 통해 메모리를 관리하며, 이 <strong>가비지 컬렉션은 자바 프로그램에서 사용되지 않는 메모리를 지속적으로 찾아내서 제거</strong>합니다.</li>\n<li>과거의 가비지 컬렉션에 비해 알고리즘과 접근방식의 변경, 최적화 등으로 인해 개선되었습니다.</li>\n</ul>\n<br/>\n<h2 id=\"컴파일러와-인터프리터\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>컴파일러와 인터프리터</h2>\n<p>자바에 대해서 좀 더 잘 알기 위해서는 인터프리터에 대해 개념을 아는 것이 중요합니다.</p>\n<p>컴파일러, 인터프리터 둘 다 사람이 보는 고레벨 언어로 작성된 프로그래밍 언어(C++, Java 등등)를 기계어로 변환하는 것은 같으나 그 과정에 있어서 차이가 존재합니다. 컴파일러는 전체소스코드를 보고 명령어를 수집하고 재구성하는 반면 인터프리터는 소스코드의 각 행을 연속적으로 분석하며 실행하는 구조를 가지고 있습니다.</p>\n<h3 id=\"인터프리터의-특성\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0%EC%9D%98-%ED%8A%B9%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인터프리터의 특성</h3>\n<p>인터프리터의 특성을 좀 더 자세하게 정리하면 다음과 같습니다.</p>\n<ul>\n<li>고레벨 언어를 중간 코드로 변환하고 이를 각 행마다 실행합니다.</li>\n<li>일반적으로 컴파일러가 각 행마다 실행하는 특성을 가진 인터프리터보다는 실행시간이 빠릅니다다.</li>\n<li>컴파일러는 전체 소스코드를 변환 한 뒤 에러를 보고하지만 인터프리터는 각 행마다 실행하는 도중 에러가 보고되면 이후의 코드는 확인하지 않습니다.</li>\n<li>\n<p>인터프리터 언어로는 다음과 같이 있습니다. <code class=\"language-text\">ex) 파이썬</code></p>\n<ul>\n<li>컴파일 언어 <code class=\"language-text\">ex) c c++</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"자바의-컴파일러와-인터프리터\"><a href=\"#%EC%9E%90%EB%B0%94%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바의 컴파일러와 인터프리터</h3>\n<p>자바는 특별하게 컴파일과 인터프리터를 병행합니다.</p>\n<ul>\n<li><strong>자바 컴파일러</strong>는 .java 파일을 javac(java compiler)가 바이트코드로 쓰여진 .class 파일로 변환한다. 바이트코드는 JVM을 위한 언어입니다.</li>\n<li><strong>자바 인터프리터</strong>는 자바 컴파일러에 의해 변환된 클래스파일내의 바이트코드를 특정 환경의 기계에서 실행될 수 있도록 변환합니다.</li>\n</ul>\n<h3 id=\"jit-왜자바는-컴파일과-인터프리트를-병행하는가\"><a href=\"#jit-%EC%99%9C%EC%9E%90%EB%B0%94%EB%8A%94-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%8A%B8%EB%A5%BC-%EB%B3%91%ED%96%89%ED%95%98%EB%8A%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JIT, 왜자바는 컴파일과 인터프리트를 병행하는가?</h3>\n<p>JIT 컴파일러는 Just In Time 컴파일러의 약자로, 인터프린터 방식과 컴파일러 방식을 혼합한 방식으로 정리할 수 있습니다. 실행 시점에는 인터프린터 형식으로 기계어 코드를 생성하고, 코드를 캐싱합니다.</p>\n<p>다음과 같은 특징을 가집니다.</p>\n<ul>\n<li>컴파일러의 경우 프로그램이 작성된 기계상에서 실행할 때 매우 효율적입니다.</li>\n<li>하지만 인터프리터의 경우는 플랫폼에 종속 되지 않습니다.</li>\n<li>자바 바이트코드는 컴퓨터와 프로그램 사이에 별도의 버퍼 역할을 수행합니다.(보안적 장점 + 성능적 장점)</li>\n</ul>\n<br/>\n<h2 id=\"jdk-vs-jre\"><a href=\"#jdk-vs-jre\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JDK VS JRE</h2>\n<ul>\n<li>JDK : Java Development Kit (자바 개발자 도구)</li>\n<li>JRE : Java Runtime Environment (자바 실행 환경)</li>\n</ul>\n<p>자바 언어로 프로그램을 개발하기 위해서는 JDK를 설치하면 되고, 자바 언어로 작성된 프로그램을 실행하기 위해서는 JRE을 설치하면 됩니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 자바의 기초, 그 처음 단계인 JVM에 대해서 정리했습니다. 잘못된 부분 있으면 알려주시면 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://asfirstalways.tistory.com/158\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://asfirstalways.tistory.com/158</a></li>\n<li><a href=\"https://minwan1.github.io/2018/06/06/2018-06-06-Java,JVM/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://minwan1.github.io/2018/06/06/2018-06-06-Java,JVM/</a></li>\n<li><a href=\"https://sesok808.tistory.com/32\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sesok808.tistory.com/32</a></li>\n<li><a href=\"https://preamtree.tistory.com/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://preamtree.tistory.com/2</a></li>\n<li><a href=\"http://www.itworld.co.kr/news/110837\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.itworld.co.kr/news/110837</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Optional 2","path":"/01-java-optional/","date":"17. December 2020","timeToRead":7,"description":"Java Optional 을 좀 더 잘 사용하기","content":"<h1 id=\"java-optional-활용-편\"><a href=\"#java-optional-%ED%99%9C%EC%9A%A9-%ED%8E%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional 활용 편</h1>\n<p>지난 시간에 자바 Optional에 대해 작성했습니다. 또한 자바 Stream이나 Lambda에 대해서도 이야기를 하였습니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/00-java-optional/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Optional</a></li>\n<li><a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></li>\n<li><a href=\"https://Azderica.github.io/00-java-stream/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Stream</a></li>\n</ul>\n<p>이를 기반으로 좀 더 Optional을 더 잘 쓰는 방법에 대해 이야기해볼려고합니다.</p>\n<br/>\n<h2 id=\"optional과-stream\"><a href=\"#optional%EA%B3%BC-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional과 Stream</h2>\n<p>Optional을 제대로 사용하기 위해서는 Stream을 빼놓을 수는 없습니다. 일부 다른 표현으로는 <strong>Optional</strong>을 <strong>최대 1개의 원소를 가진 특별한 Stream</strong>이라고 표현하기도 합니다.</p>\n<p>Optional 클래스와 Stream 클래스 간에 직접적인 상관관계는 없지만 크게 유사한 부분을 가지고 있습니다. 지난시간에 이야기한 Stream이 가지고 있는 <code class=\"language-text\">map()</code>, <code class=\"language-text\">flatMap()</code>, <code class=\"language-text\">filter()</code> 모두 Optional도 가지고 있습니다.</p>\n<h3 id=\"map-사용하기\"><a href=\"#map-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>map() 사용하기</h3>\n<p>해당 코드는 <strong>\"주문을 한 회원이 살고 있는 도시를 반환한다\"</strong> 라는 예제입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCityOfMemberFromOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token operator\">::</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Address</span><span class=\"token operator\">::</span><span class=\"token function\">getCity</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음 코드는 기존의 NPE(Null Pointer Exception) 방어 패턴에 비해 훨씬 간결하고 명확한 코드를 확인할 수 있습니다.</p>\n<p>이를 좀 더 상세하게 설명한다면 다음과 같은 의미를 가집니다.</p>\n<ul>\n<li><code class=\"language-text\">ofNullable</code> 을 통해 Order 객체를 Optional로 감쌌으며 객체가 null인 경우를 위해 <code class=\"language-text\">of()</code> 대신에 <code class=\"language-text\">ofNullabe</code>을 사용하였습니다.</li>\n<li><code class=\"language-text\">map()</code> 메소드를 3번 호출하면서 Optional 객체는 <code class=\"language-text\">Optional&lt;Order&gt;</code> 에서 <code class=\"language-text\">Optional&lt;Member&gt;</code>, <code class=\"language-text\">Optional&lt;Address&gt;</code>, <code class=\"language-text\">Optional&lt;String&gt;</code>으로 객체가 3번 변화하였습니다.</li>\n<li><code class=\"language-text\">orElse()</code>를 통해 <code class=\"language-text\">Optional</code>이 비어있는 경우, 디폴트 값으로 \"Seoul\"을 설정하였습니다.</li>\n</ul>\n<p>해당 코드는 <code class=\"language-text\">null-safe</code>한 아름다운 코드입니다.</p>\n<h3 id=\"filter-사용하기\"><a href=\"#filter-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>filter() 사용하기</h3>\n<p><strong>주어진 시간내에 생성된 주문을 한 경우, 회원 정보를 얻는 기능</strong>을 구현한 코드가 예시로 있습니다.</p>\n<p>기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span> <span class=\"token function\">getMemberIfOrderWithin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>order <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> min <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 <code class=\"language-text\">filter()</code>을 통해 읽기 편하고 아름다운 코드를 만들 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMemberIdOrderWithin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullabe</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">-></span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> min <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 코드를 수정할 수 있습니다.</p>\n<p>다만 <code class=\"language-text\">filter()</code> 의 경우, <code class=\"language-text\">Opional</code>과 <code class=\"language-text\">Stream</code>은 약간의 차이가 있습니다. 동작 방식은 동일하지만 <code class=\"language-text\">Optional</code>의 경우에는 원소가 하나이기 때문에, <code class=\"language-text\">filter()</code> 로 넘어온 함수형 인자값이 false 인 경우에는 그 이후의 메소드는 의미없어집니다.</p>\n<br/>\n<h2 id=\"optional-활용-예시\"><a href=\"#optional-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 활용 예시</h2>\n<h3 id=\"null-반환\"><a href=\"#null-%EB%B0%98%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null 반환</h3>\n<p>다음과 같은 데이터가 있는 경우.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {1, \"Seoul\"}, {2, \"Busan\"}, {3, \"Daegu\"}</span></code></pre>\n<p><code class=\"language-text\">map</code> 인터페이스에서 <code class=\"language-text\">get()</code> 메소드 사용시 인덱스에 해당하는 값이 없으면 null을 반환합니다. 따라서 기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> city <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// return null</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> city <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> city<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null check</span></code></pre>\n<p>다만 <code class=\"language-text\">Optional</code>을 통해 <code class=\"language-text\">get()</code>을 감싸주면 null-safe한 코드가 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> maybeCity <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Optional</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> maybeCity<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// null-safe</span></code></pre>\n<p>이와 같이 아름다운 코드가 됩니다.</p>\n<h3 id=\"예외-발생\"><a href=\"#%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외 발생</h3>\n<p>마찬가지로 null 반환을 하지 않고 예외를 던지는 경우에도 <code class=\"language-text\">Optional</code>은 효과적입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cities <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Busan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Daegu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이와 같은 데이터가 있을 때, 기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> city <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\tcity <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throws exception</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ignore</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> city <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> city<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null check</span></code></pre>\n<p>이를 Optional을 통해서 수정가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAsOptional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>정적 메소드를 사용하여 null-safe하게 간단하게 코딩할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> maybeCity <span class=\"token operator\">=</span> <span class=\"token function\">getAsOptional</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Optional</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> maybeCity<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null-safe</span></code></pre>\n<br/>\n<h2 id=\"java-9의-optional-메소드\"><a href=\"#java-9%EC%9D%98-optional-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 9의 Optional 메소드</h2>\n<p>자바 9에서도 추가된 옵셔널 메소드가 있습니다.</p>\n<h3 id=\"or\"><a href=\"#or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>or</h3>\n<p>기존의 <code class=\"language-text\">.orElseGet()</code>과 유사하지만 체이닝을 통해서 우선 순위를 결정할 수 있습니다. <code class=\"language-text\">.or()</code> 연산 중 비어있으면 순차적으로 진행합니다.</p>\n<p>예제 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public Optional&lt;T> or(Supplier&lt;? extends Optional&lt;? extends T>></span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token string\">\"filter\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">empty</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"final\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'second'</span></code></pre>\n<h3 id=\"ifpresentorelse\"><a href=\"#ifpresentorelse\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ifPresentOrElse</h3>\n<p>기존의 <code class=\"language-text\">.ifPresent</code> 메소드와 비슷하지만 매개변수를 하나 더 받을 수 있습니다. <code class=\"language-text\">emptyAction</code>을 추가로 받아서 유효한 객체가 있는 경우 <code class=\"language-text\">action</code>을 실행하고 그렇지 못한 경우에는 <code class=\"language-text\">emptyAction</code>을 실행합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public void ifPresentOrElse(Consumer&lt;? super T> action, Runnable emptyAction);</span>\n\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'test'</span>\n\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'null'</span></code></pre>\n<h3 id=\"stream\"><a href=\"#stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.stream</h3>\n<p><code class=\"language-text\">.stream()</code> 메서드는 Optional 객체가 바로 스트림 객체로 전환되는 기능을 가지고 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public Stream&lt;T> stream();</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">-></span> val <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : [2, 4]</span></code></pre>\n<br/>\n<h2 id=\"java-10의-optional-메소드\"><a href=\"#java-10%EC%9D%98-optional-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 10의 Optional 메소드</h2>\n<p>자바 10에서도 하나의 메서드가 추가되었습니다.</p>\n<h3 id=\"orelsethrow\"><a href=\"#orelsethrow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>orElseThrow</h3>\n<p>매개변수가 필요없는 예외 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java 8</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchElementException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Java 10</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>이상으로 길고 길었던 Java의 Optinal, lambda, Stream에 대해 한번 정리했습니다. 스프링 개발을 하면서 좋은 코드에 대해 많은 고민이 들었습니다. 클린 코드에서 추가하는 아름다운 코드를 구성하기 위해서는 어떤식으로 코드를 구성해야할까라는 생각이 많이 들었습니다.</p>\n<p>함께 일하기 좋은 개발자 중 한명으로 코드를 보기 쉽게 짜는 사람이 있다는 이야기를 들은적이 있습니다. 저 또한 이부분을 잘 살려서 아름답고 사용자가 보기 쉬운 코드를 구성하는데 목표를 세워야겠다는 생각이 드는 시간이였습니다.</p>\n<p>부족한 점이나 잘못된 부분이 있으면 편하게 이야기주세요. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.daleseo.com/java8-optional-after/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-after/</a></li>\n<li><a href=\"https://www.daleseo.com/java8-optional-effective/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-effective/</a></li>\n<li><a href=\"https://jdm.kr/blog/234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/234</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Stream","path":"/00-java-stream/","date":"16. December 2020","timeToRead":4,"description":"Java Stream에 대해 정리합니다.","content":"<h1 id=\"java-stream\"><a href=\"#java-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Stream</h1>\n<p>지난번에 이야기한 Java8의 핵심 기능, <a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바 Optional</a>에 이어서, 오늘은 Stream에 대해서 정리합니다.</p>\n<br/>\n<h2 id=\"java-stream-정의\"><a href=\"#java-stream-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Stream 정의</h2>\n<p>Java Stream은 <strong>배열이나 컬렉션의 저장 요소를 하나씩 참조해서 람다식으로 처리할 수 있게 해주는 반복자</strong>입니다. 이전에는 Java Stream이 없었을 때는 Iterator이라는 반복자를 사용하였습니다.</p>\n<ul>\n<li>Java Iterator</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// output : 1, 2, 3</span></code></pre>\n<ul>\n<li>Java Stream</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 1, 2, 3</span></code></pre>\n<br/>\n<h2 id=\"java-stream-특징\"><a href=\"#java-stream-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Stream 특징</h2>\n<ul>\n<li>배열 또는 컬렉션 인스턴스에 함수 여러 개를 조합해서 원하는 결과를 필터링할 수 있으며 가공된 결과를 얻을 수 있습니다.</li>\n<li>람다를 통해 코드를 간결하게 표현할 수 있습니다.</li>\n<li>배열과 컬렉션을 통해 함수형으로 처리할 수 있습니다.</li>\n<li>병렬처리가 가능합니다.</li>\n</ul>\n<br/>\n<h2 id=\"java-stream-구조-및-사용법\"><a href=\"#java-stream-%EA%B5%AC%EC%A1%B0-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Stream 구조 및 사용법</h2>\n<p>스트림은 다음과 같은 절차로 사용할 수 있습니다.</p>\n<ul>\n<li>스트림 생성 : 스트림 인스턴스 생성</li>\n<li>중개 연산 : 필터링(filtering) 및 맵핑(mapping) 등으로 원하는 결과를 만들어가는 중간 과정</li>\n<li>최종 연산 : 최종적으로 결과를 만드는 작업</li>\n</ul>\n<h3 id=\"스트림-생성\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림 생성</h3>\n<ul>\n<li><strong>배열 스트림</strong> : <code class=\"language-text\">Arrays.stream()</code> 을 사용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">IntStream</span> intStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li><strong>컬렉션 스트림</strong> : 인터페이스의 default method를 사용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">streams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> parallelStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"중개-연산\"><a href=\"#%EC%A4%91%EA%B0%9C-%EC%97%B0%EC%82%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>중개 연산</h3>\n<ul>\n<li>Filter: 스트림 내 요소 중 조건에 맞는 것을 고릅니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arrary <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"melon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> arrary<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : ['apple', 'banana']</span></code></pre>\n<ul>\n<li>Map : 스트림 내 요소들이 특정 로직 수행 후 새로운 스트림을 반환합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : [2, 3, 4]</span></code></pre>\n<ul>\n<li>flatMap : 여러 스트림을 하나의 스트림으로 합칩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : [\"a1\", \"a2\", \"b1\", \"b2\", \"c1\", \"c2\"]</span></code></pre>\n<ul>\n<li>sorted : 정렬합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sortedList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오름차순</span>\n<span class=\"token comment\">// output : [1, 3, 4]</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sortedList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverseOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 내림차순</span>\n<span class=\"token comment\">// output : [4, 3, 1]</span></code></pre>\n<h3 id=\"최종-연산\"><a href=\"#%EC%B5%9C%EC%A2%85-%EC%97%B0%EC%82%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>최종 연산</h3>\n<ul>\n<li>count, min, max, sum : 갯수, 최소, 최대, 합</li>\n<li>forEach : 요소를 돌면서 실행합니다.</li>\n<li>collect : 스트림의 값들을 모을 수 있습니다. ex) <code class=\"language-text\">toMap()</code>, <code class=\"language-text\">toSet()</code>, <code class=\"language-text\">toList()</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 1 2 3 4 5</span></code></pre>\n<ul>\n<li>reduce : 누적된 값을 계산합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">OptionalInt</span> reduced <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// output : 6 (1 + 2 + 3)</span>\n\n    <span class=\"token keyword\">int</span> reducedTwoParams <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// output : 16 (10 + 1 + 2 + 3)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 간단하게 stream에 대해 알아보고 이를 사용한 예시를 사용하였습니다. 현업에서 stream과 optional, lambda식을 잘 쓰는 것은 클린 코드를 만드는데 좋은 스킬 중 하나임을 개발하면서 자주 느낍니다. 오늘 사용한 예제말고도 다른 예제는 찾아보면서 좋은 개발할 수 있으면 좋겠습니다.</p>\n<p>감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html</a></li>\n<li><a href=\"https://www.baeldung.com/java-8-streams-introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-8-streams-introduction</a></li>\n<li><a href=\"https://futurecreator.github.io/2018/08/26/java-8-streams/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://futurecreator.github.io/2018/08/26/java-8-streams/</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Lambda","path":"/00-java-lambda/","date":"15. December 2020","timeToRead":4,"description":"Java Lambda 대해 정리합니다.","content":"<h1 id=\"java-lambda\"><a href=\"#java-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h1>\n<p>Java8의 핵심 기능 중 하나는 Lambda입니다. 이 Lambda에 대해서 정리해보고 왜 쓰는지, 장점은 어떤 부분이 있는지를 정리합니다.</p>\n<br/>\n<h2 id=\"java-lambda-정의\"><a href=\"#java-lambda-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 정의</h2>\n<p>자바의 <code class=\"language-text\">Lambda</code>는 <strong>메소드를 하나의 식(Expression)으로 표현한 것</strong>입니다. 익명메소드(함수) 생성 문법이라고도 이야기 할 수 있습니다.</p>\n<p>다만 주의해야하는 부분 중 하나는 <strong>자바의 메소드는 메소드 자체로 혼자 선언하여 선언하여 쓰일 수 없습니다.</strong> 반드시 클래스 구성 멤버로 선언되어 있어야합니다. 즉, 람다식을 통해서 생성되는 것은 메소드가 아닌 해당 메소드를 가지는 객체입니다. <strong>람다식은 일반적인 객체가 아닌 인터페이스를 구현한 익명구현객체</strong>입니다.</p>\n<p>함수적 프로그래밍을 지원하기 위해서 자바 8부터 람다식을 지원하게 되었는데, 이를 통해서 기존의 코드 패턴이 많이 달라지기도 하며, 문법이 간결한 만큼 가독성면에서 큰 장점을 가집니다.</p>\n<p>조금 다른 이야기로 안드로이드 개발에서 요즘은 함수형 프로그래밍인 Kotlin이 각광을 받는데, 자바에서도 람다식을 통해 이러한 함수형 프로그래밍을 지원하는 느낌을 받을 수 있습니다.</p>\n<p>람다식의 사용법은 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>매개변수<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> 실행문 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">(매개변수, ...)</code> 는 오른쪽 중괄호 <code class=\"language-text\">{ 실행문 ... }</code> 을 실행하기 위해 필요한 값을 제공하는 역할을 합니다. 매개 변수의 이름은 자유롭게 지정이 되어 있으며 인자타입을 따로 명시하지 않아도 됩니다. <code class=\"language-text\">-&gt;</code> 기호는 매개 변수를 이용해서 해당 실행문을 실행한다고 이해하면 됩니다.</p>\n<br/>\n<h2 id=\"java-lambda-예제\"><a href=\"#java-lambda-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 예제</h2>\n<h3 id=\"함수형-인터페이스functional-interface\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4functional-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>함수형 인터페이스(functional interface)</h3>\n<p>람다 표현식을 사용할 때는 람다 표현식을 저장하기 위한 참조 변수의 타입을 결정해야합니다.</p>\n<p>일반적으로 다음과 같은 어노테이션을 사용해서 함수형 인터페이스를 명시할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span></code></pre>\n<p>이를 사용한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">// 함수형 인터페이스 선언</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 추상 메소드</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 추상 메소드</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Calc</span> minNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 추상 메소드 구현</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minNum<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// output : 3</span>\n\n                <span class=\"token class-name\">Calc</span> calcNum <span class=\"token operator\">=</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calcNum<span class=\"token punctuation\">.</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// output : 4</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 예시에서 로직이 한줄이기 때문에 구현 로직에서 <code class=\"language-text\">{ x &lt; y ? x : y }</code> 대신에 <code class=\"language-text\">x &lt; y ? x : y</code> 로 {}를 뺄수도 있고 return도 없앨 수 있습니다.</p>\n<p>추가적으로 매개변수가 하나 일때는 () 또한 삭제가 가능합니다.</p>\n<br/>\n<h2 id=\"java-lambda-장단점\"><a href=\"#java-lambda-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 장단점</h2>\n<h3 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점</h3>\n<ul>\n<li>코드를 간결하게 만들 수 있습니다.</li>\n<li>가독성이 좋아집니다.</li>\n<li>함수를 만드는 과정 없이 한번에 처리할 수 있으므로 코딩하는 시간이 줄어듭니다.</li>\n<li>병렬 프로그래밍에 유리합니다.</li>\n</ul>\n<h3 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점</h3>\n<ul>\n<li>재사용이 불가능합니다.</li>\n<li>일부 디버깅이 까다롭습니다.</li>\n<li>너무 남발하면 코드가 지저분해집니다.</li>\n<li>재귀로 만드는 경우에는 성능적 이슈가 있을 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 간단하게 Lambda에 대해 정리해보았습니다. 다음에는 자바의 stream에 대해서 알아보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://coding-factory.tistory.com/265\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://coding-factory.tistory.com/265</a></li>\n<li><a href=\"http://www.tcpschool.com/java/java_lambda_concept\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_lambda_concept</a></li>\n<li><a href=\"https://sehun-kim.github.io/sehun/java-lambda-stream/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sehun-kim.github.io/sehun/java-lambda-stream/</a></li>\n<li><a href=\"https://medium.com/@logishudson0218/understanding-for-java-1-8-lambda-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-43bcc491519a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@logishudson0218/understanding-for-java-1-8-lambda-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-43bcc491519a</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Optional","path":"/00-java-optional/","date":"14. December 2020","timeToRead":6,"description":"Java Optional 대해 정리합니다.","content":"<h1 id=\"java-optional\"><a href=\"#java-optional\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional</h1>\n<p>Java8에서 Optional이 적용이 되었으나 실질적으로 개발에서 잘 사용하지 못한다는 생각을 자주하였습니다. 오늘은 Optional을 공부해보면서 왜 이를 써야할까에 대해서 작성하겠습니다.</p>\n<h2 id=\"java-optional이란\"><a href=\"#java-optional%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional이란?</h2>\n<p><code class=\"language-text\">Java Optional</code>이란 \"<strong>존재할 수도 있지만 안 할수도 있는 객체</strong>\"입니다. 이를 좀더 풀어 설명한다면 null이 될 수도 있는 객체를 감싸고 있는 일종의 <code class=\"language-text\">Wrapper</code> 클래스입니다. 따라서 Optional 인스턴스는 모든 타입의 참조 변수를 저장할 수 있습니다.</p>\n<blockquote>\n<p>Wrapper 클래스 : 8개의 기본타입(type, short, int, ...)의 데이터를 객체로 포장해주는 클래스, 각각의 타입에 해당하는 데이터를 인수로 전달받아, 해당 값을 가지는 객체</p>\n</blockquote>\n<br/>\n<h2 id=\"java-optional의-장점\"><a href=\"#java-optional%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional의 장점</h2>\n<p>여러 가지 장점이 있으나 다음과 같이 서술할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">Null Pointer Exception</code>을 유발할 수 있는 null 을 직접 다루지 않아도 됩니다.</li>\n<li>null 체크를 따로 하지 않아도 됩니다.</li>\n<li>명시적으로 해당 변수가 null일 수도 있다는 가능성을 표현할 수 있습니다. 따라서, 방어로직을 해결하면서 코드 가독성과 유지 보수성을 높일 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"java-optional의-사용법\"><a href=\"#java-optional%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional의 사용법</h2>\n<h3 id=\"optional-변수-선언\"><a href=\"#optional-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 변수 선언</h3>\n<p>Optional 변수는 제네릭을 제공하므로, 변수를 선언할 때 타입 파라미터에 따라 감쌀 수 있는 객체 타입을 결정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Customer 타입의 객체를 감쌀 수 있는 Optional 타입의 변수</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">></span></span> storeCustomer<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Member 타입의 객체를 감쌀 수 있는 Optional 타입의 변수</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMebmer<span class=\"token punctuation\">;</span></code></pre>\n<p>다음과 같이 변수를 선언할 수 있습니다. 코드의 스타일에 따라 \"opt\"와 같이 접두어를 붙여 Optional 타입의 변수를 표현할 수 있습니다.</p>\n<h3 id=\"optional-객체-생성\"><a href=\"#optional-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 객체 생성</h3>\n<p>Optional 객체를 선언하는 방법은 크게 3가지 방법으로 나눠집니다.</p>\n<h4 id=\"1-optionalempty\"><a href=\"#1-optionalempty\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Optional.empty()</h4>\n<p>비어 있는(null) Optional 객체를 얻습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"2-optionalofvalue\"><a href=\"#2-optionalofvalue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Optional.of(value)</h4>\n<p>null이 아닌 value의 값을 가지고 있는 Optional 객체를 생성합니다. null이 넘어오는 경우에는, Null Pointer Exception이 발생하므로, 주의해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>dataMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"3-optionalofnullablevalue\"><a href=\"#3-optionalofnullablevalue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Optional.ofNullable(value)</h4>\n<p>null인지 아닌지 확신할 수 없는 객체를 담고 있는 Optional 객체를 생성합니다. 일종의 앞에 두개의 객체 생성법을 합친 방법이라고 이해하면 좋습니다.</p>\n<ul>\n<li><code class=\"language-text\">Optional.ofNullable(value)</code> = <code class=\"language-text\">Optinal.empty()</code> + <code class=\"language-text\">Optional.of(value)</code></li>\n</ul>\n<p>null이 넘어오는 경우에는 Null Pointer Exception이 발생하지 않고, <code class=\"language-text\">Optional.empty()</code>와 마찬가지로 비어있는 Optional 객체를 가져옵니다. 일반적으로 해당 객체가 null이 아닌지 자신이 없는 상황에서 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>dataMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optNotMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"optional-중간-처리\"><a href=\"#optional-%EC%A4%91%EA%B0%84-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 중간 처리</h3>\n<p>Optional 객체를 생성하고 바로 사용 가능한 메서드입니다. 아래의 메서드들은 다시 Optional을 반환하므로, 메서드 체이닝을 통해서 원하는 로직을 구성할 수 있습니다.</p>\n<h4 id=\"1-filter\"><a href=\"#1-filter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. filter()</h4>\n<p>해당 값이 참이면 해당 <code class=\"language-text\">필터</code>를 통과시키고 거짓이면 통과시키지 않습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return \"true\"</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return \"no data\"</span></code></pre>\n<h4 id=\"2-map\"><a href=\"#2-map\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. map()</h4>\n<p>mapper 함수를 통해 입력값을 다른 값으로 변환하는 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> test <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchElementException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return 1 (number)</span></code></pre>\n<h4 id=\"3-flatmap\"><a href=\"#3-flatmap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. flatMap()</h4>\n<p>mapper 함수를 통해 입력값을 다른 값으로 변환하는 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print 'good'</span></code></pre>\n<h3 id=\"optional-객체-접근\"><a href=\"#optional-%EA%B0%9D%EC%B2%B4-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 객체 접근</h3>\n<p>일반적으로 Optional 클래스에 담고 있는 객체를 꺼내오는 여러가지 방법이 있습니다. 자바에서는 이러한 다양한 인스턴스 메소드를 가져오는데, 자주 사용하는 메소드를 주로 설명하겠습니다. (<strong>객체가 존재하는 경우에는 동일하게 값을 가져옵니다.</strong>)</p>\n<h4 id=\"1-get\"><a href=\"#1-get\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. get()</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, <code class=\"language-text\">NoSuchElementException</code>의 예외를 던집니다.</li>\n</ul>\n<h4 id=\"2-orelset-other\"><a href=\"#2-orelset-other\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. orElse(T other)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 인자(other)를 반환합니다.</li>\n</ul>\n<h4 id=\"3-orelsegetsupplier-extends-t-other\"><a href=\"#3-orelsegetsupplier-extends-t-other\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. orElseGet(Supplier&#x3C;? extends T> other)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 함수형 인자(other)을 통해 생성된 객체를 반환합니다.</li>\n<li>일종의 <code class=\"language-text\">orElse(T other)</code>의 lazy 버전입니다. 비어있는 경우에만 호출되므로 <code class=\"language-text\">orElse(T other)</code>보다 성능적으로 좋을 것으로 예상할 수 있습니다.</li>\n</ul>\n<h4 id=\"4-orelsethrowsupplier-extends-x-exceptionsupplier\"><a href=\"#4-orelsethrowsupplier-extends-x-exceptionsupplier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. orElseThrow(Supplier&#x3C;? extends X> exceptionSupplier)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 함수형 인자를 통해 생성된 예외를 던집니다.</li>\n</ul>\n<h4 id=\"5-ifpresentconsumer-super-t-consumer\"><a href=\"#5-ifpresentconsumer-super-t-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. ifPresent(Consumer&#x3C;? super T> consumer);</h4>\n<ul>\n<li>최종적으로 연산을 끝낸 후에 값이 비어있지 않으면 입력값으로 주어집니다.</li>\n<li>중간 연산 중 비어있는 결과가 있는 경우 ifPresent(consumer)는 수행하지 않습니다.</li>\n</ul>\n<h4 id=\"6-ifpresent\"><a href=\"#6-ifpresent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. ifPresent()</h4>\n<ul>\n<li>최종 연산 후 객체가 존재하는지 여부를 파악합니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>자바8에서 등장한 Optional 클래스에 대해서 정리해보았습니다. 다음 글에는 자바9와 자바 10에서 추가된 Optional 메서드에 대해 작성하고 이를 이용한 코드를 좀 더 본격적으로 다루어보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"http://www.tcpschool.com/java/java_api_wrapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_api_wrapper</a></li>\n<li><a href=\"https://www.daleseo.com/java8-optional-after/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-after/</a></li>\n<li><a href=\"https://jdm.kr/blog/234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/234</a></li>\n<li><a href=\"https://daddyprogrammer.org/post/1988/java-optional/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://daddyprogrammer.org/post/1988/java-optional/</a></li>\n<li><a href=\"http://homoefficio.github.io/2019/10/03/Java-Optional-%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%93%B0%EA%B8%B0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://homoefficio.github.io/2019/10/03/Java-Optional-%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%93%B0%EA%B8%B0/</a></li>\n<li><a href=\"http://www.tcpschool.com/java/java_stream_optional\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_stream_optional</a></li>\n</ul>\n"}},{"node":{"title":"[Review] Clean Code 내용정리 - 1","path":"/01-clean-code/","date":"6. November 2020","timeToRead":7,"description":" Clean code 책 정리 1편입니다. ","content":"<h1 id=\"clean-code-내용-정리---1\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 1</h1>\n<p>대학시절 프런트 개발을 하다가, ebay에서 웹 개발을 하면서 백엔드 개발을 주로 하다 보니, Java나 C#으로 개발을 주로 하게 되었는데, 모르는 부분도 많고 함께 프로젝트를 만들기 때문에 좀 더 좋은 개발을 하고 싶어서, 1년 전에 샀던 책을 다시 펴서 정리한다.</p>\n<h2 id=\"1장-clean-code\"><a href=\"#1%EC%9E%A5-clean-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1장. Clean Code</h2>\n<p><strong>나쁜 코드가 만드는 결과</strong></p>\n<ul>\n<li>개발 속도의 감소</li>\n<li>팀 생산성의 하락, 이후 재개발 필요</li>\n<li>유지 보수의 어려움</li>\n</ul>\n<h3 id=\"깨끗한-코드란\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%EC%BD%94%EB%93%9C%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨끗한 코드란?</h3>\n<ul>\n<li>모든 테스트를 통과</li>\n<li>중복이 없음</li>\n<li>시스템 내 모든 설계 아이디어를 표현함</li>\n<li>클래스, 메서드, 함수 등을 최대한 줄임</li>\n</ul>\n<h2 id=\"2장-의미-있는-이름\"><a href=\"#2%EC%9E%A5-%EC%9D%98%EB%AF%B8-%EC%9E%88%EB%8A%94-%EC%9D%B4%EB%A6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2장. 의미 있는 이름</h2>\n<p>핵심은 다음과 같다.</p>\n<ol>\n<li>\n<p>의도를 분명히 밝히기.</p>\n<ul>\n<li>ex) <code class=\"language-text\">int elapsedTimeInDays</code>, <code class=\"language-text\">daysSinceCreation</code> 등등</li>\n</ul>\n</li>\n<li>\n<p>그릇된 정보를 피하기.</p>\n<ul>\n<li>일관성을 지켜야한다.</li>\n</ul>\n</li>\n<li>의미 있게 구분하기.</li>\n<li>발음하기 쉬운 이름을 사용하기.</li>\n<li>검색하기 쉬운 이름을 사용하기.</li>\n<li>\n<p>인코딩을 피하기.</p>\n<ul>\n<li>헝가리식 표기법</li>\n<li>멤버 변수 접두어</li>\n<li>인터페이스 클래스와 구현 클래스</li>\n</ul>\n</li>\n<li>자신의 기억력을 자랑하지 말기.</li>\n<li>클래스 이름은 명사나 명사구.</li>\n<li>메서드 이름은 동사나 동사구.</li>\n<li>기발한 이름을 피하기</li>\n<li>한 개념에 한 단어 사용</li>\n<li>말장난하지 말기</li>\n<li>해법 영역에서 가져온 이름 사용하기</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">-   전산, 알고리즘, 패턴, 수학 용어들은 사용해도 괜찮다.</code></pre>\n<ol start=\"14\">\n<li>문제 영역에서 가져온 이름 사용하기</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">-   적절한 프로그래머 용어가 없다면, 문제 영역에서 가져온다.</code></pre>\n<ol start=\"15\">\n<li>의미 있는 맥락을 추가</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">-   스스로 의미가 분명하게 해 주기. -&gt; 클래스, 함수, 이름 공간에 넣어 맥락 주기\n-   모든 방법이 어렵다면 접두어 사용하기</code></pre>\n<ol start=\"16\">\n<li>불필요한 맥락 없애기.</li>\n</ol>\n<p>핵심 중 하나는, 좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고, 문화적인 배경이 같아야 한다.</p>\n<h2 id=\"3장-함수\"><a href=\"#3%EC%9E%A5-%ED%95%A8%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3장. 함수</h2>\n<p>함수의 규칙은 다음과 같다.</p>\n<ol>\n<li>\n<p>작게 만들기</p>\n<ul>\n<li>일반적으로 2줄, 3줄, 4줄이 이상적으로 좋다.</li>\n<li>\n<p>블록과 들여 쓰기.</p>\n<ul>\n<li>if/else/while 문 등에 들어가는 블록은 한 줄이여야 함.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>한 가지만 하기</p>\n<ul>\n<li><strong>함수는 한 가지를 해야 하고 한 가지를 잘해야 한다.</strong></li>\n</ul>\n</li>\n<li>\n<p>함수 당 추상화 수준은 하나로</p>\n<ul>\n<li>한 함수에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈림</li>\n<li>\n<p><strong>내려가기 규칙</strong> : 위에서 아래로 코드 읽기</p>\n<ul>\n<li>마치 이야기처럼</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Switch 문</p>\n<ul>\n<li>\n<p>다형성 사용해서 최대한 숨기고 반복하지 않게 하기.</p>\n<ul>\n<li>객체 안에서 숨기기</li>\n<li>최대한 한 번만 사용하기</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>서술적인 이름 사용</p>\n<ul>\n<li>서술적인 이름이 설계에서 더 뚜렷한 의미를 가지고 개선하기 쉬워짐</li>\n<li>일관성 유지하기</li>\n</ul>\n</li>\n<li>\n<p>함수 인수</p>\n<ul>\n<li>함수에서 이상적인 인수는 0개이다.</li>\n<li>\n<p>1개(단항), 2개(이항)까지고 좋고, 3개(삼항)는 가능한 피하고, 4개(다항)는 이유가 필요하다.</p>\n<ul>\n<li>점점 더 읽기 어려워짐.</li>\n<li><code class=\"language-text\">includeSetupPageInfo(new PageContent)</code> 보다는 <code class=\"language-text\">includeSetupPage()</code>가 더 읽기 좋음</li>\n<li>\n<p>단항 형식의 좋은 예</p>\n<ul>\n<li><code class=\"language-text\">boolean fileExists(&quot;MyFile&quot;)</code></li>\n</ul>\n</li>\n<li>\n<p>이항 함수의 좋은 예</p>\n<ul>\n<li><code class=\"language-text\">Point p = new Point(0, 0)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>동사와 키워드</p>\n<ul>\n<li>함수의 의도나 인수의 순서와 의도를 제대로 표현하려면 좋은 함수가 필수</li>\n<li>\n<p>단항 함수는 함수와 인수가 동사/명사 쌍을 이뤄야 한다.</p>\n<ul>\n<li>ex) <code class=\"language-text\">writeField(name)</code> 등</li>\n<li><code class=\"language-text\">assertEquals</code>보다는 <code class=\"language-text\">assertExpectedEqualsActual(expected, actual)</code> 이 더 좋다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>부수 효과를 일으키지 마라</p>\n<ul>\n<li>즉, 함수에서 한 가지를 하겠다고 하고, 다른 기능을 넣지 마라</li>\n<li>\n<p>출력 인수</p>\n<ul>\n<li>일반적으로는 출력 인수를 피해라.</li>\n<li><code class=\"language-text\">appendFooter(s)</code> 보다는 <code class=\"language-text\">report.appendFooter()처럼</code> 작성하기.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>명령과 조회를 분리하기</p>\n<ul>\n<li>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야 한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>오류 코드보다 예외를 사용하라</strong></p>\n<ul>\n<li>명령 함수에서 오류 코드를 반환하는 방식은 명령/조회 분리 규칙을 미묘하게 위반한다.</li>\n<li>\n<p>Try/Catch 블록 뽑아내기.</p>\n<ul>\n<li>흉측함, 별도 함수로 뽑아내는 편이 좋다.</li>\n</ul>\n</li>\n<li>\n<p>오류 처리도 한 가지 작업</p>\n<ul>\n<li>오류 처리도 오류만 처리해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>오류 클래스를 따로 선언하면, 해당 클래스는 의존성 자석이 되기 때문에 다른 코드에서 import 해서 사용해야 한다.</p>\n<ul>\n<li>즉, 오류 클래스가 변한다면 클래스 전부를 다시 컴파일하고 다시 배치해야 한다.</li>\n<li>따라서 일반적으로는 예외를 사용하기</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>반복하지 말기</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">-   AOP(Aspect Oriented Programming), COP(Component Oriented Programming) 등 모두가 어떤 면에서는 **중복 제거 전략**이 들어간다.</code></pre>\n<ol start=\"11\">\n<li>구조적 프로그래밍</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">-   모든 함수와 함수 내 모든 블록에 **입구와 출구가 하나만 존재해야 한다**\n-   루프 안에서 break나 continue를 사용해서는 안된다. goto는 아시다시피 절대로 안됨\n-   해당 문제는 함수가 아주 클 때 상당한 이익을 제공.</code></pre>\n<ol start=\"12\">\n<li>함수는 짜는 방법</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">-   일종의 글짓기와 비슷\n-   초안은 길고 복잡할 수 있지만,\n    수정하면서 코드를 다듬고 함수를 만들고, 이름을 바꾸고 중복을 제거하고 메서드를 제거하기</code></pre>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<p>모든 시스템은 특정 응용 분야 시스템을 기술할 목적으로 프로그래머가 설계한 DSL(Domain Specific Language, 도메인 특화 언어)로 만든다. 이러한 기술 들은 함수를 잘 만드는 방법이다. 그러나 정말로 중요한 것은 <strong>시스템이다.</strong></p>\n"}},{"node":{"title":"[Review] Clean Code 내용정리 - 2","path":"/02-clean-code/","date":"6. November 2020","timeToRead":9,"description":" Clean code 책 정리 2편입니다. ","content":"<h1 id=\"clean-code-내용-정리---2\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 2</h1>\n<h2 id=\"4장-주석\"><a href=\"#4%EC%9E%A5-%EC%A3%BC%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4장. 주석</h2>\n<p>부정확한 주석은 아예 없는 주석보다 나쁘다.</p>\n<ol>\n<li>\n<p>주석은 나쁜 코드를 보완하지 못한다.</p>\n<ul>\n<li>코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문에, 주석보다는 코드를 정리를 해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>코드로 의도를 표현하기.</p>\n<ul>\n<li>많은 경우에서 주석에서 할 수 있는 설명을 함수로 표현해도 충분하다</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"좋은-주석\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%A3%BC%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>좋은 주석</h3>\n<ol>\n<li>\n<p>법적인 주석</p>\n<ul>\n<li>회사가 정립한 구현 표준을 지켜야 하는 경우</li>\n</ul>\n</li>\n<li>\n<p>정보를 제공하는 주석</p>\n<ul>\n<li>기본적인 정보를 주석으로 제공</li>\n<li>\n<p>Ex)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// kk:mm:ss EEE, MMM dd, yyyy 형식이다.</span>\n<span class=\"token class-name\">Pattern</span> timeMatcher <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"\\\\d*:\\\\d*:\\\\d* \\\\w*, \\\\w*, \\\\d*, \\\\d*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>의도를 설명하는 주석</p>\n<ul>\n<li>의도를 표현</li>\n<li>\n<p>Ex)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testConcurrentAddWidgets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token comment\">// 스레드를 대량 생성하는 방법으로 어떻게든 경쟁 조건을 만들려 시도한다.</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">25000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">WidgetBuilderThread</span> widgetBuilderThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WidgetBuilderThread</span><span class=\"token punctuation\">(</span>widgetBuilder<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> failFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>widgetBuilderThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> failFlag<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<p>4)  의미를 명료하게 밝히는 주석</p>\n<pre class=\"language-text\"><code class=\"language-text\">- 모호한 인수나 반환 값의 의미를 읽기 좋게 표현\n\n- Ex)\n\n  ```java\n  ...\n\n  assertThat(a.compareTo(a) == 0);    // a == a\n  assertThat(a.compareTo(b) != 0);    // a != b\n  ...\n  ```</code></pre>\n<ol start=\"5\">\n<li>\n<p>결과를 경고하는 주석</p>\n<ul>\n<li>결과를 경고할 목적</li>\n<li>\n<p>Ex)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SimpleDateFormat</span> <span class=\"token function\">makeStandardHttpDataFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// SimpleDateFormat은 스레드에 안전하지 못하다.</span>\n  <span class=\"token comment\">// 따라서 각 인스턴스를 독립적으로 생성해야 한다.</span>\n  <span class=\"token class-name\">SimpleDateFormat</span> df <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EEE, dd MMM. yyyy HH:mm:ss z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  df<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeZone</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTimeZone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GMT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> df<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>TODO 주석</p>\n<ul>\n<li>앞으로 할 일을 설명할 때 괜찮다.</li>\n<li>\n<p>Ex)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// TODO-MdM 현재 필요하지 않다</span>\n<span class=\"token comment\">// 체크아웃 모델을 도입하면 함수가 필요 없다.</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">VersionInfo</span> <span class=\"token function\">makeVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>중요성을 강조하는 주석</p>\n<ul>\n<li>중요성을 강조하기 위해 주석을 사용한다.</li>\n<li>\n<p>Ex)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> listItemContent <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 여기서 trim은 정말 중요하다. trim 함수는 문자열에서 시작 공백을 제거한다.</span>\n<span class=\"token comment\">// 문자열에 시작 공백이 있으면 다른 문자열로 인식되기 때문이다.</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">ListItemWidget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> listItemContent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">buildList</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>공개 API에서 Javadocs</p>\n<ul>\n<li>설명이 잘 된 공개 API를 사용하는 것도 방법.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"나쁜-주석\"><a href=\"#%EB%82%98%EC%81%9C-%EC%A3%BC%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>나쁜 주석</h3>\n<ol>\n<li>주절거리는 주석</li>\n<li>같은 이야기를 중복하는 주석</li>\n<li>오해할 여지가 있는 주식</li>\n<li>의무적으로 다는 주석</li>\n<li>이력을 기록하는 주석</li>\n<li>있으나 마나 한 주석</li>\n<li>무서운 잡음 : 의미 없는 주석</li>\n<li>함수나 변수로 표현할 수 있다면 주석을 달지 말기.</li>\n<li>\n<p>위치를 표시하는 주석</p>\n<ul>\n<li>Ex) <code class=\"language-text\">// Action//////////////</code></li>\n<li>반드시 필요할 때만, 아주 드물게 사용하기</li>\n</ul>\n</li>\n<li>닫는 괄호에 다는 주석</li>\n<li>공로를 돌리거나 저자를 표시하는 주석</li>\n<li>주석으로 처리한 코드</li>\n<li>\n<p>HTML 주석</p>\n<ul>\n<li>너무 지저분하다.</li>\n</ul>\n</li>\n<li>전역 정보</li>\n<li>너무 많은 정보</li>\n<li>\n<p>모호한 관계</p>\n<ul>\n<li>주석과 주석이 설명하는 코드는 둘 사이 관계가 명백해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>함수 헤더</p>\n<ul>\n<li>짧은 함수는 긴 설명이 필요 없다.</li>\n</ul>\n</li>\n<li>\n<p>비공개 코드에서 Javadocs</p>\n<ul>\n<li>공개하지 않을 코드라면 Javadocs는 쓸모가 없음.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"5장-형식-맞추기\"><a href=\"#5%EC%9E%A5-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5장. 형식 맞추기</h2>\n<p>프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야하고, 코드 형식을 맞추기 위한 간단한 규칙을 정하고 이를 수행해야 한다.</p>\n<h3 id=\"형식을-맞추는-목적\"><a href=\"#%ED%98%95%EC%8B%9D%EC%9D%84-%EB%A7%9E%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>형식을 맞추는 목적</h3>\n<ul>\n<li>코드 형식은 중요하다.</li>\n<li>오늘 구현한 코드는 다음 버전에서 바뀔 확률이 높으며, 구현한 코드의 가독성은 이후 바뀔 코드의 품질에 지대한 영향을 미친다.</li>\n</ul>\n<h3 id=\"적절한-행-길이를-유지하기-세로-형식\"><a href=\"#%EC%A0%81%EC%A0%88%ED%95%9C-%ED%96%89-%EA%B8%B8%EC%9D%B4%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0-%EC%84%B8%EB%A1%9C-%ED%98%95%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>적절한 행 길이를 유지하기 (세로 형식)</h3>\n<p>사실 200줄 정도인 파일로도 커다란 시스템을 구축할 수 있다.</p>\n<ol>\n<li>\n<p>신문 기사처럼 작성하기</p>\n<ul>\n<li>좋은 신문 기사는 최상단에서 기사를 몇 마디로 요약하는 표제가 있다.</li>\n<li>소스파일도 이름은 간단하면서 설명이 가능하게 짓는다.</li>\n<li>신문이 다양한 기사로 이뤄지는 것처럼, 소스 코드도 그렇게 구성한다.</li>\n</ul>\n</li>\n<li>\n<p>개념은 빈 행으로 분리하기</p>\n<ul>\n<li>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 좋은 케이스</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">function1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">function2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 나쁜 케이스</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">function1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">function2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>세로 밀집도</p>\n<ul>\n<li>줄 바꿈이 개념을 분리한다면, 세로 밀집도는 연관성을 의미</li>\n</ul>\n</li>\n<li>\n<p>수직거리</p>\n<ul>\n<li>서로 밀집한 개념은 세로로 가까이 둔다. 단, 다른 파일에 속한다면 규칙은 통하지 않는다.</li>\n<li>타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 한다.</li>\n<li>\n<p><strong>변수 선언</strong></p>\n<ul>\n<li>변수는 사용하는 위치에 최대한 가까이 선언</li>\n</ul>\n</li>\n<li>\n<p><strong>인스턴스 변수</strong></p>\n<ul>\n<li>인스턴스 변수는 클래스 맨 처음에 선언</li>\n</ul>\n</li>\n<li>\n<p><strong>종속 함수</strong></p>\n<ul>\n<li>한 함수가 다른 함수를 호출한다면, 두 함수는 세로로 가까이 배치한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>개념적 유사성</strong></p>\n<ul>\n<li>개념적인 친화도가 높을수록 코드를 가까이 배치한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>세로 순서</p>\n<ul>\n<li>일반적으로 함수 호출 종속성은 아래 방향으로 유지</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"가로-형식-맞추기\"><a href=\"#%EA%B0%80%EB%A1%9C-%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가로 형식 맞추기</h3>\n<p>일반적으로는 가로길이는 45자 근처이다. (가급적으로는 120자 정도를 제한)</p>\n<ol>\n<li>\n<p>가로 공백과 밀집도</p>\n<ul>\n<li>가로 공백을 사용해 밀집한 개념과 느슨한 개념을 표현</li>\n<li>\n<p>Ex)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">measureLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  lineCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> lineSize <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 느슨한 개념</span>\n  totalhars <span class=\"token operator\">+=</span> lineSize<span class=\"token punctuation\">;</span>\n  lineWidthHistogram<span class=\"token punctuation\">.</span><span class=\"token function\">addLine</span><span class=\"token punctuation\">(</span>lineSize<span class=\"token punctuation\">,</span> lineCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">recordWidestLine</span><span class=\"token punctuation\">(</span>lineSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 밀집한 개념</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>가로 정렬</p>\n<ul>\n<li>코드처럼 선언부가 길다면 클래스를 쪼개야 한다는 의미</li>\n</ul>\n</li>\n<li>\n<p>들여 쓰기</p>\n<ul>\n<li>scope로 이뤄진 계층을 보여준다.</li>\n<li><strong>\"들여 쓰기 무시하기\"를</strong> 피하기</li>\n</ul>\n</li>\n<li>\n<p>가짜 범위</p>\n<ul>\n<li>세미콜론은 새 행에다 제대로 들여 써서 넣어준다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"팀-규칙\"><a href=\"#%ED%8C%80-%EA%B7%9C%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>팀 규칙</h3>\n<p>좋은 소프트웨어 시스템은 읽기 쉬운 문서로 이뤄 저 야한다.</p>\n<h2 id=\"6장-객체와-자료-구조\"><a href=\"#6%EC%9E%A5-%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6장. 객체와 자료 구조</h2>\n<h3 id=\"자료-추상화\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%B6%94%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자료 추상화</h3>\n<ul>\n<li>자료를 세세하게 공개하기보다는 추성적인 개념으로 표현하는 편이 좋다.</li>\n<li>아무 생각 없이 GET/SET을 추가하는 방법은 좋지 않다.</li>\n</ul>\n<h3 id=\"자료객체-비대칭\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B0%9D%EC%B2%B4-%EB%B9%84%EB%8C%80%EC%B9%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자료/객체 비대칭</h3>\n<ul>\n<li>모든 것이 객체가 좋은 것은 아니고, 단순한 자료 구조와 절차적인 코드가 좋을 때도 있음</li>\n<li>객체 지향 코드에서 어려운 변경은 절차적인 코드에서 쉽고, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉬움.</li>\n</ul>\n<h3 id=\"디미터-법칙\"><a href=\"#%EB%94%94%EB%AF%B8%ED%84%B0-%EB%B2%95%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>디미터 법칙</h3>\n<blockquote>\n<p>모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙<br>\n즉, 객체의 내부를 몰라야 한다는 법칙</p>\n</blockquote>\n<ol>\n<li>\n<p>기차 충돌</p>\n<ul>\n<li>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 기차 충돌 코드</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getScratchDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이를 방지하는 코드</span>\n<span class=\"token class-name\">Options</span> opts <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">File</span> scratchDir <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span><span class=\"token function\">getScratchDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> scratchDir<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 단, 아래의 코드는 디미터 법칙과 상관 없음.</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> outputDir <span class=\"token operator\">=</span> ctxt<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>scratchDir<span class=\"token punctuation\">.</span>absolutePath<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>자료 구조는 무조건 함수 없이 공개 변수만 포함한다면, 문제는 간단하겠지만<br>\n그럴 수 없기 때문에 요구하는 프레임워크와 표준(ex. 빈)이 존재한다.</li>\n</ul>\n</li>\n<li>\n<p>잡종 구조</p>\n<ul>\n<li>잡종 구조는 절차적과 객체적의 단점만 모아놓은 구조이기 때문에, 피하는 편이 좋다.</li>\n</ul>\n</li>\n<li>구조체 감추기</li>\n</ol>\n<h3 id=\"자료-전달-객체\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%A0%84%EB%8B%AC-%EA%B0%9D%EC%B2%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자료 전달 객체</h3>\n<p>DTO나 빈 구조 등을 사용한다</p>\n<ul>\n<li>\n<p>활성 레코드</p>\n<ul>\n<li>DTO의 특수한 형태, 자료 구조로 취급하기</li>\n<li>비즈니스 규칙은 넣는 것이 아니고, 비즈니스 규칙을 넣고 싶으면 내부 자료를 숨기는 객체를 따로 생성한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<ul>\n<li>객체는 동작을 공개하고 자료를 숨긴다. 그러나, 자료 구조는 별다른 도작 없이 자료를 노출한다.</li>\n<li>\n<p>어떤 시스템을 구현할 때</p>\n<ul>\n<li>새로운 자료 타입을 추가하는 유연성이 필요하면 객체를 선택.</li>\n<li>새로운 동작을 추가하는 유연성이 필요하면 자료 구조와 절차적인 코드가 더 적합하다.</li>\n</ul>\n</li>\n</ul>\n"}},{"node":{"title":"[Review] Clean Code 내용정리 - 3","path":"/03-clean-code/","date":"6. November 2020","timeToRead":11,"description":" Clean code 책 정리 3편입니다. ","content":"<h1 id=\"clean-code-내용-정리---3\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 3</h1>\n<h2 id=\"7장-오류-처리\"><a href=\"#7%EC%9E%A5-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7장. 오류 처리</h2>\n<p>깨끗한 코드와 오류 처리는 연관성이 존재한다.</p>\n<h3 id=\"오류-코드보다-예외를-사용하기\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>오류 코드보다 예외를 사용하기</h3>\n<p>오류가 발생 시 예외를 던지는 방법이 논리와 오류 처리 코드가 뒤섞이지 않아 코드가 더 깔끔해진다.</p>\n<h3 id=\"try-catch-finally-문부터-작성하기\"><a href=\"#try-catch-finally-%EB%AC%B8%EB%B6%80%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Try-Catch-Finally 문부터 작성하기</h3>\n<p>예외가 발생할 코드를 짤 경우에는 try-catch-finally 문으로 시작하는 것이 좋다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecordedGrip</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">retrieveSection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sectionName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">FileInputStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>sectionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StorageException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"retrieval error\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecordedGrip</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"미확인unchecked-예외를-사용하기\"><a href=\"#%EB%AF%B8%ED%99%95%EC%9D%B8unchecked-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>미확인(unchecked) 예외를 사용하기</h3>\n<p>확인된 예외는 몇 가지 장점을 제공하지만, 반드시 필요하지는 않다.</p>\n<ul>\n<li>확인된 오류가 치르는 비용에 대해서 잘 생각해보아야 한다.</li>\n<li>확인된 예외는 OCP(Open Closed Principle)를 위반한다.</li>\n<li>Ex) 확인된 예외를 던졌으나, catch가 세 단계 위에 있다면 모든 선언부에 예외가 필요하다. 대규모 시스템에서는 힘들다.</li>\n</ul>\n<h3 id=\"예외에-의미를-제공하기\"><a href=\"#%EC%98%88%EC%99%B8%EC%97%90-%EC%9D%98%EB%AF%B8%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외에 의미를 제공하기</h3>\n<ul>\n<li>예외를 던질 때 전후 상황을 충분히 덧붙일 때, 오류가 발생한 원인과 위치를 찾을 수 있다.</li>\n<li>\n<p>오류 메시지에 정보(실패한 연산 이름, 실패 유형)등을 함께 던진다.</p>\n<ul>\n<li>로깅 기능을 통해 충분한 정보를 제공하자.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"호출자를-고려해-예외-클래스를-정의하기\"><a href=\"#%ED%98%B8%EC%B6%9C%EC%9E%90%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%B4-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>호출자를 고려해 예외 클래스를 정의하기</h3>\n<p>오류를 잡아내는 다양한 방법이 존재한다.</p>\n<ul>\n<li>외부 API를 사용할 때는 감싸기 기법을 사용하는 것은 좋은 방법이다.</li>\n<li>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalPort</span> port <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  port<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PortDeviceFailure</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reportError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li>예외 클래스가 하나만 있어도 되는 경우가 많다.</li>\n<li>더 나아가, 한 예외는 잡아내고 다른 예외는 무시해도 되는 경우에는 여러 예외 케이스를 사용하는 것도 방법이다.</li>\n</ul>\n<h3 id=\"정상-흐름을-정의하기\"><a href=\"#%EC%A0%95%EC%83%81-%ED%9D%90%EB%A6%84%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정상 흐름을 정의하기</h3>\n<p>특수 사례 패턴을 사용하기</p>\n<ul>\n<li>클래스나 객체로 예외적인 상황을 캡슐화하여 처리할 수 있음</li>\n</ul>\n<h3 id=\"null을-반환하지-말기\"><a href=\"#null%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EC%A7%80-%EB%A7%90%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null을 반환하지 말기</h3>\n<p>null에 대한 과한 확인은 문제가 될 수 있다. 즉, 예외나 <strong>특수 사례 패턴</strong>이 더 좋은 경우가 많다.</p>\n<h3 id=\"null을-전달하지-말기\"><a href=\"#null%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EC%A7%80-%EB%A7%90%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null을 전달하지 말기</h3>\n<p>인수에 null이 넘어가지 않는 정책이 있다면, 많은 실수를 줄일 수 있다.</p>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h3>\n<ul>\n<li>깨끗한 코드는 읽기도 좋아야 하지만, <strong>안정성</strong>도 높아야 한다.</li>\n<li>오류 처리를 프로그램 논리와 분리해 독자적인 사안으로 고려하면 튼튼하고 깨끗한 코드 작성이 가능</li>\n</ul>\n<h2 id=\"8장-경계\"><a href=\"#8%EC%9E%A5-%EA%B2%BD%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8장. 경계</h2>\n<p>시스템에 들어가는 모든 소프트웨어를 직접 개발하는 경우는 드물다.</p>\n<h3 id=\"외부-코드-사용하기\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>외부 코드 사용하기</h3>\n<p>인터페이스 제공자와 사용자 사이에는 이해관계가 들어간다. 제공자는 최대한 적용성을 늘리기를 원하지만, 사용자는 자신의 요구에 집중하는 인터페이스를 희망한다.</p>\n<p>즉, <code class=\"language-text\">Map</code>과 같은 <code class=\"language-text\">경계 인터페이스를</code> 사용할 때는 이용하는 클래스나 계열 밖으로 노출되지 않도록 주의해야 한다.(캡슐화도 한 방법)</p>\n<h3 id=\"경계를-살피고-익히기\"><a href=\"#%EA%B2%BD%EA%B3%84%EB%A5%BC-%EC%82%B4%ED%94%BC%EA%B3%A0-%EC%9D%B5%ED%9E%88%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>경계를 살피고 익히기</h3>\n<ul>\n<li>외부 코드를 사용하면 적은 시간에 많은 기능을 넣을 수 있는 장점이 존재.</li>\n<li>\n<p>그러나, 테스트를 해서 진행하는 방법이 바람직하다.</p>\n<ul>\n<li>이러한 간단한 테스트 케이스를 사용해 익히는 방법을 <strong>학습 테스트라고</strong> 부른다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"log4j-익히기\"><a href=\"#log4j-%EC%9D%B5%ED%9E%88%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>log4j 익히기</h3>\n<p>로깅을 직접 구현하기보다는 아파치의 log4j 패키지를 사용하자.</p>\n<p>간단한 예시 코드는 다음과 같다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Logger</span> logger<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Before</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">removeAllApenders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRootLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAllAppenders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">basicLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">BasicConfigurator</span><span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"basicLogger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addAppenderWithStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleAppender</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternLayout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p %t %m%n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">ConsoleAppender</span><span class=\"token punctuation\">.</span>SYSTEM_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addAppenderWithStream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addAppenderWithoutSteam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleAppender</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternLayout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p %t %m%n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addAppenderWithoutStream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"학습-테스트는-공짜-이상\"><a href=\"#%ED%95%99%EC%8A%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EA%B3%B5%EC%A7%9C-%EC%9D%B4%EC%83%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>학습 테스트는 공짜 이상</h3>\n<ul>\n<li>학습 테스트에 드는 비용은 없으며, 필요한 지식만 확보하는 손쉬운 방법</li>\n<li>투자하는 노력보다 얻는 성과가 더 크다</li>\n<li>패키지가 새 버전이 나오면 학습 테스트를 돌려 예상대로 나오는지 체크한다.</li>\n</ul>\n<h3 id=\"아직-존재하지-않는-코드를-사용하기\"><a href=\"#%EC%95%84%EC%A7%81-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>아직 존재하지 않는 코드를 사용하기</h3>\n<ul>\n<li>아는 코드와 모르는 코드(미완성 코드)를 분리하기</li>\n<li>바라는 인터페이스를 구현하면 우리가 인터페이스를 전적으로 통제할 수 있다는 장점을 얻을 수 있음.</li>\n<li>이러한 설계는 테스트에서도 편하다.</li>\n</ul>\n<h3 id=\"깨끗한-경계\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%EA%B2%BD%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨끗한 경계</h3>\n<p>경계에서는 다양한 문제가 발생할 수 있다.</p>\n<p>따라서.</p>\n<ul>\n<li>통제 못하는 코드를 사용하는 경우에는 비용이 적게 구성해야 한다.</li>\n<li>경계에 위치한 코드는 깔끔하게 분리한다.</li>\n<li>외부 패키지에 의존하는 대신, 통제 가능한 우리 코드에 의존한다</li>\n<li>외부 패키지 호출 코드를 가능한 줄여서 경계를 관리한다</li>\n</ul>\n<h2 id=\"9장-단위-테스트\"><a href=\"#9%EC%9E%A5-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9장. 단위 테스트</h2>\n<p>제대로 된 테스트가 필요하다.</p>\n<h3 id=\"tdd-법칙-세가지\"><a href=\"#tdd-%EB%B2%95%EC%B9%99-%EC%84%B8%EA%B0%80%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TDD 법칙 세가지</h3>\n<ol>\n<li>실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않다.</li>\n<li>컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li>\n<li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li>\n</ol>\n<p>위 규칙을 잘 지키면, 테스트 코드와 실제 코드가 같이 나온다.</p>\n<h3 id=\"깨끗한-테스트-코드-유지하기\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨끗한 테스트 코드 유지하기</h3>\n<p>코드가 망가지기 시작하면 망가진다. 따라서, 테스트 코드는 실제 코드 못지않게 중요하게 짜야한다.</p>\n<h4 id=\"테스트는-유연성-유지보수성-재사용성을-제공한다\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9C%A0%EC%97%B0%EC%84%B1-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트는 유연성, 유지보수성, 재사용성을 제공한다.</h4>\n<ul>\n<li>단위 테스트는 코드에 유연성, 유지보수성, 재사용성을 제공하는 기둥이 된다.</li>\n<li>테스트 케이스가 있다면 많은 공포를 해결할 수 있다.</li>\n<li>테스트 코드가 지저분해질수록 실제 코드도 지저분해진다.</li>\n</ul>\n<h3 id=\"깨끗한-테스트-코드\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>깨끗한 테스트 코드</h3>\n<ul>\n<li>가독성 : 명료성, 단순성, 풍부한 표현력</li>\n</ul>\n<h4 id=\"도메인에-특화된-테스트-언어\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%ED%8A%B9%ED%99%94%EB%90%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>도메인에 특화된 테스트 언어</h4>\n<ul>\n<li>도메인에 특화된 언어(DSL)도 좋은 방법이다.</li>\n</ul>\n<h4 id=\"이중-표준\"><a href=\"#%EC%9D%B4%EC%A4%91-%ED%91%9C%EC%A4%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이중 표준</h4>\n<ul>\n<li>단순, 간결, 표현력이 풍부, 그러나 꼭 효율적인 필요는 없다.</li>\n</ul>\n<h3 id=\"테스트-당-assert-하나\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8B%B9-assert-%ED%95%98%EB%82%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 당 assert 하나</h3>\n<ul>\n<li>Assert 문은 하나가 좋지만, 때로는 여러 개를 써도 된다. (단, 최대한 줄여야 한다.)</li>\n</ul>\n<blockquote>\n<p>Tip) Assert문.</p>\n<p>정해진 조건에 맞지 않을 때 프로그램을 중단. ex) assert(표현식)</p>\n</blockquote>\n<ul>\n<li><strong>테스트 함수마다 한 개념만 테스트</strong></li>\n</ul>\n<h3 id=\"first\"><a href=\"#first\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>F.I.R.S.T</h3>\n<ul>\n<li>Fast(빠르게) : 테스트는 빠르게 돌아야 한다.</li>\n<li>Independent(독립적으로) : 각 테스트는 서로 의존하면 안 된다.</li>\n<li>Repeatable(반복 가능하게) : 테스트는 어떤 환경에서도 반복 가능해야 한다.</li>\n<li>Self-Validating(자가 검증하는) : 테스트는 부울(bool) 값으로 결과를 내야 한다.</li>\n<li>Timely(적시에) : 테스트는 적시에 작성해야 한다.</li>\n</ul>\n<h3 id=\"결론-1\"><a href=\"#%EA%B2%B0%EB%A1%A0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<ul>\n<li>테스트 코드는 실제 코드의 유연성, 유지보수성, 재사용성을 보존하고 강화해야 한다.</li>\n<li>도메인 특화 언어(DSL, Domain Specific Language)를 구성하면 테스트 코드가 짜기 쉬워진다.</li>\n</ul>\n<h2 id=\"10장-클래스\"><a href=\"#10%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>10장. 클래스</h2>\n<h3 id=\"클래스-체계\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B2%B4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스 체계</h3>\n<p>추상화 단계는 순차적으로 내려간다.</p>\n<ul>\n<li>public, private, 비공개 인스턴스 변수 순으로 진행된다.</li>\n</ul>\n<h4 id=\"캡슐화\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>캡슐화</h4>\n<p>꼭 유지해야 하는 것은 아니나, 캡슐화를 푸는 방법은 최후의 수단입니다.</p>\n<h3 id=\"클래스는-작아야-한다\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EC%9E%91%EC%95%84%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스는 작아야 한다.</h3>\n<p>하나의 클래스는 적은 책임을 얻어야 한다.</p>\n<p>즉, 클래스 설명은 if, and, or, but 등의 단어를 제외하고 25 단어 내외로 가능해야 한다.</p>\n<h4 id=\"단일-책임-원칙srp-single-responsibility-principle\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99srp-single-responsibility-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단일 책임 원칙(SRP, Single Responsibility Principle)</h4>\n<ul>\n<li>클래스나 모듈을 변경할 이유가 하나뿐이어야 한다는 원칙.</li>\n<li>객체 지향 설계에서 더우 중요한 개념이다.</li>\n</ul>\n<h4 id=\"응집도\"><a href=\"#%EC%9D%91%EC%A7%91%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>응집도</h4>\n<ul>\n<li>클래스는 인스턴스 변수 수가 적어야 한다.</li>\n<li>각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 한다.</li>\n<li>'함수를 작게, 매개변수 목록을 짧게'라는 전략으로 진행하고, 응집도가 높아지도록 새로운 클래스로 분리한다.</li>\n</ul>\n<h4 id=\"응집도를-유지하면-작은-클래스-여럿으로-구성된다\"><a href=\"#%EC%9D%91%EC%A7%91%EB%8F%84%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EB%A9%B4-%EC%9E%91%EC%9D%80-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%97%AC%EB%9F%BF%EC%9C%BC%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>응집도를 유지하면 작은 클래스 여럿으로 구성된다.</h4>\n<ul>\n<li>클래스가 응집력을 잃으면 쪼개야 한다.</li>\n<li>\n<p>3가지 룰을 사용한다.</p>\n<ol>\n<li>리팩터링한 프로그램은 좀 더 길고 서술적인 변수 이름을 사용</li>\n<li>리팩터링한 프로그램은 코드에 주석을 추가하는 수단으로 함수 선언과 클래스 선언을 활용</li>\n<li>가독성을 높이기 위해 공백을 추가하고 형식을 맞춤</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"변경하기-쉬운-클래스\"><a href=\"#%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변경하기 쉬운 클래스</h3>\n<p>대표적으로 수정하기 어려운 코드가 SQL 클래스이다. 잠재적으로 수정되는 여지를 남기는 것이 좋다.</p>\n<h4 id=\"변경으로부터-격리\"><a href=\"#%EB%B3%80%EA%B2%BD%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0-%EA%B2%A9%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>변경으로부터 격리</h4>\n<ul>\n<li>구체적인 클래스와 추상 클래스의 사용이 중요하다. 즉, 인터페이스와 추상 클래스가 중요하다.</li>\n<li>시스템의 결합도를 낮추면 유연성과 재사용성이 높아지고 각 요소를 이해하기 쉬워진다.</li>\n<li>\n<p>이는 클래스 설계 원칙(DIP, Dependency Inversion Principle)을 따르는 클래스를 지킬 수 있다.</p>\n<ul>\n<li>DIP : 상세한 구현이 아니라 추상화에 의존한다는 원칙</li>\n</ul>\n</li>\n</ul>\n"}},{"node":{"title":"[Review] Clean Code 내용정리 - 4","path":"/04-clean-code/","date":"6. November 2020","timeToRead":26,"description":" Clean code 책 정리 4편입니다. ","content":"<h1 id=\"clean-code-내용-정리---4\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 4</h1>\n<h2 id=\"11장-시스템\"><a href=\"#11%EC%9E%A5-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>11장. 시스템</h2>\n<h3 id=\"도시가-잘-돌아가는-이유\"><a href=\"#%EB%8F%84%EC%8B%9C%EA%B0%80-%EC%9E%98-%EB%8F%8C%EC%95%84%EA%B0%80%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>도시가 잘 돌아가는 이유</h3>\n<ul>\n<li>다양한 분야를 관리하는 팀원</li>\n<li>적절한 추상화와 모듈화</li>\n</ul>\n<h3 id=\"시스템-제작과-시스템-사용을-분리\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%A0%9C%EC%9E%91%EA%B3%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%82%AC%EC%9A%A9%EC%9D%84-%EB%B6%84%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>시스템 제작과 시스템 사용을 분리</h3>\n<p>제작과 사용은 다르다.</p>\n<p>소프트웨어 시스템은 <strong>준비 과정</strong>(애플리케이션 객체를 제작하고 의존성을 서로 '연결'하는)과 <strong>런타임 로직</strong>(준비 과정 이후의 단계)을 분리해야 한다.</p>\n<h4 id=\"관심사-분리\"><a href=\"#%EA%B4%80%EC%8B%AC%EC%82%AC-%EB%B6%84%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>관심사 분리.</h4>\n<ul>\n<li>Ex) 초기화 지연(Lazy Initialization), 계산 지연(Lazy Evaluation)</li>\n<li>\n<p>장점</p>\n<ol>\n<li>애플리케이션을 시작하는 시간이 그만큼 빨라진다.</li>\n<li>어떤 경우에도 null을 반환하지 않는다.</li>\n</ol>\n</li>\n<li>\n<p>단점</p>\n<ol>\n<li>의존성을 해결해야 한다.</li>\n<li>테스트에서 문제가 생긴다. 즉, 일시적으로라도 단일 책임 원칙(SRP, Single Responsibility Principle)을 깨야한다.</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"main-분리\"><a href=\"#main-%EB%B6%84%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Main 분리.</h4>\n<blockquote>\n<p>시스템 생성과 사용을 분리하는 방법.</p>\n</blockquote>\n<p>main 함수에서 시스템에 필요한 객체를 생성한 후 이를 애플리케이션에 넘기며, 애플리케이션은 그저 객체를 사용한다.</p>\n<h4 id=\"팩토리\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>팩토리</h4>\n<blockquote>\n<p>Factory 패턴은 부모 클래스에 알려지지 않은 구체 클래스를 생성하는 패턴이며.<br>\n자식 클래스가 어떤 객체를 생성할지를 결정하도록 하는 패턴이다.</p>\n</blockquote>\n<p>객체가 생성하는 시점을 애플리케이션이 결정할 필요가 있는 경우에는 Abstact factory 패턴을 사용한다.</p>\n<h4 id=\"의존성-주입\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의존성 주입</h4>\n<blockquote>\n<p>의존성 주입(DI, Dependency Injection)은 하나의 객체가 다른 객체의 의존성을 제공하는 테크닉이다. \"의존성\"은 예를 들어 서비스로 사용할 수 있는 객체이다. 클라이언트가 어떤 서비스를 사용할 것인지 지정하는 대신, 클라이언트에게 무슨 서비스를 사용할 것인지를 말해주는 것</p>\n</blockquote>\n<p>사용과 제작을 분리하는 강력한 메커니즘. 객체는 의존성 자체를 인스턴스로 만드는 책임을 지지 않는 대신에 다른 메커니즘에 넘겨야 한다.</p>\n<ul>\n<li>해당 방법으로 'main'루틴이나 특수 컨테이너를 사용한다.</li>\n<li>스프링 프레임워크는 잘 알려진 자바 DI 컨테이너를 제공한다.</li>\n</ul>\n<h3 id=\"확장\"><a href=\"#%ED%99%95%EC%9E%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장</h3>\n<p>깨끗한 코드는 코드 수준에서는 시스템을 조정하고 확장하기 쉽게 만들어진다.</p>\n<p>그러나 <strong>시스템 수준</strong>에서는 그렇지 않다. 단순한 아키텍처를 복잡한 아키텍처로 조금씩 키울 수는 없다.</p>\n<ul>\n<li>따라서 소프트웨어 시스템은 관심사를 적절한 게 분리해 관리해야 한다.</li>\n</ul>\n<h4 id=\"횡단cross-cutting-관심사\"><a href=\"#%ED%9A%A1%EB%8B%A8cross-cutting-%EA%B4%80%EC%8B%AC%EC%82%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>횡단(Cross-cutting) 관심사</h4>\n<blockquote>\n<p>횡단 관심사는 다른 관심사에 영향을 미치는 프로그램의 측면이다. 이 관심사들은 디자인과 구현 면에서 시스템의 나머지 부분으로부터 깨끗이 분해되지 못하는 경우가 있을 수 있으며 분산되거나 얽히는 일이 일어날 수 있다.</p>\n</blockquote>\n<p>이를 해결하기 대처하기 위해 나온 방법론으로 <strong>관점 지향 프로그래밍</strong>(AOP, Aspet-Oriented Programming)이 있다.</p>\n<ul>\n<li>AOP에서의 관점 : 특정 관심사를 지원하려면 시스템에서 특정 지점들이 동작하는 방식을 일관성 있게 바꿔야 한다.</li>\n</ul>\n<h3 id=\"자바-프록시\"><a href=\"#%EC%9E%90%EB%B0%94-%ED%94%84%EB%A1%9D%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 프록시</h3>\n<ul>\n<li>단순한 상황에 적합하다. Ex) 개별 객체나 클래스에서 메서드 호출을 감싸는 경우.</li>\n<li>JDK가 지원하는 동적 프록시는 인터페이스만 지원하며, 클래스 프록시를 사용하려면 CGLIB, ASM. Javassist 같은 바이트 코드 처리 라이브러리가 필요하다.</li>\n</ul>\n<h3 id=\"순수-자바-aop-프레임워크\"><a href=\"#%EC%88%9C%EC%88%98-%EC%9E%90%EB%B0%94-aop-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>순수 자바 AOP 프레임워크</h3>\n<p>POJO는 순수하게 도메인에 초점을 맞추며, 다른 도메인에 의존하지 않는다. 따라서 테스트가 개념적으로 더 쉽고 간단하며, 단순하여 구현에 쉬우며 이후 코드를 보수하고 개선하기 편하다.</p>\n<blockquote>\n<p>POJO(Plain Old Java Object) : 오래된 방식의 간단한 자바 오브젝트라는 말로서 Java EE 등의 중량 프레임워크들을 사용하게 되면서 해당 프레임워크에 종속된 \"무거운\" 객체를 만들게 된 것에 반발해서 사용되게 된 용어</p>\n</blockquote>\n<h3 id=\"aspectj-관점\"><a href=\"#aspectj-%EA%B4%80%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AspectJ 관점</h3>\n<p>AspectJ는 관심사를 관점으로 분리하는 가장 강력한 도구이다.</p>\n<ul>\n<li>AspectJ '애너테이션 폼'은 새로운 도구와 새로운 언어의 부담을 제거한다.</li>\n<li>애너테이션이란 주석처럼 프로그래밍에 영향을 미치지 않으며, 유용한 정보를 제공</li>\n</ul>\n<h3 id=\"테스트-주도-시스템-아키텍처-구축\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B5%AC%EC%B6%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 주도 시스템 아키텍처 구축</h3>\n<ul>\n<li>애플리케이션 도메인 논리를 POJO로 작성할 수 있다면 (코드 수준에서 아키텍처 관심사를 분리할 수 있다면), <strong>테스트 주도 아키텍처</strong> 구축이 가능하다.</li>\n<li>좋은 웹 사이트 들은 고도의 자료 캐싱, 보안, 가상화 등을 이용해 아주 높은 가용성과 성능을 효율적이고 유연하게 달성한다.</li>\n<li>이를 정리하면, 최선의 시스템 구조는 각기 POJO 객체로 구현되는 모듈화 된 관심사 영역(도메인)으로 구성된다. 이러한 서로 다른 영역은 해당 영역 코드에 최소한의 영향을 미치는 관점이나 유사한 도구를 사용해 통합하며, 이러한 구조는 테스트 주도 기법을 사용할 수 있다.</li>\n</ul>\n<h3 id=\"의사-결정을-최적화\"><a href=\"#%EC%9D%98%EC%82%AC-%EA%B2%B0%EC%A0%95%EC%9D%84-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>의사 결정을 최적화</h3>\n<ul>\n<li>모듈을 나누고 관심사를 분리하면 지엽적인 관리와 결정이 가능하다.</li>\n<li>\n<p>가능한 마지막 순간까지 결정을 미루는 방법이 좋은 경우가 있는데, 이러한 경우에서 옳게 쓰일 수 있다.</p>\n<ul>\n<li>즉, 관심사를 모듈로 분리한 POJO 시스템은 기민함을 제공하고, 이러한 기민함은 최신 정보에 기반에 최선의 시점에 최적의 결정을 내리는데 도움을 준다. 더불어 결정의 복잡성도 감소한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"명백한-가치가-있을-때-표준을-현명하게-사용\"><a href=\"#%EB%AA%85%EB%B0%B1%ED%95%9C-%EA%B0%80%EC%B9%98%EA%B0%80-%EC%9E%88%EC%9D%84-%EB%95%8C-%ED%91%9C%EC%A4%80%EC%9D%84-%ED%98%84%EB%AA%85%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>명백한 가치가 있을 때 표준을 현명하게 사용</h3>\n<p>표준을 사용하면 아이디어와 컴포넌트를 재사용하기 쉽고, 적절한 경험을 가진 사람을 구하기 쉬우며, 좋은 아이디어를 캡슐화하기 쉬우며 컴포넌트를 엮기 쉽다.</p>\n<p>단점으로는 표준을 만드는 시간이 너무 오래 걸리게 된다면, 다른 업계가 기다리지 못한다. 더불어 표준이 목적을 잃어버리는 경우도 발생한다.</p>\n<h3 id=\"시스템은-도메인-특화-언어가-필요\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%ED%8A%B9%ED%99%94-%EC%96%B8%EC%96%B4%EA%B0%80-%ED%95%84%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>시스템은 도메인 특화 언어가 필요</h3>\n<blockquote>\n<p>도메인 특화 언어(DSL, Domain-Specific Language)이란. 간단한 스크립트 언어나 표준 언어로 구현한 API</p>\n</blockquote>\n<ul>\n<li>좋은 DSL은 도메인 개념과 그 개념을 구현한 코드 사이에 존재하는 '의사소통 간극'을 줄여주며, 도메인을 잘못 구현할 가능성이 줄어든다.</li>\n<li>추상화 수준을 코드 관용구나 디자인 패턴 이상의 효과를 만들어 낼 수 있다.</li>\n<li>DSL을 사용하면 고차원 정책에서 저 차원 세부사항에 이르기까지 모든 추상화 수준과 모든 도메인을 POJO로 표현 가능하다.</li>\n</ul>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<ul>\n<li>깨끗한 아키텍처는 도메인 논리를 높여주며, 기민성을 높이고, 제품 품질이 떨어지며, TDD가 제공하는 단점이 사라진다.</li>\n<li>POJO를 작성하고 관점 등을 통해 관심사를 분리해서 추상화 단계에서의 의도를 명확히 표현해야 한다.</li>\n<li>핵심 중 하나는 <strong>실제로 돌아가는 가장 단순한 수단을 사용해야 한다.</strong></li>\n</ul>\n<h2 id=\"12장-창발성\"><a href=\"#12%EC%9E%A5-%EC%B0%BD%EB%B0%9C%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12장. 창발성</h2>\n<h3 id=\"창발적-설계로-깔끔한-코드를-구현\"><a href=\"#%EC%B0%BD%EB%B0%9C%EC%A0%81-%EC%84%A4%EA%B3%84%EB%A1%9C-%EA%B9%94%EB%81%94%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>창발적 설계로 깔끔한 코드를 구현</h3>\n<p>우수한 설계가 나오는 간단한 규칙 4가지</p>\n<ol>\n<li>모든 테스트를 실행한다</li>\n<li>중복을 없앤다.</li>\n<li>프로그래머 의도를 표현한다.</li>\n<li>클래스와 메서드 수를 최소로 줄인다.</li>\n</ol>\n<p>단 위가 밑보다 중요하다.</p>\n<h3 id=\"단순한-설계-규칙-1-모든-테스트를-실행\"><a href=\"#%EB%8B%A8%EC%88%9C%ED%95%9C-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99-1-%EB%AA%A8%EB%93%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단순한 설계 규칙 1: 모든 테스트를 실행</h3>\n<ul>\n<li>설계는 의도한 대로 돌아가야 한다.</li>\n<li>철저한 테스트가 가능한 시스템은 더 나은 설계를 만든다.</li>\n<li>결합도가 높을수록 테스트 케이스를 작성하기 어렵다.</li>\n<li>테스트 케이스를 만들고 돌리는 것 -> 낮은 결합도와 높은 응집력</li>\n</ul>\n<h3 id=\"단순한-설계-규칙-24-리팩터링\"><a href=\"#%EB%8B%A8%EC%88%9C%ED%95%9C-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99-24-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단순한 설계 규칙 2~4: 리팩터링</h3>\n<ul>\n<li>테스트 케이스를 모두 작성했다면, 코드와 클래스를 점진적으로 정리하면 된다.</li>\n<li>코드를 정리하면서 테스트 케이스를 통해 깨지지 않도록 한다.</li>\n<li>리팩터링 단계에서는 소프트웨어 설계 품질을 높이는 기법을 사용하는 것이 좋다.</li>\n<li>이 단계 동안 중복을 없애고, 프로그래머 의도를 표현하고 클래스와 메서드 수를 줄이는 단계이다.</li>\n</ul>\n<h3 id=\"중복을-없애라\"><a href=\"#%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%97%86%EC%95%A0%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>중복을 없애라</h3>\n<ul>\n<li>중복은 추가 작업, 추가 위협, 불필요한 복잡도를 의미한다.</li>\n<li>TEMPLATE METHOD 패턴은 고차원 중복을 제거할 목적으로 자주사 사용하는 기법</li>\n</ul>\n<blockquote>\n<p>Templaet Method Pattern. 동작 상의 알고리즘의 프로그램 뼈대를 정의하는 행위 디자인 패턴, 알고리즘의 구조를 변경하지 않고 알고리즘의 특정 단계들을 다시 정의할 수 있게 해 준다</p>\n</blockquote>\n<h3 id=\"표현하기\"><a href=\"#%ED%91%9C%ED%98%84%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>표현하기</h3>\n<p>많은 소프트웨어 프로젝트 비용 중 대다수는 장기적인 유지보수에 들어간다.</p>\n<p>이를 해결하는 방법은 다음과 같다.</p>\n<ol>\n<li>좋은 이름 선택한다.</li>\n<li>함수와 클래스 크기를 가능한 줄인다.</li>\n<li>표준 명칭을 사용한다.</li>\n<li>단위 테스트 케이스를 꼼꼼히 작성한다.</li>\n</ol>\n<p>가장 큰 핵심은 나중에 볼 사람을 위해서 <strong>노력</strong>해야 한다.</p>\n<h3 id=\"클래스와-메서드-수를-최소로-줄이기\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%88%98%EB%A5%BC-%EC%B5%9C%EC%86%8C%EB%A1%9C-%EC%A4%84%EC%9D%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스와 메서드 수를 최소로 줄이기</h3>\n<ul>\n<li>너무 중복을 제거하고, 의도를 표현하고, SRP를 준수하는 경우에는 단점이 발생할 수 있다.</li>\n<li>목표는 함수와 클래스 크기를 줄이면서 시스템 크기를 작게 유지하는 것이다.</li>\n<li>단, 테스트 케이스를 만들고 중복을 제거하고 의도를 표현하는 작업이 더 중요하다.</li>\n</ul>\n<h2 id=\"13장-동시성\"><a href=\"#13%EC%9E%A5-%EB%8F%99%EC%8B%9C%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>13장. 동시성</h2>\n<p>동시성과 깔끔한 코드는 양립하기 아주 어렵다. 깨끗한 동시성은 사실 매우 중요하며, 어려운 문제이다.</p>\n<h3 id=\"동시성이-필요한-이유\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동시성이 필요한 이유?</h3>\n<ul>\n<li>동시성은 결함(coupling)을 없애는 전략. 즉, <strong>무엇</strong>과 <strong>언제</strong>를 분리하는 전략이다.</li>\n<li>무엇과 언제를 분리하면 애플리케이션 구조와 효율이 극적으로 나아진다.</li>\n<li>시스템 응답 시간과 작업 처리량 개선으로 인해 동시성이 필요하다.</li>\n</ul>\n<h4 id=\"미신과-오해\"><a href=\"#%EB%AF%B8%EC%8B%A0%EA%B3%BC-%EC%98%A4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a> 미신과 오해</h4>\n<p>대표적인 오해.</p>\n<ul>\n<li>\n<p>동시성은 항상 성능을 높여준다.</p>\n<ul>\n<li>동시성은 <strong>때로</strong> 성능을 높여준다. 즉, 대기 시간이 아주 길어 여러 스레드가 프로세서를 공유할 수 있거나, 여러 프로세서가 동시에 처리할 독립적인 계산이 충분히 많은 경우에만 성능이 높아진다.</li>\n</ul>\n</li>\n<li>\n<p>동시성을 구현해도 설계는 변하지 않는다.</p>\n<ul>\n<li>단일 스레드 시스템과 다중 스레드 시스템은 설계가 판이하게 다르다. 일반적으로 <strong>무엇</strong>과 <strong>언제</strong>를 분리하면 시스템 구조가 달라진다.</li>\n</ul>\n</li>\n<li>\n<p>웹 또는 EJB 컨테이너를 사용하면 동시성을 이해할 필요가 없다.</p>\n<ul>\n<li>실제로는 컨테이너가 어떻게 동작하는지, 어떻게 동시 수정, 데드락 등과 같은 문제를 피할 수 있는지 알아야 한다.</li>\n</ul>\n</li>\n</ul>\n<p>타당한 생각.</p>\n<ul>\n<li><strong>동시성은 사소 부하를 유발한다.</strong> 성능 측면에서 부하가 걸리며, 코드도 더 짜야한다.</li>\n<li><strong>동시성은 복잡하다.</strong> 간단한 문제라도 동시성은 복잡하다.</li>\n<li><strong>일반적으로 동시성 버그는 제한하기 어렵다.</strong> 그래서 진짜 결함으로 간주 하지 않고 일회성 문제로 여겨 무시하기 쉽다.</li>\n<li><strong>동시성을 구현하려면 흔히 근본적인 설계 전략을 재고해야 한다.</strong></li>\n</ul>\n<h3 id=\"난관\"><a href=\"#%EB%82%9C%EA%B4%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>난관</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> lastIdUsed<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>lastIdUsed<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같은 경우. 인스턴스 X를 생성하고 lastIdUsed를 필드. 42로 설정하는 경우로 보면.</p>\n<ul>\n<li>어떤 스레드는 43을 받고 다른 스레드는 44를 받는데 저장은 제각각이다. 이러한 스레드가 수많이 있다.</li>\n</ul>\n<h3 id=\"동시성-방어-원칙\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%B0%A9%EC%96%B4-%EC%9B%90%EC%B9%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동시성 방어 원칙</h3>\n<p>다양한 방어 원칙과 기술이 있다.</p>\n<h4 id=\"단일-책임-원칙srp-single-reponsibility-priniciple\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99srp-single-reponsibility-priniciple\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단일 책임 원칙(SRP, Single Reponsibility Priniciple)</h4>\n<blockquote>\n<p>SRP는 주어진 메서드/클래스/컴포넌트를 변경할 이유가 하나여야 한다는 원칙</p>\n</blockquote>\n<p>동시성은 복잡성 하므로 다른 코드와 분리해야 한다. 아래는 고려해야 할 사항이다.</p>\n<ul>\n<li>동시성 코드는 독자적인 개발, 변경, 조율 주기가 있다.</li>\n<li>동시성 코드에는 독자적인 난관이 있으며 이는 더 어렵다.</li>\n<li>잘못 구현된 동시성 코드는 온갖 에러가 발생한다.</li>\n</ul>\n<p><strong>따라서. 동시성 코드는 다른 코드와 분리한다.</strong></p>\n<h4 id=\"따름-정리corollary--자료-범위를-제한해라\"><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%ACcorollary--%EC%9E%90%EB%A3%8C-%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%A0%9C%ED%95%9C%ED%95%B4%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>따름 정리(corollary) : 자료 범위를 제한해라</h4>\n<p>공유 객체를 사용하는 코드 <strong>임계 영역(critical</strong> section)을 synchronized 키워드로 보호하는 것뿐만 아니라, 이 수를 줄여야 한다.</p>\n<p>수가 많으면 다음과 같은 문제가 발생한다.</p>\n<ul>\n<li>보호할 임계 영역을 빼먹어서 해당 자료를 수정하는 모든 코드가 망가진다.</li>\n<li>모든 임계 영역을 올바로 보호했는지 확인하느라 똑같은 노력과 수고가 필요하다.</li>\n<li>찾기 어려운 버그를 더 찾기 힘들어진다.</li>\n</ul>\n<p><strong>따라서. 자료를 캡슐화해야 하며, 공유 자료를 최대한 줄여야 한다.</strong></p>\n<h4 id=\"따름-정리--자료-사본을-사용하기\"><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%AC--%EC%9E%90%EB%A3%8C-%EC%82%AC%EB%B3%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>따름 정리 : 자료 사본을 사용하기</h4>\n<p>공유 자료를 줄이는 최고의 방법은 공유하지 않은 방법이다. 즉, 객체를 복사해서 읽는 방법도 존재한다. 객체를 복사하는 비용이 그렇게 크지않다면 나쁘지 않는 방법이다.</p>\n<h4 id=\"따름-정리--스레드는-가능한-독립적으로-구현하라\"><a href=\"#%EB%94%B0%EB%A6%84-%EC%A0%95%EB%A6%AC--%EC%8A%A4%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EB%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>따름 정리 : 스레드는 가능한 독립적으로 구현하라</h4>\n<p>다른 스레드와 공유하지 않는 독립적인 스레드를 구성해라. (예를 들면 로컬 변수 등)</p>\n<p><strong>따라서, 독자적인 스레드로, 가능하다면 다른 프로세서에서, 돌려도 괜찮도록 자료를 독립적인 단위로 분할한다.</strong></p>\n<h3 id=\"라이브러리를-이해하기\"><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>라이브러리를 이해하기.</h3>\n<p>자바 5에서 스레드를 구현한다면 다음을 고려해보기.</p>\n<ul>\n<li>스레드 환경에 안전한 컬렉션을 사용.</li>\n<li>서로 무관한 작업을 수행할 때는 executor 프레임워크 사용.</li>\n<li>가능하다면 스레드가 차단(blocking) 되지 않는 방법을 사용.</li>\n<li>일부 클래스 라이브러리는 스레드에 안전하지 못함.</li>\n</ul>\n<h4 id=\"스레드-환경에-안전한-컬렉션\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%99%98%EA%B2%BD%EC%97%90-%EC%95%88%EC%A0%84%ED%95%9C-%EC%BB%AC%EB%A0%89%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드 환경에 안전한 컬렉션</h4>\n<p>다중 스레드에서 안전한 메소드로 여러 가지 존재한다.</p>\n<table>\n<thead>\n<tr>\n<th>이름</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ConcurrentHashMap</td>\n<td>HashMap보다 거의 모든 상황에서 빠르다.</td>\n</tr>\n<tr>\n<td>ReentrantLock</td>\n<td>한 메서드에서 잠그고 다른 메서드에서 푸는 락(lock)이다.</td>\n</tr>\n<tr>\n<td>Semaphore</td>\n<td>전형적인 세마포어, 개수(count)가 있는 락이다.</td>\n</tr>\n<tr>\n<td>CountDownLatch</td>\n<td>지정한 수만큼 이벤트가 발생하고 대기 중인 스레드를 모드 해제하는 락.</td>\n</tr>\n<tr>\n<td>모든 스레드에게 동시에 공평하게 시작할 권리를 제공</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"실행-모델을-이해하기\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행 모델을 이해하기.</h3>\n<p>간단한 기본 용어는 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th>이름</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>한정된 자원 (Bound Resource)</td>\n<td>다중 스레드 환경에서 사용하는 자원으로, 크기나 숫자가 제한적이다.</td>\n</tr>\n<tr>\n<td>데이터 베이스 연결, 길이가 일정한 읽기/쓰기 버퍼 등이 예시이다.</td>\n<td></td>\n</tr>\n<tr>\n<td>상호 배제 (Mutual Exclusion)</td>\n<td>한 번에 한 스레드만 공유 자료나 공유 자원을 사용할 수 있는 경우를 가리킨다.</td>\n</tr>\n<tr>\n<td>기아 (Starvation)</td>\n<td>한 스레드나 여러 스레드가 굉장히 오랫동안 호은 영원한 자원을 기다린다.</td>\n</tr>\n<tr>\n<td>예를 들어, 항상 짧은 스레드에게 우선순위를 준다면, 짧은 스레드가 지속적으로 이루어지는 경우, 긴 스레드가 기아 상태에 빠진다.</td>\n<td></td>\n</tr>\n<tr>\n<td>데드락 (Deadlock)</td>\n<td>여러 스레드가 서로가 끝나기를 기다린다.</td>\n</tr>\n<tr>\n<td>모든 스레드가 각기 필요한 자원을 다른 스레드가 점유하는 바람에 어느쪽도 더이상 진행하지 못한다.</td>\n<td></td>\n</tr>\n<tr>\n<td>라이브락 (Livelock)</td>\n<td>락을 거는 단계에서 각 스레드가 서로를 방해한다.</td>\n</tr>\n<tr>\n<td>스레드는 계속해서 진행하려 하지만, 공명(response)으로 인해, 굉장히 오랫동안 혹은 영원히 진행하지 못한다.</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>다중 스레드 프로그래밍에서 실행하는 방법은 대부분 아래의 3가지 방법이다.</p>\n<h4 id=\"생산자-소비자producer-consumer\"><a href=\"#%EC%83%9D%EC%82%B0%EC%9E%90-%EC%86%8C%EB%B9%84%EC%9E%90producer-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생산자-소비자(Producer-Consumer)</h4>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/92720407-84b49c00-f39f-11ea-971b-582f1952a73a.png\" alt=\"image\"></p>\n<p>다음 그림처럼 <strong>한정적 자원</strong>을 생산자는 정보를 생성하고, 소비자는 정보를 사용한다.</p>\n<p>생산자 스레드는 정보를 채우고 시그널을 보내고, 소비자는 대기열에 정보를 읽은 후 시그널을 보낸다. 단, 동시에 시그널을 기다릴 가능성 또한 존재한다.</p>\n<h4 id=\"읽기-쓰기readers-writers\"><a href=\"#%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0readers-writers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>읽기-쓰기(Readers-Writers)</h4>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/92720672-e412ac00-f39f-11ea-9905-8e06721b39ab.png\" alt=\"image\"></p>\n<p>읽기 스레드가 공유 자원을 사용하지만, 처리율이 부족한 경우 기아 현상이나 오래된 정보가 쌓인다.</p>\n<p>이러한 처리율을 높이는 방법은 여러 가지가 있는데.</p>\n<ul>\n<li>간단한 전략 : 읽기 스레드가 없을 때까지 쓰기 스레드가 버퍼를 기다리는 방법, 하지만 쓰기 스레드가 기아 발생 가능.</li>\n<li>이러한 방법을 갱신하는 밥법은 \"<strong>식사하는 철학자들</strong>\" 방법이 있다.</li>\n</ul>\n<h4 id=\"식사하는-철학자들dining-philosopheres\"><a href=\"#%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94-%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4dining-philosopheres\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>식사하는 철학자들(Dining Philosopheres)</h4>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/92725422-196ec800-f3a7-11ea-8f11-9ff2bbac63f6.png\" alt=\"image\"></p>\n<p>여기서 철학자는 스레드이고, 포크는 자원이다. 여기서, 자원을 얻으려면 몇몇의 스레드는 쉬어야 하는 것을 알 수 있다.</p>\n<p>단 이와 같은 설계를 할 때는 데드락, 라이브락, 처리율 저하, 효율성 저하 등을 고려해서 사용해야 한다.</p>\n<h3 id=\"동기화하는-메서드-사이에-존재하는-의존성을-이해\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9D%B4%EC%97%90-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%9D%B4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동기화하는 메서드 사이에 존재하는 의존성을 이해</h3>\n<ul>\n<li><strong>공유 객체 하나에는 메서드 하나만 사용하기.</strong></li>\n</ul>\n<p>공유 객체 하나에 여러 메서드가 필요한 경우는 다음과 같은 세 가지 방법을 고려한다.</p>\n<ul>\n<li>클라이언트에서 잠금 : 클라이언트에서 첫 번째 메서드를 호출하기 전에 서버를 잠금. 마지막 메서드를 호출할 때까지 잠금을 유지한다</li>\n<li>서버에서 잠금 : 서버에다 \"서버를 잠그고 모든 메서드를 호출한 후 잠금을 해제하는\" 메서드를 구현. 클라이언트는 이 메서드를 구현</li>\n<li>연결(Adapted) 서버 : 잠금을 수행하는 중간 단계를 생성. '서버에서 잠금' 방식과 유사하지만 원래 서버는 변경하지 않음</li>\n</ul>\n<h3 id=\"동기화하는-부분을-작게-만들기\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84%EC%9D%84-%EC%9E%91%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동기화하는 부분을 작게 만들기</h3>\n<p>필요 이상으로 임계 영역 크기를 키우면 스레드 간 경쟁이 늘어나고 프로그램 성능이 떨어진다.</p>\n<p><strong>따라서. 동기화하는 부분을 최대한 작게 만든다.</strong></p>\n<h3 id=\"올바른-종료-코드는-구현하기-어렵다\"><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%A2%85%EB%A3%8C-%EC%BD%94%EB%93%9C%EB%8A%94-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>올바른 종료 코드는 구현하기 어렵다</h3>\n<p>데드락에 걸려서 종료 코드가 안 갈 수도 있다. 따라서 <strong>종료 코드를 개발 초기부터 고민하고 동작하게 초기부터 구현해야 한다. 생각보다 오래 걸리고 어려우므로 나온 알고리즘을 검토하는 것도 좋은 방법이다.</strong></p>\n<h3 id=\"스레드-코드-테스트하기\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드 코드 테스트하기</h3>\n<p>하나의 스레드에서는 이전에 했던 모든 말 들이 통용되지만, 여러 스레드에서의 상황은 복잡하다.</p>\n<p><strong>따라서. 문제를 노출하는 테스트 케이스를 작성한다. 프로그램 설정과 시스템 설정과 부하를 바꿔가면서 자주 돌리고 테스트가 실패할 경우 원인을 추적해야 한다. 다시 돌렸더니 통과한다는 이유로 넘어가면 안 된다.</strong></p>\n<p>구체적인 지침은 다음과 같다.</p>\n<ul>\n<li>\n<p>말이 안 되는 실패를 잠정적인 스레드 문제로 취급하기</p>\n<ul>\n<li>시스템 실패를 '일회성'이라고 취급하지 말기.</li>\n</ul>\n</li>\n<li>\n<p>다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들기</p>\n<ul>\n<li>스레드 환경 밖에서 생기는 버그와 스레드 환경에서 생기는 버그를 동시에 디버깅하면 안 된다. 먼저 스레드 환경 밖부터 해결해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현</p>\n<ul>\n<li>다양한 설정에서 실행할 목적으로 다른 환경에 쉽게 끼워 넣을 수 있게 코드를 구현</li>\n</ul>\n</li>\n<li>\n<p>다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정해주기</p>\n<ul>\n<li>프로그램 처리율과 효율에 따라 스레드 개수를 조율하는 코드도 고민해보기</li>\n</ul>\n</li>\n<li>\n<p>프로세서 수보다 많은 스레드 돌려보기</p>\n<ul>\n<li>스와핑이 잦을수록 임계 영역을 빼먹은 코드나 데드락을 일으키는 코드를 찾기 쉬워진다.</li>\n</ul>\n</li>\n<li>\n<p>다른 플랫폼에서 돌려보기</p>\n<ul>\n<li>처음부터 그리고 자주 모든 목표 플랫폼에서 코드를 돌려보는 것이 좋다.</li>\n</ul>\n</li>\n<li>\n<p>코드에 보조 코드(instruction)를 넣어 돌리기. 강제로 실패 만들기.</p>\n<ul>\n<li>\n<p>방법 1. 직접 구현하기</p>\n<ul>\n<li>코드에다 wait(), sleep(), yield(), probity() 함수를 추가하기.</li>\n<li>생각했는 결과물과 맞는지 체크하기.</li>\n</ul>\n</li>\n<li>\n<p>방법 2. 자동화</p>\n<ul>\n<li>AOP(Aspect-Oriented Framework), CGLIB, ASM 등의 도구를 사용</li>\n<li><strong>흔들기 기법</strong>(jiggle) 등을 사용해 오류를 찾는 것도 좋다. 이를 사용하면 스레드를 매번 다른 순서로 실행한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"결론-1\"><a href=\"#%EA%B2%B0%EB%A1%A0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h3>\n<p>핵심은 다음과 같다.</p>\n<ul>\n<li>SRP를 준수하기</li>\n<li>동시성 오류를 일으키는 잠정적 원인을 정학하게 이해</li>\n<li>사용하는 라이브러리와 기본 알고리즘을 정확히 이해</li>\n<li>보호할 코드 영역을 찾아내는 방법과 특정 코드 영역을 잠그는 방법을 이해</li>\n</ul>\n"}},{"node":{"title":"[Review] Clean Code 내용정리 - 5","path":"/05-clean-code/","date":"6. November 2020","timeToRead":18,"description":" Clean code 책 정리 5편입니다. ","content":"<h1 id=\"clean-code-내용-정리---5\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 5</h1>\n<h2 id=\"14장-점진적인-개선\"><a href=\"#14%EC%9E%A5-%EC%A0%90%EC%A7%84%EC%A0%81%EC%9D%B8-%EA%B0%9C%EC%84%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>14장. 점진적인 개선</h2>\n<blockquote>\n<p>좋은 코드가 많지만, 이를 다 적을 수 없어 내용적으로 간략하게만 구성하였다.</p>\n<p>이후에 한 번 책을 사서 코드를 보는 것을 추천드립니다.</p>\n</blockquote>\n<h3 id=\"구현\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현</h3>\n<p>깔끔한 코드를 짜는 방법에 대해 이야기할 수 있다.</p>\n<p>깨끗한 코드를 짜기 위해서는 먼저 지저분한 코드를 짠 뒤에 정리해야 한다.</p>\n<h3 id=\"초안\"><a href=\"#%EC%B4%88%EC%95%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>초안</h3>\n<p>최초의 코드에 인수 유형 1개만 추가해도 엄청나게 지저분해진다.</p>\n<p>이 경우에, 기능을 더 추가하지 않고 리팩토링을 한다. 왜냐하면? 더 인수 유형을 추가할 수도 있기 때문에.</p>\n<p>점진적으로 개선</p>\n<p>프로그램을 망치는 방법 중 하나는 \"개선\"이라는 이름에서 구조를 크게 뒤집는 것. 이는 그 전과 똑같이 어려워질 수 있다.</p>\n<p>따라서, <strong>테스트 주도 개발(TDD, Test-Driven Development)</strong> 기법을 통해 시스템을 망가트리지 않고, 리팩토링을 진행한다.</p>\n<h3 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<p>단순히 돌아가는 코드만으로는 되지 않는다. 이는 이후에 큰 문제를 만든다.</p>\n<p>나쁜 코드는 깨끗한 코드로 개선하기에는 엄청난 비용이 발생하지만, 최근에 만든 코드는 당장 정리하기 매우 쉽다.</p>\n<p><strong>따라서, 코드는 언제나 최대한 깔끔하고 단순하게 정리해야한다.</strong></p>\n<h2 id=\"15장-junit-들여다보기\"><a href=\"#15%EC%9E%A5-junit-%EB%93%A4%EC%97%AC%EB%8B%A4%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>15장. JUnit 들여다보기</h2>\n<h3 id=\"junit-프레임워크\"><a href=\"#junit-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JUnit 프레임워크</h3>\n<p>문자열 비교 오류를 파할 때 유용한 코드로 parisonCompactor 등이 있다.</p>\n<blockquote>\n<p>코드 등은 미첨부.</p>\n</blockquote>\n<h3 id=\"결론-1\"><a href=\"#%EA%B2%B0%EB%A1%A0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<p>보이스카우트 규칙을 지키기.</p>\n<p><strong>즉, 좋은 모듈을 통해서 조금 더 깨끗하게 만들 수 있어야 한다.</strong></p>\n<h2 id=\"16장-serialdate-리팩터링\"><a href=\"#16%EC%9E%A5-serialdate-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>16장. SerialDate 리팩터링</h2>\n<p>대표적인 코드를 분석을 해보면서 좋은 코드로 리팩터링 할 수 있다.</p>\n<p>순서는 다음과 같이 진행할 수 있다.</p>\n<h3 id=\"1-돌려보기\"><a href=\"#1-%EB%8F%8C%EB%A0%A4%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 돌려보기</h3>\n<ul>\n<li>단위 테스트가 다 구현이 되어있는가?</li>\n</ul>\n<h3 id=\"2-고쳐보기\"><a href=\"#2-%EA%B3%A0%EC%B3%90%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 고쳐보기</h3>\n<ul>\n<li>변경이력은 소스 코드 제어 도구가 있으므로 하지 않아도 된다.</li>\n<li>오래된 주석은 고쳐서 개선하기</li>\n<li>enum을 독자적인 소스파일로 옮기기</li>\n<li>추상 메서드를 클래스로 수정</li>\n<li><strong>코드 커버리지를 감소시켰다.</strong></li>\n</ul>\n<h3 id=\"결론-2\"><a href=\"#%EA%B2%B0%EB%A1%A0-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h3>\n<p><strong>따라서 리팩터링을 통해 테스트 커버리지가 증가시키고, 버그 고치고, 코드 크기를 줄이고 코드를 명확하게 할 수 있다.</strong></p>\n<ul>\n<li>시간을 투자해서, 보이스카우트 규칙을 따랐다.</li>\n</ul>\n<h2 id=\"17장-냄새와-휴리스틱\"><a href=\"#17%EC%9E%A5-%EB%83%84%EC%83%88%EC%99%80-%ED%9C%B4%EB%A6%AC%EC%8A%A4%ED%8B%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>17장. 냄새와 휴리스틱</h2>\n<h3 id=\"주석\"><a href=\"#%EC%A3%BC%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주석</h3>\n<h4 id=\"c1-부적절한-정보-피하기\"><a href=\"#c1-%EB%B6%80%EC%A0%81%EC%A0%88%ED%95%9C-%EC%A0%95%EB%B3%B4-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>C1. 부적절한 정보 피하기</h4>\n<p>다른 시스템에 저장할 정보는 주석으로 적절하지 못한다. 일반적으로 작성자, 최종 수정일, SPR 번호 등과 같은 메타 정보만 주석으로 넣고, 추가적으로 코드와 설계에 기술적인 설명을 하는 수단으로 써야 한다.</p>\n<h4 id=\"c2-쓸모없는-주석-피하기\"><a href=\"#c2-%EC%93%B8%EB%AA%A8%EC%97%86%EB%8A%94-%EC%A3%BC%EC%84%9D-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>C2. 쓸모없는 주석 피하기</h4>\n<p>오래된 주석, 엉뚱한 주석, 잘못된 주석은 더 이상 쓸모가 없다. 쓸모없는 주석은 없애야 한다.</p>\n<h4 id=\"c3-중복된-주석-피하기\"><a href=\"#c3-%EC%A4%91%EB%B3%B5%EB%90%9C-%EC%A3%BC%EC%84%9D-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>C3. 중복된 주석 피하기</h4>\n<p>코드만으로 충분한데 구구절절 설명하는 주석이 중복된 주석은 좋지 않다.</p>\n<h4 id=\"c4-성의-없는-주석-피하기\"><a href=\"#c4-%EC%84%B1%EC%9D%98-%EC%97%86%EB%8A%94-%EC%A3%BC%EC%84%9D-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>C4. 성의 없는 주석 피하기</h4>\n<p>단어를 신중하게 선택하고, 간결하고 명료하게 작성해야 한다.</p>\n<h4 id=\"c5-주석-처리된-코드-피하기\"><a href=\"#c5-%EC%A3%BC%EC%84%9D-%EC%B2%98%EB%A6%AC%EB%90%9C-%EC%BD%94%EB%93%9C-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>C5. 주석 처리된 코드 피하기</h4>\n<p>주석으로 처리된 코드는 남들이 읽을 때 매우 눈에 거슬리고 매일매일 낡아간다. 이는 해당 모듈을 오염시키고, 읽는 사람을 헷갈리게 만든다.</p>\n<h3 id=\"환경\"><a href=\"#%ED%99%98%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>환경</h3>\n<h4 id=\"e1-한-단계로-빌드하기\"><a href=\"#e1-%ED%95%9C-%EB%8B%A8%EA%B3%84%EB%A1%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>E1. 한 단계로 빌드하기</h4>\n<p>빌드는 간단히 한 단계로 끝나야 한다.</p>\n<h4 id=\"e2-한-단계로-테스트하기\"><a href=\"#e2-%ED%95%9C-%EB%8B%A8%EA%B3%84%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>E2. 한 단계로 테스트하기</h4>\n<p>모든 단위 테스트는 한 명령으로 돌려야 하고, 이 방법이 빠르고 쉽고 명백하며, 가장 중요하다.</p>\n<h3 id=\"함수\"><a href=\"#%ED%95%A8%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>함수</h3>\n<h4 id=\"f1-너무-많은-인수-피하기\"><a href=\"#f1-%EB%84%88%EB%AC%B4-%EB%A7%8E%EC%9D%80-%EC%9D%B8%EC%88%98-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>F1. 너무 많은 인수 피하기</h4>\n<p>인수는 작으면 작을수록 좋다</p>\n<h4 id=\"f2-출력-인수-피하기\"><a href=\"#f2-%EC%B6%9C%EB%A0%A5-%EC%9D%B8%EC%88%98-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>F2. 출력 인수 피하기</h4>\n<p>출력이 인수는 직관을 정면으로 위배하므로 안 쓰는 것이 좋다.</p>\n<h4 id=\"f3-플래그-인수-피하기\"><a href=\"#f3-%ED%94%8C%EB%9E%98%EA%B7%B8-%EC%9D%B8%EC%88%98-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>F3. 플래그 인수 피하기</h4>\n<p>Boolean 인수는 함수가 여러 기능을 수행한다는 증거이므로, 플래그 인수는 혼란을 피하기 위해서 피해야 한다.</p>\n<h4 id=\"f4-죽은-함수-피하기\"><a href=\"#f4-%EC%A3%BD%EC%9D%80-%ED%95%A8%EC%88%98-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>F4. 죽은 함수 피하기</h4>\n<p>아무도 호출하지 않는 함수는 삭제한다.</p>\n<h3 id=\"일반\"><a href=\"#%EC%9D%BC%EB%B0%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>일반</h3>\n<h4 id=\"g1-한-소스-파일에-여러-언어를-사용을-줄이기\"><a href=\"#g1-%ED%95%9C-%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC%EC%97%90-%EC%97%AC%EB%9F%AC-%EC%96%B8%EC%96%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%A4%84%EC%9D%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G1. 한 소스 파일에 여러 언어를 사용을 줄이기</h4>\n<p>이상적으로는 소스 파일 하나에 언어 하나만 사용하는 방식이 좋으며, 현실적으로는 이가 어렵기 때문에 소스 파일에서 언어 수와 범위를 줄이는 방법이 중요하다.</p>\n<h4 id=\"g2-당연한-동작을-구현하기\"><a href=\"#g2-%EB%8B%B9%EC%97%B0%ED%95%9C-%EB%8F%99%EC%9E%91%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G2. 당연한 동작을 구현하기</h4>\n<p>최소 놀람의 원칙을 지켜서 함수나 클래스는 프로그래머가 당연하게 여길 만한 동작과 기능을 제공해야 한다.</p>\n<h4 id=\"g3-경계를-올바르게-처리하기\"><a href=\"#g3-%EA%B2%BD%EA%B3%84%EB%A5%BC-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G3. 경계를 올바르게 처리하기</h4>\n<p>코드는 올바르게 동작해야 한다. 모든 경계 조건, 구석진 곳, 예외 등을 신경을 써야 하며 모든 경계 조건을 테스트하는 케이스가 있어야 한다.</p>\n<h4 id=\"g4-안전-절차를-지키기\"><a href=\"#g4-%EC%95%88%EC%A0%84-%EC%A0%88%EC%B0%A8%EB%A5%BC-%EC%A7%80%ED%82%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G4. 안전 절차를 지키기</h4>\n<p>안전 절차를 무시하면 위험하다. 예를 들면 변수를 직접 제어하거나 컴파일러 경고를 꺼버리면 끊임없는 문제가 발생한다.</p>\n<h4 id=\"g5-중복을-피하기\"><a href=\"#g5-%EC%A4%91%EB%B3%B5%EC%9D%84-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G5. 중복을 피하기</h4>\n<p>단 한 번만 사용하는 규칙을 지켜야 한다. 코드에서 중복을 발견할 때마다 이를 추상화시키고, 중복을 다른 클래스로 분리해야 한다.</p>\n<h4 id=\"g6-추상화-수준이-올바르게-지키기\"><a href=\"#g6-%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%9D%B4-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%A7%80%ED%82%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G6. 추상화 수준이 올바르게 지키기</h4>\n<p>추상화는 저 차원 상세 개념을 고차원 일반 개념으로 분리한다. 고차원 개념을 표현하는 추상(기초) 클래스와 저차원 개념을 표현하는 파생 클래스를 통해서 추상화를 진행해야 한다.</p>\n<h4 id=\"g7-기초-클래스는-파생-클래스에-독립적으로\"><a href=\"#g7-%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%ED%8C%8C%EC%83%9D-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G7. 기초 클래스는 파생 클래스에 독립적으로</h4>\n<p>기초 클래스와 파생 클래스로 나누는 큰 이유는 하나는 개념을 분리해 독립성을 보장하기 위해서이다. 따라서 서로 독립적으로 진행해야 하고, 이는 이후에 유지보수에 큰 장점을 가진다.</p>\n<h4 id=\"g8-과도한-정보를-피하기\"><a href=\"#g8-%EA%B3%BC%EB%8F%84%ED%95%9C-%EC%A0%95%EB%B3%B4%EB%A5%BC-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G8. 과도한 정보를 피하기</h4>\n<p>잘 정의된 모듈은 인터페이스가 아주 작다. 많은 함수를 제공하지 않기 때문에 결합도가 낮다. 이런 식으로 인터페이스에 노출할 함수를 제한해야 하고, 클래스가 제공하는 메서드 수는 작을수록 좋다. 마찬가지로 변수가 작을 수록 좋다. 더 나아가서 자료를 줌 기는 것 또한 중요하다.</p>\n<h4 id=\"g9-죽은-코드를-피하기\"><a href=\"#g9-%EC%A3%BD%EC%9D%80-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G9. 죽은 코드를 피하기</h4>\n<p>실행되지 않는 코드는 시스템에서 제거해주어야 한다.</p>\n<h4 id=\"g10-수직-분리-줄이기\"><a href=\"#g10-%EC%88%98%EC%A7%81-%EB%B6%84%EB%A6%AC-%EC%A4%84%EC%9D%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G10. 수직 분리 줄이기</h4>\n<p>변수와 함수는 사용되는 위치에 가깝게 정의해야 한다. 비공개 함수는 처음으로 호출한 직후에 정의해야 한다.</p>\n<h4 id=\"g11-일관성-유지\"><a href=\"#g11-%EC%9D%BC%EA%B4%80%EC%84%B1-%EC%9C%A0%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G11. 일관성 유지</h4>\n<p>어떤 개념을 특정 방식으로 구현했다면 유사한 개념도 같은 방식으로 구현해야 한다. 이러한 일관성을 유지한다면 코드를 읽고 수정하기가 쉬워진다.</p>\n<h4 id=\"g12-잡동사니-없애기\"><a href=\"#g12-%EC%9E%A1%EB%8F%99%EC%82%AC%EB%8B%88-%EC%97%86%EC%95%A0%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G12. 잡동사니 없애기</h4>\n<p>비어있는 기본 생성자와 같은 잡동사니는 삭제한다.</p>\n<h4 id=\"g13-인위적인-결합-피하기\"><a href=\"#g13-%EC%9D%B8%EC%9C%84%EC%A0%81%EC%9D%B8-%EA%B2%B0%ED%95%A9-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G13. 인위적인 결합 피하기</h4>\n<p>서로 무관한 개념은 인위적으로 결합하지 않는다.</p>\n<h4 id=\"g14-기능-욕심내지-말기\"><a href=\"#g14-%EA%B8%B0%EB%8A%A5-%EC%9A%95%EC%8B%AC%EB%82%B4%EC%A7%80-%EB%A7%90%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G14. 기능 욕심내지 말기</h4>\n<p>기능을 위해서 다른 클래스의 변수와 함수에 관심을 가져서는 안 된다. 어쩔 수 없는 경우를 제외하고는 최대한 피해야 한다.</p>\n<h4 id=\"g15-선택자-인수-피하기\"><a href=\"#g15-%EC%84%A0%ED%83%9D%EC%9E%90-%EC%9D%B8%EC%88%98-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G15. 선택자 인수 피하기</h4>\n<p>선택자 인수는 큰 함수를 작은 함수로 쪼개지 않으려는 게으름의 결과이다.</p>\n<h4 id=\"g16-분명한-의도-사용\"><a href=\"#g16-%EB%B6%84%EB%AA%85%ED%95%9C-%EC%9D%98%EB%8F%84-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G16. 분명한 의도 사용</h4>\n<p>코드를 짤 때는 의도를 최대한으로 밝혀야 한다.</p>\n<h4 id=\"g17-명백한-위치-선정\"><a href=\"#g17-%EB%AA%85%EB%B0%B1%ED%95%9C-%EC%9C%84%EC%B9%98-%EC%84%A0%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G17. 명백한 위치 선정</h4>\n<p>코드는 독자가 자연스럽게 기대할 위치에 배치해야 한다</p>\n<h4 id=\"g18-부적절한-static-함수-피하기\"><a href=\"#g18-%EB%B6%80%EC%A0%81%EC%A0%88%ED%95%9C-static-%ED%95%A8%EC%88%98-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G18. 부적절한 static 함수 피하기</h4>\n<p>일반적으로 static 함수보다는 인스턴스 함수가 더 좋고, 조금이라도 의심스럽다면 인스턴스 함수를 사용하는 방법이 더 좋다. 반드시 static 함수로 정의해야 한다면 재정의 가능성이 없는지 꼼꼼히 고려해야 한다.</p>\n<h4 id=\"g19-서술적인-변수-사용하기\"><a href=\"#g19-%EC%84%9C%EC%88%A0%EC%A0%81%EC%9D%B8-%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G19. 서술적인 변수 사용하기</h4>\n<p>서술적인 변수 이름 등인 일반적으로 더 많을수록 좋다. 좋은 변수 이름만 붙여도 모듈이 읽기 쉬운 모듈로 탈바꿈한다.</p>\n<h4 id=\"g20-이름과-기능이-일치하는-함수\"><a href=\"#g20-%EC%9D%B4%EB%A6%84%EA%B3%BC-%EA%B8%B0%EB%8A%A5%EC%9D%B4-%EC%9D%BC%EC%B9%98%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G20. 이름과 기능이 일치하는 함수</h4>\n<p>이름만으로 분명하지 않아, 구현을 봐야 한다면 더 좋은 이름을 선정해야 한다.</p>\n<h4 id=\"g21-알고리즘-이해하기\"><a href=\"#g21-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G21. 알고리즘 이해하기</h4>\n<p>기능이 뻔히 보일 정도로 함수를 깔끔하게 구해야 하며, 이를 통해 알고리즘이 올바르다는 것을 보여주어야 한다.</p>\n<h4 id=\"g22-논리적-의존성은-물리적으로도-나타내기\"><a href=\"#g22-%EB%85%BC%EB%A6%AC%EC%A0%81-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%80-%EB%AC%BC%EB%A6%AC%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8F%84-%EB%82%98%ED%83%80%EB%82%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G22. 논리적 의존성은 물리적으로도 나타내기</h4>\n<p>한 모듈이 다른 모듈에 의존한다면 물리적인 의존성도 주어야 한다.</p>\n<h4 id=\"g23-ifelse-혹은-switchcase-문보다-다형성을-사용하기\"><a href=\"#g23-ifelse-%ED%98%B9%EC%9D%80-switchcase-%EB%AC%B8%EB%B3%B4%EB%8B%A4-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G23. If/Else 혹은 Switch/Case 문보다 다형성을 사용하기</h4>\n<p>대부분의 개발자가 switch 문을 사용하는 이유는 그 상황에서 가장 올바른 선택보다는 손쉬운 선택이므로 선택한다.</p>\n<p>유형보다 함수가 더 쉽게 변하는 경우는 드물기 때문에, 같은 선택을 수행하는 다른 코드에서는 다형성 객체를 생성하고, 선택 유형 하나에는 switch 문을 한 번만 사용해야 한다.</p>\n<h4 id=\"g24-표준-표기법을-사용하기\"><a href=\"#g24-%ED%91%9C%EC%A4%80-%ED%91%9C%EA%B8%B0%EB%B2%95%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G24. 표준 표기법을 사용하기</h4>\n<p>팀은 업계 표준에 기반한 구현 표준을 지켜야 한다.</p>\n<h4 id=\"g25-매직-숫자는-명명된-상수로-교체하기\"><a href=\"#g25-%EB%A7%A4%EC%A7%81-%EC%88%AB%EC%9E%90%EB%8A%94-%EB%AA%85%EB%AA%85%EB%90%9C-%EC%83%81%EC%88%98%EB%A1%9C-%EA%B5%90%EC%B2%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G25. 매직 숫자는 명명된 상수로 교체하기</h4>\n<p>예를 들면 <code class=\"language-text\">86400</code>이라는 숫자는 <code class=\"language-text\">SECONDS_PER_DAY와</code> 같이 표현해야 한다.</p>\n<h4 id=\"g26-정확하게-작성하기\"><a href=\"#g26-%EC%A0%95%ED%99%95%ED%95%98%EA%B2%8C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G26. 정확하게 작성하기</h4>\n<p>코드에서 뭔가를 결정할 때는 정확히 결정해야 한다. 결정을 내리는 이유와 예외를 처리할 방법을 정확하게 알아야 한다.</p>\n<h4 id=\"g27-관례보다는-구조를-사용하기\"><a href=\"#g27-%EA%B4%80%EB%A1%80%EB%B3%B4%EB%8B%A4%EB%8A%94-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G27. 관례보다는 구조를 사용하기</h4>\n<p>명명 관례도 좋지만 구조 자체로 강제로 하는 경우가 더 좋을 수 있다.</p>\n<h4 id=\"g28-조건을-캡슐화하기\"><a href=\"#g28-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%BA%A1%EC%8A%90%ED%99%94%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G28. 조건을 캡슐화하기</h4>\n<p>부울 논리를 넣는 것보다 의도를 분명히 밝히는 함수로 표현을 하는 것이 더 좋다.</p>\n<p>즉, <code class=\"language-text\">if(shouldBeDeleted(timer))</code> 가 <code class=\"language-text\">if(timer.hasExpired() &amp;&amp;! timer.isRecurrent())</code> 보다 좋다.</p>\n<h4 id=\"g29-부정-조건은-피하기\"><a href=\"#g29-%EB%B6%80%EC%A0%95-%EC%A1%B0%EA%B1%B4%EC%9D%80-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G29. 부정 조건은 피하기</h4>\n<p>부정 조건은 긍정 조건보다 이해하기 어렵다. 가능하다면 긍정 조건을 사용하는 것이 좋다</p>\n<h4 id=\"g30-함수는-한-가지만-하기\"><a href=\"#g30-%ED%95%A8%EC%88%98%EB%8A%94-%ED%95%9C-%EA%B0%80%EC%A7%80%EB%A7%8C-%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G30. 함수는 한 가지만 하기</h4>\n<h4 id=\"g31-숨겨진-시간적인-결합-피하기\"><a href=\"#g31-%EC%88%A8%EA%B2%A8%EC%A7%84-%EC%8B%9C%EA%B0%84%EC%A0%81%EC%9D%B8-%EA%B2%B0%ED%95%A9-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G31. 숨겨진 시간적인 결합 피하기</h4>\n<p>때로는 시간적인 결합을 필요하다. 단 이때는 시간적인 결합을 숨겨서는 안 된다. 실행되는 순서가 중요하기 때문에 일종의 연결 소자를 통해 시간적인 결합을 노출하는 것도 좋은 방법이 된다.</p>\n<h4 id=\"g32-일관성-유지하기\"><a href=\"#g32-%EC%9D%BC%EA%B4%80%EC%84%B1-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G32. 일관성 유지하기</h4>\n<p>코드 구조를 잡을 때는 이유를 고민하고, 그 이유를 코드 구조로 명백하게 표현해야 한다.</p>\n<h4 id=\"g33-경계-조건을-캡슐화-하기\"><a href=\"#g33-%EA%B2%BD%EA%B3%84-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%BA%A1%EC%8A%90%ED%99%94-%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G33. 경계 조건을 캡슐화 하기</h4>\n<p>경계 조건은 빼먹기나 놓치기 십상이다.</p>\n<h4 id=\"g34-함수는-추상화-수준을-한-단계만-내려가야-한다\"><a href=\"#g34-%ED%95%A8%EC%88%98%EB%8A%94-%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%9D%84-%ED%95%9C-%EB%8B%A8%EA%B3%84%EB%A7%8C-%EB%82%B4%EB%A0%A4%EA%B0%80%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G34. 함수는 추상화 수준을 한 단계만 내려가야 한다.</h4>\n<p>함수 내 모든 문장은 추상화 수준이 동일해야 한다. 그리고 그 추상화 수준은 함수 이름이 의미하는 작업보다 한 단계 낮아야 한다.</p>\n<h4 id=\"g35-설정-정보는-최상위-단계에-두기\"><a href=\"#g35-%EC%84%A4%EC%A0%95-%EC%A0%95%EB%B3%B4%EB%8A%94-%EC%B5%9C%EC%83%81%EC%9C%84-%EB%8B%A8%EA%B3%84%EC%97%90-%EB%91%90%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G35. 설정 정보는 최상위 단계에 두기</h4>\n<p>추상화 최상위 단계에 둬야 할 기본값 상수나 설정 관련 상수를 저 차원 함수에 숨겨서는 안 된다. 설정 관련 상수는 최상위 단계에 두어야 한다. 그래야 변경하기 쉽고, 인수로 넘길 수 있다.</p>\n<h4 id=\"g36-추이적-탐색-피하기\"><a href=\"#g36-%EC%B6%94%EC%9D%B4%EC%A0%81-%ED%83%90%EC%83%89-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>G36. 추이적 탐색 피하기</h4>\n<p>일반적으로 한 모듈은 주변 모듈을 모르면 모를수록 좋다. 이를 디미터의 법칙(Law of Demeter)라고 부른다.</p>\n<h3 id=\"자바\"><a href=\"#%EC%9E%90%EB%B0%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바</h3>\n<h4 id=\"j1-긴-import-목록을-피하기-와일드카드를-사용하는-것이-좋다\"><a href=\"#j1-%EA%B8%B4-import-%EB%AA%A9%EB%A1%9D%EC%9D%84-%ED%94%BC%ED%95%98%EA%B8%B0-%EC%99%80%EC%9D%BC%EB%93%9C%EC%B9%B4%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A2%8B%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>J1. 긴 import 목록을 피하기 와일드카드를 사용하는 것이 좋다.</h4>\n<p>패키지에서 클래스를 둘 이상 사용한다면 와일드카드를 사용해 패키지 전체를 가져오는 것이 좋다</p>\n<p>Ex) <code class=\"language-text\">import package.*;</code></p>\n<h4 id=\"j2-상수는-상속하지-않는다\"><a href=\"#j2-%EC%83%81%EC%88%98%EB%8A%94-%EC%83%81%EC%86%8D%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>J2. 상수는 상속하지 않는다.</h4>\n<h4 id=\"j3-상수-vs-enum\"><a href=\"#j3-%EC%83%81%EC%88%98-vs-enum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>J3. 상수 VS Enum</h4>\n<p>자바 5부터는 enum을 제공하기 때문에 enum을 사용하는 방법은 좋다. enum은 이름이 부여된 열거체에 속하며, 메서드와 필도도 사용할 수 있기 때문에 int보다 훨씬 더 유연하고 서술적인 강력한 도구이다.</p>\n<h3 id=\"이름\"><a href=\"#%EC%9D%B4%EB%A6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이름</h3>\n<h4 id=\"n1-서술적인-이름-사용하기\"><a href=\"#n1-%EC%84%9C%EC%88%A0%EC%A0%81%EC%9D%B8-%EC%9D%B4%EB%A6%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>N1. 서술적인 이름 사용하기</h4>\n<p>서술적인 이름을 신중하게 고른다. 소프트웨어 가독성의 90%는 이름이 결정한다.</p>\n<h4 id=\"n2-적절한-추상화-수준에서-이름-선택하기\"><a href=\"#n2-%EC%A0%81%EC%A0%88%ED%95%9C-%EC%B6%94%EC%83%81%ED%99%94-%EC%88%98%EC%A4%80%EC%97%90%EC%84%9C-%EC%9D%B4%EB%A6%84-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>N2. 적절한 추상화 수준에서 이름 선택하기</h4>\n<p>구현을 드러내는 이름은 피하기. 적절한 추상화 수준에서 이름을 선택하는 다른 연결방식에도 사용 가능하다</p>\n<h4 id=\"n3-가능하다면-표준-명명법-사용하기\"><a href=\"#n3-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4%EB%A9%B4-%ED%91%9C%EC%A4%80-%EB%AA%85%EB%AA%85%EB%B2%95-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>N3. 가능하다면 표준 명명법 사용하기</h4>\n<h4 id=\"n4-명확한-이름\"><a href=\"#n4-%EB%AA%85%ED%99%95%ED%95%9C-%EC%9D%B4%EB%A6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>N4. 명확한 이름</h4>\n<p>함수나 변수의 목적을 명확히 밝히는 이름을 선택하기</p>\n<h4 id=\"n5-긴-범위는-긴-이름을-사용하기\"><a href=\"#n5-%EA%B8%B4-%EB%B2%94%EC%9C%84%EB%8A%94-%EA%B8%B4-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>N5. 긴 범위는 긴 이름을 사용하기</h4>\n<p>이름 길이는 범위 길이에 비례해야 한다.</p>\n<h4 id=\"n6-인코딩을-피하기\"><a href=\"#n6-%EC%9D%B8%EC%BD%94%EB%94%A9%EC%9D%84-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>N6. 인코딩을 피하기</h4>\n<p>이름에 유형 정보나 범위 정보를 넣어서는 안 된다.</p>\n<h4 id=\"n7-이름으로-부수-효과를-설명하기\"><a href=\"#n7-%EC%9D%B4%EB%A6%84%EC%9C%BC%EB%A1%9C-%EB%B6%80%EC%88%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>N7. 이름으로 부수 효과를 설명하기</h4>\n<p>함수, 변수, 클래스가 하는 일을 모두 기술하는 이름을 사용하기. 이름에 부수 효과를 숨기지 않기</p>\n<h3 id=\"테스트\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트</h3>\n<h4 id=\"t1-불충분한-테스트\"><a href=\"#t1-%EB%B6%88%EC%B6%A9%EB%B6%84%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T1. 불충분한 테스트</h4>\n<p>테스트 케이스는 잠재적으로 깨질 만한 부분을 모두 테스트해야 한다. 테스트 케이스가 확인하지 않는 조건이나 검증하지 않는 계산이 있다면 그 테스트는 불안정한 테스트이다</p>\n<h4 id=\"t2-커버리지-도구를-사용하기\"><a href=\"#t2-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%EB%8F%84%EA%B5%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T2. 커버리지 도구를 사용하기</h4>\n<p>커버리지 도구는 테스트가 빠뜨리는 공백을 알려준다. 이를 사용하면 테스트가 불충분한 모듈, 클래스, 함수를 찾기가 쉬워진다.</p>\n<h4 id=\"t3-사소한-테스트-건너뛰지-말기\"><a href=\"#t3-%EC%82%AC%EC%86%8C%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B1%B4%EB%84%88%EB%9B%B0%EC%A7%80-%EB%A7%90%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T3. 사소한 테스트 건너뛰지 말기</h4>\n<p>사소한 테스트는 짜기 쉽다. 사소한 테스트가 제공하는 문서적 가치는 구현에 드는 비용을 넘어선다</p>\n<h4 id=\"t4-무시한-테스트는-모호함을-뜻한다\"><a href=\"#t4-%EB%AC%B4%EC%8B%9C%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EB%AA%A8%ED%98%B8%ED%95%A8%EC%9D%84-%EB%9C%BB%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T4. 무시한 테스트는 모호함을 뜻한다</h4>\n<p>불분명한 요구사항은 테스트 케이스를 주석으로 처리하고나, 테스트 케이스에 @Ignore를 붙여서 표현해버린다.</p>\n<h4 id=\"t5-경계-조건을-테스트하기\"><a href=\"#t5-%EA%B2%BD%EA%B3%84-%EC%A1%B0%EA%B1%B4%EC%9D%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T5. 경계 조건을 테스트하기</h4>\n<p>경계조건은 각별히 신경 써서 테스트하기</p>\n<h4 id=\"t6-버그-주변은-철저히-테스트하기\"><a href=\"#t6-%EB%B2%84%EA%B7%B8-%EC%A3%BC%EB%B3%80%EC%9D%80-%EC%B2%A0%EC%A0%80%ED%9E%88-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T6. 버그 주변은 철저히 테스트하기</h4>\n<p>버그는 서로 모이는 경향이 있다</p>\n<h4 id=\"t7-실패-패턴을-살펴보기\"><a href=\"#t7-%EC%8B%A4%ED%8C%A8-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T7. 실패 패턴을 살펴보기</h4>\n<p>테스트 케이스가 실패하는 패턴으로 문제를 진단할 수 있다. 테스트 케이스를 꼼꼼하게 짜게 되면 실패와 성공 패턴만 봐도 답을 찾을 수도 있다.</p>\n<h4 id=\"t8-테스트-커버리지-패턴을-살피기\"><a href=\"#t8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%B4%ED%94%BC%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T8. 테스트 커버리지 패턴을 살피기</h4>\n<p>통과하는 테스트가 실행하거나 실행하지 않는 코드를 살펴보면 실패하는 테스트 케이스의 실패 원인이 드러난다.</p>\n<h4 id=\"t9-테스트는-빨라야-한다\"><a href=\"#t9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EB%B9%A8%EB%9D%BC%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>T9 테스트는 빨라야 한다</h4>\n<p>느린 테스트 케이스는 실행하지 않게 된다.</p>\n"}},{"node":{"title":"[Review] Clean Code 내용정리 - 6","path":"/06-clean-code/","date":"6. November 2020","timeToRead":7,"description":" Clean code 책 정리 마지막 편입니다. ","content":"<h1 id=\"clean-code-내용-정리---6\"><a href=\"#clean-code-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC---6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Clean Code 내용 정리 - 6</h1>\n<h2 id=\"부록-a-동시성\"><a href=\"#%EB%B6%80%EB%A1%9D-a-%EB%8F%99%EC%8B%9C%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>부록 A. 동시성</h2>\n<h3 id=\"\"></h3>\n<p>클라이언트/서버 예제</p>\n<h4 id=\"서버\"><a href=\"#%EC%84%9C%EB%B2%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서버</h4>\n<p>애플리케이션에서 많은 시간을 보내는 가능성은 크게 2개이다.</p>\n<ul>\n<li>I/O : 소켓 사용, 데이터베이스 연결, 가상 메모리 스와핑 기다리기 emd</li>\n<li>프로세서 : 수치 계산, 정규 표현식 처리, 가비지 컬렉션 등</li>\n</ul>\n<p>일반적으로 프로그램이 <strong>프로세서 연산에 많은 시간을 보낸다면, 하드웨어를 추가하여 성능을 높여야 한다.</strong></p>\n<p>즉, 스레드를 늘린다고 해결할 수 있는 문제가 아니다.</p>\n<p>하지만 프로그램이 주로 <strong>I/O 연산에 시간을 보낸다면 동시성이 성능을 높여 줄 수 있다.</strong></p>\n<h4 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h4>\n<p>단일스레드 시스템에서 다중 스레드 시스템으로 변환하고, 성능을 높이기 위해서는 다음과 같은 방법을 사용해야한다.</p>\n<ul>\n<li>I/O에 많은 시간을 보내야 한다.</li>\n<li>관련된 코드를 분리시켜 여러개의 클래스로 분리해 <strong>단일 책임 원칙</strong>을 지켜야 한다.</li>\n</ul>\n<h3 id=\"가능한-실행-경로\"><a href=\"#%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%8B%A4%ED%96%89-%EA%B2%BD%EB%A1%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가능한 실행 경로</h3>\n<p>10000개의 스레드로 현재 값인 변수에 1을 더한다고 했을 때 가정했을때,</p>\n<p>최악의 경우는 1부터 10000까지 나올 수 있다.</p>\n<p>이를 해결하기 위해서는 ...</p>\n<h4 id=\"심층-분석\"><a href=\"#%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>심층 분석</h4>\n<p>3가지 정의를 이야기할 수 있다.</p>\n<ul>\n<li><strong>프레임</strong> : 모든 메서드 호출에는 프레임이 필요하다</li>\n<li><strong>지역 변수</strong> : 메서드 범위 내에 정의되는 모든 변수를 가리킴</li>\n<li><strong>피연산자 스택</strong> : JVM이 지원하는 명령 대다수는 매개변수를 받으며, 이 매개변수를 저장하는 장소</li>\n</ul>\n<p>이 3개를 atomic으로 잘 처리한다면, 결과는 일정하다.</p>\n<h5 id=\"결론-1\"><a href=\"#%EA%B2%B0%EB%A1%A0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론</h5>\n<p>스레드가 서로의 작업을 덮어쓰는 과정을 이해하기 위해서는 어떤 연산이 안전한지 못한지에 파악할 수 있도록 메모리 모델을 이해하고 있어야한다.</p>\n<p>즉, 아래의 3가지를 이해해야 한다.</p>\n<ul>\n<li>공유 객체/값이 있는 곳</li>\n<li>동시 읽기/수정 문제를 일으킬 소지가 있는 코드</li>\n<li>동시성 문제를 방지하는 법</li>\n</ul>\n<h3 id=\"라이브러리를-이해하기\"><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>라이브러리를 이해하기</h3>\n<h4 id=\"executor-프레임워크\"><a href=\"#executor-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Executor 프레임워크</h4>\n<ul>\n<li>스레드 풀링으로 정교한 실행을 지원한다.</li>\n<li>코드가 깔끔해지고 이해하기 쉬워지며, 크기가 작아진다.</li>\n<li>스레드 풀 크기를 자동으로 조정하며, 재사용할 수 있다.</li>\n</ul>\n<h4 id=\"스레드를-차단하지-않는-방법non-blocking\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A5%BC-%EC%B0%A8%EB%8B%A8%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%B0%A9%EB%B2%95non-blocking\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드를 차단하지 않는 방법(non blocking)</h4>\n<ul>\n<li>\n<p>최신 프로세서는 blocking 하지 않고 안정적으로 값을 갱신한다.</p>\n<ul>\n<li>Ex) AtomicInteger, incrementAndGet() 등등</li>\n</ul>\n</li>\n<li>현대 프로세서는 CAS(Compare and Swap)을 지원한다.</li>\n</ul>\n<h4 id=\"다중-스레드-환경에서-안전하지-않은-클래스\"><a href=\"#%EB%8B%A4%EC%A4%91-%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EC%95%88%EC%A0%84%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다중 스레드 환경에서 안전하지 않은 클래스</h4>\n<p>다중 스레드 환경에서 안정하지 않는 환경은 다음과 같다.</p>\n<ul>\n<li>SimpleDateFormat</li>\n<li>데이터베이스 연결</li>\n<li>java.util 컨테이너 클래스</li>\n<li>서블릿</li>\n</ul>\n<h3 id=\"메서드-사이에-존재하는-의존성-조심\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9D%B4%EC%97%90-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A1%B0%EC%8B%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메서드 사이에 존재하는 의존성 조심</h3>\n<p>추적하기 어렵지만 이를 해결하는 방안은 크게 3가지로 구성된다.</p>\n<h4 id=\"1-실패를-용인하기\"><a href=\"#1-%EC%8B%A4%ED%8C%A8%EB%A5%BC-%EC%9A%A9%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 실패를 용인하기</h4>\n<h4 id=\"2-클라이언트-기반-잠금\"><a href=\"#2-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EA%B8%B0%EB%B0%98-%EC%9E%A0%EA%B8%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 클라이언트-기반 잠금</h4>\n<p>굉장히 위험한 전략이다.</p>\n<h4 id=\"3-서버-기반-잠금\"><a href=\"#3-%EC%84%9C%EB%B2%84-%EA%B8%B0%EB%B0%98-%EC%9E%A0%EA%B8%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 서버-기반 잠금</h4>\n<p>일반적으로 가장 바람직한 방법이다.</p>\n<ul>\n<li>코드 중복이 줄어든다.</li>\n<li>성능이 좋아진다.</li>\n<li>오류가 발생할 가능성이 줄어든다.</li>\n<li>스레드 정책이 하나이다.</li>\n<li>공유 변수 범위가 절어든다.</li>\n</ul>\n<h3 id=\"작업-처리량-높이기\"><a href=\"#%EC%9E%91%EC%97%85-%EC%B2%98%EB%A6%AC%EB%9F%89-%EB%86%92%EC%9D%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>작업 처리량 높이기</h3>\n<p>동기화 영역은 언제나 작아야한다.</p>\n<h3 id=\"데드락\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드락</h3>\n<p>데드락의 4가지 조건</p>\n<ul>\n<li>상호 배제 (Mutual Exclusion)</li>\n<li>잠금 &#x26; 대기 (Lock &#x26; Wait)</li>\n<li>선점 불가 (No Preemption)</li>\n<li>순환 대기 (Circular Wait)</li>\n</ul>\n<h4 id=\"상호-배제\"><a href=\"#%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상호 배제</h4>\n<ul>\n<li>정의 : 여러 스레드가 동시에 사용하지 못하고, 개수가 제한적인 경우</li>\n<li>\n<p>해결책</p>\n<ul>\n<li>동시에 사용해도 괜찮은 자원을 사용, Ex) Atomic</li>\n<li>스레드 수 이상으로 자원 수를 높임</li>\n<li>자원을 점유하기 전에 필요한 자원이 모두 있는지 확인</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"잠금--대기\"><a href=\"#%EC%9E%A0%EA%B8%88--%EB%8C%80%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>잠금 &#x26; 대기</h4>\n<ul>\n<li>정의 : 스레드가 자원을 점유하면 필요한 나머지 자원까지 모두 점유해 작업을 마칠 때까지 이미 점유한 자원을 내놓지 않는다.</li>\n<li>\n<p>해결책</p>\n<ul>\n<li>대기하지 않기</li>\n</ul>\n</li>\n<li>\n<p>문제점</p>\n<ul>\n<li>기아(Starvation) : 한 스레드가 계속해서 필요한 자원을 점유하지 못하는 것</li>\n<li>라이브락(Livelock) : 여러 스레드가 한번에 잠금으로 들어가 계속 자원을 점유했다 내놨다를 반복하는 것</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"선점-불가\"><a href=\"#%EC%84%A0%EC%A0%90-%EB%B6%88%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>선점 불가</h4>\n<ul>\n<li>정의 : 한 스레드가 다른 스레드로부터 자원을 빼앗지 못함</li>\n<li>\n<p>해결책</p>\n<ul>\n<li>다른 자원을 뺏어오기</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"순환-대기\"><a href=\"#%EC%88%9C%ED%99%98-%EB%8C%80%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>순환 대기</h4>\n<ul>\n<li>정의 : 스레드 A는 B가 끝나기를 기다리고, 스레드 B는 A가 끝나기를 기다리는 상황</li>\n<li>해결책 : 간단한 규약을 설정해서 순환이 없도록 한다</li>\n<li>\n<p>문제점</p>\n<ul>\n<li>자원을 할당하는 순서와 자원을 사용하는 순서를 다르게 한다</li>\n<li>때로는 순서에 따라 자원을 할당하기 어려움</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"다중-스레드-코드-테스트\"><a href=\"#%EB%8B%A4%EC%A4%91-%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다중 스레드 코드 테스트</h3>\n<ul>\n<li>몬테 카를로 테스트 : 조율이 가능하게 유연하게 테스트를 만든다</li>\n<li>시스템을 배치할 플랫폼 전부에서 테스트를 돌린다</li>\n<li>부하가 변하는 장비에서 테스트를 돌린다.</li>\n</ul>\n<h3 id=\"스레드-코드-테스트를-도와주는-도구\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%8F%84%EC%99%80%EC%A3%BC%EB%8A%94-%EB%8F%84%EA%B5%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스레드 코드 테스트를 도와주는 도구</h3>\n<p>대표적인 예시로 IBM의 ConTest가 있다.</p>\n<p>사용방법은 다음과 같다.</p>\n<ul>\n<li>실제 코드와 테스트 코드 작성</li>\n<li>ConTest로 실제 코드와 테스트 코드에 보조 코드 추가</li>\n<li>테스트를 실행</li>\n</ul>\n<hr>\n<p>드디어 정리 완료.</p>\n<p><strong>부록 B. org.jfree.date.SerialDate</strong> 와 <strong>부록 C. 휴리스틱의 교차 참조 목록</strong> 은 코드 위주라서, 해당 부분을 따로 추가하지 않았다.</p>\n<p>점차 이전의 게시글을 틈틈이 수정하면서 가독성을 높이는 작업을 할 예정.</p>\n<p>책의 내용을 대부분 정리하기는 했지만, 코드나 원글의 내용을 다 담지 못한 듯 하여 한번 책을 읽어보는 것이 좋을 듯합니다.</p>\n"}},{"node":{"title":"[Java] url-pattern이란","path":"/00-java-urlpattern/","date":"3. November 2020","timeToRead":3,"description":"url-pattern에 대해 정리합니다.","content":"<h1 id=\"java-servlet--url-pattern-이란\"><a href=\"#java-servlet--url-pattern-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Servlet : url-pattern 이란</h1>\n<p>url-pattern은 자바 서블릿 개발을 진행하다보면, 한번은 꼭 보게 되는 것 같다. 그러나, 한번도 제대로 정리해본적이 없어서, 이를 제대로 한 번 알아보고 싶어졌다.</p>\n<br/>\n<h2 id=\"url-pattern의-정의\"><a href=\"#url-pattern%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>url-pattern의 정의</h2>\n<p>서블릿을 생성하고 서블릿을 매핑을 시킨다. 서블릿을 사용하면 주소에 경로가 뜨기 때문에 이는 보안에 굉장히 취약하다. 그래서 특정한 단어로 매핑을 시킨다.</p>\n<p><strong>url-patten은 실제 서블릿 매핑 이름을 의미한다. 서블릿 매핑 시 사용되는 가상의 이름이며 클라이언트가 브라우저에게 요청할 때, 사용할 때는 반드시 '/'(슬래시)로 시작한다.</strong></p>\n<p>서블릿 매핑 이름으로 사용되는 URL 패턴의 종류는 정확히 이름까지 일치하는지, 디렉토리까지 일치하는지, 확장자만 일치하는지로 세가지로 구별된다.</p>\n<br/>\n<h2 id=\"url-pattern의-종류\"><a href=\"#url-pattern%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>url-pattern의 종류</h2>\n<p>url-pattern의 패턴은 3가지로 구성되지만, 이 자리에서는 디렉토리 패턴과 확장자 패턴에 대해 이야기 해보겠습니다. 정확히 일치하는 패턴의 경우는 말 그대로 <code class=\"language-text\">WebServlet(&#39;정확한/주소/URL/패턴&#39;)</code>으로 요청할 때만 실행된다.</p>\n<h3 id=\"디렉토리-패턴\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>디렉토리 패턴</h3>\n<p>디렉토리 패턴은 디렉토리 형태로 서버의 해당 컴포넌트를 찾아서 실행하는 구조입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/98429019-98eaf000-20e7-11eb-9f3f-3de334e29015.png\" alt=\"image\"></p>\n<p>서블릿 코드는 다음과 같이 작성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/*\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestServlet1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Code...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다음 예시 코드는 /test/ 디렉토리로 시작되는 요청에 대해 실행됩니다.</li>\n</ul>\n<h3 id=\"확장자-패턴\"><a href=\"#%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장자 패턴</h3>\n<p>확장자 패턴은 확장자 형태로 서버의 해당 컴포넌트를 찾아서 실행하는 구조입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/98429024-9dafa400-20e7-11eb-840a-0166bf5c0236.png\" alt=\"image\"></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestServlet2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Code...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다음 예시 코드는 매핑 이름에 상관없이 확장자가 .me 이면 실행됩니다.</li>\n</ul>\n<blockquote>\n<p>추가적으로 일반적으로 <code class=\"language-text\">/test/example.me</code>와 같이 요청이 들어온 경우, 앞의 디렉토리 이름을 우선시 하여 <strong>TestServlet1</strong>이 실행되며, <code class=\"language-text\">/없는디렉토리/example.me</code>의 요청의 경우에는 없는 디렉토리이므로 <strong>.me</strong>을 우선시하여 TestServlet2가 실행된다.</p>\n</blockquote>\n<br/>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h2>\n<p>이후에 서블릿이나, 좀 더 상세하게 정리할 수 있는 기회가 되면 정리하겠다.</p>\n<p>최근 업무가 많아져서... 블로그 작성할 시간이 부족해지는 것을 느낀다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://windorsky.tistory.com/entry/%EC%84%9C%EB%B8%94%EB%A6%BF-URL-pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://windorsky.tistory.com/entry/%EC%84%9C%EB%B8%94%EB%A6%BF-URL-pattern</a></li>\n<li><a href=\"https://dololak.tistory.com/740\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dololak.tistory.com/740</a></li>\n<li><a href=\"https://rwd337.tistory.com/34\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rwd337.tistory.com/34</a></li>\n<li><a href=\"https://chrismare.tistory.com/entry/url-pattern-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://chrismare.tistory.com/entry/url-pattern-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4</a></li>\n</ul>\n"}},{"node":{"title":"[Java] DAO, DTO, Repository을 이해하자","path":"/00-java-repositorys/","date":"1. November 2020","timeToRead":5,"description":" dao, dto, repository에 대한 기본적인 내용을 정리합니다. ","content":"<h1 id=\"dao-dto-repository-entity-class를-이해하기\"><a href=\"#dao-dto-repository-entity-class%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DAO, DTO, Repository, Entity Class를 이해하기</h1>\n<p>일반적으로 스프링 프로젝트 파일에 이름을 정할때, DTO, Repository, Entity 등의 이름이 들어가는 것을 알 수 있는데, 좀 더 자세하게 이 정의에 대해서 알고 싶어졌다.</p>\n<p>스프링을 사용한 웹앱의 경우 DAO, DTO, Repository, Entity를 사용하여 데이터를 다루며 스프링부트의 경우 내장 톰캣을 통해 서블릿을 관리하고 이를 컨트롤러에서 각 어노테이션을 통해 매핑한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97795536-b5e87480-1c4a-11eb-9439-89d9558150da.png\" alt=\"image\"></p>\n<br/>\n<h2 id=\"repository\"><a href=\"#repository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Repository</h2>\n<ul>\n<li>MVC 패턴에서 모델에 해당하는 부분으로 POJO로는 접근불가능하다.</li>\n<li>Persistence Layer와 1:1 매칭이 가능하다.</li>\n<li>Java Persistenc API 구현체를 통해서 자바 객체에 접근할 수 있다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberRepository</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">EntityManager</span> em<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드는 JPA 구현체가 Entity Model 객체를 사용해서 DB에 접근한다.</p>\n<blockquote>\n<p>POJO란.</p>\n<ul>\n<li>간단하게 설명하자면, \"getter / setter를 가진 단순한 자바 오프젝트\"이며 의존성이 없고, 테스트도 용이하며 추후 수정이 편리한 오프젝트라고 설명할 수 있을 것 같다/</li>\n<li>좀 더 자세하게 설명하면 더 복잡해서 POJO에 대한 글은 다음에 따로 정리하겠다.</li>\n</ul>\n</blockquote>\n<br/>\n<h2 id=\"daodata-access-object\"><a href=\"#daodata-access-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DAO(Data Access Object)</h2>\n<ul>\n<li>원래 DB의 데이터(필드)와 프로그래밍 언어는 패러다임의 불일치로 인해 사용할 수 없다. 이를 원래 사용할려면 별도의 SQL을 작성해서 SQL을 객체의 필드에 하나씩 매핑하거나 순수한 SQL을 작성하여 사용해야 한다.</li>\n</ul>\n<h3 id=\"entity\"><a href=\"#entity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Entity</h3>\n<ul>\n<li>하지만 별도의 Entity Class를 사용해서 클래스를 테이블과 1:1 매칭할 수 있다. 이러한 Entity Class를 <strong>도메인</strong>이라고 하며 가장 DB와 가까운 클래스이다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// PK</span>\n\n    <span class=\"token annotation punctuation\">@NotEmpty</span>\n    <span class=\"token annotation punctuation\">@NotNull</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span> <span class=\"token comment\">// 내장 타입 임베딩</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@JsonIgnore</span>\n    <span class=\"token annotation punctuation\">@OneToMany</span> <span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span> orders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음은 예시 코드이다.</p>\n<ul>\n<li>Entity의 각 필드는 DB 테이블과 1:1매칭되며 PK를 가진다.</li>\n<li>Entity는 순수한 도메인 로직과 비지니스 로직만 가지고 있어야한다.</li>\n<li>Entity는 DB의 데이터를 전달해주고 Service에서 사용할 비즈니스 로직만을 가져야한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span></code></pre>\n<p>다음 코드는 서비스 계층의 Repository를 사용한 코드이다.</p>\n<br/>\n<h2 id=\"dtodata-transfer-object\"><a href=\"#dtodata-transfer-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DTO(Data Transfer Object)</h2>\n<ul>\n<li>Entity를 통해 DB에서 데이터를 꺼내왔지만 데이터를 접근해야하는 경우 문제가 있다.</li>\n<li>Controller와 Presentation Layer는 클라이언트와 직접 만나며, Entity는 프레젠테이션 계층과 완전히 분리되어야 한다.</li>\n<li>이러한 경우에 DTO를 사용한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberDto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 경우 다음과 같이 DTO를 사용한다.</p>\n<p>특징은 다음과 같다.</p>\n<ul>\n<li>Getter/Setter가 없다.</li>\n<li>Wrapping 된 순수한 데이터 객체</li>\n<li>Entity에 직접 접근하지 않으므로, Entity 변경시, DTO만 변경하면 된다.</li>\n</ul>\n<br/>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h2>\n<p>정리하자면 스프링 프로젝트는 다음과 같은 구조를 가진다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97795536-b5e87480-1c4a-11eb-9439-89d9558150da.png\" alt=\"image\"></p>\n<p>구성은 다음 4개와 같다.</p>\n<h3 id=\"domainentity\"><a href=\"#domainentity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Domain(Entity)</h3>\n<ul>\n<li></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Getter</span> <span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>DB 테이블과 1:1 매칭된다.</li>\n</ul>\n<h3 id=\"repositorydao\"><a href=\"#repositorydao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Repository(DAO)</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberRepository</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">EntityManager</span> em<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>Entity를 통해 데이터를 DB에 저장된다.</li>\n<li>엔티티는 DB의 데이터와 매칭되는 것</li>\n<li>실제 DB에 데이터를 저장하는 건 Repository 클래스의 Entity Manager를 통해 이루어진다</li>\n</ul>\n<h3 id=\"service\"><a href=\"#service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>프레젠테이션(뷰)에서 엔티티에 직접 접근하지않고 비즈니스 로직을 처리할 수 있도록하는 계층이다.</li>\n<li>Repository에 정의된 비즈니스 로직을 처리하거나 엔티티에 접근한다.</li>\n</ul>\n<h3 id=\"controller\"><a href=\"#controller\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Controller</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span> <span class=\"token comment\">// Response + Request</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberApiController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberService</span> memberService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api/v1/members\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemberDto</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">memberV2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre>\n<ul>\n<li>프레젠테이션 계층으로 클라이언트의 요청을 처리한다.</li>\n<li>엔티티는 서비스에 의해 추상화되어 직접 접근 불가능하다.</li>\n<li>서비스에 정의된 비즈니스 로직을 호출한다.</li>\n<li>ResponseBody에 데이터를 담아 반환해준다</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html</a></li>\n<li><a href=\"https://velog.io/@agugu95/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%8C%A8%ED%84%B4%EA%B3%BC-DAO-DTO-Repository\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@agugu95/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%8C%A8%ED%84%B4%EA%B3%BC-DAO-DTO-Repository</a></li>\n<li><a href=\"https://shinsunyoung.tistory.com/42\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shinsunyoung.tistory.com/42</a></li>\n</ul>\n"}}]}}},"context":{}}