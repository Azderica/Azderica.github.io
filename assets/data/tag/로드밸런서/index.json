{"hash":"2858839cb272bd8e3f388ae3dd5d59774a4a3863","data":{"tag":{"title":"로드밸런서","belongsTo":{"edges":[{"node":{"title":"[CS] Load Balancer(로드밸런서)","path":"/00-load-balancer/","date":"18. October 2020","timeToRead":8,"description":" 로브밸런서에 대한 글입니다. ","content":"<h1 id=\"load-balancer로드밸런서\"><a href=\"#load-balancer%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load Balancer(로드밸런서)</h1>\n<p>최근에 Citrix 장비가 F5장비로 변경해야하는 일이 있어서 이를 모니터링할 일이 생겼는데, 이게 무엇인지에 대해서 모른다는 느낌을 받았다.</p>\n<p>이를 알기위해서는 먼저 로드밸런서에 대해서 알아야 한다.</p>\n<br/>\n<h2 id=\"load-balancer의-정의\"><a href=\"#load-balancer%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load Balancer의 정의</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/96366790-ea592c80-1184-11eb-9110-838bc94fcd5b.png\" alt=\"image\"></p>\n<p>로드 밸런싱(load balancing)는 컴퓨터 네트워크 기술의 일종으로 둘 혹은 셋이상의 중앙처리장치 혹은 저장장치와 같은 컴퓨터 자원들에게 작업을 나누는 것을 의미한다.</p>\n<p>이 로드밸런서가 없으면 하나의 서버는 모든 사람들의 응답을 해주려고 노력하지만 클라이언트가 많아질수록 성능이 안나오게 된다.</p>\n<p>이를 해결하기 위해서는 2가지 방안, <code class=\"language-text\">scale-up</code> 과 <code class=\"language-text\">scale-out</code>을 제시할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">scale up</code> : 서버의 하드웨어 성능을 올려서 더 빠르게 동작시킨다.</li>\n<li><code class=\"language-text\">scale out</code> : 하나의 서버보다는 여러대의 서버가 나눠서 일을 한다.</li>\n</ul>\n<p>여기서 Scale-out을 통해서 얻는 장점은 <strong>하드웨어 향상하는 비용보다 서버 한대 추가 비용이 적은 부분</strong>과 <strong>여러 대의 Server 덕분에 무중단 서비스를 제공</strong>할 수 있다.</p>\n<br/>\n<h2 id=\"load-balancer의-기술\"><a href=\"#load-balancer%EC%9D%98-%EA%B8%B0%EC%88%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load Balancer의 기술</h2>\n<ul>\n<li>\n<p>NAT(Network Address Translation)</p>\n<ul>\n<li>사설 ip주소를 공인 IP주소로 변경, 주소변경의 역할</li>\n</ul>\n</li>\n<li>\n<p>DSR(Dynamic Source Routing protocol)</p>\n<ul>\n<li>서버에서 클라이언트로 되돌아가는 경우 목적지 주소를 스위치의 IP주소가 아닌 클라리언트의 IP 주소로 전달해서 네트워크 스위치를 거치지 않고 바로 클라이언트를 찾아가는 개념</li>\n</ul>\n</li>\n<li>\n<p>Tunneling</p>\n<ul>\n<li>인터넷상에서 눈에 보이지 않는 통로를 만들어 통신할 수 있게 하는 개념</li>\n<li>데이터를 캡슐화해서 연결된 상호 간에만 캡슐화된 패킷을 구별해 캡슐화를 해제</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"load-balancer의-종류\"><a href=\"#load-balancer%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load Balancer의 종류</h2>\n<ul>\n<li>\n<p>운영체제 로드밸런서</p>\n<ul>\n<li>물리적 프로세서 간에 작업을 스케줄링</li>\n</ul>\n</li>\n<li>\n<p>네트워크 로드밸런서</p>\n<ul>\n<li>사용 가능한 백엔드에서 네트워크 작업을 스케줄링</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"네트워크-로드밸런서의-종류\"><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>네트워크 로드밸런서의 종류</h2>\n<ul>\n<li>\n<p><strong>L2(Data Link Layer)</strong></p>\n<ul>\n<li>Mac주소를 바탕으로 Load Balancing한다.</li>\n<li>장점 : 구조가 간단, 신뢰성이 높음, 가격저렴, 성능이 좋음</li>\n<li>단점 : Broadcast 패킷에 의해 성능저하 발생, 라우팅 등 상위레이어 프로토콜 기반 스위칭 불가</li>\n</ul>\n</li>\n<li>\n<p><strong>L3(Network Layer)</strong></p>\n<ul>\n<li>IP주소를 바탕으로 Load Balancing한다.</li>\n<li>장점 : Broadcast 트래픽으로 전체 성능 저하 방지, 트레픽 체크</li>\n<li>단점 : 특정 프로토콜을 이용해야 스위칭 가능</li>\n</ul>\n</li>\n<li>\n<p><strong>L4(Transport Layer)</strong></p>\n<ul>\n<li>Transport Layer(IP와 Port) Level에서 Load Balancing한다.</li>\n<li>TCP, UDP 프로토콜</li>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/97098680-35ae9600-16c3-11eb-8950-1a68a84016de.png\" alt=\"L4\"></li>\n<li>장점 : Port기반 스위칭 지원, VIP를 이용하여 여러대를 한대로 묶어 부하분산</li>\n<li>주로 Round Robin 방식 사용</li>\n</ul>\n</li>\n<li>\n<p><strong>L7(Application Layer)</strong></p>\n<ul>\n<li>Application Layer(사용자의 Request) Level에서 Load Balancing한다.</li>\n<li>HTTP, HTTPS, FTP 프로토콜</li>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/97098729-d2713380-16c3-11eb-8824-86a033ffa960.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"l4와-l7의-차이\"><a href=\"#l4%EC%99%80-l7%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>L4와 L7의 차이</h3>\n<p>일반적으로 로드밸런서는 크게 L4와 L7을 사용한다.</p>\n<p>공통점</p>\n<ul>\n<li>들어온 packet을 적절한 목적지로 전달(스위치)</li>\n<li>적절한 알고리즘을 통해 로드밸런서로서의 역할을 수행</li>\n<li>스위치 및 서버별 Health Check를 한다.</li>\n</ul>\n<p>차이점</p>\n<ul>\n<li>L4는 L/B에서 알고리즘을 통해 server1 또는 server2로 데이터를 전송할지 결정을 하고 Client와 3way handshake 실행하는 하나의 TCP세션을 갖게 된다.</li>\n<li>L7는 L/B에서 콘텐츠 기반 스위칭을 위해 3way handshake를 보류한다. L/B와 client 간 3way handshake를 실행하여 따로 TCP 세션을 생성한다. L7과 server서버는 또 다른 TCP 세션을 생성하고 데이터를 중계한다.</li>\n<li>L7는 Dos/SYN Attack에 대한 방어한다.</li>\n<li>L7는 패킷 분석을 통한 바이러스 감염 패킷 필터링과 자원 독점 방지 등을 통한 시스템 보안 강화한다.</li>\n<li>L7은 L4의 서비스 단위 로드밸런싱을 극복하기 위한 포트 + 페이로드 패턴을 이용하여 패킷스위칭한다.</li>\n<li>\n<p>L4는 TCP/UDP 패킷 정보를 분석하고 해당 패킷이 사용하는 서비스 종류별(HTTP, FTP 등)로 처리한다.(L4 Mega Proxy 문제 발생)</p>\n<ul>\n<li>Mega Proxy : IP기반 분리는 요청 양의 불균형이 일어날 수 있다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>HTTP</strong>\n<img src=\"https://user-images.githubusercontent.com/42582516/97098788-6cd17700-16c4-11eb-9705-fe3150b62645.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p><code class=\"language-text\">X-Forwarded-For</code></p>\n<ul>\n<li>HTTP 또는 HTTPS 로드 밸런서를 사용할 때 클라이언트의 IP 주소를 식별하는 데 도움을 줍니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">X-Forwarded-Proto</code></p>\n<ul>\n<li>클라이언트가 로드 밸런서 연결에 사용한 프로토콜(HTTP 또는 HTTPS)을 식별하는 데 도움을 줍니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">X-Forwarded-Port</code></p>\n<ul>\n<li>클라이언트가 로드 밸런서 연결에 사용한 포트를 식별하는 데 도움을 줍니다</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"로드밸런서-알고리즘\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로드밸런서 알고리즘</h2>\n<ul>\n<li>\n<p>Round Robin</p>\n<ul>\n<li>단순히 Round Robin으로 분산하는 방식</li>\n</ul>\n</li>\n<li>\n<p>Least Connections</p>\n<ul>\n<li>연결 개수가 가장 적은 서버를 선택하는 방식</li>\n<li>트래픽으로 인해 세션이 길어지는 경우 권장하는 방식</li>\n</ul>\n</li>\n<li>\n<p>Weighted Least Connections</p>\n<ul>\n<li>서버에 부여된 Weight 값을 기반으로 Connection 수의 개수와 같이 고려하여 선택하는 방식</li>\n</ul>\n</li>\n<li>\n<p>Source</p>\n<ul>\n<li>사용자의 IP를 해싱하여 분배하는 방식</li>\n<li>사용자는 항상 같은 서버로 연결되는 것을 보장</li>\n</ul>\n</li>\n<li>\n<p>Fastest Response Time(응답시간방식)</p>\n<ul>\n<li>가장 빨리 응답하는 서버에 이용자 요구를 연결하는 방식</li>\n<li>응답시간 : 각 서버가 패킷 형태의 요구를 송수신하는데 걸리는 시간</li>\n</ul>\n</li>\n<li>이외에도 Adaptive(최소대기방식), Fixed, Random, URL-based, Cookie 등이 존재한다.</li>\n</ul>\n<br/>\n<h2 id=\"로드밸런서-장애-대응\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C-%EC%9E%A5%EC%95%A0-%EB%8C%80%EC%9D%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로드밸런서 장애 대응</h2>\n<p>로드밸런서 장애 대응은 로드 밸런서를 이중화하여 장애를 대비할 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97099076-c8513400-16c7-11eb-8be0-57e02faabfec.gif\" alt=\"로드밸런서 장애 대응\"></p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리..</h2>\n<p>로드밸런서에 대한 설명이 끝났기 때문에 실업무에서 사용하는 로드밸런서 장비와 그 차이에 대해서 이후에 작성해보겠다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://nesoy.github.io/articles/2018-06/Load-Balancer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nesoy.github.io/articles/2018-06/Load-Balancer</a></li>\n<li><a href=\"https://pakss328.medium.com/%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C%EB%9E%80-l4-l7-501fd904cf05\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pakss328.medium.com/%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C%EB%9E%80-l4-l7-501fd904cf05</a></li>\n<li><a href=\"https://medium.com/harrythegreat/aws-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-9fd0955f859e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/harrythegreat/aws-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-9fd0955f859e</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/what-is-load-balancing#how-does-the-load-balancer-choose-the-backend-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.digitalocean.com/community/tutorials/what-is-load-balancing#how-does-the-load-balancer-choose-the-backend-server</a></li>\n<li><a href=\"http://oxpedia.org/wiki/index.php?title=AppSuite:Grizzly\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://oxpedia.org/wiki/index.php?title=AppSuite:Grizzly</a></li>\n<li><a href=\"https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/classic/x-forwarded-headers.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/classic/x-forwarded-headers.html</a></li>\n<li><a href=\"http://tech.kakao.com/2014/05/30/l4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://tech.kakao.com/2014/05/30/l4/</a></li>\n<li><a href=\"https://d2.naver.com/helloworld/284659\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://d2.naver.com/helloworld/284659</a></li>\n<li><a href=\"https://seokjun.kim/haproxy-and-nginx-load-balancing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://seokjun.kim/haproxy-and-nginx-load-balancing/</a></li>\n<li><a href=\"http://knight76.tistory.com/entry/30022588363?category=227874\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://knight76.tistory.com/entry/30022588363?category=227874</a></li>\n<li><a href=\"http://hiruu.tistory.com/entry/L4L7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%9D%98-%EA%B0%9C%EC%9A%94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://hiruu.tistory.com/entry/L4L7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%9D%98-%EA%B0%9C%EC%9A%94</a></li>\n</ul>\n"}}]}}},"context":{}}