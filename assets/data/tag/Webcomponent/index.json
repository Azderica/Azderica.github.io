{"hash":"c02c31c79a05373d3796f8d9d80ca9ef32b474be","data":{"tag":{"title":"Webcomponent","belongsTo":{"edges":[{"node":{"title":"[Web] Web Component","path":"/00-web-webcomponent/","date":"11. January 2021","timeToRead":4,"description":"Web Component에 대해 정리합니다.","content":"<h1 id=\"web-component\"><a href=\"#web-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web Component</h1>\n<p>웹 기술에 대해서 듣다보면, 코드를 재 사용을 해야할 경우가 필요합니다. 그에 대한 핵심 기술인 웹 컴포넌트에 대해 정리합니다.</p>\n<h2 id=\"web-component의-개념\"><a href=\"#web-component%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web Component의 개념</h2>\n<p>웹 컴포넌트는 기능을 나머지 코드로부터 캡슐화하여 재사용 가능한 커스텀 엘리먼트를 생성하고 웹 앱에서 활용할 수 있도록 해주는 다양한 기술들의 모음입니다.</p>\n<br/>\n<h2 id=\"web-component의-기술\"><a href=\"#web-component%EC%9D%98-%EA%B8%B0%EC%88%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web Component의 기술</h2>\n<p>3가지의 기술들로 구성됩니다. 재사용을 운하는 어느 곳이든 코드 충돌에 대한 걱정이 없는 캡슐화된 기능을 갖춘 다용도의 <strong>커스텀 엘리먼트를 생성</strong>하기 위해 함께 사용할 수 있습니다.</p>\n<h3 id=\"custom-elements\"><a href=\"#custom-elements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom elements</h3>\n<p>사용자 인터페이스에서 원하는 대로 사용할 수 있는 사용자 정의 요소 및 해당 동작을 정의할 수 있는 JavaScript API 세트입니다.</p>\n<h4 id=\"간단한-예제\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>간단한 예제.</h4>\n<p>간단한 에시로, <code class=\"language-text\">window.customElements</code>의 <code class=\"language-text\">define()</code> 메서드를 이용합니다. 해당 메서드는 아래 3개의 arguments를 받아 custom element를 사용합니다.</p>\n<ul>\n<li><code class=\"language-text\">DOMString</code> : custom element의 이름입니다.</li>\n<li><code class=\"language-text\">class extends HTMLElment</code> : element의 행동을 정의한 class입니다.</li>\n<li><code class=\"language-text\">{ extends }</code> : inherits할 node name입니다. (optional)</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\">customElements<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">define</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'text-sample'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> <span class=\"token maybe-class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// always call</span>\n\n      <span class=\"token comment\">// element functionality</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"shadow-dom\"><a href=\"#shadow-dom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shadow DOM</h3>\n<p>캡슐화된 shadow DOM 트리를 element(메인 다큐먼트 DOM으로부터 독집적으로 렌더링 되는)를 추가하고 연관된 기능을 제어하기 위한 JavaScript API 집합입니다. 이 방법을 통해서 엘리먼트의 기능을 private하게 유지할 수 있어서 다큐먼트의 다른 부분과 출돌없이 스크립트와 스타일을 작성할 수 있습니다.</p>\n<p>다음의 HTML 파일이 있을 때,</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charste</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Simple DOM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dinosaur.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>T-Rex<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n        Here we will add a link to the\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.mozilla.org/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Mozilla<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>DOM은 아래와 같은 구성을 가지고 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104188740-12db8480-545d-11eb-8bab-1655175db87f.png\" alt=\"image\"></p>\n<p>이를 시각화하면 다음과 같이 표현할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104189398-f3912700-545d-11eb-8b69-9d74a0dc71af.png\" alt=\"image\"></p>\n<p>다음에서 하나씩 설명하면 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">shadow host</code> : 일반적인 DOM 노드처럼 보이는 Shadow DOM 연결 지점을 의미합니다.</li>\n<li><code class=\"language-text\">shadow tree</code> : Shadow DOM 내부의 DOM Tree</li>\n<li><code class=\"language-text\">shadow boundary</code> : Shadow DOM의 시작 노드부터 끝 노드까지의 공간입니다.</li>\n<li><code class=\"language-text\">shadow root</code> : Shadow tree의 root 노드</li>\n</ul>\n<p>다음과 같이 의미합니다.</p>\n<h4 id=\"간단한-예제-1\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%A0%9C-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>간단한 예제.</h4>\n<pre class=\"language-js\"><code class=\"language-js\">customElements<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">define</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'open-shadow'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> <span class=\"token maybe-class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> pElem <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n      pElem<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      shadowRoot<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>pElem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"html-템플릿\"><a href=\"#html-%ED%85%9C%ED%94%8C%EB%A6%BF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTML 템플릿</h3>\n<p><code class=\"language-text\">&lt;template&gt;</code>와 <code class=\"language-text\">&lt;slot&gt;</code> 엘리먼트는 렌더링 페이지에 나타나지 않는 마크업 템플릿을 작성할 수 있습니다. 커스텀 엘리먼트의 구조를 기반으로 여러번 재사용할 수 있습니다.</p>\n<h4 id=\"간단한-예제-2\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%A0%9C-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>간단한 예제.</h4>\n<pre class=\"language-js\"><code class=\"language-js\">customElements<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">define</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'my-paragraph'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> <span class=\"token maybe-class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-paragraph'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> templateContent <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token property-access\">content</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">appendChild</span><span class=\"token punctuation\">(</span>\n        templateContent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> slottedSpan <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-paragraph span'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>slottedSpan<span class=\"token punctuation\">.</span><span class=\"token property-access\">assignedSlot</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>slottedSpan<span class=\"token punctuation\">.</span><span class=\"token property-access\">slot</span><span class=\"token punctuation\">)</span></code></pre>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>좀 더 자세한 코드를 보고 싶으면 아래의 예제를 참고하면 좋습니다.</p>\n<ul>\n<li><a href=\"https://github.com/mdn/web-components-examples/blob/master/composed-composed-path/main.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Examples</a></li>\n</ul>\n<p>잚못된 부분이 있으면 편하게 이야기주세요.</p>\n<hr>\n<p><strong>마무리</strong></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Web_Components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/Web_Components</a></li>\n</ul>\n"}}]}}},"context":{}}