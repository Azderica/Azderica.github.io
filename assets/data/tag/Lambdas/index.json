{"hash":"c252e7650a6691103be74bcadb51dd243a8d98c2","data":{"tag":{"title":"Lambdas","belongsTo":{"edges":[{"node":{"title":"[Java] Effective Java, Lambdas 와 Streams","path":"/06-java-effective-java/","date":"16. May 2021","timeToRead":22,"description":"Effective Java 책 중, ch7. 람다와 스트림에 대해 정리합니다.","content":"<h1 id=\"lambdas-and-streams\"><a href=\"#lambdas-and-streams\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lambdas and Streams</h1>\n<p>Java 8에서 함수 객체를 더 쉽게 만들 수 있도록, <code class=\"language-text\">functional interface</code>, 람다 및 메소드 참조가 추가되었습니다. 스트림 API는 이러한 언어 변경과 함께 추가되어 데이터 요소들의 시퀀스 처리를 위한 라이브러리 지원을 제공합니다.</p>\n<h2 id=\"item-42-익명-클래스보다-람다를-선택합니다\"><a href=\"#item-42-%EC%9D%B5%EB%AA%85-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4-%EB%9E%8C%EB%8B%A4%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 42. 익명 클래스보다 람다를 선택합니다.</h2>\n<p>과거에는 하나의 추상 메소드를 가진 인터페이스가 function types로 사용되었습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 함수 객체로서의 익명 클래스 인스턴스 - 폐기되었음</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이러한 익명 클래스는 object-oriented 객체를 필요로 하는 고전적인 객체 지향 디자인 패턴(특히. Strategy pattern)에 적합했습니다. 그러나 이는 매우 애매모호했기 때문에 이를 대체할 수단이 필요하게 되었습니다.</p>\n<p>Java 8에서는 단일 추성 메서드와의 인터페이스가 필요하다는 개념을 공식화하였고, 이를 <code class=\"language-text\">function interface</code>라고 알려져 있으며, 람다식이나 람다를 통해서 이를 만들 수 있게 되었습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 함수 객체로서의 람다 표현식 (익명 클래스 대체)</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>sort <span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>compare <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>프로그램이 명확해지지 않는 한, 모든 람다 파라미터의 유형을 생략하는 방법이 좋습니다. (컴파일러가 이를 유추할 수 없기 때문에 그렇습니다.) 그렇기 때문에 <strong>앞선 주제에서 말했듯이 Raw 타입을 사용하지 않는 것</strong>이 여기서 중요합니다.</p>\n<p>또한 이러한 람다식을 통해서 더 짧게 만들 수 있고, 의미적으로도 잘 보일 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Before 코드</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">,</span> <span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// After 코드</span>\nwords<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 뒤의 코드가 앞의 코드보다 직관적입니다.</span></code></pre>\n<p>이전 챕터에서 나왔던 Enum형을 아래처럼 수정할 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  PLUS  <span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  MINUS <span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  TIMES <span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">DIVIDE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DoubleBinaryOperator</span> op<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DoubleBinaryOperator</span> op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>op <span class=\"token operator\">=</span> op<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> op<span class=\"token punctuation\">.</span><span class=\"token function\">applyAsDouble</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나, 이러한 <strong>람다는 name과 document가 없기 때문에 계산이 확실하지 않거나, 몇줄을 초과하는 경우에는 람다에 넣는 것은 좋지않습니다.</strong> (일반적으로 1줄 ~ 3줄 사이가 적합)</p>\n<p>현재는 람다의 등장으로 익명 클래스를 거의 사용하지 않지만, 익명 클래스만 할 수 있는 부분이 있습니다.</p>\n<ul>\n<li>람다는 기능 인터페이스로 제한되나, 추상 클래스의 인스턴스를 만들려면 람다가 아닌 익명 클래스로 만들 수 있습니다.</li>\n<li>익명 클래스를 사용해서 여러 추상 메서드가 있는 인터페이스의 인스턴스를 만들 수 있습니다.</li>\n<li>람다는 자신에 대한 참조를 얻을 수 없습니다. 즉, 본문 내에서 함수 객체에 액세스해야하는 경우 익명 클래스를 사용해야합니다.</li>\n</ul>\n<p>람다는 구현 중에 안정적으로 직렬화 및 역 직렬화 할 수 없는 속성은 익명 클래스와 공유합니다. 따라서 람다나 익명 클래스 인스턴스를 직렬화하는 경우는 거의 없습니다. Comparator 등의 직렬화를 쓸때는 nested class를 사용하는 것이 좋습니다.</p>\n<p>이를 요약하면 Java 8에서 람다는 작은 함수 객체를 표현하는 가장 좋은 방법입니다. <strong>기능 인터페이스가 아닌 유형의 인스턴스를 만들어야하는 경우가 아니면, 함수 개체에 익명 클래스를 사용하면 안됩니다.</strong></p>\n<br/>\n<h2 id=\"item-43-람다보다-메서드-참조를-선택합니다\"><a href=\"#item-43-%EB%9E%8C%EB%8B%A4%EB%B3%B4%EB%8B%A4-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 43. 람다보다 메서드 참조를 선택합니다.</h2>\n<p>익명 클래스에 비해 람다의 주요 장점은 더 간결한 것입니다. 그러나 자바에서는 메서드 참조를 하는 람다보다 더 간결한 함수 객체를 생성하는 방법이 존재합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 람다식을 사용한 경우.</span>\nmap<span class=\"token punctuation\">.</span>merge <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> incr<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> count <span class=\"token operator\">+</span> incr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 더 짧은 코드, 메서드 참조</span>\nmap<span class=\"token punctuation\">.</span>merge <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>메서드에 파라미터가 많을수록 메서드 참조로 제거할 수 있는 상용구가 많아집니다. 다음은 그에 대한 주의사항입니다.</p>\n<ul>\n<li>람다로 할 수 없는 경우, 메서드 참조로도 할 수 있는 방법은 없습니다.</li>\n<li>IDE로 프로그래밍하는 경우, 가능한 경우에 한해 람다를 메서드 참조로 대체할 수 있습니다.</li>\n</ul>\n<p>그러나 항상 이가 옳지는 않습니다. 특히 메서드가 같은 클래스에 있을 때 자주 발생합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 메서드 참조</span>\nservice<span class=\"token punctuation\">.</span>execute <span class=\"token punctuation\">(</span><span class=\"token class-name\">GoshThisClassNameIsHumongous</span> <span class=\"token operator\">::</span> <span class=\"token function\">action</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 람다식 사용 (여기서는 이게 더 좋음.)</span>\nservice<span class=\"token punctuation\">.</span>execute <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> action <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>메서드 참조의 종류는 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Method Ref Type</th>\n<th>Example</th>\n<th>Lambda Equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Static</td>\n<td><code class=\"language-text\">Integer::parseInt</code></td>\n<td><code class=\"language-text\">str -&gt; Integer.parseInt(str)</code></td>\n</tr>\n<tr>\n<td>Bound</td>\n<td><code class=\"language-text\">Instant.now()::isAfter</code></td>\n<td><code class=\"language-text\">Instant then = Instant.now();</code><br/><code class=\"language-text\">t-&gt;then.isAfter(t)</code></td>\n</tr>\n<tr>\n<td>UnBound</td>\n<td><code class=\"language-text\">String::toLowerCase</code></td>\n<td><code class=\"language-text\">str -&gt; str.toLowerCase()</code></td>\n</tr>\n<tr>\n<td>Class Constructor</td>\n<td><code class=\"language-text\">TreeMap&lt;K, V&gt;::new</code></td>\n<td><code class=\"language-text\">() -&gt; new TreeMap&lt;K, V&gt;</code></td>\n</tr>\n<tr>\n<td>Array Constructor</td>\n<td><code class=\"language-text\">int[]::new</code></td>\n<td><code class=\"language-text\">len -&gt; new int[len]</code></td>\n</tr>\n</tbody>\n</table>\n<p>이를 정리하면 메서드 참조는 종종 람다보다 간결한 대안을 제공합니다. 따라서, <strong>메소드 참조가 더 짧고 명확한 경우에는 이를 사용하고 그렇지 않은 경우에는 람다를 사용하는 것이 중요합니다.</strong></p>\n<br/>\n<h2 id=\"item-44-표준-기능-인터페이스를-선택합니다\"><a href=\"#item-44-%ED%91%9C%EC%A4%80-%EA%B8%B0%EB%8A%A5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 44. 표준 기능 인터페이스를 선택합니다.</h2>\n<p>Java에 람다가 들어오고 난 이후, API 작성 가이드가 변경되었습니다.</p>\n<p>대표적으로 Map을 쓰는 경우에는 LinkedHashMap 등을 사용하는 것이 좋습니다. 예를 들어 Map에서 removeEldestEntry를 사용한다고 했을 때, LinkedHashMap 의 경우에는 삭제할 수 있지만 Map의 경우에는 수동적으로 생성해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 불필요한 기능 인터페이스; 대신 표준을 사용하십시오.</span>\n<span class=\"token annotation punctuation\">@FunctionalInterface</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EldestEntryRemovalFunction</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> remove <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> eldest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>즉, 표준 기능 인터페이스의 기능을 사용하는 경우, <strong>특수 목적으로 만든 인터페이스보다는 표준 기능 인터페이스를 사용하는 것이 중요합니다.</strong></p>\n<p>아래는 기본적인 기능 인터페이스입니다.</p>\n<table>\n<thead>\n<tr>\n<th>Interface</th>\n<th>Function Signature</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">UnaryOperator&lt;T&gt;</code></td>\n<td><code class=\"language-text\">T apply (T t)</code></td>\n<td><code class=\"language-text\">String::toLowerCase</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">BinaryOperator&lt;T&gt;</code></td>\n<td><code class=\"language-text\">T apply (T t1, T t2)</code></td>\n<td><code class=\"language-text\">BigInteger::add</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Predicate&lt;T&gt;</code></td>\n<td><code class=\"language-text\">boolean test (T t)</code></td>\n<td><code class=\"language-text\">Collection::isEmpty</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Function&lt;T&gt;</code></td>\n<td><code class=\"language-text\">R apply (T t)</code></td>\n<td><code class=\"language-text\">Arrays::asList</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Supplier&lt;T&gt;</code></td>\n<td><code class=\"language-text\">T get ()</code></td>\n<td><code class=\"language-text\">Instant::now</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Consumer&lt;T&gt;</code></td>\n<td><code class=\"language-text\">void accept (T t)</code></td>\n<td><code class=\"language-text\">System.out::println</code></td>\n</tr>\n</tbody>\n</table>\n<p>이를 사용해서 여러 변형 케이스로 만들 수도 있습니다. 이를 사용하는 여러 변형 케이스가 존재하지만, 대부분의 표준 기능 인터페이스는 기본 유형에 대한 지원을 위해 존재합니다.</p>\n<p>즉, 기본 기능 인터페이스 대신 다른 요소(boxed primitives)가 있는 인터페이스를 사용하는 것은 좋지않습니다.</p>\n<p>목적에 맞는 <strong>인터페이스가 필요한 경우</strong>에는 아래의 조건인 경우인지를 잘 생각해봐야합니다.</p>\n<ul>\n<li>일반적으로 사용되며 설명이 포함된 이름이 도움이 될 수 있는 경우.</li>\n<li>관련된 강력한 결합(contract)가 있는 경우.</li>\n<li>사용자 커스텀 메소드가 이점을 가지고 있는 경우.</li>\n</ul>\n<p>다만 이러한 경우에는 신중하게 설계가 필요합니다. 그리고, <code class=\"language-text\">@FunctionalInterface</code>와 같이 기능적 인터페이스에는 어노테이션을 추가해야합니다.</p>\n<p>요약하면, Java에서는 람다가 있기 때문에 이를 생각하고 API를 생계하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-45-스트림을-신중하게-사용합니다\"><a href=\"#item-45-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 45. 스트림을 신중하게 사용합니다.</h2>\n<p>Stream API는 대량 작업을 순차적으로 또는 병렬적으로 수행하는 작업을 쉽게하기 위해서 Java 8에 추가되었습니다.</p>\n<p>Stream API는 다음의 특징을 가집니다.</p>\n<ul>\n<li>Stream pipeline은 source stream과 0개 이상의 intermediate operation, 하나의 terminal operation으로 나눠집니다.</li>\n<li>Stream pipeline은 lazily하게 평가됩니다. (호출될 때까지 시작되지 않으며, 필요없는 데이터 요소는 계산되지 않습니다.)</li>\n<li>Stream API는 유연합니다. (모든 호출이 단일 표현식으로 연결 가능합니다.)</li>\n<li>Stream pipeline은 순차적으로 실행됩니다.</li>\n<li>Stream API는 다재다능하지만, 항상 이렇게 해야하지는 않습니다. (잘못 사용하면, 유지보수성이 떨어집니다.)</li>\n</ul>\n<p>Stream을 남용한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Overuse of streams - don't do this!</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Anagrams</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Path</span> dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> minGroupSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      words<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>word <span class=\"token operator\">-></span> word<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> minGroupSize<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> group<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 경우, 프로그램을 읽고 유지하기가 매우 어렵습니다. Stream을 잘사용한 케이스는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 세련된 스트림 사용으로 명확성과 간결함 향상</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Anagrams</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Path</span> dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> minGroupSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      words\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>word <span class=\"token operator\">-></span> <span class=\"token function\">alphabetize</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> minGroupSize<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>g <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// alphabetize method is the same as in original version</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 표현하면, 프로그램을 이해하기 어렵지 않습니다. 그리고, 람다 매개 변수의 이름도 신중하게 선정해야합니다. 명시적 유형이 없기 때문에, 스트림 파이프파린의 가독성을 높이기 위해서라도 이름 선정은 중요한 역할을 가지고 있습니다.</p>\n<p>또한, <strong>파이프 라인에서는 명시적인 유형 정보와 임시 변수가 없기 때문에 도우미 메서드를 사용하는 것은 반복 코드보다 스트림 파이프라인에서 가독성을 위해 매우 중요합니다.</strong></p>\n<p>예를 들어, 아래 코드는 이러한 스트림을 잘못 사용한 케이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out <span class=\"token operator\">::</span> <span class=\"token function\">print</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 721011081081113211911111410810033 (type을 모르므로)</span>\n\n<span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>print <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 수정한 케이스, but 이렇게 사용하는 것은 좋지않음</span></code></pre>\n<p>이와 같이 스트림 파이프라인에서 사용할 수 없는 몇가지 작업이 있습니다.</p>\n<ul>\n<li>코드 블록에서는 범위의 모든 지역 변수를 읽거나 수정이 가능하지만, 람다에서는 최종만 읽을 수 있기때문에 지역변수를 수정할 수 없습니다.</li>\n<li>코드 블록 return에서 둘러싸는 메서드 break, continue, 예외 throw 등이 가능하지만 람다에서는 불가능합니다.</li>\n</ul>\n<p>그러나 스트림에서 적절한 동작은 다음과 같습니다.</p>\n<ul>\n<li>요소 시퀀스를 균일하게 변경</li>\n<li>요소 시퀀스 필터링</li>\n<li>단일 작업을 사용하여 요소 시퀀스 결합(요소 추가 및 최소값 계산)</li>\n<li>요소의 시퀀스를 컬렉션으로 합쳐서, 공통 속성별로 그룹화</li>\n<li>일부 기준을 충족하는 요소에 대한 요소 시퀀스를 검색</li>\n</ul>\n<p>이러한 경우에 매우 좋습니다.</p>\n<p>스트림을 사용하면 아래처럼 이쁜 코드를 구성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 가장 큰 메르센 소수 20개를 출력하는 코드.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">primes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">-></span> TWO<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">intValueExact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>ONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>mersenne <span class=\"token operator\">-></span> mersenne<span class=\"token punctuation\">.</span><span class=\"token function\">isProbablePrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 항상 Stream을 쓸지, 혹은 iteration을 사용할지는 애매한 경우가 많습니다. 이러한 경우에서는 개발자의 취향에 가깝습니다. 즉, <strong>어떤 작업이 Stream이나 Iteration에 의해 더 나은건지 확실하지 않기 때문에, 두가지 모두를 시도하고 어떤 것이 나을지 고르는 것이 중요합니다.</strong></p>\n<br/>\n<h2 id=\"item-46-스트림에서-부작용이-없는-함수를-선택합니다\"><a href=\"#item-46-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%97%90%EC%84%9C-%EB%B6%80%EC%9E%91%EC%9A%A9%EC%9D%B4-%EC%97%86%EB%8A%94-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 46. 스트림에서 부작용이 없는 함수를 선택합니다.</h2>\n<p>스트림은 단순한 API가 아니라, 함수형 프로그래밍을 기반으로 하는 패러다임입니다. 이러한 스트림이 제공해야하는 표현성과 속도, 경우에 따라 병렬화 가능성을 얻기위해서는 패러다임과 API를 채택해야합니다.</p>\n<p>스트림 패러다임의 가장 중요한 부분은 각 단계의 결과가 이전 단계의 <code class=\"language-text\">pure function</code>에 최대한 가까운 변환 시퀀스로 계산을 구성하는 것입니다. (<code class=\"language-text\">pure function</code>은 결과가 입력에만 의존하는 함수입니다. 즉, 변경 가능한 상태에 의존하지 않으며 어떤 상태도 업데이트가 없습니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> freq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 잘못 스트림을 사용한 경우.</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>tokens <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  words<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">(</span>word<span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    freq<span class=\"token punctuation\">.</span>merge <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span>toLowerCase <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 스트림 API를 잘 사용한 경우.</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>tokens <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  freq <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">,</span> <span class=\"token function\">counting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위와 같이 <code class=\"language-text\">forEach</code> 연산은 동작 연산을 수행하지 않게 <strong>스트림 결과를 보고하는 목적으로 사용</strong>해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// freq 테이블에서 상위 10 개 단어 목록을 가져 오는 파이프 라인</span>\n<span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> topTen <span class=\"token operator\">=</span> freq<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>sorted <span class=\"token punctuation\">(</span><span class=\"token function\">comparison</span><span class=\"token punctuation\">(</span>freq<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>collect <span class=\"token punctuation\">(</span>toList <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>그리고 해당 코드처럼, Collectors의 member를 정적으로 가져오는 것이 스트림 파이프라인을 더 읽기 쉽게 만듭니다.</p>\n<p>이외에도 여러개의 Collectors들이 존재합니다. 스트림 파이프 라인 프로그래밍의 본질은 부작용이 없는 함수 객체를 구성하는 것입니다. 이는 스트림 및 관련 개체에 전달된 많은 함수 개체 모두에 적용됩니다.</p>\n<ul>\n<li><code class=\"language-text\">forEach</code> : 계산을 수행하는 것이 목적이 아니라, 스트림에 의해 수행된 계산 결과를 보고해야하는 곳에 사용해야합니다.</li>\n<li><code class=\"language-text\">toList</code>, <code class=\"language-text\">toSet</code>, <code class=\"language-text\">toMap</code>, <code class=\"language-text\">groupingBy</code>, <code class=\"language-text\">joining</code> 등의 Collector factories를 사용하는 것이 중요합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-47-return-타입으로-스트림보다는-컬렉션을-선택합니다\"><a href=\"#item-47-return-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 47. Return 타입으로 스트림보다는 컬렉션을 선택합니다.</h2>\n<p>많은 메서드들은 element 시퀀스를 반환합니다. 그러나 Java 8에서 스트림이 여러 플랫폼에 추가되어서 sequence 반환 방법에 대해 적절한 반환 유형을 선정하는 방법이 어려워졌습니다. 다만 이에 대한 명확한 해결책은 없습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Stream &lt;E>에서 Iterable &lt;E> 로의 Adapter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Iterable</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> iterableOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> stream<span class=\"token operator\">::</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Iterable &lt;E>에서 Stream &lt;E> 로의 Adapter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> streamOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterable</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">StreamSupport</span><span class=\"token punctuation\">.</span>stream <span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">.</span>spliterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 for-each 문으로 변환 할 수 있습니다. Collection 인터페이스 하위 유형 Iterable 및 보유 stream이 반복 스트림 액세스를 모두 제공하기 때문에, <strong>Collection이나 적절한 subType 등이 public, sequence-returning 메서드에 가장 적합합니다.</strong> 다만, <strong>Collection 반환을 위해 메모리에 큰 시퀀스를 저장하는 것은 좋지 않습니다.</strong></p>\n<p>이를 사용한 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Returns the power set of an input set as custom collection</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PowerSet</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> src <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set too big \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbstractList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 to the power src.size()</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Set</span> <span class=\"token operator\">&amp;&amp;</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 입력 목록의 모든 하위 목록 스트림을 반환합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SubLists</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> of <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span>concat <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span>of <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>emptyList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        prefixes <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">(</span><span class=\"token class-name\">SubLists</span> <span class=\"token operator\">::</span> <span class=\"token function\">suffixes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> prefixes <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span>rangeClosed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span>end<span class=\"token operator\">-></span> list<span class=\"token punctuation\">.</span>subList <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> suffixes <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span>range <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span>start<span class=\"token operator\">-></span> list<span class=\"token punctuation\">.</span>subList <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 입력 목록의 모든 하위 목록 스트림을 반환합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> of <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span>range <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span>\n        start<span class=\"token operator\">-</span> <span class=\"token operator\">></span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span>rangeClosed <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span>end<span class=\"token operator\">-></span> list<span class=\"token punctuation\">.</span>subList <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이, element 시퀀스를 반환하는 메서드를 작성할 때, 일부 사용자는 stream으로 처리하고 다른 사용자는 iteration으로 사용하는 것을 좋아할 수 있습니다. 그러나 둘다 잘못된 것이 아니고, 이 두개를 필요에 따라 사용하는 것이 좋습니다. 그리고 Collections로 반환할 수 있으면 좋습니다. (작은 경우, ArrayList / 큰 경우, 사용자 지정 컬렉션)</p>\n<br/>\n<h2 id=\"item-48-스트림을-병렬로-만들-때-주의합니다\"><a href=\"#item-48-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EB%B3%91%EB%A0%AC%EB%A1%9C-%EB%A7%8C%EB%93%A4-%EB%95%8C-%EC%A3%BC%EC%9D%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 48. 스트림을 병렬로 만들 때 주의합니다.</h2>\n<p>Java는 동시 프로그래밍 작업을 용이하게 하기 위해 많은 노력을 했습니다.</p>\n<p>예를 들어 다음의 코드를 병렬로 구성하는 경우입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 처음 20 개의 Mersenne 소수를 생성하는 스트림 기반 프로그램</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  primes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> map <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span> TWO<span class=\"token punctuation\">.</span>pow <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>intValueExact <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> subtract <span class=\"token punctuation\">(</span>ONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">(</span>mersenne<span class=\"token operator\">-></span> mersenne<span class=\"token punctuation\">.</span>isProbablePrime <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>limit <span class=\"token punctuation\">(</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out <span class=\"token operator\">::</span> <span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">Stream</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">></span></span> primes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span>iterate <span class=\"token punctuation\">(</span>TWO<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BigInteger</span> <span class=\"token operator\">::</span> <span class=\"token function\">nextProbablePrime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 작업을 parallel() 스트림 파이프 라인에 호출을 추가해서 속도를 높일려고하면, 이를 병렬화 하는 방법을 모르기 때문에 실패합니다. 즉, <strong>최상의 상황에서 Stream.iteration이거나 intermediate operation limited가 사용되는 경우 파이프 라인을 병렬화해도 성능적인 이득은 없습니다.</strong> 따라서 스트림 파이프라인을 무차별적으로 병렬화하는 것이 좋지 않습니다.</p>\n<p>일반적으로 <code class=\"language-text\">ArrayList</code>, <code class=\"language-text\">HashMap</code>, <code class=\"language-text\">HashSet</code>, <code class=\"language-text\">ConcurrentHashMap</code>, <code class=\"language-text\">arrays</code>, int 범위, long 범위 등이 병렬 처리의 성능 향상을 통해 스트림에 가장 적합합니다.</p>\n<p>스트림을 병렬화를 하게 되었을 때, 장애 및 성능 저하가 발생할 수 있게 되었으며 잘못된 결과 및 예측할 수 없는 동작으로 이어지게 됩니다.</p>\n<p>다만 적절한 상황에서, 스트림 파이프라인에 parallel(병렬) 호출을 추가하는 것만으로 프로세서 코어 수에서 거의 선형에 가까운 속도 향상을 달성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 소수 계산 스트림 파이프 라인-병렬화의 이점</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> pi <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">LongStream</span><span class=\"token punctuation\">.</span>rangeClosed <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span><span class=\"token class-name\">BigInteger</span> <span class=\"token operator\">::</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span>isProbablePrime <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 아래는 parallel()을 통해 시간 단축을 한 경우입니다.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> pi <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">LongStream</span><span class=\"token punctuation\">.</span>rangeClosed <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>parallel <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>mapToObj <span class=\"token punctuation\">(</span><span class=\"token class-name\">BigInteger</span> <span class=\"token operator\">::</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span>isProbablePrime <span class=\"token punctuation\">(</span><span class=\"token number\">50</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>계산의 정확성을 유지하고 속도를 높일 것이라고 믿을 충분한 이유가 없는 경우, 스트림 파이프 라인을 병렬화하는 것은 좋지않습니다.</strong> 이를 사용할 때는, 올바른 상태를 유지하고, 신중한 성능 측정을 수행해서 사용하는 것이 꼭 필요합니다.</p>\n"}}]}}},"context":{}}