{"hash":"49b01721c2ed4f1361ca6db09477053f31e960ba","data":{"tag":{"title":"Lambda","belongsTo":{"edges":[{"node":{"title":"[Java] Java Lambda Detail","path":"/15-java-study/","date":"4. March 2021","timeToRead":11,"description":"Java Lambda에 대해 좀 더 자세하게 정리합니다.","content":"<h1 id=\"java-lambda\"><a href=\"#java-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h1>\n<p>백기선님의 자바 스터디 15주차(마지막) 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>람다식 사용법</li>\n<li>함수형 인터페이스</li>\n<li>Variable Capture</li>\n<li>메소드, 생성자 레퍼런스</li>\n</ul>\n<br/>\n<h2 id=\"java-lambda-1\"><a href=\"#java-lambda-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h2>\n<p>사실 자바 람다에 대해서는 따로 개인적으로 공부한 적이 있습니다. 다만 오늘은 스터디와 함께 더불어서 더 자세하게 공부해보려고 합니다.</p>\n<p>지난 게시글은 아래의 링크를 참고해주세요.</p>\n<p><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></p>\n<p>해당 게시글에서는 다음의 내용을 소개합니다.</p>\n<ul>\n<li>람다식이란.</li>\n<li>람다식 사용 방법</li>\n<li>람다식 예제</li>\n<li>람다식의 장단점</li>\n</ul>\n<br/>\n<h2 id=\"자바-람다식-사용법\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 람다식 사용법</h2>\n<h3 id=\"람다식이란\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>람다식이란</h3>\n<p><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></p>\n<p>해당 게시글을 내용이며 한번 더 이야기 하면 다음과 같이 사용합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>매개변수<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> 실행문 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>자바의 Lambda는 <strong>메소드를 하나의 식(Expression)</strong>으로 표현한 것입니다. 익명메소드(함수) 생성 문법이라고도 이야기 할 수 있습니다.</p>\n<p>다만 주의해야하는 부분 중 하나는 자바의 메소드는 메소드 자체로 혼자 선언하여 선언하여 쓰일 수 없습니다. 반드시 클래스 구성 멤버로 선언되어 있어야합니다. 즉, 람다식을 통해서 생성되는 것은 메소드가 아닌 해당 메소드를 가지는 객체입니다. 람다식은 일반적인 객체가 아닌 <strong>인터페이스를 구현한 익명구현객체</strong>입니다.</p>\n<p>함수적 프로그래밍을 지원하기 위해서 자바 8부터 람다식을 지원하게 되었는데, 이를 통해서 기존의 코드 패턴이 많이 달라지기도 하며, 문법이 간결한 만큼 가독성면에서 큰 장점을 가집니다.</p>\n<h3 id=\"람다식-예제\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>람다식 예제.</h3>\n<p>다음과 같이 예시를 작성합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 함수형 인터페이스 선언</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 추상 메소드</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    alc minNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minNum<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output : 3</span>\n\n    <span class=\"token class-name\">Calc</span> calcNum <span class=\"token operator\">=</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calcNum<span class=\"token punctuation\">.</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// output : 4</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 예시에서 로직이 한줄이기 때문에 구현 로직에서 { x &#x3C; y ? x : y } 대신에 x &#x3C; y ? x : y 로 {}를 뺄수도 있고 return도 없앨 수 있습니다.</p>\n<p>추가적으로 매개변수가 하나 일때는 () 또한 삭제가 가능합니다.</p>\n<h3 id=\"자바-람다식의-장단점\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%9E%8C%EB%8B%A4%EC%8B%9D%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 람다식의 장단점</h3>\n<p>장점</p>\n<ul>\n<li>코드를 간결하게 만들 수 있습니다.</li>\n<li>가독성이 좋아집니다.</li>\n<li>함수를 만드는 과정 없이 한번에 처리할 수 있으므로 코딩하는 시간이 줄어듭니다.</li>\n<li>병렬 프로그래밍에 유리합니다.</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>재사용이 불가능합니다.</li>\n<li>일부 디버깅이 까다롭습니다.</li>\n<li>너무 남발하면 코드가 지저분해집니다.</li>\n<li>재귀로 만드는 경우에는 성능적 이슈가 있을 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"함수형-인터페이스\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>함수형 인터페이스</h2>\n<p>함수형 인터페이스(Functional Interface) 는 <strong>추상 메소드를 딱 하나만 가지고 있는 인터페이스</strong>입니다.</p>\n<p>자바 8부터 Functional Interface 기반의 <code class=\"language-text\">java.util.function</code> 패키지를 지원합니다.</p>\n<p>대표적인 예시는 아래와 같습니다.</p>\n<h3 id=\"1-predicate\"><a href=\"#1-predicate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Predicate</h3>\n<p><code class=\"language-text\">Predicate</code> 인터페이스는 T타입의 값을 받아서 boolean을 반환하는 함수 인터페이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Predicate Sample</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n  <span class=\"token comment\">// Predicate - and</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateAnd <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateAnd<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span>\n\n  <span class=\"token comment\">// Predicate - negate</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateNegate <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">negate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateNegate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span>\n\n  <span class=\"token comment\">// Predicate - or</span>\n  <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicateOr <span class=\"token operator\">=</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>predicateOr<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">and(Predicate&lt;? super T&gt; other)</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 기존 Predicate와 and 조건으로 결합된 Predicate를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">negate()</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 부정을 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">or(Predicate&lt;? super T&gt; other)</code></p>\n<ul>\n<li>Predicate를 인수로 받아서 기존 Predicate와 or 조건으로 결합된 Predicate를 반환합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-consumer\"><a href=\"#2-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Consumer</h3>\n<p><code class=\"language-text\">Consumer</code> 인터페이스는 제너릭 형식의 T 객체를 받아, void를 반환하는 accept 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> firstConsumer <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first: \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> secondConsumer <span class=\"token operator\">=</span> b <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second: \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> combineConsumer <span class=\"token operator\">=</span> firstConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>secondConsumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  combineConsumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// first: test \\n second : test</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">andThen(Consumer&lt;? super T&gt; after)</code></p>\n<ul>\n<li>Consumer의 default 메소드로서, accept 메소드를 실행하고, 인수로 받은 Consumer의 accept 메소드를 호출하도록 정의합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-function\"><a href=\"#3-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Function</h3>\n<p><code class=\"language-text\">Function&lt;T, R&gt;</code> 인터페이스는 제너릭 형식의 T 객체를 받아, R 객체를 반환하는 apply 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">R</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> a <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 300</span>\n\n  <span class=\"token comment\">// function - andThen</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function1 <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function1<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 150</span>\n  <span class=\"token comment\">// 3 -> 300 -> 150</span>\n\n  <span class=\"token comment\">// function - compose</span>\n  <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> function2 <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>function2<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n  <span class=\"token comment\">// 3 -> 1 -> 100</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">andThen(Function&lt;? super R, ? extends T&gt; after)</code></p>\n<ul>\n<li>Function의 default 메소드로서, apply 메소드를 실행후 반환 값을 인수로 받은 Function의 apply 메소드의 인수로 전달하고 결과를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compose(Function&lt;? super V, ? extends T&gt; after)</code></p>\n<ul>\n<li>Function의 default 메소드로서, 인수로 받은 Function의 apply 메소드를 먼저 실행 및 반환 후 apply 메소드를 실행하여 결과를 반환합니다.</li>\n<li><code class=\"language-text\">andThen</code> 메소드와 반대로 동작합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-supplier\"><a href=\"#4-supplier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Supplier</h3>\n<p>Supplier 인터페이스는 매개변수는 없으며 T 객체를 반환하는 get 추상메소드를 정의합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// supplier</span>\n  <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> supplier <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-operator\"><a href=\"#5-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Operator</h3>\n<p><code class=\"language-text\">Operator</code> 인터페이스는 특정한 정수나 실수형 데이터를 처리하는데 사용되는 인터페이스입니다.</p>\n<br/>\n<h2 id=\"variable-capture\"><a href=\"#variable-capture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Variable Capture</h2>\n<p>Lambda의 body에서 인자로 넘어온 것 이외의 변수를 접근하는 것을 <strong>Variable Capture</strong>라고 합니다.</p>\n<p>Lambda는 인스턴스, 정적 변수와 final로 선언된 혹은 final처럼 사용되고 있는 <strong>지역 변수를 참조</strong>할 수 있습니다.</p>\n<p>지역변수를 사용할 때에는 해당 변수에게 값의 재할당이 일어나면 안됩니다.</p>\n<p>즉, 다음의 경우와 같이 새로운 scope를 통해서 <strong>로컬변수로 재정의</strong>하여 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">week15</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableCapture</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// val - 1</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> anonymosClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// val - 2</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        anonymosClass<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다만 이를 람다식처럼 재정의 할려고 하면 에러가 발생합니다. (같은 scope이므로.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VariableCapture</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lambdaExpression <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error. Variable 'val' is already defined in the scope</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        lambdaExpression<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>람다는 이를 새도윙(shadowing)하지 않습니다.</p>\n<ul>\n<li><strong>새도윙?</strong> 변수, 메소드, 클래스, 인터페이스의 이름을 같은 영역에서 동일하게 사용하는 것</li>\n</ul>\n<h3 id=\"finaleffective-final\"><a href=\"#finaleffective-final\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>final/effective final</h3>\n<p>람다식에서는 scope를 공유하기 때문에 <code class=\"language-text\">final</code> 또는 <code class=\"language-text\">effective final</code> 만 사용가능합니다.</p>\n<p>람다식에서 사용되는 외부 지역 변수는 복사본이고 해당 stack에서만 생성되고, 해당 블럭이 끝나면 stack에서 접근되는 구조이기 때문에 이후에 참조할 수 없습니다.</p>\n<p>따라서 지역 변수를 관리하는 쓰레드와 람다식이 실행되는 쓰레드는 다를 수도 있기 때문에 어떤 데이터가 최신일지 모른다는 문제가 있습니다. 그렇기 때문에 이러한 값을 보장하기 위해서 <code class=\"language-text\">final</code>이나 <code class=\"language-text\">effective final</code>만 사용가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lambdaExpression <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// error: local variables referenced from a lambda expression must be final or effectively final</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  val<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n  lambdaExpression<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"메소드-생성자-레퍼런스\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드, 생성자 레퍼런스</h2>\n<h3 id=\"메소드-레퍼런스\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 레퍼런스</h3>\n<p>메소드 레퍼런스는 람다식을 더 간단하게 만드는 표현식입니다.</p>\n<p>전달하는 인수와 사용하는 메소드의 인수 형태가 같을시 메소드 레퍼런스를 통해서 간결하게 표현가능합니다.</p>\n<p>종류는 다음과 같습니다.</p>\n<h4 id=\"1-static-method-reference\"><a href=\"#1-static-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Static Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{타입}::(Static Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> a <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> refConsumer <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"2-instance-method-reference\"><a href=\"#2-instance-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Instance Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{Object Reference}::(Instance Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> operator <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> refOperator <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"3-constructor-method-reference\"><a href=\"#3-constructor-method-reference\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Constructor Method Reference</h4>\n<p>다음의 형태를 가집니다.</p>\n<p><code class=\"language-text\">{타입}::(Static Method}</code></p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringOperator <span class=\"token operator\">=</span> str <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">UnaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> refStringOperator <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://azderica.github.io/00-java-lambda/</a></li>\n<li><a href=\"https://giyeon95.github.io/whiteship/whiteship_study_week15/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://giyeon95.github.io/whiteship/whiteship_study_week15/</a></li>\n<li><a href=\"https://www.notion.so/758e363f9fb04872a604999f8af6a1ae\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/758e363f9fb04872a604999f8af6a1ae</a></li>\n<li><a href=\"https://soy.me/2014/04/05/name_reuse/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://soy.me/2014/04/05/name_reuse/</a></li>\n<li></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Lambda","path":"/00-java-lambda/","date":"15. December 2020","timeToRead":4,"description":"Java Lambda 대해 정리합니다.","content":"<h1 id=\"java-lambda\"><a href=\"#java-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda</h1>\n<p>Java8의 핵심 기능 중 하나는 Lambda입니다. 이 Lambda에 대해서 정리해보고 왜 쓰는지, 장점은 어떤 부분이 있는지를 정리합니다.</p>\n<br/>\n<h2 id=\"java-lambda-정의\"><a href=\"#java-lambda-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 정의</h2>\n<p>자바의 <code class=\"language-text\">Lambda</code>는 <strong>메소드를 하나의 식(Expression)으로 표현한 것</strong>입니다. 익명메소드(함수) 생성 문법이라고도 이야기 할 수 있습니다.</p>\n<p>다만 주의해야하는 부분 중 하나는 <strong>자바의 메소드는 메소드 자체로 혼자 선언하여 선언하여 쓰일 수 없습니다.</strong> 반드시 클래스 구성 멤버로 선언되어 있어야합니다. 즉, 람다식을 통해서 생성되는 것은 메소드가 아닌 해당 메소드를 가지는 객체입니다. <strong>람다식은 일반적인 객체가 아닌 인터페이스를 구현한 익명구현객체</strong>입니다.</p>\n<p>함수적 프로그래밍을 지원하기 위해서 자바 8부터 람다식을 지원하게 되었는데, 이를 통해서 기존의 코드 패턴이 많이 달라지기도 하며, 문법이 간결한 만큼 가독성면에서 큰 장점을 가집니다.</p>\n<p>조금 다른 이야기로 안드로이드 개발에서 요즘은 함수형 프로그래밍인 Kotlin이 각광을 받는데, 자바에서도 람다식을 통해 이러한 함수형 프로그래밍을 지원하는 느낌을 받을 수 있습니다.</p>\n<p>람다식의 사용법은 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>매개변수<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> 실행문 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">(매개변수, ...)</code> 는 오른쪽 중괄호 <code class=\"language-text\">{ 실행문 ... }</code> 을 실행하기 위해 필요한 값을 제공하는 역할을 합니다. 매개 변수의 이름은 자유롭게 지정이 되어 있으며 인자타입을 따로 명시하지 않아도 됩니다. <code class=\"language-text\">-&gt;</code> 기호는 매개 변수를 이용해서 해당 실행문을 실행한다고 이해하면 됩니다.</p>\n<br/>\n<h2 id=\"java-lambda-예제\"><a href=\"#java-lambda-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 예제</h2>\n<h3 id=\"함수형-인터페이스functional-interface\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4functional-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>함수형 인터페이스(functional interface)</h3>\n<p>람다 표현식을 사용할 때는 람다 표현식을 저장하기 위한 참조 변수의 타입을 결정해야합니다.</p>\n<p>일반적으로 다음과 같은 어노테이션을 사용해서 함수형 인터페이스를 명시할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span></code></pre>\n<p>이를 사용한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calc</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">// 함수형 인터페이스 선언</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 추상 메소드</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 추상 메소드</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Calc</span> minNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 추상 메소드 구현</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minNum<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// output : 3</span>\n\n                <span class=\"token class-name\">Calc</span> calcNum <span class=\"token operator\">=</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추상 메소드 구현</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>calcNum<span class=\"token punctuation\">.</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// output : 4</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 예시에서 로직이 한줄이기 때문에 구현 로직에서 <code class=\"language-text\">{ x &lt; y ? x : y }</code> 대신에 <code class=\"language-text\">x &lt; y ? x : y</code> 로 {}를 뺄수도 있고 return도 없앨 수 있습니다.</p>\n<p>추가적으로 매개변수가 하나 일때는 () 또한 삭제가 가능합니다.</p>\n<br/>\n<h2 id=\"java-lambda-장단점\"><a href=\"#java-lambda-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Lambda 장단점</h2>\n<h3 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장점</h3>\n<ul>\n<li>코드를 간결하게 만들 수 있습니다.</li>\n<li>가독성이 좋아집니다.</li>\n<li>함수를 만드는 과정 없이 한번에 처리할 수 있으므로 코딩하는 시간이 줄어듭니다.</li>\n<li>병렬 프로그래밍에 유리합니다.</li>\n</ul>\n<h3 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점</h3>\n<ul>\n<li>재사용이 불가능합니다.</li>\n<li>일부 디버깅이 까다롭습니다.</li>\n<li>너무 남발하면 코드가 지저분해집니다.</li>\n<li>재귀로 만드는 경우에는 성능적 이슈가 있을 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 간단하게 Lambda에 대해 정리해보았습니다. 다음에는 자바의 stream에 대해서 알아보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://coding-factory.tistory.com/265\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://coding-factory.tistory.com/265</a></li>\n<li><a href=\"http://www.tcpschool.com/java/java_lambda_concept\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_lambda_concept</a></li>\n<li><a href=\"https://sehun-kim.github.io/sehun/java-lambda-stream/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://sehun-kim.github.io/sehun/java-lambda-stream/</a></li>\n<li><a href=\"https://medium.com/@logishudson0218/understanding-for-java-1-8-lambda-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-43bcc491519a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@logishudson0218/understanding-for-java-1-8-lambda-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-43bcc491519a</a></li>\n</ul>\n"}}]}}},"context":{}}