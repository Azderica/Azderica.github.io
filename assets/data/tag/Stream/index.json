{"hash":"6eab5397a2d6c11ddf021b778b38f6e8e79b2231","data":{"tag":{"title":"Stream","belongsTo":{"edges":[{"node":{"title":"[Java] Java I/O","path":"/13-java-study/","date":"21. February 2021","timeToRead":9,"description":"Java I/O에 대해 정리합니다.","content":"<h1 id=\"java-io\"><a href=\"#java-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JAVA I/O</h1>\n<p>13주차 내용은 자바의 I/O에 관련된 내용입니다.</p>\n<ul>\n<li>스트림 (Stream) / 버퍼 (Buffer) / 채널 (Channel) 기반의 I/O</li>\n<li>InputStream 과 OutputStream</li>\n<li>Byte 와 Character 스트림</li>\n<li>표준 스트림 (System.in, System.out, System.err)</li>\n<li>파일 읽고 쓰기</li>\n</ul>\n<br/>\n<h2 id=\"스트림-버퍼-채널-기반-io\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EB%B2%84%ED%8D%BC-%EC%B1%84%EB%84%90-%EA%B8%B0%EB%B0%98-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림, 버퍼, 채널 기반 I/O</h2>\n<h3 id=\"자바-nionew-inputoutput\"><a href=\"#%EC%9E%90%EB%B0%94-nionew-inputoutput\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바 NIO(New Input/Output)</h3>\n<p>자바 1.4버전부터 추가된 API로 Non-blocking 처리가 가능하며, 스트림이 아닌 채널을 사용합니다.</p>\n<p>기존의 I/O와는 다음의 차이가 있습니다.</p>\n<ul>\n<li>기존 IO 방식의 경우에서는 각각의 스트림에서 read()와 write()가 호출이 되면 데이터가 입력 되고, 데이터가 출력되기전까지, 스레드는 멈춤상태가 됩니다. 이 경우에는 작업이 끝날때까지 사용할 수 없으며, 그전에는 해당 IO 스레드는 사용할 수 없고 인터럽트도 할 수 없습니다. (스트림을 닫는 방법이 유일합니다.)</li>\n<li>NIO의 블로킹 상태에서는 Interrupt를 통해서 빠져 나올 수 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>--</th>\n<th>IO</th>\n<th>NIO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>입출력 방식</td>\n<td>스트림</td>\n<td>채널</td>\n</tr>\n<tr>\n<td>비동기 방식 지원</td>\n<td>X</td>\n<td>O</td>\n</tr>\n<tr>\n<td>Blocking/Non-Blocking</td>\n<td>Blocking Only</td>\n<td>Both</td>\n</tr>\n<tr>\n<td>사용 경우</td>\n<td>연결 클라이언트가 적고</td>\n<td>연결 클라이언트가 많고</td>\n</tr>\n<tr>\n<td></td>\n<td>I/O처리가 큰 경우(대용량)</td>\n<td>I/O처리가 작은 경우(저용량)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"스트림stream\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BCstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림(Stream)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108591789-ccf3d380-73ad-11eb-9cd6-625d393cf111.png\" alt=\"image\"></p>\n<ul>\n<li>FIFO(First In First Out)</li>\n<li>단방향이기 때문에 입력 스트림과 출력 스트림을 별도로 사용합니다.</li>\n<li>연속된 데이터의 흐름으로 입출력 진행시 다른 작업을 할 수 없는 블로킹(Blocking) 상태가 됩니다.</li>\n<li>입출력 대상을 변경하기 편하며 동일한 프로그램 구조를 유지할 수 있습니다.</li>\n</ul>\n<h3 id=\"버퍼buffer\"><a href=\"#%EB%B2%84%ED%8D%BCbuffer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>버퍼(Buffer)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108591844-21974e80-73ae-11eb-90af-b3353a464654.png\" alt=\"image\"></p>\n<ul>\n<li>byte, char, int 등의 기본 데이터 타입을 저장할 수 있는 저장소로서, 배열과 마찬가지로 제한된 크기(capacity)에 순서대로 데이터를 저장합니다.</li>\n<li>버퍼는 데이터를 저장하기 위한 것이며, 실제로 버퍼가 사용되는 것은 채널을 통해서데이터를 주고 받을 때 사용됩니다.</li>\n<li><strong>채널을 통해서 소켓, 파일 등에서 데이터를 전송할 때나 읽어올 때 버퍼를 사용하게 됨으로써 가비지량을 최소화 시키며 이는 가비지 콜렉션의 회수를 줄임으로써 서버의 전체 처리량을 증가시킵니다.</strong></li>\n</ul>\n<h3 id=\"채널channel-기반-io\"><a href=\"#%EC%B1%84%EB%84%90channel-%EA%B8%B0%EB%B0%98-io\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>채널(Channel) 기반 I/O</h3>\n<p>채널은 서버와 클라인트간의 통신 수단을 나타냅니다. 일종의 데이터가 다니는 통로라는 점에서 비슷하지만 <strong>양방향</strong>이기 때문에 읽기와 쓰기가 동시에 가능합니다.</p>\n<p>대표적으로 다음과 같이 있습니다.</p>\n<ul>\n<li>SocketChannel (소켓과 연결)</li>\n<li>FileChannel (파일 채널)</li>\n<li>Pipe.SinkChannel (파이프와 연결)</li>\n<li>Pipe.SourceChannel (파이프와 연결)</li>\n<li>ServerSocketChannel (서버소켓과 연결)</li>\n</ul>\n<br/>\n<h2 id=\"inputstream-outputstream\"><a href=\"#inputstream-outputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>InputStream, OutputStream</h2>\n<h3 id=\"inputstream\"><a href=\"#inputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>InputStream</h3>\n<ul>\n<li>바이트 기반의 <strong>입력 스트림의 최상위 추상 클래스</strong>입니다.</li>\n<li>모든 바이트 기반 입력 스트림은 해당 클래스 상속 받아서 만들어집니다.</li>\n<li>버퍼, 파일, 네트워크 단에서 입력되는 데이터를 읽어오는 기능을 수행합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read()</td>\n<td>입력 스트림으로부터 1바이트를 읽어서 바이트를 리턴</td>\n</tr>\n<tr>\n<td>read(byte[] b)</td>\n<td>입력 스트림으로부터 읽은 바이트들을 매개값으로 주어진 바이트 배열 b에 저장하고 실제로 읽은 바이트 수를 리턴</td>\n</tr>\n<tr>\n<td>read(byte[] b, int off, int len)</td>\n<td>입력 스트림으로부터 len 개의 바이트만큼 읽고 매개값으로 주어진 바이트 배열 b[off]부터 len 개까지 저장</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>사용한 시스템 자원을 반납하고 입력 스트림 닫기</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"outputstream\"><a href=\"#outputstream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OutputStream</h3>\n<ul>\n<li>바이트 기반의 <strong>출력 스트림의 최상위 추상 클래스</strong>입니다.</li>\n<li>모든 바이트 기반 출력 스트림은 해당 클래스를 상속 받아서 만들어집니다.</li>\n<li>버퍼, 파일, 네트워크 단으로 데이터를 내보내는 기능을 수행합니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>write(int b)</td>\n<td>출력 스트림으로부터 1바이트를 보냅니다.</td>\n</tr>\n<tr>\n<td>write(byte[] b</td>\n<td>출력 스트림으로부터 주어진 바이트 배열 b의 모든 바이트를 보낸다</td>\n</tr>\n<tr>\n<td>write(byte[] b, int off, int len)</td>\n<td>출력 스트림으로 주어진 바이트 배열 b[off]부터 len 개까지의 바이트를 보내야한다</td>\n</tr>\n<tr>\n<td>flush()</td>\n<td>버퍼에 잔류하는 모든 바이트를 출력한다.</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>사용한 시스템 자원을 반납하고 입력 스트림 닫기</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"byte와-character-스트림\"><a href=\"#byte%EC%99%80-character-%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Byte와 Character 스트림</h2>\n<p>스트림의 객체도는 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600189-14438980-73d9-11eb-82cb-75b83bb27abf.png\" alt=\"image\"></p>\n<h3 id=\"byte-stream\"><a href=\"#byte-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Byte Stream</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600070-325cba00-73d8-11eb-8538-8f81084f99c7.png\" alt=\"image\"></p>\n<ul>\n<li>binary 데이터를 입출력하는 스트림</li>\n<li>데이터는 <strong>1바이트</strong> 단위로 처리합니다.</li>\n<li>이미지, 동영상 등을 송수신할 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"character-stream\"><a href=\"#character-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Character Stream</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/108600068-2d980600-73d8-11eb-9e03-79e0abf2700f.png\" alt=\"image\"></p>\n<ul>\n<li>text 데이터를 입출력하는 스트림</li>\n<li>데이터는 <strong>2바이트</strong> 단위로 처리합니다.</li>\n<li>일반적인 테스트 및 JSON, HTML 등을 송수신할 때 주로 사용합니다.</li>\n</ul>\n<h3 id=\"보조-stream\"><a href=\"#%EB%B3%B4%EC%A1%B0-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>보조 Stream</h3>\n<ul>\n<li>FilterInputStream과 FilterOutputStream을 상속받는 클래스들로 기본 스트림과 결합하여 특정 상황에서 편하게 사용할 수 있습니다.</li>\n<li>\n<p>BufferedInputStream/BufferedOutputStream</p>\n<ul>\n<li>버퍼를 사용하여 입출력 효율과 편의를 위해 사용할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>BufferedReader/BufferedWriter</p>\n<ul>\n<li>라인단위의 입출력이 편리합니다.</li>\n</ul>\n</li>\n<li>\n<p>InputStreamReader/OutputStreamReader</p>\n<ul>\n<li>바이트 스트림을 문자 스트림처러 쓸 수 있도록하며 문자 인코딩 변환을 지원합니다.</li>\n</ul>\n</li>\n<li>\n<p>DataInputStream/DataOutputStream</p>\n<ul>\n<li>자바 원시 자료형 데이터 처리에 적합합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"표준-스트림-systemin-systemout-systemerr\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%8A%A4%ED%8A%B8%EB%A6%BC-systemin-systemout-systemerr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>표준 스트림 (System.in, System.out, System.err)</h2>\n<p>표준 스트림은 콘솔(console,도스창)을 통한 데이터 입력과 콘솔로의 데이터 출력을 의미합니다. 자바에서는 표준 스트림을 3가지 제공을 합니다.(System.in, System.out, System.err)</p>\n<p>해당 표준 스트림은 <code class=\"language-text\">java.lang</code> 패키지의 System 클래스 내부에 선언되어 있습니다. 또한 이 표준 스트림들은 자바 어플리케이션의 실행과 동시에 사용할 수 있도록 자동적으로 생성이 됩니다. 그렇기 때문에 개발자가 별도로 스트림을 생성하는 코드를 작성하지 않고도 사용이 가능합니다.</p>\n<p>이를 확인해보면 다음과 같이 구성되어 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">System</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">InputStream</span> in<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PrintStream</span> out<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PrintStream</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같은 의미를 가집니다,</p>\n<ul>\n<li><code class=\"language-text\">System.out</code> 은 콘솔 화면에 문자열을 출력하기 위한 용도로 사용되는 출력 스트림입니다.</li>\n<li><code class=\"language-text\">System.in</code> 은 키보드의 입력을 받아들이기 위해 사용되는 입력 스트림입니다.</li>\n<li>\n<p><code class=\"language-text\">System.out</code> 와 <code class=\"language-text\">System.err</code></p>\n<ul>\n<li>둘다 출력 스트림입니다.</li>\n<li><code class=\"language-text\">System.err</code> 는 좀 더 정확하고 빠르게 출력해야하기 때문에 버퍼링을 지원하지 않습니다. (버퍼링 도중 프로그램이 멈추면 버퍼링 내용이 출력이 되지않기 때문에.)</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"파일-읽고-쓰기\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B3%A0-%EC%93%B0%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>파일 읽고 쓰기</h2>\n<p>텍스트 파일의 경우에는 문자 스트림 클래스를 사용하고, 바이너리 파일의 경우에는 바이트 스트림을 기본적으로 사용합니다.</p>\n<ul>\n<li>입출력 효율을 위해 Buffered 계열의 보조 스트림을 사용하는 것이 좋습니다.</li>\n</ul>\n<p><strong>텍스트 파일</strong> 의 경우</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  br<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>이진 파일</strong> 의 경우</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">BufferedInputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BufferedOutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">100000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://bingbingpa.github.io/java/whiteship-live-study-week13/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bingbingpa.github.io/java/whiteship-live-study-week13/</a></li>\n<li>\b<a href=\"https://github.com/LeeWoooo/Java_LiveStudy/tree/master/week13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/LeeWoooo/Java_LiveStudy/tree/master/week13</a></li>\n<li><a href=\"https://github.com/JJongSue/javastudy/tree/master/src/main/java/week13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/JJongSue/javastudy/tree/master/src/main/java/week13</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Optional 2","path":"/01-java-optional/","date":"17. December 2020","timeToRead":7,"description":"Java Optional 을 좀 더 잘 사용하기","content":"<h1 id=\"java-optional-활용-편\"><a href=\"#java-optional-%ED%99%9C%EC%9A%A9-%ED%8E%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional 활용 편</h1>\n<p>지난 시간에 자바 Optional에 대해 작성했습니다. 또한 자바 Stream이나 Lambda에 대해서도 이야기를 하였습니다.</p>\n<ul>\n<li><a href=\"https://Azderica.github.io/00-java-optional/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Optional</a></li>\n<li><a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Lambda</a></li>\n<li><a href=\"https://Azderica.github.io/00-java-stream/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Stream</a></li>\n</ul>\n<p>이를 기반으로 좀 더 Optional을 더 잘 쓰는 방법에 대해 이야기해볼려고합니다.</p>\n<br/>\n<h2 id=\"optional과-stream\"><a href=\"#optional%EA%B3%BC-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional과 Stream</h2>\n<p>Optional을 제대로 사용하기 위해서는 Stream을 빼놓을 수는 없습니다. 일부 다른 표현으로는 <strong>Optional</strong>을 <strong>최대 1개의 원소를 가진 특별한 Stream</strong>이라고 표현하기도 합니다.</p>\n<p>Optional 클래스와 Stream 클래스 간에 직접적인 상관관계는 없지만 크게 유사한 부분을 가지고 있습니다. 지난시간에 이야기한 Stream이 가지고 있는 <code class=\"language-text\">map()</code>, <code class=\"language-text\">flatMap()</code>, <code class=\"language-text\">filter()</code> 모두 Optional도 가지고 있습니다.</p>\n<h3 id=\"map-사용하기\"><a href=\"#map-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>map() 사용하기</h3>\n<p>해당 코드는 <strong>\"주문을 한 회원이 살고 있는 도시를 반환한다\"</strong> 라는 예제입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCityOfMemberFromOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token operator\">::</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Address</span><span class=\"token operator\">::</span><span class=\"token function\">getCity</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음 코드는 기존의 NPE(Null Pointer Exception) 방어 패턴에 비해 훨씬 간결하고 명확한 코드를 확인할 수 있습니다.</p>\n<p>이를 좀 더 상세하게 설명한다면 다음과 같은 의미를 가집니다.</p>\n<ul>\n<li><code class=\"language-text\">ofNullable</code> 을 통해 Order 객체를 Optional로 감쌌으며 객체가 null인 경우를 위해 <code class=\"language-text\">of()</code> 대신에 <code class=\"language-text\">ofNullabe</code>을 사용하였습니다.</li>\n<li><code class=\"language-text\">map()</code> 메소드를 3번 호출하면서 Optional 객체는 <code class=\"language-text\">Optional&lt;Order&gt;</code> 에서 <code class=\"language-text\">Optional&lt;Member&gt;</code>, <code class=\"language-text\">Optional&lt;Address&gt;</code>, <code class=\"language-text\">Optional&lt;String&gt;</code>으로 객체가 3번 변화하였습니다.</li>\n<li><code class=\"language-text\">orElse()</code>를 통해 <code class=\"language-text\">Optional</code>이 비어있는 경우, 디폴트 값으로 \"Seoul\"을 설정하였습니다.</li>\n</ul>\n<p>해당 코드는 <code class=\"language-text\">null-safe</code>한 아름다운 코드입니다.</p>\n<h3 id=\"filter-사용하기\"><a href=\"#filter-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>filter() 사용하기</h3>\n<p><strong>주어진 시간내에 생성된 주문을 한 경우, 회원 정보를 얻는 기능</strong>을 구현한 코드가 예시로 있습니다.</p>\n<p>기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span> <span class=\"token function\">getMemberIfOrderWithin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>order <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> min <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 <code class=\"language-text\">filter()</code>을 통해 읽기 편하고 아름다운 코드를 만들 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMemberIdOrderWithin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullabe</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">-></span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> min <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getMember</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 코드를 수정할 수 있습니다.</p>\n<p>다만 <code class=\"language-text\">filter()</code> 의 경우, <code class=\"language-text\">Opional</code>과 <code class=\"language-text\">Stream</code>은 약간의 차이가 있습니다. 동작 방식은 동일하지만 <code class=\"language-text\">Optional</code>의 경우에는 원소가 하나이기 때문에, <code class=\"language-text\">filter()</code> 로 넘어온 함수형 인자값이 false 인 경우에는 그 이후의 메소드는 의미없어집니다.</p>\n<br/>\n<h2 id=\"optional-활용-예시\"><a href=\"#optional-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 활용 예시</h2>\n<h3 id=\"null-반환\"><a href=\"#null-%EB%B0%98%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>null 반환</h3>\n<p>다음과 같은 데이터가 있는 경우.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {1, \"Seoul\"}, {2, \"Busan\"}, {3, \"Daegu\"}</span></code></pre>\n<p><code class=\"language-text\">map</code> 인터페이스에서 <code class=\"language-text\">get()</code> 메소드 사용시 인덱스에 해당하는 값이 없으면 null을 반환합니다. 따라서 기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> city <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// return null</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> city <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> city<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null check</span></code></pre>\n<p>다만 <code class=\"language-text\">Optional</code>을 통해 <code class=\"language-text\">get()</code>을 감싸주면 null-safe한 코드가 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> maybeCity <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Optional</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> maybeCity<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// null-safe</span></code></pre>\n<p>이와 같이 아름다운 코드가 됩니다.</p>\n<h3 id=\"예외-발생\"><a href=\"#%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예외 발생</h3>\n<p>마찬가지로 null 반환을 하지 않고 예외를 던지는 경우에도 <code class=\"language-text\">Optional</code>은 효과적입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cities <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Busan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Daegu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이와 같은 데이터가 있을 때, 기존의 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> city <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\tcity <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throws exception</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ignore</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> city <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> city<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null check</span></code></pre>\n<p>이를 Optional을 통해서 수정가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAsOptional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>정적 메소드를 사용하여 null-safe하게 간단하게 코딩할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> maybeCity <span class=\"token operator\">=</span> <span class=\"token function\">getAsOptional</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Optional</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> maybeCity<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null-safe</span></code></pre>\n<br/>\n<h2 id=\"java-9의-optional-메소드\"><a href=\"#java-9%EC%9D%98-optional-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 9의 Optional 메소드</h2>\n<p>자바 9에서도 추가된 옵셔널 메소드가 있습니다.</p>\n<h3 id=\"or\"><a href=\"#or\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>or</h3>\n<p>기존의 <code class=\"language-text\">.orElseGet()</code>과 유사하지만 체이닝을 통해서 우선 순위를 결정할 수 있습니다. <code class=\"language-text\">.or()</code> 연산 중 비어있으면 순차적으로 진행합니다.</p>\n<p>예제 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public Optional&lt;T> or(Supplier&lt;? extends Optional&lt;? extends T>></span>\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token string\">\"filter\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">empty</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"final\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'second'</span></code></pre>\n<h3 id=\"ifpresentorelse\"><a href=\"#ifpresentorelse\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ifPresentOrElse</h3>\n<p>기존의 <code class=\"language-text\">.ifPresent</code> 메소드와 비슷하지만 매개변수를 하나 더 받을 수 있습니다. <code class=\"language-text\">emptyAction</code>을 추가로 받아서 유효한 객체가 있는 경우 <code class=\"language-text\">action</code>을 실행하고 그렇지 못한 경우에는 <code class=\"language-text\">emptyAction</code>을 실행합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public void ifPresentOrElse(Consumer&lt;? super T> action, Runnable emptyAction);</span>\n\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'test'</span>\n\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 'null'</span></code></pre>\n<h3 id=\"stream\"><a href=\"#stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>.stream</h3>\n<p><code class=\"language-text\">.stream()</code> 메서드는 Optional 객체가 바로 스트림 객체로 전환되는 기능을 가지고 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public Stream&lt;T> stream();</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">-></span> val <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : [2, 4]</span></code></pre>\n<br/>\n<h2 id=\"java-10의-optional-메소드\"><a href=\"#java-10%EC%9D%98-optional-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java 10의 Optional 메소드</h2>\n<p>자바 10에서도 하나의 메서드가 추가되었습니다.</p>\n<h3 id=\"orelsethrow\"><a href=\"#orelsethrow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>orElseThrow</h3>\n<p>매개변수가 필요없는 예외 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java 8</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchElementException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Java 10</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>이상으로 길고 길었던 Java의 Optinal, lambda, Stream에 대해 한번 정리했습니다. 스프링 개발을 하면서 좋은 코드에 대해 많은 고민이 들었습니다. 클린 코드에서 추가하는 아름다운 코드를 구성하기 위해서는 어떤식으로 코드를 구성해야할까라는 생각이 많이 들었습니다.</p>\n<p>함께 일하기 좋은 개발자 중 한명으로 코드를 보기 쉽게 짜는 사람이 있다는 이야기를 들은적이 있습니다. 저 또한 이부분을 잘 살려서 아름답고 사용자가 보기 쉬운 코드를 구성하는데 목표를 세워야겠다는 생각이 드는 시간이였습니다.</p>\n<p>부족한 점이나 잘못된 부분이 있으면 편하게 이야기주세요. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.daleseo.com/java8-optional-after/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-after/</a></li>\n<li><a href=\"https://www.daleseo.com/java8-optional-effective/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-effective/</a></li>\n<li><a href=\"https://jdm.kr/blog/234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/234</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Java Stream","path":"/00-java-stream/","date":"16. December 2020","timeToRead":4,"description":"Java Stream에 대해 정리합니다.","content":"<h1 id=\"java-stream\"><a href=\"#java-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Stream</h1>\n<p>지난번에 이야기한 Java8의 핵심 기능, <a href=\"https://Azderica.github.io/00-java-lambda/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바 Optional</a>에 이어서, 오늘은 Stream에 대해서 정리합니다.</p>\n<br/>\n<h2 id=\"java-stream-정의\"><a href=\"#java-stream-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Stream 정의</h2>\n<p>Java Stream은 <strong>배열이나 컬렉션의 저장 요소를 하나씩 참조해서 람다식으로 처리할 수 있게 해주는 반복자</strong>입니다. 이전에는 Java Stream이 없었을 때는 Iterator이라는 반복자를 사용하였습니다.</p>\n<ul>\n<li>Java Iterator</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// output : 1, 2, 3</span></code></pre>\n<ul>\n<li>Java Stream</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 1, 2, 3</span></code></pre>\n<br/>\n<h2 id=\"java-stream-특징\"><a href=\"#java-stream-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Stream 특징</h2>\n<ul>\n<li>배열 또는 컬렉션 인스턴스에 함수 여러 개를 조합해서 원하는 결과를 필터링할 수 있으며 가공된 결과를 얻을 수 있습니다.</li>\n<li>람다를 통해 코드를 간결하게 표현할 수 있습니다.</li>\n<li>배열과 컬렉션을 통해 함수형으로 처리할 수 있습니다.</li>\n<li>병렬처리가 가능합니다.</li>\n</ul>\n<br/>\n<h2 id=\"java-stream-구조-및-사용법\"><a href=\"#java-stream-%EA%B5%AC%EC%A1%B0-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Stream 구조 및 사용법</h2>\n<p>스트림은 다음과 같은 절차로 사용할 수 있습니다.</p>\n<ul>\n<li>스트림 생성 : 스트림 인스턴스 생성</li>\n<li>중개 연산 : 필터링(filtering) 및 맵핑(mapping) 등으로 원하는 결과를 만들어가는 중간 과정</li>\n<li>최종 연산 : 최종적으로 결과를 만드는 작업</li>\n</ul>\n<h3 id=\"스트림-생성\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스트림 생성</h3>\n<ul>\n<li><strong>배열 스트림</strong> : <code class=\"language-text\">Arrays.stream()</code> 을 사용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">IntStream</span> intStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li><strong>컬렉션 스트림</strong> : 인터페이스의 default method를 사용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">streams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> parallelStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"중개-연산\"><a href=\"#%EC%A4%91%EA%B0%9C-%EC%97%B0%EC%82%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>중개 연산</h3>\n<ul>\n<li>Filter: 스트림 내 요소 중 조건에 맞는 것을 고릅니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arrary <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"melon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> arrary<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : ['apple', 'banana']</span></code></pre>\n<ul>\n<li>Map : 스트림 내 요소들이 특정 로직 수행 후 새로운 스트림을 반환합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : [2, 3, 4]</span></code></pre>\n<ul>\n<li>flatMap : 여러 스트림을 하나의 스트림으로 합칩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"c1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : [\"a1\", \"a2\", \"b1\", \"b2\", \"c1\", \"c2\"]</span></code></pre>\n<ul>\n<li>sorted : 정렬합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sortedList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오름차순</span>\n<span class=\"token comment\">// output : [1, 3, 4]</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sortedList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverseOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 내림차순</span>\n<span class=\"token comment\">// output : [4, 3, 1]</span></code></pre>\n<h3 id=\"최종-연산\"><a href=\"#%EC%B5%9C%EC%A2%85-%EC%97%B0%EC%82%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>최종 연산</h3>\n<ul>\n<li>count, min, max, sum : 갯수, 최소, 최대, 합</li>\n<li>forEach : 요소를 돌면서 실행합니다.</li>\n<li>collect : 스트림의 값들을 모을 수 있습니다. ex) <code class=\"language-text\">toMap()</code>, <code class=\"language-text\">toSet()</code>, <code class=\"language-text\">toList()</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output : 1 2 3 4 5</span></code></pre>\n<ul>\n<li>reduce : 누적된 값을 계산합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">OptionalInt</span> reduced <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// output : 6 (1 + 2 + 3)</span>\n\n    <span class=\"token keyword\">int</span> reducedTwoParams <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// output : 16 (10 + 1 + 2 + 3)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 간단하게 stream에 대해 알아보고 이를 사용한 예시를 사용하였습니다. 현업에서 stream과 optional, lambda식을 잘 쓰는 것은 클린 코드를 만드는데 좋은 스킬 중 하나임을 개발하면서 자주 느낍니다. 오늘 사용한 예제말고도 다른 예제는 찾아보면서 좋은 개발할 수 있으면 좋겠습니다.</p>\n<p>감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html</a></li>\n<li><a href=\"https://www.baeldung.com/java-8-streams-introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.baeldung.com/java-8-streams-introduction</a></li>\n<li><a href=\"https://futurecreator.github.io/2018/08/26/java-8-streams/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://futurecreator.github.io/2018/08/26/java-8-streams/</a></li>\n</ul>\n"}}]}}},"context":{}}