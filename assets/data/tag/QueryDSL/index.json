{"hash":"6eab5397a2d6c11ddf021b778b38f6e8e79b2231","data":{"tag":{"title":"QueryDSL","belongsTo":{"edges":[{"node":{"title":"[Spring] Spring Data JPA와 QueryDSL","path":"/01-spring-jpa/","date":"23. September 2021","timeToRead":6,"description":"Spring JAP와 QueryDSL에 대해 정리합니다.","content":"<h1 id=\"spring-jpa와-querydsl에-대해\"><a href=\"#spring-jpa%EC%99%80-querydsl%EC%97%90-%EB%8C%80%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring JPA와 QueryDSL에 대해</h1>\n<p>지난 시간에는 이번에 정리할 Spring JPA와 QueryDSL을 위해 ORM과 JPA에 대해 정리했습니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-db-orm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a></li>\n<li><a href=\"https://azderica.github.io/00-java-jpa/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA</a></li>\n</ul>\n<p>오늘은 이를 바탕으로 Spring JPA을 더 자세하게 정리합니다.</p>\n<h2 id=\"spring-data-jpa\"><a href=\"#spring-data-jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Data JPA</h2>\n<ul>\n<li>CRUD 문제를 인터페이스 선언만으로 작성합니다.</li>\n<li>스프링 데이터 JPA가 구현 객체를 동적으로 생성해서 주입합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-jpa-적용-전\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-jpa-%EC%A0%81%EC%9A%A9-%EC%A0%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 JPA 적용 전</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// before JPA</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-jpa-적용-후\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-jpa-%EC%A0%81%EC%9A%A9-%ED%9B%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 JPA 적용 후</h3>\n<ul>\n<li>스프링 데이터 JPA에서는 JpaRepository 인터페이스를 제공합니다.</li>\n<li>인터페이스가 인터페이스를 상속받을 때는 extends를 사용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// after JPA</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"스프링-데이터-jpa-적용-후-클래스-다이어그램\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa-%EC%A0%81%EC%9A%A9-%ED%9B%84-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 데이터 JPA 적용 후 클래스 다이어그램</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/134428743-a9727ffa-3cf1-47ad-bc6d-55e42338ca1d.png\" alt=\"image\"></p>\n<ul>\n<li>기본적으로 CRUD를 구현하지 않아도 되며, 인터페이스를 호출해서 쓸 수 있습니다.</li>\n<li>스프링 로딩 시점에 UserRepository의 구현체를 만듭니다.</li>\n</ul>\n<h3 id=\"공통-인터페이스\"><a href=\"#%EA%B3%B5%ED%86%B5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>공통 인터페이스</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/134432747-fdf6a1a2-ab04-4190-971e-25dfee64a4d4.png\" alt=\"image\"></p>\n<ul>\n<li>JpaRepository 인터페이스는 공통 CRUD을 제공합니다.</li>\n<li>제네릭은 &#x3C;Entity, 식별자>로 설정합니다.</li>\n<li>스프링에 스프링 데이터 프로젝트와 스프링 데이터 JPA 프로젝트가 따로 존재합니다.</li>\n<li>스프링 데이터에서 공통적인 기능을 가지고 있고, JPA 기능은 스프링 데이터 JPA 프로젝트에서 가지고 있습니다.</li>\n</ul>\n<h3 id=\"쿼리-메서드\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿼리 메서드</h3>\n<ul>\n<li>메서드 이름으로 쿼리를 생성합니다. <code class=\"language-text\">@Query</code> 어노테이션으로 쿼리를 직접 정의할 수도 있습니다.</li>\n<li>메서드 이름만으로 JPQL 쿼리를 생성합니다.</li>\n<li>선언된 메서드에 대해서는 로딩 시점에 쿼리를 만들기 때문에 에러를 미리 잡을 수 있습니다.</li>\n</ul>\n<h3 id=\"예시\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>예시</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>이름으로 검색</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></code></pre>\n<ul>\n<li>이름으로 검색 및 정렬</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sort</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// sort is order by age.</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> AGE <span class=\"token keyword\">DESC</span></code></pre>\n<ul>\n<li>이름으로 검색, 정렬, 페이징</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Pageable</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userResult <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 실행된 SQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span>\n    <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> ROW_<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ROWNUM ROWNUM_\n      <span class=\"token keyword\">FROM</span>\n          <span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> M<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n            <span class=\"token keyword\">FROM</span> MEMBER M <span class=\"token keyword\">WHERE</span> M<span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n            OEDER <span class=\"token keyword\">BY</span> M<span class=\"token punctuation\">.</span>NAME\n          <span class=\"token punctuation\">)</span> ROW_\n     <span class=\"token keyword\">WHERE</span> ROWNUM <span class=\"token operator\">&lt;=</span> ?\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WHERE</span> ROWNUM_<span class=\"token operator\">></span>?</code></pre>\n<h3 id=\"query-jpql-정의\"><a href=\"#query-jpql-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Query</code>, JPQL 정의</h3>\n<ul>\n<li><code class=\"language-text\">@Query</code> 어노테이션을 사용해서 직접 JPQL을 지정할 수 있습니다.</li>\n<li>이도 로딩 시점에 파싱을 함으로 런타임 에러를 내지 않을 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select u from User u where m.name = ?1\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"web-페이징과-정렬-기능\"><a href=\"#web-%ED%8E%98%EC%9D%B4%EC%A7%95%EA%B3%BC-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%8A%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web 페이징과 정렬 기능</h3>\n<ul>\n<li>컨트롤러에서 페이징 처리 객체를 바로 인젝션 받을 수도 있습니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>page</td>\n<td>현재 페이지</td>\n</tr>\n<tr>\n<td>size</td>\n<td>한 페이지에 노출할 데이터 건수</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>정렬 조건</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>ex) <code class=\"language-text\">/user?page=0&amp;size=20&amp;sort=name,dsec</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"querydsl\"><a href=\"#querydsl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL</h2>\n<ul>\n<li>SQL, JPQL을 코드로 작성할 수 있도록 도와주는 빌더 API</li>\n<li>JPA에 비해 편리하고 실용적입니다.</li>\n<li>오픈소스입니다.</li>\n</ul>\n<h3 id=\"sql-jpql의-문제점\"><a href=\"#sql-jpql%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SQL, JPQL의 문제점</h3>\n<ul>\n<li>SQL, JPQL은 문자열입니다.</li>\n<li>컴파일 시점에 알 수 있는 방법이 없습니다. (로딩 시점에 알 수 있습니다.)</li>\n<li>해당 로직 실행전까지 작동여부 확인을 할 수 없습니다.</li>\n<li>해당 쿼리 실행 시점에 오류를 발견합니다.</li>\n</ul>\n<h3 id=\"querydsl-장점\"><a href=\"#querydsl-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL 장점</h3>\n<ul>\n<li>문자가 아닌 코드로 작성합니다.</li>\n<li>컴파일 시점에 문법 오류를 발견합니다.</li>\n<li>코드 자동완성이 가능합니다. (IDE 도움)</li>\n<li>단순하고 쉽습니다.</li>\n<li><strong>동적 쿼리</strong>입니다.</li>\n</ul>\n<h3 id=\"querydsl-예시\"><a href=\"#querydsl-%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QueryDSL, 예시</h3>\n<h4 id=\"동작원리-커리타입-생성\"><a href=\"#%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC-%EC%BB%A4%EB%A6%AC%ED%83%80%EC%9E%85-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동작원리 커리타입 생성</h4>\n<ul>\n<li><code class=\"language-text\">@Entity</code>를 통해서 <code class=\"language-text\">QMember</code>라는 <code class=\"language-text\">QueryDSL</code> 전용 객체를 만듭니다.</li>\n<li><code class=\"language-text\">Entity Manager</code>를 <code class=\"language-text\">JPAQueryFactory</code>에 넣고, <code class=\"language-text\">QMberber</code> 객체를 가지고 쿼리를 코드로 구성가능합니다.</li>\n</ul>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># JPQL</span>\n<span class=\"token keyword\">select</span> m <span class=\"token keyword\">from</span> Member m <span class=\"token keyword\">where</span> m<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"join\"><a href=\"#join\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>join</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member\n<span class=\"token class-name\">QTeam</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">QTeam</span><span class=\"token punctuation\">.</span>team\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teamA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"페이징-api\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%95-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>페이징 API</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">JPAFactoryQuery</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPAQueryFactory</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"동적-쿼리\"><a href=\"#%EB%8F%99%EC%A0%81-%EC%BF%BC%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동적 쿼리</h4>\n<ul>\n<li>QueryDSL을 쓰는 진짜 이유</li>\n<li>JPQL은 정적 쿼리이고, 문자열을 더해주는것이 헬입니다.</li>\n<li>QueryDSL은 코드를 더하는 것이기에 수월하게 처리가 가능합니다.</li>\n<li><code class=\"language-text\">BooleanBuilder</code>에 조건을 넣고 쿼리를 실행시키면 된다.</li>\n<li>원하는 필드만 뽑아서 DTO로 뽑아내는 기능도 QueryDSL이 다 지원합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"member\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">QMember</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">QMember</span><span class=\"token punctuation\">.</span>member<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">BooleanBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BooleanBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  builder<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  builder<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"자바\"><a href=\"#%EC%9E%90%EB%B0%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바</h4>\n<ul>\n<li>객체지향적인 관점에서 가장 중요합니다.</li>\n<li>제약조건을 조립할 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 쿠폰의 상태와 마케팅 뷰 카운트를 체크하는 서비스의 경우</span>\n<span class=\"token keyword\">return</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n      coupon<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>typeParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      coupon<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span><span class=\"token function\">wq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LIVE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      marketing<span class=\"token punctuation\">.</span>viewCount<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>markting<span class=\"token punctuation\">.</span>maxCount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 아래 코드처럼 재조립이 가능합니다.</span>\n<span class=\"token keyword\">return</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span>coupon<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n      coupon<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>typeParma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">isServiceable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BooleanExpression</span> <span class=\"token function\">isServiceable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> coupon<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span><span class=\"token function\">wq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LIVE\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>marketing<span class=\"token punctuation\">.</span>viewCount<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>markting<span class=\"token punctuation\">.</span>maxCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://ict-nroo.tistory.com/117\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Data JPA와 QueryDSL</a></li>\n<li><a href=\"https://mycup.tistory.com/333\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">QueryDSL과 JOOQ 비교</a></li>\n</ul>\n"}}]}}},"context":{}}