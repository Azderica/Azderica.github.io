{"hash":"4d08d5d9909bc52ba8ae53ab8b5e8ea790bc2d53","data":{"tag":{"title":"Virtualization","belongsTo":{"edges":[{"node":{"title":"[CS] Load Balancer(로드밸런서)","path":"/00-load-balancer/","date":"18. October 2020","timeToRead":8,"description":" 로브밸런서에 대한 글입니다. ","content":"<h1 id=\"load-balancer로드밸런서\"><a href=\"#load-balancer%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load Balancer(로드밸런서)</h1>\n<p>최근에 Citrix 장비가 F5장비로 변경해야하는 일이 있어서 이를 모니터링할 일이 생겼는데, 이게 무엇인지에 대해서 모른다는 느낌을 받았다.</p>\n<p>이를 알기위해서는 먼저 로드밸런서에 대해서 알아야 한다.</p>\n<br/>\n<h2 id=\"load-balancer의-정의\"><a href=\"#load-balancer%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load Balancer의 정의</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/96366790-ea592c80-1184-11eb-9110-838bc94fcd5b.png\" alt=\"image\"></p>\n<p>로드 밸런싱(load balancing)는 컴퓨터 네트워크 기술의 일종으로 둘 혹은 셋이상의 중앙처리장치 혹은 저장장치와 같은 컴퓨터 자원들에게 작업을 나누는 것을 의미한다.</p>\n<p>이 로드밸런서가 없으면 하나의 서버는 모든 사람들의 응답을 해주려고 노력하지만 클라이언트가 많아질수록 성능이 안나오게 된다.</p>\n<p>이를 해결하기 위해서는 2가지 방안, <code class=\"language-text\">scale-up</code> 과 <code class=\"language-text\">scale-out</code>을 제시할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">scale up</code> : 서버의 하드웨어 성능을 올려서 더 빠르게 동작시킨다.</li>\n<li><code class=\"language-text\">scale out</code> : 하나의 서버보다는 여러대의 서버가 나눠서 일을 한다.</li>\n</ul>\n<p>여기서 Scale-out을 통해서 얻는 장점은 <strong>하드웨어 향상하는 비용보다 서버 한대 추가 비용이 적은 부분</strong>과 <strong>여러 대의 Server 덕분에 무중단 서비스를 제공</strong>할 수 있다.</p>\n<br/>\n<h2 id=\"load-balancer의-기술\"><a href=\"#load-balancer%EC%9D%98-%EA%B8%B0%EC%88%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load Balancer의 기술</h2>\n<ul>\n<li>\n<p>NAT(Network Address Translation)</p>\n<ul>\n<li>사설 ip주소를 공인 IP주소로 변경, 주소변경의 역할</li>\n</ul>\n</li>\n<li>\n<p>DSR(Dynamic Source Routing protocol)</p>\n<ul>\n<li>서버에서 클라이언트로 되돌아가는 경우 목적지 주소를 스위치의 IP주소가 아닌 클라리언트의 IP 주소로 전달해서 네트워크 스위치를 거치지 않고 바로 클라이언트를 찾아가는 개념</li>\n</ul>\n</li>\n<li>\n<p>Tunneling</p>\n<ul>\n<li>인터넷상에서 눈에 보이지 않는 통로를 만들어 통신할 수 있게 하는 개념</li>\n<li>데이터를 캡슐화해서 연결된 상호 간에만 캡슐화된 패킷을 구별해 캡슐화를 해제</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"load-balancer의-종류\"><a href=\"#load-balancer%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Load Balancer의 종류</h2>\n<ul>\n<li>\n<p>운영체제 로드밸런서</p>\n<ul>\n<li>물리적 프로세서 간에 작업을 스케줄링</li>\n</ul>\n</li>\n<li>\n<p>네트워크 로드밸런서</p>\n<ul>\n<li>사용 가능한 백엔드에서 네트워크 작업을 스케줄링</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"네트워크-로드밸런서의-종류\"><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>네트워크 로드밸런서의 종류</h2>\n<ul>\n<li>\n<p><strong>L2(Data Link Layer)</strong></p>\n<ul>\n<li>Mac주소를 바탕으로 Load Balancing한다.</li>\n<li>장점 : 구조가 간단, 신뢰성이 높음, 가격저렴, 성능이 좋음</li>\n<li>단점 : Broadcast 패킷에 의해 성능저하 발생, 라우팅 등 상위레이어 프로토콜 기반 스위칭 불가</li>\n</ul>\n</li>\n<li>\n<p><strong>L3(Network Layer)</strong></p>\n<ul>\n<li>IP주소를 바탕으로 Load Balancing한다.</li>\n<li>장점 : Broadcast 트래픽으로 전체 성능 저하 방지, 트레픽 체크</li>\n<li>단점 : 특정 프로토콜을 이용해야 스위칭 가능</li>\n</ul>\n</li>\n<li>\n<p><strong>L4(Transport Layer)</strong></p>\n<ul>\n<li>Transport Layer(IP와 Port) Level에서 Load Balancing한다.</li>\n<li>TCP, UDP 프로토콜</li>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/97098680-35ae9600-16c3-11eb-8950-1a68a84016de.png\" alt=\"L4\"></li>\n<li>장점 : Port기반 스위칭 지원, VIP를 이용하여 여러대를 한대로 묶어 부하분산</li>\n<li>주로 Round Robin 방식 사용</li>\n</ul>\n</li>\n<li>\n<p><strong>L7(Application Layer)</strong></p>\n<ul>\n<li>Application Layer(사용자의 Request) Level에서 Load Balancing한다.</li>\n<li>HTTP, HTTPS, FTP 프로토콜</li>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/97098729-d2713380-16c3-11eb-8824-86a033ffa960.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"l4와-l7의-차이\"><a href=\"#l4%EC%99%80-l7%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>L4와 L7의 차이</h3>\n<p>일반적으로 로드밸런서는 크게 L4와 L7을 사용한다.</p>\n<p>공통점</p>\n<ul>\n<li>들어온 packet을 적절한 목적지로 전달(스위치)</li>\n<li>적절한 알고리즘을 통해 로드밸런서로서의 역할을 수행</li>\n<li>스위치 및 서버별 Health Check를 한다.</li>\n</ul>\n<p>차이점</p>\n<ul>\n<li>L4는 L/B에서 알고리즘을 통해 server1 또는 server2로 데이터를 전송할지 결정을 하고 Client와 3way handshake 실행하는 하나의 TCP세션을 갖게 된다.</li>\n<li>L7는 L/B에서 콘텐츠 기반 스위칭을 위해 3way handshake를 보류한다. L/B와 client 간 3way handshake를 실행하여 따로 TCP 세션을 생성한다. L7과 server서버는 또 다른 TCP 세션을 생성하고 데이터를 중계한다.</li>\n<li>L7는 Dos/SYN Attack에 대한 방어한다.</li>\n<li>L7는 패킷 분석을 통한 바이러스 감염 패킷 필터링과 자원 독점 방지 등을 통한 시스템 보안 강화한다.</li>\n<li>L7은 L4의 서비스 단위 로드밸런싱을 극복하기 위한 포트 + 페이로드 패턴을 이용하여 패킷스위칭한다.</li>\n<li>\n<p>L4는 TCP/UDP 패킷 정보를 분석하고 해당 패킷이 사용하는 서비스 종류별(HTTP, FTP 등)로 처리한다.(L4 Mega Proxy 문제 발생)</p>\n<ul>\n<li>Mega Proxy : IP기반 분리는 요청 양의 불균형이 일어날 수 있다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>HTTP</strong>\n<img src=\"https://user-images.githubusercontent.com/42582516/97098788-6cd17700-16c4-11eb-9705-fe3150b62645.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p><code class=\"language-text\">X-Forwarded-For</code></p>\n<ul>\n<li>HTTP 또는 HTTPS 로드 밸런서를 사용할 때 클라이언트의 IP 주소를 식별하는 데 도움을 줍니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">X-Forwarded-Proto</code></p>\n<ul>\n<li>클라이언트가 로드 밸런서 연결에 사용한 프로토콜(HTTP 또는 HTTPS)을 식별하는 데 도움을 줍니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">X-Forwarded-Port</code></p>\n<ul>\n<li>클라이언트가 로드 밸런서 연결에 사용한 포트를 식별하는 데 도움을 줍니다</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"로드밸런서-알고리즘\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로드밸런서 알고리즘</h2>\n<ul>\n<li>\n<p>Round Robin</p>\n<ul>\n<li>단순히 Round Robin으로 분산하는 방식</li>\n</ul>\n</li>\n<li>\n<p>Least Connections</p>\n<ul>\n<li>연결 개수가 가장 적은 서버를 선택하는 방식</li>\n<li>트래픽으로 인해 세션이 길어지는 경우 권장하는 방식</li>\n</ul>\n</li>\n<li>\n<p>Weighted Least Connections</p>\n<ul>\n<li>서버에 부여된 Weight 값을 기반으로 Connection 수의 개수와 같이 고려하여 선택하는 방식</li>\n</ul>\n</li>\n<li>\n<p>Source</p>\n<ul>\n<li>사용자의 IP를 해싱하여 분배하는 방식</li>\n<li>사용자는 항상 같은 서버로 연결되는 것을 보장</li>\n</ul>\n</li>\n<li>\n<p>Fastest Response Time(응답시간방식)</p>\n<ul>\n<li>가장 빨리 응답하는 서버에 이용자 요구를 연결하는 방식</li>\n<li>응답시간 : 각 서버가 패킷 형태의 요구를 송수신하는데 걸리는 시간</li>\n</ul>\n</li>\n<li>이외에도 Adaptive(최소대기방식), Fixed, Random, URL-based, Cookie 등이 존재한다.</li>\n</ul>\n<br/>\n<h2 id=\"로드밸런서-장애-대응\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C-%EC%9E%A5%EC%95%A0-%EB%8C%80%EC%9D%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>로드밸런서 장애 대응</h2>\n<p>로드밸런서 장애 대응은 로드 밸런서를 이중화하여 장애를 대비할 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97099076-c8513400-16c7-11eb-8be0-57e02faabfec.gif\" alt=\"로드밸런서 장애 대응\"></p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리..</h2>\n<p>로드밸런서에 대한 설명이 끝났기 때문에 실업무에서 사용하는 로드밸런서 장비와 그 차이에 대해서 이후에 작성해보겠다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://nesoy.github.io/articles/2018-06/Load-Balancer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nesoy.github.io/articles/2018-06/Load-Balancer</a></li>\n<li><a href=\"https://pakss328.medium.com/%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C%EB%9E%80-l4-l7-501fd904cf05\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pakss328.medium.com/%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C%EB%9E%80-l4-l7-501fd904cf05</a></li>\n<li><a href=\"https://medium.com/harrythegreat/aws-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-9fd0955f859e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/harrythegreat/aws-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-9fd0955f859e</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/what-is-load-balancing#how-does-the-load-balancer-choose-the-backend-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.digitalocean.com/community/tutorials/what-is-load-balancing#how-does-the-load-balancer-choose-the-backend-server</a></li>\n<li><a href=\"http://oxpedia.org/wiki/index.php?title=AppSuite:Grizzly\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://oxpedia.org/wiki/index.php?title=AppSuite:Grizzly</a></li>\n<li><a href=\"https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/classic/x-forwarded-headers.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/classic/x-forwarded-headers.html</a></li>\n<li><a href=\"http://tech.kakao.com/2014/05/30/l4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://tech.kakao.com/2014/05/30/l4/</a></li>\n<li><a href=\"https://d2.naver.com/helloworld/284659\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://d2.naver.com/helloworld/284659</a></li>\n<li><a href=\"https://seokjun.kim/haproxy-and-nginx-load-balancing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://seokjun.kim/haproxy-and-nginx-load-balancing/</a></li>\n<li><a href=\"http://knight76.tistory.com/entry/30022588363?category=227874\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://knight76.tistory.com/entry/30022588363?category=227874</a></li>\n<li><a href=\"http://hiruu.tistory.com/entry/L4L7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%9D%98-%EA%B0%9C%EC%9A%94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://hiruu.tistory.com/entry/L4L7-%EC%8A%A4%EC%9C%84%EC%B9%98%EC%9D%98-%EA%B0%9C%EC%9A%94</a></li>\n</ul>\n"}},{"node":{"title":"[CS] 가상화에 대해서","path":"/00-virtualization/","date":"17. October 2020","timeToRead":15,"description":" 가상화에 대한 글입니다. ","content":"<h1 id=\"citrix와-f5\"><a href=\"#citrix%EC%99%80-f5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Citrix와 F5</h1>\n<p>장비에 Citrix에서 F5 등이 있다는데 이 장비들은 무슨 장비고 어떠한 장단점을 들고 있는지 의문점이 들었다.</p>\n<p>따로 찾아보니 Citrix와 F5 모두 가상화 제품으로 확인되었다. Citrix와 F5를 알기전에 가상화와 가상화 제품이란 어떠 것인가를 찾아보았다.</p>\n<br/>\n<h2 id=\"가상화\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가상화</h2>\n<p>가상하는 하드웨어 기능을 시뮬레이션하여서 애플리케이션 서버, 스토리지 및 네트워크와 같은 소프트웨어 기반 IT 서비스를 생성하는 기술이다.</p>\n<h3 id=\"작동은-어떻게-하나요\"><a href=\"#%EC%9E%91%EB%8F%99%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>작동은 어떻게 하나요?</h3>\n<p>가상화는 하이퍼바이저라고 하는 소프트웨어를 사용하여 하나의 물리적 머신에 다수의 가상 머신을 만든다. 이러한 가상머신은 하나의 컴퓨터 리소스에 의존하여 물리적 머신과 같이 작동하기 때문에 가상회를 사용하면 IT조직은 단일 서버(호스트)에서 여러개의 운영 체제를 실행할 수 있다. 이러한 운영이 훨씩 효율적이고 하이퍼라이저는 컴퓨터 리소스를 필요에 따라 각 가상 머신에 할당한다. 이 결과, IT 운영이 훨씬 효율적이고 경제적으로 된다. 또한 유연한 리소스 할당으로 인해 가상화 클라우드 컴퓨팅의 기초를 세울 수 있다.</p>\n<h3 id=\"가상화와-클라우드-컴퓨팅의-비교\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94%EC%99%80-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%BB%B4%ED%93%A8%ED%8C%85%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가상화와 클라우드 컴퓨팅의 비교</h3>\n<p>클라우드 컴퓨팅 : 인터넷을 통해 공유 컴퓨팅 리소스, 소프트웨어 또는 데이터를 제공하는 방식</p>\n<p>가상화 기술 : 관리 소프트웨어 계층을 사용하여 가상 리소스를 손쉽게 관리하고 구축할 수 있는 중앙 집중식 풀로 할당해 클라우드 컴퓨팅을 가능하게 한다. 작동방법은 다음과 같습니다.</p>\n<ol>\n<li>가상화는 하이퍼바이저를 사용해서 물리적 서벙서 가상 머신을 생성함으로써, 서버의 컴퓨팅 파워, 애플리케이션 또는 스토리지를 가상 환경에 제공한다.</li>\n<li>가상 리소스는 중앙 위치에서 함께 풀링되어 다른 컴퓨터가 네트워크를 통해 액세스할 수 있습니다. 이 중앙 집중식 리소스 풀을 <strong>클라우드</strong>라고 합니다.</li>\n<li>네트워크의 컴퓨터에 많은 스토리지 또는 컴퓨터 파워가 필요한 경우, 클라우드의 관리 소프트웨어를 통해서 관리자들이 이러한 리소스를 손쉽게 프로비지닝하고 요청하는 컴퓨터에 제공할 수 있다. 이 단계는 클라우드의 \"셀프 서비스\" 요소를 활성화할 수 있도록 자동화할 수도 있으므로 사용자들은 관리자의 승인을 기다릴 필요가 없다.</li>\n<li>요청 컴퓨터가 더 이상 클라우드 컴퓨팅 또는 스토리지를 필요로 하지 않으면 클라우드의 자동화 기능이 추가 리소스를 비활성화하여 낭비를 줄이고 컴퓨팅 비용을 제어할 수 있다. 이는 <strong>탄력적, 자동화 인프라 확장</strong>이라고 합니다.</li>\n</ol>\n<h3 id=\"가상화의-장점\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가상화의 장점</h3>\n<h4 id=\"1-효율성\"><a href=\"#1-%ED%9A%A8%EC%9C%A8%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 효율성</h4>\n<ul>\n<li>가상화는 하나의 머신이 여러 개의 가상 머신에 서비스 제공 가능. 이는 필요 서버가 줄어들며 보유하는 서버를 최대한 활용 가능하다. 즉, <strong>환경적 장점, 냉각 및 유지보수 비용 절감 효과</strong>를 얻을 수 있다.</li>\n<li>가상화를 통해 여러 벤더에 분리된 서버를 요구하지 않고 단일 머신에서 여러 유형의 앱, 데스크탑 및 운영 체제를 운영할 수 있다. 따라서 특정 벤더에 의존하지 않아도 되며 IT 리소스의 관리에 드는 시가을 훨씬 줄일 수 있어 <strong>IT팀의 생산성을 높일 수 있음</strong></li>\n</ul>\n<h4 id=\"2-안정성\"><a href=\"#2-%EC%95%88%EC%A0%95%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 안정성</h4>\n<ul>\n<li>가상화 기술을 사용하면 기존 서버의 가상 머신 스냅샷을 사용해 <strong>데이터를 손쉽게 백업하고 복구</strong>할 수 있다.</li>\n<li>모든 데이터를 최신 상태로 유지하기 위해 이 백업 프로세스를 자동화하는 것도 간단하다</li>\n<li>긴급 상황이 발생하여 백업된 가상 머신에서 복원해야할 경우, 이 가상 머신을 몇 분만에 새 위치로 손쉽게 마이그레이션할 수 있다. 이로 인해 재해 또는 손실 복구가 용이해지기 때문에 <strong>안정성과 비즈니스 연속성이 향상</strong>한다.</li>\n</ul>\n<h4 id=\"3-비즈니스-및-전략\"><a href=\"#3-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%B0%8F-%EC%A0%84%EB%9E%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 비즈니스 및 전략</h4>\n<ul>\n<li>가상화 소프트웨어를 사용하여 조직이 <strong>리소스를 테스트하고 할당하는 방법이 더욱 유연</strong>해진다.</li>\n<li>가상 머신을 백업하고 복원하기 너무 쉽기 때문에 IT팀은 새로운 기술을 손쉽게 테스트하고 실험할 수 있다.</li>\n<li>가상 머신 리소스를 조직의 공유된 풀 안에 할당하여 클라우드 전략을 만들 수 있다. 이 클라우드 기반 인프라는 IT팀이 누가 어떤 리소스를 어떤 기기에서 액세스하는지 제어할 수 있게 하여, <strong>보안과 유연성을 개선</strong>할 수 있다.</li>\n</ul>\n<h3 id=\"다양한-유형의-가상화\"><a href=\"#%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9C%A0%ED%98%95%EC%9D%98-%EA%B0%80%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다양한 유형의 가상화</h3>\n<h4 id=\"1-서버-가상화\"><a href=\"#1-%EC%84%9C%EB%B2%84-%EA%B0%80%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 서버 가상화</h4>\n<p>IT 부서가 서버당 하나의 작업 또는 애플리케이션을 지정하는 것이 일반적이지만 이로 인해 많은 경우 용량 활용도가 떨어지고 유지보수 비용이 높아질 수 있다.</p>\n<p>서버 가상화는 하이퍼바이저를 사용하여 물리적 서버를 여러 가상 서버로 파티션을 나누어 각 서버가 자체 운영 시스템을 운영한다. 이를 통해 물리 서버의 파워를 최대한 활용하여 하드웨어와 운영 비용을 대폭 줄일 수 있다.</p>\n<h4 id=\"2-앱-가상화-및-데스크탑-가상화\"><a href=\"#2-%EC%95%B1-%EA%B0%80%EC%83%81%ED%99%94-%EB%B0%8F-%EB%8D%B0%EC%8A%A4%ED%81%AC%ED%83%91-%EA%B0%80%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 앱 가상화 및 데스크탑 가상화</h4>\n<p>가상화는 전체 서버를 시뮬레이션할 필요는 없습니다. 이 기술은 개별 애플리케이션 계층 또는 데스크탑도 가상화할 수 있기 때문입니다.</p>\n<ul>\n<li><strong>애플리케이션 가상화</strong>를 통해, 사용자는 사용 중인 운영 체제와 관계없이 분리된 형태로 애플리케이션을 실행할 수 있다. 이것은 일반적으로 Linux 또는 Mac 운영 체제 내에서 Windows 애플리케이션을 실행하는 데 사용된다.</li>\n<li><strong>데스크탑 가상화</strong>를 사용하면 사용자가 데스크의 씬 클라이언트와 같은 연결된 기기에서 원격으로 데스크탑에 액세스하기 위해 워크스테이션 부하를 활성화할 수 있다. 따라서 데스크탑 가상화를 통해 데이터 센터 리소스에 훨씬 더 안전하고 휴대 가능한 액세스를 할 수 있다.</li>\n</ul>\n<p>특징</p>\n<ul>\n<li>직원이 자기 소유의 기기를 사용하고 사무실 밖에서 자신의 앱에 액세스하고 싶어 하기 때문이다. 동시에, 각 사용자에 대해 개별 컴퓨터에서 앱과 데스크탑을 설치하고 유지보수하려면 비용이 많이 들고 관리하기 어렵다.</li>\n<li>가상 앱 및 데스크탑은 IT 부서가 수백 개의 시뮬레이션된 앱 및 데스크탑을 사용자에게 한 번에 구축할 수 있는 중앙 서버에 의존하여 더 나은 솔루션을 제공한다. 이를 통해, 이러한 앱 및 데스크탑 (및 패치와 업데이트)를 각 컴퓨터에 설치할 필요가 없으며 사용자는 가상 앱 및 데스크탑과 기본과 동일한 사용자 환경으로 상호작용할 수 있다.</li>\n<li>가상 앱 및 데스크탑은 조직들이 규제 준수, 재해 복구 및 비즈니스 연속성을 보장하는 데도 도움을 준다.</li>\n</ul>\n<h4 id=\"3-네트워킹-가상화\"><a href=\"#3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9-%EA%B0%80%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 네트워킹 가상화</h4>\n<p>네트워크 가상화는 사용 가능한 대역폭을 독립 채널로 분리하여 진행하는데 필요에 따라 각각 서버 또는 기기에 배정할 수 있다. 네트워크 가상화를 이용하면 기본 인프라를 조정할 필요 없이 더 쉽게 부하 분산 및 방화벽과 같이 네트워크를 프로그래밍하고 프로비저닝할 수 있다.</p>\n<p>IT 부서는 일반적으로 소프트웨어 기반 관리자 콘솔을 사용하여 소프트웨어 구성 요소를 관리한다. 컴퓨팅 요구사항이 높아지더라도 IT 부서는 네트워크 가상화를 통해 작업 부하를 배포, 확장 및 조정하는 방식을 간소화할 수 있다.</p>\n<h4 id=\"4-스토리지-가상화\"><a href=\"#4-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EA%B0%80%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 스토리지 가상화</h4>\n<p>스토리지 가상화는 네트워크의 여러 기기에서 물리적 스토리지를 중앙 콘솔에서 관리되는 통합된 가상 스토리지 기기로 함께 풀링된다. 스토리지를 가상화하려면 물리적 기기에서 사용 가능한 용량을 식별하고 그 용량을 가상 환경에 함께 종합할 수 있는 가상화 소프트웨어가 필요하다. 최종 사용자가 보기에, 가상 스토리지는 표준 물리적 하드 드라이브와 같다.</p>\n<p>가상 스토리지는 하이퍼 수렴 인프라와 같은 IT 전략의 중요한 구성 요소로서 이를 통해 IT 관리자는 백업, 보관 및 복구와 같은 스토리지 활동을 간소화할 수 있다.</p>\n<h4 id=\"5-데이터-가상화\"><a href=\"#5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B0%80%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 데이터 가상화</h4>\n<p>데이터 가상화를 사용하면 애플리케이션이 데이터가 물리적으로 위치한 장소나 데이터에 지정된 형식과 같은 세부 정보가 없어도 데이터에 액세스하고 활용할 수 있다. 따라서 해당 데이터를 이동하거나 복사하지 않고도 여러 소스의 데이터를 한 가지로 표현할 수 있다. 이 데이터 종합은 데이터 가상화 소프트웨어에 의존하여 대시보드를 통해 데이터를 가상으로 통합 및 시각화하므로, 사용자가 데이터의 저장 위치가 어디이든 단일 액세스 지점으로부터 대규모 데이터 세트에 액세스할 수 있다. 데이터 가상화는 모든 종류의 분석 또는 비즈니스 인텔리전스 애플리케이션에 중요하다.</p>\n<h3 id=\"가상화의-보안-위험\"><a href=\"#%EA%B0%80%EC%83%81%ED%99%94%EC%9D%98-%EB%B3%B4%EC%95%88-%EC%9C%84%ED%97%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가상화의 보안 위험</h3>\n<p>비즈니스의 데이터의 보안을 유지하려면 가상화를 올바로 관리해야 한다. 가상 머신은 서버의 사본이기 때문에, 가상 머신이 많을수록 중요 데이터에 액세스하려는 공격자로부터 보호해야 하는 대상이 많아진다.</p>\n<p>이러한 보안 취약성으로 인해, 가상 머신을 모니터링하고 무단 액세스로부터 보호하기 위한 중앙 집중식 관리 솔루션을 보유하고 있는 것이 중요하다. <strong>가상화 보안</strong>은 가상 데스크탑 인프라, 즉 VDI의 필수적인 요소다.</p>\n<h3 id=\"업무-공간-내의-가상화\"><a href=\"#%EC%97%85%EB%AC%B4-%EA%B3%B5%EA%B0%84-%EB%82%B4%EC%9D%98-%EA%B0%80%EC%83%81%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>업무 공간 내의 가상화</h3>\n<blockquote>\n<p>회사에서 사용하는 회사망을 어떻게 구성하는 지 궁금했는데, 이러한 방법을 사용하는 것이였구나.</p>\n</blockquote>\n<p><strong>업무 공간 가상화</strong>는 여러 개의 앱을 하나의 통합된 디지털 업무 공간으로 번들링하여 애플리케이션 가상화를 기반으로 구축된다. 이를 통해 가상 머신에서 전체 컴퓨팅 업무 공간을 시뮬레이션할 수 있어, 사용자의 애플리케이션이 물리적 머신에서와 동일한 방법으로 상호작용할 수 있다. 예를 들어, 업무 공간 가상화를 통해 사용자가 워드 프로세싱 문서에 스프레드시트를 임베딩할 수 있습니다. 기존 애플리케이션 가상화에서는 각 개별 앱을 따로 가상화하여 서로 상호작용할 수 없었습니다.</p>\n<p>또한 업무 공간 가상화를 통해 사용자는 <strong>자체 설정과 데이터를 가상화된 업무 공간 내에 유지</strong>할 수 있다. 따라서 가상화된 업무 공간은 물리적 머신과 동일한 방법으로 각 사용자에 맞게 사용자 지정할 수 있다. 또한 사용자는 고유 가상 업무 공간을 다른 운영 체제 또는 머신으로 이동하는 동시에 모든 앱과 데이터는 보존할 수 있다. 이를 통해 사용자가 업무에 필요한 앱과 데이터를 자신이 선택하는 기기에서 액세스하는 방법을 더 유연하게 만들 수 있다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<p><a href=\"https://www.citrix.com/ko-kr/glossary/what-is-virtualization.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.citrix.com/ko-kr/glossary/what-is-virtualization.html</a></p>\n"}}]}}},"context":{}}