{"hash":"413fde1b7460f5c0a9c6e7c070d0a68a0cbdb4b7","data":{"tag":{"title":"Effective Java","belongsTo":{"edges":[{"node":{"title":"[Java] Effective Java, 제네릭","path":"/04-java-effective-java/","date":"26. April 2021","timeToRead":15,"description":"Effective Java 책 중, ch5. 제네릭에 대해 정리합니다.","content":"<h1 id=\"제네릭\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>제네릭</h1>\n<p>Java 5이후로, 제네릭은 언어의 일부였습니다. 제네릭을 사용하면 각 컬렉션에서 허용되는 개체 유형을 컴파일러에 알리고, 자동으로 캐스트를 삽입합니다. 대부분 프로그램이 더 안전하고 명확하지만, collections에만 한정적이지 않기 때문에 신경을 써야하는 부분이 있습니다.</p>\n<h2 id=\"item-26-raw-타입을-사용하면-안됩니다\"><a href=\"#item-26-raw-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 26. Raw 타입을 사용하면 안됩니다.</h2>\n<p>Raw 타입을 잘못 사용한 코드와 잘된 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Raw collection type</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Collection</span> stamps <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Parameterized collection type - typesafe</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Stamp</span><span class=\"token punctuation\">></span></span> stamps <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Raw 타입을 사용하면, 제네릭의 안전성과 표현력 이점을 잃게 되므로 사용하면 안됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 제한되지 않은 와일드 카드 유형을 사용 - typesafe하고, 유연합니다.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> numElementsInCommon <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre>\n<p>클래스 리터럴에는 원시 유형을 사용할 수 있는데, 대표적으로 <code class=\"language-text\">instanceof</code> 가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// raw type의 합법적 사용 - instanceof 연산자</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Raw type</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Wildcard type</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>즉, 정리하면 raw type을 사용하면 런타임에 예외가 발생할 수 있기 때문에 사용하지 않는 것이 중요하며, 제네릭 도입 이전의 레거시 코드와의 호환성 및 상호 운용성을 위해서만 사용해야합니다.</p>\n<br/>\n<h2 id=\"item-27-확인되지-않은-경고를-제거합니다\"><a href=\"#item-27-%ED%99%95%EC%9D%B8%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EA%B2%BD%EA%B3%A0%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 27. 확인되지 않은 경고를 제거합니다.</h2>\n<p>제네릭으로 프로그래밍할 때 확인되지 않은 캐스트 경고, 확인되지 않은 메서드 호출 경고, 확인되지않은 매개 변수인 vararg 유형 경고 및 다양한 컴파일러 경고가 발생합니다.</p>\n<p>이 경우에, <strong>확인되지 않은 모든 경고를 제거해야합니다.</strong></p>\n<p>일부 경고를 제거할 수는 없지만, 경고를 유발한 코드가 typesafe하다는 것을 증명할 수 있는 경우 <code class=\"language-text\">@SuppressWarnings(&quot;unchecked&quot;)</code> 주석으로 경고를 억제할 수 있습니다. (다만, 이는 가능한 작은 범위에서 사용하는 것이 중요합니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// @SuppressWarnings의 범위를 줄이기 위해 지역 변수를 추가합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이 캐스트는 우리가 만들고있는 배열이기 때문에 정확합니다.</span>\n    <span class=\"token comment\">// 전달 된 것과 동일한 유형, 즉 T []입니다.</span>\n\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span>\n      <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> size<span class=\"token punctuation\">)</span>\n    a<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>추가적으로, <code class=\"language-text\">@SuppressWarnings(&quot;unchecked&quot;)</code> 주석을 사용할 때마다, 안전한 이유를 설명하는 주석을 추가하는 것이 필요합니다.</p>\n<br/>\n<h2 id=\"item-28-arrays-보다는-list를-선호합니다\"><a href=\"#item-28-arrays-%EB%B3%B4%EB%8B%A4%EB%8A%94-list%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 28. Arrays 보다는 List를 선호합니다.</h2>\n<p>Array는 제네릭 유형과 두가지 중요한 측면에서 다릅니다.</p>\n<ul>\n<li>\n<ol>\n<li>배열은 covariant(함께 변할 수 있고), 제네릭은 erasure(불변)입니다.</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Runtime에 실패함.</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objectArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nobjectArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"I don't fit in\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ArrayStoreException 에러가 발생합니다.</span>\n\n<span class=\"token comment\">// Compile되지 않습니다.</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> ol <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 호환되지 않음</span>\nol<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I don't fit in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<ol start=\"2\">\n<li>배열은 reified</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 배열 생성이 불가능하며 컴파일되지 않습니다.</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> stringLists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> stringLists<span class=\"token punctuation\">;</span>\nobjects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intList<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> stringLists<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<br/>\n<h2 id=\"item-29-generic-types을-선호합니다\"><a href=\"#item-29-generic-types%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 29. Generic types을 선호합니다.</h2>\n<p>일반적으로 선언을 매개 변수화하고 JDK에서 제공하는 제네릭 유형 및 메소드를 사용하는 것은 어렵지 않으며, 그만한 가치가 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 객체 기반 컬렉션-제네릭의 주요 후보</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 요소 배열에는 push (E)의 E 인스턴스 만 포함됩니다.</span>\n  <span class=\"token comment\">// 이것은 타입 안전성을 보장하기에 충분하지만</span>\n  <span class=\"token comment\">// 배열 의 런타임 타입은 E []가 아닙니다; 항상 Object []입니다!</span>\n  <span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elements <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 일반 스택을 실행하는 작은 프로그램</span>\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">E</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Eliminate obsolete reference</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n      elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 경고 창을 제거할 수 있습니다.</p>\n<br/>\n<h2 id=\"item-30-generic-methods를-선호합니다\"><a href=\"#item-30-generic-methods%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 30. Generic methods를 선호합니다.</h2>\n<p>클래스가 제네릭일 수 있는 것처럼 메소드도 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Uses raw types - 허용되지 않습니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Set</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Generic method</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 generic method를 사용하는 간단한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> guys <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dick\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Harry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stooges <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Larry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Moe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Curly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> aflCio <span class=\"token operator\">=</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>guys<span class=\"token punctuation\">,</span> stooges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>aflCio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>식별함 후 디스펜서를 작성하면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 일반 싱글 톤 팩토리 패턴</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">UnaryOperator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> IDENTITY_FN <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> t<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">UnaryOperator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> identityFunction <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnaryOperator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> IDENTITY_FN<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>컬렉션의 최대 값을 계산하는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 컬렉션에서 최대 값을 반환합니다. 재귀 유형 바인딩을 사용합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">E</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty collection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">E</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 내용을 요약하면 다음과 같습니다.</p>\n<p>generic type과 같은 generic methods는 클라이언트가 입력 매개 변수에 명시적 캐스트를 입력하고 값을 반환해야하는 메서드보다 안전하고 사용하기 쉽습니다. 이를 위해 캐스트 없이 메소드를 사용할 수 있게 해야합니다. (generic)</p>\n<br/>\n<h2 id=\"item-31-api-유연성을-향상시키기-위해서-제한된-wildcards를-사용합니다\"><a href=\"#item-31-api-%EC%9C%A0%EC%97%B0%EC%84%B1%EC%9D%84-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%A0%9C%ED%95%9C%EB%90%9C-wildcards%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 31. API 유연성을 향상시키기 위해서, 제한된 Wildcards를 사용합니다.</h2>\n<p>고정된 유형보다는 더 많은 유연성을 제공하는 것이 필요합니다. 아래의 코드는 이러한 유연성을 표현한 public API입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용하는 와일드 카드 유형은 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// E producer 역할을 수행하는 매개 변수의 와일드 카드 유형</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pushAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> src<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// E consumer 역할을하는 매개 변수의 와일드 카드 유형</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">popAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> dst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    dst<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드처럼, 유연성을 최대화려면 Producer와 Consumer를 나타내는 입력 매개 변수에 와일드 카드 유형을 사용하면 됩니다.</p>\n<p>PECS(Producer extends and Consumer super)</p>\n<ul>\n<li>Get 과 Put 원칙이며, structure에서 값을 얻을 때 <code class=\"language-text\">extends</code> 와일드 카드를 사용하고, structure에서 값을 넣을때 <code class=\"language-text\">super</code> 와일드 카드를 사용합니다.</li>\n</ul>\n<p>그러나, 클래스 사용자가 와일드 카드 유형에 대해 생각하고 개발해야한다면, API에 문제가 발생할 수 있습니다. 즉, 아래의 코드는 문제가 발생하는 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s2<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> 정수 <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span>of <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> doubles <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span>of <span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 에러 발생, #1과 #2가 교차 유형이므로</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> union <span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">,</span> doubles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이를 해결하는 코드는 아래와 같습니다.</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token class-name\">Union</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">,</span> doubles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>아래의 swap 메서드는 컴파일 구현에 깔끔하며, 와일드 카드 기반 선언을 잘 표현한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">swapHelper</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 와일드 카드 캡처를위한 private 도우미 메서드</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">swapHelper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이, API에서 와일드카드 유형을 사용하는 것은 일부 까다롭지만 API를 훨씬 더 유연하게 만듭니다. 특히, <strong>자주 사용되는 라이브러리를 작성하는 경우에는 와일드 카드 유형의 사용은 필수적</strong>이며 기본 규칙인 <strong>PECS</strong>를 기억하는 것이 중요합니다. 추가적으로 모든 비교 대상들은 consumer입니다.</p>\n<br/>\n<h2 id=\"item-32-제네릭과-가변인수를-신중하게-합칩니다\"><a href=\"#item-32-%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%9D%B8%EC%88%98%EB%A5%BC-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-%ED%95%A9%EC%B9%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 32. 제네릭과 가변인수를 신중하게 합칩니다.</h2>\n<p>가변인수 메소드와 제네릭은 Java 5에서 생겼기 때문에 같이 사용할 수 있다고 생각되지만 이는 그렇지 않습니다.</p>\n<p><strong>가변 인수의 목적</strong>은 클라이언트가 파라미터 인수를 메서드에 전달할 수 있도록 하는 것입니다.</p>\n<p>아래의 코드는 가변인수 배열의 매개 변수에 값을 저장하는 것이 안전하지 않음을 보여줍니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 제네릭과 가변 인수를 혼합하면 유형 안전성을 위반할 수 있습니다!</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dangerous</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> stringLists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> stringLists<span class=\"token punctuation\">;</span>\n  objects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intList<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Heap pollution</span>\n  <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> stringLists<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ClassCastException</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">SafeVarargs</code> annotation은 typesafe 된것의 method를 보장합니다. 다만, 컴파일러가 하는 호출 경고가 사용자에게 가지 않기 때문에 이를 사용할 때는 annotation이 필요합니다.</p>\n<p>아래는 일반적인 가변인수 메서드를 사용할 때 중요한 부분입니다.</p>\n<ul>\n<li>가변인수 매개 변수 배열에 아무것도 저장하지 않습니다.</li>\n<li>신뢰할 수 없는 배열을 만들면 안됩니다. 이를 위반하면 수정해야합니다.</li>\n</ul>\n<p>아래는 좋은 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 제네릭 가변 인수 매개 변수가 있는 안전한 메서드</span>\n<span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">:</span> lists<span class=\"token punctuation\">)</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용한 코드는 아래와 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\">audience <span class=\"token operator\">=</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>friends<span class=\"token punctuation\">,</span> romans<span class=\"token punctuation\">,</span> countrymen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이를 정리하면, 가변 인수 기능은 배열 위의 생성된 leaky abstraction이므로, 가변 인수와 제네릭은 제대로 상호작용하지 않으며, 배열에는 generics와 다른 유형의 규칙이 있습니다. 일반 가변 인수의 매개변수는 형식이 안전하지 않습니다.</p>\n<p>즉, 정적 팩토리 메서드를 통해서 개발하는 방법이 <code class=\"language-text\">@SafeVarargs</code> annotation을 신경쓸 필요가 없습니다.</p>\n<br/>\n<h2 id=\"item-33-typesafe한-혼성-컨테이너를-고려합니다\"><a href=\"#item-33-typesafe%ED%95%9C-%ED%98%BC%EC%84%B1-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 33. Typesafe한 혼성 컨테이너를 고려합니다.</h2>\n<p>아래 코드는, 혼성 컨테이너를 보여주는 대표적인 코드 예시입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Typesafe 혼성 컨테이너 패턴 - implementation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Favorites</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> favorites <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">putFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    favorites<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>favorites<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 Favorities 객체를 읽거나, 추가 하는 경우에는 Key에 해당하는 Class 객체를 전달해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Typesafe 혼성 컨테이너 패턴 - client</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Favorites</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Favorites</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">putFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">putFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xcafebabe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">putFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Favorites</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">String</span> favoriteString <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> favoriteInteger <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> favoriteClass <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getFavorite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %x %s%n\"</span><span class=\"token punctuation\">,</span> favoriteString<span class=\"token punctuation\">,</span> favoriteInteger<span class=\"token punctuation\">,</span> favoriteClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드 대신에 Map을 통해서 구현할 수는 있지만, 이 경우에는 데이터를 가져오는 과정에 <code class=\"language-text\">ClassCastException</code> 런타임 에러가 발생할 수 있기 때문에 타입 안전이 보장되는 혼성 컨테이너에 비해 위험합니다.</p>\n<p>앞서 나온 Favorites의 클래스에는 2가지 문제가 존재합니다.</p>\n<ul>\n<li>악의적인 client가 Favorites의 원시 형식 Class 객체를 사용해서 인스턴스의 안전성을 손상시킬 수 있습니다.</li>\n<li>수정 불가능한 유형에서 사용할 수 없습니다.</li>\n</ul>\n<p>이러한 문제를 해결하기 위해, asSubClass를 사용할 수 있으며 컴파일 타임에 type을 알 수 없는 annotation을 읽을 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// asSubclass를 사용하여 제한된 유형 토큰으로 안전하게 캐스트</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">Annotation</span> <span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotatedElement</span> element<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> annotationTypeName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationType <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unbounded type token</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    annotationType <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>annotationTypeName<span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">asSubclass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>요약하면, 컬렉션 API의 예시가 된 제네릭 사용은 컨테이너당 고정된 수의 유형 매개 변수로 제한입니다. <strong>컨테이너가 아닌 키에 type매개 변수를 배치하여 이 제한을 피할 수 있습니다.</strong> 이러한 방법로 혼성 컨테이너의 키로 안전한 Class 객체를 사용할 수 있습니다.</p>\n<blockquote>\n<p>Heterogeneous Container (혼성 컨테이너)</p>\n</blockquote>\n<p>만약 컨테이너 자체가 아닌, 요소의 키에 타입 매개변수를 두면 서로 다른 타입의 요소가 저장될 수 있는 컨테이너이며, 이를 혼성 컨테이너라고 합니다.</p>\n"}},{"node":{"title":"[Java] Effective Java, 클래스와 인터페이스","path":"/03-java-effective-java/","date":"21. April 2021","timeToRead":17,"description":"Effective Java 책 중, ch4. 클래스와 인터페이스에 대해 정리합니다.","content":"<h1 id=\"클래스와-인터페이스\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클래스와 인터페이스</h1>\n<p>Class와 Interface는 추상화의 기본 단위이며, 이를 위해 여러 요소 등을 사용할 수 있습니다.</p>\n<h2 id=\"item-15-클래스-및-멤버의-접근성을-최소화합니다\"><a href=\"#item-15-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-%EB%A9%A4%EB%B2%84%EC%9D%98-%EC%A0%91%EA%B7%BC%EC%84%B1%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 15. 클래스 및 멤버의 접근성을 최소화합니다.</h2>\n<ul>\n<li>정보 은닉은 개발, 테스트, 최적화, 사용, 이해 및 수정에서 큰 용이성을 가집니다.</li>\n<li><strong>각 클래스 또는 멤버를 가능한 한 액세스 할 수 없게 처리합니다.</strong></li>\n</ul>\n<p>액세스 수준은 다음과 같이 4가지로 구성됩니다.</p>\n<ul>\n<li>private : 선언된 최상위 클래스에서만 액세스 가능</li>\n<li>package-private(default) : 선언된 패키지의 모든 클래스에서 액세스 가능</li>\n<li>protected : 선언된 클래스의 하위 클래스 및 선언된 패키지의 모든 클래스에서 액세스 가능</li>\n<li>public : 어디서나 액세스 가능</li>\n</ul>\n<p>추가적으로 지켜야하는 룰은 다음과 같습니다.</p>\n<ul>\n<li>public 클래스의 인스턴스 필드는 public이면 안됩니다.</li>\n<li><strong>변경가능한 public 필드가 있는 class는 일반적으로 스레드로부터 안전하지 않습니다.</strong></li>\n<li>\n<p>클래스에 public static final array field 또는 이러한 필드를 반환하는 접근자가 있으면 안됩니다.</p>\n<ul>\n<li>해결책은 2개가 있습니다.</li>\n<li>public array를 비공개로 바꾸고, public static 목록에 추가합니다.</li>\n<li>array를 private로 만들고, public method를 추가합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 잠재적인 보안 구멍</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> VALUES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>결론적으로, 프로그램 요소의 접근성을 최대한 줄여야합니다.</strong></p>\n<br/>\n<h2 id=\"item-16-public-class에서는-public-field가-아닌-접근자-메소드를-사용합니다\"><a href=\"#item-16-public-class%EC%97%90%EC%84%9C%EB%8A%94-public-field%EA%B0%80-%EC%95%84%EB%8B%8C-%EC%A0%91%EA%B7%BC%EC%9E%90-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 16. public class에서는 public field가 아닌, 접근자 메소드를 사용합니다.</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이런식으로 짜면, 캡슐화의 이점이 없습니다.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>클래스가 패키지 외부에서 액세스 가능한 경우, 접근자 메소드를 접공합니다.</li>\n<li>그러나, 클래스가 패키지 전용 클래스거나 전용 중첩 클래스인 경우, 데이터 필드를 노출하는데 본질적인 문제는 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-17-변경-가능성을-최소화합니다\"><a href=\"#item-17-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5%EC%84%B1%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 17. 변경 가능성을 최소화합니다.</h2>\n<p>분변 클래스는 단순히 인스턴스를 수정할 수 없는 클래스이며 이는 설계, 구현 및 사용하기에 더 쉬우며 오류 가능성이 적고 더 안전합니다.</p>\n<p>클래스를 불변으로 만들려면 5가지 규칙을 지켜야합니다.</p>\n<ul>\n<li>객체의 상태(state)를 수정하는 메소드를 제공하면 안됩니다.</li>\n<li>클래스를 확장할 수 없는지 확인합니다.</li>\n<li>모든 필드를 최종으로 만듭니다.</li>\n<li>모든 필드를 private로 설정합니다.</li>\n<li>변경 가능한 구성 요소에 대한 독점적인 액세스를 보장합니다.</li>\n</ul>\n<p>변경 불가능한 객체는 이러한 장점을 가지고 있습니다.</p>\n<ul>\n<li>스레드로부터 안전하며 동기화가 필요하지 않습니다. 그렇기에 이러한 객체는 자유롭게 공유할 수 있습니다.</li>\n<li>다른 개체를 위해서 좋은 <strong>building block</strong>을 만듭니다.</li>\n<li>상태는 변경되지 않기 때문에, 일시적인 불일치 가능성이 없습니다.</li>\n</ul>\n<p>다만 이러한 단점을 가지고 있습니다.</p>\n<ul>\n<li>각 고유 값에 대해 별도의 객체가 필요합니다.</li>\n</ul>\n<p>클래스를 변경 불가능하게 만들 수 없는 경우, 가능한 변경 가능성을 제한해야합니다. (즉, 모두 setter를 선언할 필요가 없습니다.) 그리고 다른 이유가 없으면, 모든 필드를 private final로 선언해야합니다.</p>\n<p>생성자는 모든 불변성을 설정하여, 완전히 초기화된 객체를 만들어야합니다.</p>\n<br/>\n<h2 id=\"item-18-inheritance상속보다-composition구성을-선호합니다\"><a href=\"#item-18-inheritance%EC%83%81%EC%86%8D%EB%B3%B4%EB%8B%A4-composition%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 18. Inheritance(상속)보다 Composition(구성)을 선호합니다.</h2>\n<p>상속은 코드 재사용을 달성하는 좋은 방법이지만, 항상 좋은 방법은 아닙니다.</p>\n<ul>\n<li>메서드 호출과 달리 상속은 캡슐화를 위반합니다.</li>\n</ul>\n<p>좋은 경우는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Wrapper Class - 상속 대신 합성을 사용하는 경우.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InstrumentedSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ForwardingSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> addCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">InstrumentedSet</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    addCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    addCount <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAddCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> addCount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Reusable forwarding class</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForwardingSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ForwardingSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                 <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span>           <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위와 같은 코드는 인터페이스를 통해서 클래스의 디자인이 가능하고 매우 유연합니다.</p>\n<p>상속은 하위 클래스가 실제로 수퍼 클래스의 하위 유형인 상황에서만 적절합니다. 즉, <code class=\"language-text\">is-a</code> 관계인 경우에만 주로 사용하는 것이 좋습니다.</p>\n<br/>\n<h2 id=\"item-19-상속을-위한-설계-및-문서-또는-금지\"><a href=\"#item-19-%EC%83%81%EC%86%8D%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%84%A4%EA%B3%84-%EB%B0%8F-%EB%AC%B8%EC%84%9C-%EB%98%90%EB%8A%94-%EA%B8%88%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 19. 상속을 위한 설계 및 문서 또는 금지</h2>\n<p>상속을 위해 클래스를 설계하고 문서화하는 것은 아래를 의미합니다.</p>\n<ul>\n<li>클래스는 메서드 재정의의 효과를 정확하게 문서화해야합니다. 즉, <strong>클래스는 재정의 가능한 메서드의 자체 사용을 문서화해야합니다.</strong></li>\n<li>상속을 위한 디자인은 단순히 자체 사용 패턴을 문서화하는 것 이상을 의미합니다.</li>\n<li>상속을 위해 설계된 클래스를 테스트하는 유일한 방법은 하위 클래스를 사용하는 방법입니다.</li>\n<li>release 하기 전에 하위 클래스를 작성하여 클래스를 테스트해야합니다.</li>\n<li>생성자는 재정의 가능한 메서드를 직접 혹은 간접으로 호출하면 안됩니다.</li>\n<li>clone이나 readObject는 직접 또는 간접적으로 재정의 가능한 메서드를 호출할 수 없습니다.</li>\n<li>안전하게 sub classing 되도록 설계 및 문서화되지 않은 클래스에서 sub classing을 금지하는 것입니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-20-추상-클래스보다는-인터페이스를-선호합니다\"><a href=\"#item-20-%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 20. 추상 클래스보다는 인터페이스를 선호합니다.</h2>\n<p>자바에서는 type을 구현하는 두가지 방법은 인터페이스와 추상클래스가 있습니다.</p>\n<ul>\n<li>기존클래스를 쉽게 개조하여 새 인터페이스를 구현할 수 있습니다.</li>\n<li>\n<p>인터페이스는 mixins를 정의하는 것에 이상적입니다.</p>\n<ul>\n<li>mixin : 클래스가 기본유형에 추가하여 구현할 수 있는 유형이며 선택적 동작을 제공함</li>\n</ul>\n</li>\n<li>인터페이스는 nonhierarchical type 프레임워크의 구성을 허용합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Singer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">AudioClip</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Song</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Songwriter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Song</span> compose <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> chartPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SingerSongwriter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Singer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Songwriter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">AudioClip</span> <span class=\"token function\">strum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">actSensitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>인터페이스는 wrapper 클래스를 통해 안전하고 강력한 기능 향상을 가능하게합니다.</li>\n</ul>\n<h3 id=\"template-method-pattern\"><a href=\"#template-method-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template Method Pattern</h3>\n<p>인터페이스와 함께, abstract skeletal 구현 클래스를 제공해서 장점을 결합한 패턴입니다. 인터페이스는 유형을 정의하고, 기본 메소드를 제공하며 skeletal 구현 클래스는 나머지 non-primitive 인터페이스를 구현합니다.</p>\n<p>인터페이스 자체에 있는 기본 메소드의 이점을 사용할 수 있고 skeletal 구현 클래스는 구현의 작업을 지원할 수 있습니다,.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Skeletal implementation class</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractMapEntry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Entries in a modifiable map must override this method</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Implements the general contract of Map.Entry.equals</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Implements the general contract of Map.Entry.hashCode</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">^</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>skeletal 구현은 상속을 위해 설계되었으므로 skeletal 구현에서는 좋은 문서가 절대적으로 필요합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-21-posterity후세를-위한-디자인-인터페이스\"><a href=\"#item-21-posterity%ED%9B%84%EC%84%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 21. posterity(후세)를 위한 디자인 인터페이스</h2>\n<p>Java 8 이후로, default method 구성이 추가되었습니다. 또한 주로 람다 사용을 용이하기 위해서 Java 8의 핵심 Collection Interface에 많은 기본 메서드가 추가됩니다. Java의 라이브러리의 기본 메소드는 잘 구현되어 있으며, 대부분 제대로 작동합니다.</p>\n<p>그러나 <strong>모든 가능한 구현의 모든 불변을 유지하는 기본 메서드를 작성하는 것이 항상 가능한 것은 아닙니다.</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java 8의 Collection 인터페이스에 추가 된 기본 메소드</span>\n<span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> removeIf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Predicate</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      it<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드가 removeIf 메소드에 대해 작성할 수 있는 코드이지만, 실제 Collection 구현에서는 실패합니다.</p>\n<p>기본 메서드가 있는 경우, 인터페이스의 기존 구현이 오류나 경고없이 컴파일 될 수 있지만 런타임에는 실패합니다.</p>\n<p>기본 메소드가 Java 플랫폼의 일부이지만, <strong>인터페이스를 신중하게 디자인하는 것이 여전히 가장 중요합니다</strong>.</p>\n<p>인터페이스 출시 이후에, 몇 가지 인터페이스 결함을 수정하는 것이 가능하지만 이를 믿을 수 없습니다. 따라서 release 하기 전에는 새 인터페이스를 테스트하는 것이 중요합니다.</p>\n<br/>\n<h2 id=\"item-22-인터페이스를-사용해-types를-정의합니다\"><a href=\"#item-22-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-types%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 22. 인터페이스를 사용해 Types를 정의합니다.</h2>\n<p>클래스가 인터페이스를 구현할 때, 인터페이스는 클래스의 인스턴스를 참조하는데 사용할 수 있는 type으로 사용됩니다.</p>\n<p>상수 인터페이스 패턴은 인터페이스를 제대로 사용하지 못하는 것입니다. 상수 유틸리티 클래스로 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 상수 유틸리티 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PhysicalConstants</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">PhysicalConstants</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 인스턴스화 방지</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> AVOGADROS_NUMBER <span class=\"token operator\">=</span> <span class=\"token number\">6.022_140_857e23</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> BOLTZMANN_CONST <span class=\"token operator\">=</span> <span class=\"token number\">1.380_648_52e-23</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> ELECTRON_MASS <span class=\"token operator\">=</span> <span class=\"token number\">9.109_383_56e-31</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>즉, 인터페이스는 type을 정의하는데만 사용해야합니다. 상수를 내보낼 때는 사용해서는 안됩니다.</p>\n<br/>\n<h2 id=\"item-23-태그가-있는-클래스보다-클래스-계층을-선호합니다\"><a href=\"#item-23-%ED%83%9C%EA%B7%B8%EA%B0%80-%EC%9E%88%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%B4%EB%8B%A4-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B3%84%EC%B8%B5%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 23. 태그가 있는 클래스보다 클래스 계층을 선호합니다.</h2>\n<p>경우에 따라 인스턴스가 둘 이상의 특징으로 제공되는 인스턴스의 특징을 나타내는 tag field를 포함하는 클래스를 실행할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Tagged class - 클래스 계층보다 안좋습니다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Figure</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>RECTANGLE<span class=\"token punctuation\">,</span> CIRCLE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Tag field : the shape of this figure</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Shape</span> shape<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// These fields are used only if shape is RECTANGLE</span>\n  <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// This field is used only if shape is CIRCLE</span>\n  <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Constructor for circle</span>\n  <span class=\"token class-name\">Figure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shape <span class=\"token operator\">=</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span>CIRCLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Constructor for rectangle</span>\n  <span class=\"token class-name\">Figure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shape <span class=\"token operator\">=</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">.</span>RECTANGLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> RECTANGLE<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> CIRCLE<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span>PI <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드는 매우 지저분합니다. 즉, <strong>태그가 지정된 클래스는 장황하고 오류가 발생하기 쉬우며 비효율적입니다.</strong> 이러한 클래스는 클래스 계층 구조를 모방한 것입니다.</p>\n<p>이를 클래스 계층으로 나타내면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Class hierarchy replacement for a tagged class</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Figure</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Figure</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span>PI <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Figure</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width  <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">double</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> length <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같은 클래스 계층은 태그 지정된 클래스의 모든 단점을 해결하고, 자연스러운 계층 관계를 반영하여 유연성을 높이고 컴파일시 유형 검사를 향상 시킬수 있습니다.</p>\n<br/>\n<h2 id=\"item-24-nonstatic-보다-static-member-class를-선호합니다\"><a href=\"#item-24-nonstatic-%EB%B3%B4%EB%8B%A4-static-member-class%EB%A5%BC-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 24. nonstatic 보다 static member class를 선호합니다.</h2>\n<p>nested(중첩된) class는 다른 클래스내에 정의된 클래스입니다. nested class가 다른 컨텍스트에서 유용하다면 최상위 클래스여야지 의미가 있습니다.</p>\n<p>중첩 클래스는 다음으로 나눠집니다.</p>\n<ul>\n<li>static member class</li>\n<li>non-static member class</li>\n<li>anonymous class</li>\n<li>local class</li>\n</ul>\n<h3 id=\"static-member-class\"><a href=\"#static-member-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>static member class</h3>\n<p>static member class (정적 멤버 클래스)은 public helper class로, 외부 클래스와 함께 사용하는 경우 유용합니다.</p>\n<h3 id=\"non-static-member-class\"><a href=\"#non-static-member-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>non-static member class</h3>\n<p>정적 멤버 클래스와 비정적 멤버 클래스의 유일한 차이점은 static 선언에 수정자가 있다는 점입니다.</p>\n<p>일반적으로 nonstatic member class의 일반적인 용도 중 하나 는 외부 클래스의 인스턴스를 관련없는 일부 클래스의 인스턴스로 볼 수 있도록 허용하는 Adapter이며, 다음과 같이 구현됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// nonstatic member class의 일반적인 사용</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// Bulk of the class omitted</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyIterator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>둘러싸는 인스턴스에 액세스할 필요가 없는 멤버 클래스를 선언하는 경우, 항상 해당 선언에 static modifier을 넣습니다.</p>\n<h3 id=\"anonymous-class\"><a href=\"#anonymous-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>anonymous class</h3>\n<p>익명 클래스는 이름이 없고, 적용 가능성에는 많은 제한이 있습니다. 선언된 시점을 제외하고는 인스턴스화할 수 없습니다. 또한 길어지면 가독성이 떨어지기 때문에 짧게 유지해야합니다.</p>\n<h3 id=\"local-class\"><a href=\"#local-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>local class</h3>\n<p>가장 자주 사용되지 않으며, 지역 변수가 선언될 수 있고 동일한 scope 내에 지정 규칙을 지킵니다.</p>\n<br/>\n<h2 id=\"item-25-소스-파일을-단일-최상위-클래스로-제한합니다\"><a href=\"#item-25-%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EB%8B%A8%EC%9D%BC-%EC%B5%9C%EC%83%81%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EC%A0%9C%ED%95%9C%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 25. 소스 파일을 단일 최상위 클래스로 제한합니다.</h2>\n<p>Java 컴파일러를 사용하면 단일 소스 파일에 여러 최상위 클래스를 정의할 수 있지만, 이에 대한 이점이 없으며 위험이 있습니다.</p>\n<p>즉, 아래의 코드는 매우 위험합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 하나의 파일에 정의 된 두 개의 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Utensil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"pan\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dessert</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"cake\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위의 코드보다 나은 케이스입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 여러 최상위 클래스 대신 정적 멤버 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Utensil</span><span class=\"token punctuation\">.</span>NAME <span class=\"token operator\">+</span> <span class=\"token class-name\">Dessert</span><span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Utensil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"pan\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dessert</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"cake\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이, <strong>단일 소스에는 여러 최상이 클래스 또는 인터페이스를 넣으면 안됩니다.</strong></p>\n"}},{"node":{"title":"[Java] Effective Java, 모든 객체에 공통적인 메소드","path":"/02-java-effective-java/","date":"12. April 2021","timeToRead":12,"description":"Effective Java 책 중, ch3 모든 객체에 공통적인 메소드에 대해 정리합니다.","content":"<h1 id=\"모든-객체의-공통적인-메소드\"><a href=\"#%EB%AA%A8%EB%93%A0-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B3%B5%ED%86%B5%EC%A0%81%EC%9D%B8-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모든 객체의 공통적인 메소드</h1>\n<p><code class=\"language-text\">Object</code>는 자바에서 모든 오브젝트의 최상위 클래스이며, 상속을 통해서 사용하도록 설계되었습니다. 따라서 <code class=\"language-text\">Object</code> 클래스에서 final이 아닌 메서드들(대표적인 예시로, equals, hashCode, toString, clone, finalize 등)이 모두 오버라이딩을 염두하고 설계되었습니다.</p>\n<p>아래에서는 이를 재정의하는 것에 대해서 정리합니다.</p>\n<h2 id=\"item-10-equals를-오버라이딩-할-때-일반적인-룰을-준수합니다\"><a href=\"#item-10-equals%EB%A5%BC-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-%ED%95%A0-%EB%95%8C-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EB%A3%B0%EC%9D%84-%EC%A4%80%EC%88%98%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 10. <code class=\"language-text\">Equals</code>를 오버라이딩 할 때, 일반적인 룰을 준수합니다.</h2>\n<p>equals 메서드를 재정의하는 방법은 여러가지가 있지만, 잘못된 사용은 끔찍한 결과를 만듭니다. 따라서 다음의 룰을 준수해야합니다.</p>\n<ul>\n<li>클래스의 각 인스턴스는 본질적으로 unique합니다.</li>\n<li>클래스에 대해 <code class=\"language-text\">logical equality(지역적 동일성)</code> 테스트를 제공할 필요가 없습니다.</li>\n<li>슈퍼 클래스는 이미 equals를 이미 오버라이딩하였으므로, 슈퍼클래스의 동작은 이미 클래스의 적합합니다.</li>\n<li>클래스는 private나 package-private이므로, 해당 'equals'는 호출되지 않을것이라고 확신합니다.</li>\n</ul>\n<h3 id=\"equivalence-relation의-조건\"><a href=\"#equivalence-relation%EC%9D%98-%EC%A1%B0%EA%B1%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>equivalence relation의 조건.</h3>\n<p>equivalence relation 이란, 요소 집합에서 요소가 서로 동일한 것으로 간주하는 하위 집합으로 분할하는 연산자이며 이를 <code class=\"language-text\">equivalence class</code>라고 합니다. 이를 위해서는 5가지의 요구 사항을 지켜야합니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Reflexivity(반사성)</code></p>\n<ul>\n<li>객체가 자신과 동일해야합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Symmetry(대칭)</code></p>\n<ul>\n<li>두 객체가 동일한 지 여부에 대해 동의해야합니다.</li>\n<li>equals 를 위반한 경우, 해당 객체가 다른 객체를 비교하게 되면 어떻게 동작할지 알 수가 없습니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 대칭을 위반한 케이스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 대칭을 위반한 경우</span>\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 단방향 상호 운용성</span>\n      <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>equalsIgnoreCase <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 대칭을 준수한 코드</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>equalsIgnoreCase <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">Transitivity</code></p>\n<ul>\n<li>한 객체가 두번째 객체와 같고, 두번째 객체가 세번째 객체와 같으면 첫번째 객체와 세번째 객체가 같아야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// equals contract를 위반하지 않는 값 구성 요소</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorPoint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Point</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">asPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ColorPoint</span> cp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ColorPoint</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> cp<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> cp<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p><code class=\"language-text\">Consistency</code></p>\n<ul>\n<li>두 객체가 같은 경우에, 둘 중 하나가 변경되지 않는 한 항상 동일하게 유지되어야합니다.</li>\n<li>신뢰할 수 없는 리소스에 의존하는 경우, equals를 사용하면 안됩니다.</li>\n<li>대표적으로 사용하면 안되는 것이, <code class=\"language-text\">java.net.url</code>에서의 equals이며, 이는 IP를 사용하기 때문에 시간이 바뀌면서 바뀔 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Non-nullity</code></p>\n<ul>\n<li>모든 객체는 null과 같으면 안됩니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Implicit null check - preferred</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">MyType</span> mt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyType</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>s\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"좋은-equals-사용-방법\"><a href=\"#%EC%A2%8B%EC%9D%80-equals-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>좋은 equals 사용 방법</h3>\n<ul>\n<li><code class=\"language-text\">==</code>를 사용하여 인수가 이 객체에 대한 참조인지 확인합니다.</li>\n<li><code class=\"language-text\">instanceof</code>를 사용해서 argument의 유형한 타입인지 확인합니다.</li>\n<li>올바른 유형으로 캐스트합니다.</li>\n<li>클래스의 각 중요한 필드에 대해 인수의 해당 필드가, 이 객체의 해당 필드와 일치하는 지 확인합니다.</li>\n</ul>\n<p>이러한 방법으로 equals를 작성하고 나서는 세가지를 확인해야합니다.</p>\n<ul>\n<li><code class=\"language-text\">symmetric</code>, <code class=\"language-text\">transitive</code>, <code class=\"language-text\">consistent</code></li>\n</ul>\n<p>그 외의 주의사항은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">equals</code>를 재정의할 때는, <code class=\"language-text\">hashCode</code>를 재정의합니다.</li>\n<li>너무 영리하게 할 필요가 없습니다. 복잡하게 구성하면 안됩니다.</li>\n<li><code class=\"language-text\">equals</code>를 선언할 때는, 객체를 다른 타입으로 대체하면 안됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-11-equals를-오버라이딩-할때-hashcode를-항상-오버라이딩합니다\"><a href=\"#item-11-equals%EB%A5%BC-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-%ED%95%A0%EB%95%8C-hashcode%EB%A5%BC-%ED%95%AD%EC%83%81-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 11. <code class=\"language-text\">Equals</code>를 오버라이딩 할때, <code class=\"language-text\">Hashcode</code>를 항상 오버라이딩합니다.</h2>\n<ul>\n<li><code class=\"language-text\">equals</code>를 재정의하는 모든 클래스에서는 반드시 <code class=\"language-text\">hashCode</code>를 재정의해야합니다.</li>\n<li>동일한 개체에 동일한 해시 코드가 있어야합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 전형적인 hashCode method</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>areaCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>성능을 향상시키기 위해 hash code 계산에서 중요한 필드를 제외하면 안됩니다. (품질이 급격하게 떨어짐)</li>\n<li><code class=\"language-text\">hashCode</code>에서 반환한 값에 대해 자세한 스펙을 제공하면 안됩니다. 이 경우, 클라이언트 값에 합리적으로 의존할 수 없습니다. 따라서, 유연성을 제공해야합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-12-tostring을-항상-오버라이딩합니다\"><a href=\"#item-12-tostring%EC%9D%84-%ED%95%AD%EC%83%81-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 12. <code class=\"language-text\">ToString</code>을 항상 오버라이딩합니다.</h2>\n<p>아래의 부분을 중시해야합니다.</p>\n<ul>\n<li>equals나 hashCode를 준수하는 것만큼의 비중은 아니지만, 좋은 <code class=\"language-text\">toString</code>을 제공하면, 클래스를 더 좋게 사용할 수 있고 이후에 디버깅을 하기도 편해집니다.</li>\n<li>가능한 경우, <code class=\"language-text\">toString</code> 메소드는 객체에서 포함하고 있는 중요한 정보를 반환해야합니다.</li>\n<li>형식 지정 여부와 관계없이, 의도를 명확하게 문서화해야합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* 휴대폰 번호를 세 부분으로 나누는 것은 너무 작기때문에,\n * 이러한 필드값을 채우기 위해, 다음과 같이 진행했습니다.\n * Ex. lineNum이 123인 경우, \"0123\"으로 나타냅니다.\n */</span>\n<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%03d-%03d-%04d\"</span><span class=\"token punctuation\">,</span> areaCode<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> lineNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>형식을 지정했든 말든, <code class=\"language-text\">toString</code>로 반환되는 값에 포함된 정보에 대해 프로그램 액세스를 제공해야합니다.</li>\n</ul>\n<p>정리하자면, toString을 사용한다면 <strong>가급적 해당 객체가 가지고 있는 모든 정보들을 노출시키는 것이 좋습니다.</strong></p>\n<br/>\n<h2 id=\"item-13-신중하게-clone을-오버라이딩합니다\"><a href=\"#item-13-%EC%8B%A0%EC%A4%91%ED%95%98%EA%B2%8C-clone%EC%9D%84-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 13. 신중하게 <code class=\"language-text\">Clone</code>을 오버라이딩합니다.</h2>\n<p><code class=\"language-text\">Cloneable</code> 인터페이스는 복제가능한 클래스를 명시하는 인터페이스이지만, 그 목적을 수행하지 못합니다. 즉, 여러 객체를 복사하는 경우 잘못되는 경우가 쉽게 발생합니다.</p>\n<p>대표적인 예시로 <code class=\"language-text\">immutable class</code>의 경우에는 낭비적인 복사를 사용하기 때문에, <code class=\"language-text\">clone</code> 메소드를 제공하면 안됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 사용하지 않는 참조</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n      elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 위의 스택 클래스를 clone을 하는 경우, 복제된 Stack 클래스의 경우 동일한 elements 주소를 참조하기 때문에, 복제본의 불변성이 파괴됩니다.</p>\n<p>즉, clone 메서드는 생성자 역할을 수행하기 때문에, 원본 객체에 해를 끼치지 않고 복제본에 불변을 수행하는 지 확인해야합니다.</p>\n<p>또한 <strong>추가적으로 생성자를 호출하지 않고, 객체를 생성할 수도 있기 때문에 이는 큰 위험을 가지고 있습니다.</strong></p>\n<p>따라서 다음과 같이 clone()을 사용해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Stack</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>elements <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CloneNotSupportedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">Cloneable</code> 아키텍처는 변경가능한 객체을 참조하는 final 필드의 일반적인 사용과 호환되지 않습니다.</p>\n<p>따라서 아래와 같은 복사를 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 반복적인 복사, 깨끗하지만 맹목적으로 복사본을 덮어씁니다.</span>\n<span class=\"token class-name\">Entry</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Entry</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> p <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>그러나 이러한 방법보다, 가장 좋은 방법 중 하나는 <strong>복사 생성자 또는 복사 팩토리를 제공하는 것</strong>입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 복사 생성자, Copy constructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Yum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Yum</span> yum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 복사 팩토리, Copy factory</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Yum</span> <span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Yum</span> yum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이러한 방법은 클래스가 구현한 인터페이스 타입 인스턴스를 인수로 받을 수 있기 때문에, 클라이언트는 원본의 구현 타입에 얽매이지 않고 복제본의 타입을 정할 수 있습니다.</p>\n<p>결론적으로, <code class=\"language-text\">Cloneable</code>을 확장하는 것은 좋지 않으며 생성자와 팩토리를 사용하는 것이 좋습니다. 다만 배열의 경우는 clone 메서드를 사용하는 것이 좋습니다.</p>\n<blockquote>\n<p>추가적으로 알면 좋은 글</p>\n</blockquote>\n<p>clone() 메서드의 경우, deep copy이고 arraycopy()의 경우, shallow clone입니다.</p>\n<ul>\n<li><a href=\"https://masima305.tistory.com/36\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">clone() vs arraycopy()</a></li>\n<li><a href=\"https://velog.io/@coin46/Shallow-copy-vs-Deep-copy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shallow Copy vs Deep Copy</a></li>\n</ul>\n<p>[추가적으로 ]</p>\n<br/>\n<h2 id=\"item-14-comparable을-개발할때-고려합니다\"><a href=\"#item-14-comparable%EC%9D%84-%EA%B0%9C%EB%B0%9C%ED%95%A0%EB%95%8C-%EA%B3%A0%EB%A0%A4%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 14. <code class=\"language-text\">Comparable</code>을 개발할때 고려합니다.</h2>\n<p><code class=\"language-text\">compareTo</code> 메서드는 <code class=\"language-text\">Comparable</code> 인터페이스의 유일한 메서드입니다. (Object 메서드가 아닙니다.) 이는 Comparable 객체의 컬렉션 유지 관리에도 편하는 장점이 있습니다.</p>\n<p>sgn에 대한 여러가지 수학적 조건이 있으나 여기서는 너무 수학적으로 설명되기에 이를 생략합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 개체 참조 필드와 비교 가능한 단일 필드</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaseInsensitiveString</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CaseInsensitiveString</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CaseInsensitiveString</span> cis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> cis<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">Object</code>의 <code class=\"language-text\">equals</code>나 <code class=\"language-text\">==</code>와 주로 비교대상이 되며 이를 특징별로 정리하면 다음과 같습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">compareTo</code></p>\n<ul>\n<li>기준에 따라 비교합니다. 동일성 비교에 더해 순서까지 비교할 수 있으며 제네릭합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">equals</code></p>\n<ul>\n<li>두 객체의 값의 동일성 여부를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">==</code></p>\n<ul>\n<li>두 객체의 동일성 여부를 반환합니다.</li>\n</ul>\n</li>\n</ul>\n<p>이중에서 <code class=\"language-text\">compareTo</code>에 대해서 좀 더 알아보자면 지켜야하는 3가지의 규약이 있습니다.</p>\n<ul>\n<li>두 객체의 참조의 순서를 바꿔 비교해도 항상 예상한 결과가 같아야합니다.</li>\n<li>a &#x3C; b, b &#x3C; c라면 a &#x3C; c가 성립해야합니다.</li>\n<li>같은 객체들끼리는 어떤 객체와 비교하더라도 항상 같아야합니다.</li>\n</ul>\n<h3 id=\"comparable-vs-comparator\"><a href=\"#comparable-vs-comparator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comparable VS Comparator</h3>\n<p><code class=\"language-text\">Comparable</code> 인터페이스의 경우 <code class=\"language-text\">compareTo()</code> 메서드를 오버라이딩 하여서 인자로 넘어온 같은 타입의 다른 객체와 대소 비교합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Fields, Getters, Setters 생략</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code class=\"language-text\">Comparator</code> 인터페이스의 경우, 정렬 대상 클래스를 수정할 수 없을 때 주로 사용합니다. 주로 <code class=\"language-text\">Arrays.sort()</code>, <code class=\"language-text\">Collections.sort()</code> 등을 사용하며, 이를 통해서 정렬을 합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span> comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Player</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Player</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> comparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>다만 보통은 람다함수로 표현합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>이에 대한 상세 내용은 아래르 참고하면 좋습니다.</p>\n<ul>\n<li><a href=\"https://www.daleseo.com/java-comparable-comparator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">comparable vs comparator</a></li>\n</ul>\n"}},{"node":{"title":"[Java] Effective Java, 객체 생성과 삭제","path":"/01-java-effective-java/","date":"11. April 2021","timeToRead":25,"description":"Effective Java 책 중, ch2 객체 생성과 삭제에 대해 정리합니다.","content":"<h1 id=\"객체-생성과-삭제\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%82%AD%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>객체 생성과 삭제</h1>\n<h2 id=\"item-1-생성자-대신-정적-팩토리-메서드-고려\"><a href=\"#item-1-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B3%A0%EB%A0%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 1. 생성자 대신 정적 팩토리 메서드 고려</h2>\n<h3 id=\"정적-팩토리-메서드의-장점\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 팩토리 메서드의 장점</h3>\n<p>다음과 같이 정적 팩토리 메서드를 통해 생성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rank</span><span class=\"token punctuation\">></span></span> faceCards <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>JACK<span class=\"token punctuation\">,</span> QUEEN<span class=\"token punctuation\">,</span> KING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BigInteger</span> prime <span class=\"token operator\">=</span> <span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">StackWalker</span> luke <span class=\"token operator\">=</span> <span class=\"token class-name\">StackWalker</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"1-정적-팩토리-메서드의-한-가지-장점은-생성자와-달리-이름이-존재합니다\"><a href=\"#1-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%ED%95%9C-%EA%B0%80%EC%A7%80-%EC%9E%A5%EC%A0%90%EC%9D%80-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%A1%B4%EC%9E%AC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 정적 팩토리 메서드의 한 가지 장점은 생성자와 달리 이름이 존재합니다.</h4>\n<ul>\n<li>정적 팩토리가 사용하기 쉽고, 읽기 쉬운 클라이언트 코드를 제공합니다.</li>\n<li>여러 생성자가 필요하다고 판단되면, 정적 팩토리 메서드를 사용하는 것이 좋습니다.</li>\n</ul>\n<h4 id=\"2-생성자와-달리-호출될-때마다-새-개체를-만들-필요가-없습니다\"><a href=\"#2-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%ED%98%B8%EC%B6%9C%EB%90%A0-%EB%95%8C%EB%A7%88%EB%8B%A4-%EC%83%88-%EA%B0%9C%EC%B2%B4%EB%A5%BC-%EB%A7%8C%EB%93%A4-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 생성자와 달리 호출될 때마다 새 개체를 만들 필요가 없습니다.</h4>\n<ul>\n<li>생성된 인스턴스를 캐시하고 불필요한 중복 객체 생성을 방지하고 반복적으로 분배 가능합니다.</li>\n<li>반복 된 호출에서 동일한 객체를 반환하는 정적 팩토리 메서드의 기능을 통해 클래스는 언제든지 존재하는 인스턴스를 엄격하게 제어 할 수 있습니다.</li>\n</ul>\n<h4 id=\"3-생성자와-달리-반환-유형의-모든-하위-유형의-객체를-반환할-수-있습니다\"><a href=\"#3-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-%EB%8B%AC%EB%A6%AC-%EB%B0%98%ED%99%98-%EC%9C%A0%ED%98%95%EC%9D%98-%EB%AA%A8%EB%93%A0-%ED%95%98%EC%9C%84-%EC%9C%A0%ED%98%95%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 생성자와 달리 반환 유형의 모든 하위 유형의 객체를 반환할 수 있습니다.</h4>\n<ul>\n<li>이러한 유연함을 이용해 특정 응용 프로그램은 API가 클래스를 공개하지 않고도 객체를 반환 할 수 있습니다.</li>\n<li>Java 8에서는 인터페이스에 정적 메서드를 포함 할 수 없다는 제한이 제거되었으므로 편하게 사용할 수 있습니다.</li>\n</ul>\n<h4 id=\"4-반환-된-개체의-클래스가-입력-매개-변수의-함수로-호출마다-다를-수-있다\"><a href=\"#4-%EB%B0%98%ED%99%98-%EB%90%9C-%EA%B0%9C%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%9E%85%EB%A0%A5-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98%EC%9D%98-%ED%95%A8%EC%88%98%EB%A1%9C-%ED%98%B8%EC%B6%9C%EB%A7%88%EB%8B%A4-%EB%8B%A4%EB%A5%BC-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 반환 된 개체의 클래스가 입력 매개 변수의 함수로 호출마다 다를 수 있다.</h4>\n<ul>\n<li>구현 클래스의 존재는 클라이언트에 보이지 않기 때문에 RegularEnumSet과 같은 작은 열거 유형에 대한 성능적 이점이 있습니다.</li>\n</ul>\n<h4 id=\"5-메서드를-포함하는-클래스가-작성될-때-반환-된-객체의-클래스가-존재할-필요가-없다\"><a href=\"#5-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%9E%91%EC%84%B1%EB%90%A0-%EB%95%8C-%EB%B0%98%ED%99%98-%EB%90%9C-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%A0-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 메서드를 포함하는 클래스가 작성될 때 반환 된 객체의 클래스가 존재할 필요가 없다.</h4>\n<ul>\n<li>유연한 정적 팩토리 메소드는 JDBC (Java Database Connectivity API)와 같은 Service provider framework 기반을 형성합니다.</li>\n<li>\n<p>서비스 공급자 프레임워크는 세가지 필수 구성 요소가 존재합니다.</p>\n<ul>\n<li>구현을 나타내는 서비스 인터페이스 (<code class=\"language-text\">a service interface</code>)</li>\n<li>공급자가 구현을 등록하느데 사용하는 공급자 등록 API (<code class=\"language-text\">a provider registration APi</code>)</li>\n<li>클라이언트가가 서비스의 인스턴스를 얻기 위해 사용하느 서비스 액세스 API (<code class=\"language-text\">a service access API</code>)</li>\n<li>(선택적 네 번째 구성 요소) 서비스 제공 업체 인터페이스 (<code class=\"language-text\">service provider interface</code>)</li>\n</ul>\n</li>\n</ul>\n<p>서비스 제공 업체 프레임 워크 패턴에는 다양한 변형이 존재합니다.</p>\n<ul>\n<li>서비스 액세스 API는 공급자가 제공하는 것보다 더 풍부한 서비스 인터페이스를 클라이언트에 반환 가능 (<code class=\"language-text\">Bridge 패턴</code>)</li>\n</ul>\n<h3 id=\"정적-팩토리-메서드의-단점\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정적 팩토리 메서드의 단점</h3>\n<h4 id=\"1-public-또는-protected-생성자가-없는-클래스는-하위-클래스화-할-수-없습니다\"><a href=\"#1-public-%EB%98%90%EB%8A%94-protected-%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80-%EC%97%86%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%ED%95%98%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%99%94-%ED%95%A0-%EC%88%98-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. public 또는 protected 생성자가 없는 클래스는 하위 클래스화 할 수 없습니다.</h4>\n<ul>\n<li>Collections Framework에서 편의 구현 클래스를 하위 클래스로 만드는 것은 불가능합니다.</li>\n<li>프로그래머가 상속(inheritance)보다 합성(composition) 를 사용하는 것을 장려하며, immutable types에 필요합니다.</li>\n</ul>\n<h4 id=\"2-프로그래머가-찾기-어렵습니다\"><a href=\"#2-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EC%B0%BE%EA%B8%B0-%EC%96%B4%EB%A0%B5%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 프로그래머가 찾기 어렵습니다.</h4>\n<ul>\n<li>API 문서에서 눈에 띄지 않습니다.</li>\n<li>생성자가 수행하므로 생상자 대신 정적 팩토리 메서드를 제공하는 클래스를 인스턴스화 하는 방법을 파악하기 어렵습니다.</li>\n</ul>\n<h3 id=\"대표적-팩토리-메서드\"><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대표적 팩토리 메서드</h3>\n<p>다음은 대표적인 일반적인 이름입니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">from</code></p>\n<ul>\n<li>단일 매개 변수를 취하고이 유형 의 해당 인스턴스를 반환하는 유형 변환 메소드</li>\n<li><code class=\"language-text\">Date d = Date.from(instant)</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">of</code></p>\n<ul>\n<li>여러 매개 변수를 사용하고이를 통합하는이 유형의 인스턴스를 반환하는 집계 메서드</li>\n<li><code class=\"language-text\">Set &lt;Rank&gt; faceCards = EnumSet.of (JACK, QUEEN, KING);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">valueOf</code></p>\n<ul>\n<li>from및 of에 대한 보다 자세한 대안</li>\n<li><code class=\"language-text\">BigInteger prime = BigInteger.valueOf (Integer.MAX_VALUE);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">instance</code> or <code class=\"language-text\">getInstance</code></p>\n<ul>\n<li>매개 변수 (있는 경우)로 설명되지만 같은 값을 가질 수없는 인스턴스를 반환</li>\n<li><code class=\"language-text\">StackWalker luke = StackWalker.getInstance (옵션);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">create</code> or <code class=\"language-text\">newInstance</code></p>\n<ul>\n<li>instance또는 getInstance. 단, 메서드가 각 호출이 새 인스턴스를 반환하도록 보장한다는 점은 예외</li>\n<li><code class=\"language-text\">Object newArray = Array.newInstance (classObject, arrayLen);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">getType</code></p>\n<ul>\n<li>getInstance비슷하지만 팩토리 메서드가 다른 클래스에있는 경우 사용</li>\n<li><code class=\"language-text\">FileStore fs = Files.getFileStore (경로);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">newType</code></p>\n<ul>\n<li>newInstance비슷하지만 팩토리 메서드가 다른 클래스에있는 경우 사용</li>\n<li><code class=\"language-text\">BufferedReader br = Files.newBufferedReader (경로);</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">type</code></p>\n<ul>\n<li>get유형 과 new유형의 간결한 대안</li>\n<li><code class=\"language-text\">List &lt;Complaint&gt; litany = Collections.list (legacyLitany);</code></li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"item-2-생성자-매개-변수가-많은-경우-빌더를-고려\"><a href=\"#item-2-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98%EA%B0%80-%EB%A7%8E%EC%9D%80-%EA%B2%BD%EC%9A%B0-%EB%B9%8C%EB%8D%94%EB%A5%BC-%EA%B3%A0%EB%A0%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 2. 생성자 매개 변수가 많은 경우, 빌더를 고려</h2>\n<p>Static factories 와 생성자는 제한을 고유하므로, 잘 확장되지 않습니다.</p>\n<h3 id=\"telescoping-constructor-패턴\"><a href=\"#telescoping-constructor-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>telescoping constructor 패턴</h3>\n<ul>\n<li>생성자에 필수 매개 변수만 제공하고, 다른 하나에는 단일 선택적 매개 변수, 다른 하나는 두 개의 선택적 맥개 변수가 있는 등의 방식으로 생성자를 제공하는 패턴입니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> calories<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sodium<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>텔레 스코핑 생성자 패턴은 작동하지만 매개 변수가 많으면 클라이언트 코드를 작성하기 어렵고 여전히 읽기가 어렵습니다.</li>\n</ul>\n<h3 id=\"javabeans-패턴\"><a href=\"#javabeans-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaBeans 패턴</h3>\n<p>이를 해결하는 방법은 setter 메소드 호출(<code class=\"language-text\">JavaBeans 패턴</code>)입니다. (이 경우는 텔레 스코핑 생성자 패턴을 해결하기에는 유리하나 <strong>불일치를 허용하고 가변성을 요구</strong>한다는 단점이 존재합니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> servingSize <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수; 기본값 없음</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> servings <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필수; 기본값 없음</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> calories <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> fat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sodium <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>\n<p>JavaBeans 패턴은 구성이 여러 호출로 분할되기 때문에 JavaBean은 구성 과정에서 일관성없는 상태에 있을 수 있습니다.</p>\n<ul>\n<li>유효성을 확인하는 것으로 일관성을 유지할 수 있는 옵션이 따로 없습니다.</li>\n<li>클래스를 불변으로 만들 가능성을 배제하고 스레드 안전성을 보장하기 위해 노력이 필요합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"builder-패턴\"><a href=\"#builder-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Builder 패턴</h3>\n<p>텔레 스코핑 생성자 패턴의 안전성 + JavaBeans 패턴의 가독성을 결합</p>\n<ul>\n<li>클라이언트는 필요한 모든 매개 변수를 사용하여 생성자 (또는 정적 팩토리)를 호출하고 빌더 객체를 가져옵니다.</li>\n<li>그런 다음 클라이언트는 빌더 개체에서 setter와 유사한 메서드를 호출하여 관심있는 각 선택적 매개 변수를 설정합니다.</li>\n<li>클라이언트는 매개 변수가없는 build메서드를 호출하여 일반적으로 변경할 수없는 개체를 생성합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionFacts</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필수 매개 변수</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 선택적 매개 변수-기본값으로 초기화</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> calories <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> fat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sodium <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> servingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> servings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servingSize <span class=\"token operator\">=</span> servingSize<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servings <span class=\"token operator\">=</span> 서빙<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">NutritionFacts</span> cocaCola <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NutritionFacts</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>calories <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>sodium <span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>carbohydrate <span class=\"token punctuation\">(</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>build <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>\n<p>해당 코드는 작성하기 쉽고 읽기 쉽습니다.</p>\n<ul>\n<li>스프링은 <code class=\"language-text\">@Builder</code> 어노테이션이 있습니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스 계층 구조를위한 빌더 패턴</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Topping</span> <span class=\"token punctuation\">{</span>HAM<span class=\"token punctuation\">,</span> MUSHROOM<span class=\"token punctuation\">,</span> ONION<span class=\"token punctuation\">,</span> PEPPER<span class=\"token punctuation\">,</span> SAUSAGE<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Builder</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">EnumSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">></span></span> toppings <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span>noneOf <span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> addTopping <span class=\"token punctuation\">(</span><span class=\"token class-name\">Topping</span> topping<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     toppings<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span>requireNonNull <span class=\"token punctuation\">(</span>topping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> self <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Pizza</span> build <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Subclasses must override this method to return \"this\"</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">T</span> self <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Builder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toppings <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// See Item  50</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 추상 self메서드 와 함께 메서드 체이닝이 캐스트 없이도 하위 클래스에서 제대로 작동합니다. 따라서 아래의 장점을 가집니다.</p>\n<ul>\n<li>빌더 패턴은 매우 유연합니다. (반복 사용을 통해 여러 개체를 빌드할 수 있음)</li>\n</ul>\n<p>다만, 이러한 단점이 있습니다.</p>\n<ul>\n<li>개체를 만들기 위해서는 작성기를 만들어야 하기 때문에, 만드는 비용 및 성능이 중요한 상황에서 문제가 될 수 있습니다. (처음부터 시작하는 경우에 빌더를 선택하면 좋습니다.)</li>\n</ul>\n<p>따라서 <strong>빌더 패턴은 생성자 또는 정적 팩토리에 소수 이상의 매개 변수가 있는 클래스를 디자인할 때 장점</strong>을 가집니다.</p>\n<br/>\n<h2 id=\"item-3-private-생성자-또는-열거형을-통해-싱글-톤-속성을-적용\"><a href=\"#item-3-private-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%98%90%EB%8A%94-%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%8B%B1%EA%B8%80-%ED%86%A4-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 3. private 생성자 또는 열거형을 통해 싱글 톤 속성을 적용</h2>\n<p>singleton은 정확하게 한번만 인스턴스화 되고, stateless 또는 unique한 시스템 컴포넌트입니다. <strong>클래스를 싱글톤으로 만들면, 클라이언트 테스트가 어려울 수 있습니다.</strong> 왜냐하면 해당 유형으로 사용되는 인터페이스를 구현하지 않는 이상에 싱글톤을 mock으로 구현할 수 없기 때문입니다.</p>\n<p>일반적으로 싱글톤을 구현하는 방법에 따라 구분할 수 있습니다.</p>\n<h3 id=\"1-public-final-field를-통한-singleton-구현\"><a href=\"#1-public-final-field%EB%A5%BC-%ED%86%B5%ED%95%9C-singleton-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. public final field를 통한 singleton 구현</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// public final field가 있는 singleton</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Elvis</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>private 생성자는 public static final 필드를 초기화하기 위해 한번만 호출되며, Elvis.INSTANCE는 public, protected 생성자가 없기 때문에 monoelvistic(단일성)이 보장됩니다.</li>\n<li>\n<p><code class=\"language-text\">public final field</code>는 해당 장점을 가집니다.</p>\n<ul>\n<li>API가 클래스가 싱글톤임을 명확하게 합니다.</li>\n<li>퍼블릭 정적 필드는 최종이므로 항상 동일한 객체 참조를 포함합니다.</li>\n<li>매우 간단합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-정적-팩토리를-통한-싱글톤\"><a href=\"#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%8B%B1%EA%B8%80%ED%86%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 정적 팩토리를 통한 싱글톤</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Singleton with static factory</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Elvis</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Elvis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Elvis</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code class=\"language-text\">Elvis.getInstance</code> 을 사용하는 모든 호출은 동일한 객체 참조를 반환하고, 다른 Elvis 인스턴스는 생성되지 않습니다.</li>\n<li>\n<p>정잭 팩토리의 장점은 아래와 같습니다.</p>\n<ul>\n<li>API를 변경하지 않고도 클래스가 싱글톤인지 여부에 대해 바꿀 수 있는 유연성을 제공합니다.</li>\n<li>애플리케이션에서 필요한 경우, <code class=\"language-text\">genericwe singleton factory</code> 를 작성할 수 있습니다.</li>\n<li><code class=\"language-text\">method reference(메소드 참조)</code> 를 supllier(공급자)로 사용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>그러나 1번이나 2번의 접근 방식은 싱글톤은 <code class=\"language-text\">serializabe(직렬화)</code> 하는 경우에는 <code class=\"language-text\">implements Serializable</code> 만으로는 충분하지 않기 때문에 모든 인스턴스 필드(<code class=\"language-text\">transient</code>)를 선언하고 <code class=\"language-text\">readResolve</code> 메소드를 제공해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 싱글톤 속성을 보존하는 readResolve 메서드</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> readResolve <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// true Elvis를 반환하고 가바지 커렉터가 Elvis의 복사품을 처리합니다.</span>\n  <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"3-단일-요소-열거-형-선언\"><a href=\"#3-%EB%8B%A8%EC%9D%BC-%EC%9A%94%EC%86%8C-%EC%97%B4%EA%B1%B0-%ED%98%95-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 단일 요소 열거 형 선언</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Enum sigleton - the preferred approach</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Elvis</span> <span class=\"token punctuation\">{</span>\n  INSTANCE<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leaveTheBuilding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>public field 접근 방식과 유사하지만 더 <strong>간결하고 직렬화를 제공</strong>합니다.</li>\n<li>종종 singleton을 구현하는 가장 좋은 방법입니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-4-private-생성자를-통해-noninstantiability비인스턴스성을-적용합니다\"><a href=\"#item-4-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%ED%86%B5%ED%95%B4-noninstantiability%EB%B9%84%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%84%B1%EC%9D%84-%EC%A0%81%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 4. private 생성자를 통해 noninstantiability(비인스턴스성)을 적용합니다.</h2>\n<ul>\n<li><code class=\"language-text\">java.lang.Math</code> 나 <code class=\"language-text\">java.util.Arrays</code>, <code class=\"language-text\">java.util.Colletions</code> 와 같은 유틸리티 클래스는 인스턴스화되도록 설계되어 있지 않습니다.</li>\n<li>추상 클래스를 만들어서 noninstantiability를 적용하려는 것은 동작하지 않습니다.</li>\n<li>다만 기본 생성자는 클래스에 명시적 생성자가 없는 경우에 생성되므로, private constructor을 포함함으로서 class를 noninstantiable 상태로 만들 수 있습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Noninstantiable utility class</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UtilityClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Suppress default constructor for noninstantiability</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">UtilityClass</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>explict constructor(명시적 생성자)는 private 이므로, 외부에서 접근할 수 없습니다.</li>\n<li><code class=\"language-text\">AssertionError()</code> 는 생성자가 실수로 클래스 내에서 호출되는 경우에 보험을 제공합니다. 즉, 어떤 상황에서도 클래스가 인스턴스화 되지않음을 보장합니다.</li>\n<li>다만, 이러한 방법은 클래스가 하위 클래스로 분류되는 것을 방지합니다. 즉, 서브 클래스에는 호출할 액세스 가능한 super class 생성자가 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-5-hardwiring-자원에-의존성-주입dependency-injection을-선호합니다\"><a href=\"#item-5-hardwiring-%EC%9E%90%EC%9B%90%EC%97%90-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85dependency-injection%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 5. Hardwiring 자원에 의존성 주입(Dependency Injection)을 선호합니다.</h2>\n<p>많은 클래스가 하나 이상의 기본 리소스에 의존합니다.</p>\n<p>부정적인 케이스는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 유연하지 않고, 테스트할 수 없는 잘못 사용된 유틸리티</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lexicon</span> dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SpellChecker</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Noninstantiable</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isValid <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggests</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>즉, Static utility classes 와 싱글톤은 기본 리스스에 의해 동작이 매개변수화 된 클래스에 적합하지 않습니다.</li>\n<li>따라서 이를 해결하는 패턴은 <strong>새 인스턴스를 만들때, 생성자에 리소스를 전달하는 방법</strong>입니다. (DI, Dependency Injection)</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Dependency injection provides flexibility and testability</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpellCheker</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lexicon</span> dictionary<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpellChecker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lexicon</span> dictionary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">suggestions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> typo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Dependency Injection Pattern(의존성 주입 패턴)은 다음의 장점을 가집니다.</p>\n<ul>\n<li>immutabiliy(불변성)을 보존합니다.</li>\n<li>\n<p>resource factory를 전달함으로서 패턴을 변경할 수 있습니다. (<strong>Factory Method Pattern</strong>)</p>\n<ul>\n<li>자바8에 도입된 <code class=\"language-text\">Supplier&lt;T&gt;</code> 인터페이스는 Factories를 표현하는데 효과적입니다.</li>\n<li><code class=\"language-text\">Supplier&lt;T&gt;</code> 메소드는 <code class=\"language-text\">bounded wildcard type(제한된 와일드카드 유형)</code> 을 사용해서 팩토리의 매개변수를 제한하여, 클라이언트가 지정된 유형의 하위 유형의 생성하는 팩토리를 전달해야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mosaic</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Tile</span><span class=\"token punctuation\">></span></span> tileFactory<span class=\"token punctuation\">)</span></code></pre>\n<p>결론적으로는 <strong>singleton 이나 static utility class를 사용하여 하나 이상의 기본 리소스에 의존하는 클래스를 구현하지 않고, 클래스가 이러한 리소스를 직접 생성하지 않도록 설정</strong>해야합니다. 대신에, Resource 또는 Factory를 통해서 생성자에 전달해야합니다. (또는 static factory 나 builder) <strong>DI를 통해서 클래스의 유연성과 재사용성, 테스트 기능을 향상</strong> 시킬 수 있습니다.</p>\n<br/>\n<h2 id=\"item-6-불필요한-객체를-생성하는-것을-줄입니다\"><a href=\"#item-6-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%84-%EC%A4%84%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 6. 불필요한 객체를 생성하는 것을 줄입니다.</h2>\n<p>필요할때마다 기능적으로 동등한 새 객체를 만드는 것보다 단일 객체를 재사용하는 것이 적절합니다.</p>\n<ul>\n<li>나쁜 케이스 : <code class=\"language-text\">String s = new String(&quot;clothes&quot;)</code></li>\n</ul>\n<p>좀 더 개선하면 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">String s = &quot;clothes&quot;</code></li>\n</ul>\n<p><code class=\"language-text\">static factory method</code> 를 사용하면, 불필요한 객체 생성을 피할 수 있습니다. 따라서 다음과 같이 작성하여 성능이 향상 가능합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 성능 향상 가능.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isRomanNumeral <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^(?=.)M*(C[MD]|D?C{0,3})\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다만 문자열이 정규식과 일치하는지 확인하는 가장 쉬운 방법이지만 String.matches` 성능이 중요한 상황에서 반복적으로 사용하기에는 적합하지 않습니다. 이를 개선하면 아래처럼 바뀝니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 성능 향상을 위해 값 비싼 객체 재사용합니다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RomanNumerals</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> ROMAN <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>compile <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"^ (? =.) M * (C [MD] | D? C {0,3})\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"( X [CL] | L? X {0,3}) (I [XV] | V? I {0,3}) $ \"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> isRomanNumeral <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ROMAN<span class=\"token punctuation\">.</span>matcher <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>matches <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>이러한 버전은 isRomanNumeral을 자주 호출할 경우 높은 성능을 얻으며, 명확성도 향상되었고 사용자가 보기 쉽습니다.</li>\n</ul>\n<p>Autoboxing는 애매하지만, primitive 와 boxed primitive types간의 구분을 없애버리지는 않습니다. 이러한 잘못된 사용은 속도를 느리게 만듭니다. 따라서, boxed primitives 보다, primitive를 선호하고 의도하지 않은 오토 박싱을 조심해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 느리게 만들어버림.</span>\n    sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"item-7-사용하지-않는-개체의-참조를-제거합니다\"><a href=\"#item-7-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B0%9C%EC%B2%B4%EC%9D%98-%EC%B0%B8%EC%A1%B0%EB%A5%BC-%EC%A0%9C%EA%B1%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 7. 사용하지 않는 개체의 참조를 제거합니다.</h2>\n<p>흔히. 가비지컬렉터를 사용하는 언어의 경우에는 메모리 관리에 대해 생각할 필요가 없다고 생각을 하지만 그렇지 않습니다.</p>\n<h3 id=\"메모리-낭비의-원인-1---미-참조\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-1---%EB%AF%B8-%EC%B0%B8%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 1 - 미 참조</h3>\n<p>다음은 간단하게 스택을 구성한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elements<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span>\n      elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음 코드에서 스택이 커졌다가 줄어든 경우, 프로그램에 더 이상 참조가 없더라고 스택에서 참조된 객체는 가비지 수집이 되지 않습니다.</p>\n<p>이를 수정하는 방법은 참조가 쓸모 없게 되면 <strong>null out</strong> 참조를 하면 됩니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> pop <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  elements<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 사용하지 않는 참조</span>\n  <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>객체 참조를 무효화하는 것은 표준이 아니라 예외로 처리해야합니다.</li>\n<li>클래스가 자체 메모리를 관리할 때마다 프로그래머는 메모리 누수에 대해 경고해야합니다. 해제시 개체 참조를 null로 처리해야합니다.</li>\n</ul>\n<h3 id=\"메모리-낭비의-원인-2---캐시\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-2---%EC%BA%90%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 2 - 캐시</h3>\n<p>캐시에 넣어놓으면 참조가 있다는 사실을 이후에 잊고, 관련성이 없어진 이후에도 남아있을 확률이 높습니다. 대부분의 캐시에서 사용하는 데이터의 가치는 시간과 반비례하기 때문에 항목을 정리할 필요가 있습니다. <code class=\"language-text\">LinkedHashMap</code> 는 <code class=\"language-text\">removeEldestEntry</code> 방법을 통해서 이러한 낭비를 피하기 위해 노력합니다.</p>\n<h3 id=\"메모리-낭비의-원인-3-리스너-및-기타-콜백\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%82%AD%EB%B9%84%EC%9D%98-%EC%9B%90%EC%9D%B8-3-%EB%A6%AC%EC%8A%A4%EB%84%88-%EB%B0%8F-%EA%B8%B0%ED%83%80-%EC%BD%9C%EB%B0%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메모리 낭비의 원인 3. 리스너 및 기타 콜백</h3>\n<p>클라이언트가 콜백을 등록하지만, 명시적으로 취소하지 않으면 누적됩니다.</p>\n<p>이러한 부분을 삭제하는 방법은 <code class=\"language-text\">.NET Framework</code> 의 <code class=\"language-text\">WeakHashMap</code> 과 같습니다.</p>\n<p><strong>이렇듯이 메모리 낭비는 명백한 오류로 나타나지 않기 때문에, 미리 예상하고 예방하는 방법을 배우는 것이 매우 바람직합니다.</strong></p>\n<br/>\n<h2 id=\"item-8-finalizers종료자와-cleaners클리너를-피합니다\"><a href=\"#item-8-finalizers%EC%A2%85%EB%A3%8C%EC%9E%90%EC%99%80-cleaners%ED%81%B4%EB%A6%AC%EB%84%88%EB%A5%BC-%ED%94%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 8. Finalizers(종료자)와 Cleaners(클리너)를 피합니다.</h2>\n<p><code class=\"language-text\">Finalizers</code> 는 얘측할 수 없고 종종 위험하고 일반적으로 불필요합니다.</p>\n<ul>\n<li>비정상적인 동작, 성능 저하, 이식성의 문제가 발생할 수 있습니다.</li>\n</ul>\n<p>Java 9부터는 Finalizers를 더이상 사용하지는 않지만, Cleaners를 사용합니다. 그러나, <code class=\"language-text\">Cleaner</code>는 <code class=\"language-text\">Finalizers</code> 보다 덜 위험하지만 그래도 예측할 수 없고, 느리고, 일반적으로 불필요합니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-1---즉시-실행될-것이라는-보장이-없음\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-1---%EC%A6%89%EC%8B%9C-%EC%8B%A4%ED%96%89%EB%90%A0-%EA%B2%83%EC%9D%B4%EB%9D%BC%EB%8A%94-%EB%B3%B4%EC%9E%A5%EC%9D%B4-%EC%97%86%EC%9D%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 1 - 즉시 실행될 것이라는 보장이 없음</h3>\n<p>종료자나 클리너가 실행되는 시간 사이에 임의의 시간이 걸릴 수 있습니다. 즉, <strong>종료자 또는 클리너에서 시간이 중요한 작업을 수행하면 안됩니다.</strong></p>\n<h3 id=\"finalizers와-cleaner의-단점-2---종료-중에-발생한-예외는-무시됩니다\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-2---%EC%A2%85%EB%A3%8C-%EC%A4%91%EC%97%90-%EB%B0%9C%EC%83%9D%ED%95%9C-%EC%98%88%EC%99%B8%EB%8A%94-%EB%AC%B4%EC%8B%9C%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 2 - 종료 중에 발생한 예외는 무시됩니다.</h3>\n<p>이러한 예외가 손상된 상태로 종료된 경우, 다른 스레드가 이를 사용할려고 하면 비 결정적인 동작이 발생할 수 있습니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-3---심각한-성능-저하\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-3---%EC%8B%AC%EA%B0%81%ED%95%9C-%EC%84%B1%EB%8A%A5-%EC%A0%80%ED%95%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 3 - 심각한 성능 저하</h3>\n<p><code class=\"language-text\">Try-with-resource</code>와 가비지 컬렉터를 쓰는 경우 12ns가 걸리는데 종료자를 사용하면 시간이 550ns가 발생합니다. Cleaner는 조금 더 빠르지만 66ns가 걸립니다.</p>\n<h3 id=\"finalizers와-cleaner의-단점-4---심각한-보안-문제-존재\"><a href=\"#finalizers%EC%99%80-cleaner%EC%9D%98-%EB%8B%A8%EC%A0%90-4---%EC%8B%AC%EA%B0%81%ED%95%9C-%EB%B3%B4%EC%95%88-%EB%AC%B8%EC%A0%9C-%EC%A1%B4%EC%9E%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers와 Cleaner의 단점 4 - 심각한 보안 문제 존재</h3>\n<p><code class=\"language-text\">finalizer attacks(종료자 공격)</code>을 사용하는 경우, 문제가 발생합니다.</p>\n<p>이를 막기 위해서는 생성자에서 예외를 던지는 경우, 객체가 존재하지 않도록 방지할 수 있으나 종료자가 이를 불가능하게 만듭니다. 이를 <strong>해결하기 위해서는 <code class=\"language-text\">finalize</code> 와 같은 최종 메서드를 사용</strong>해야합니다.</p>\n<h3 id=\"finalizers나-cleaner를-쓰지-않기-위해서\"><a href=\"#finalizers%EB%82%98-cleaner%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers나 Cleaner를 쓰지 않기 위해서.</h3>\n<ul>\n<li><code class=\"language-text\">AutoCloseable</code> 을 통해서 클래스를 구현합니다.</li>\n<li><code class=\"language-text\">try-with-resource</code> 를 통해서 종료를 보장합니다.</li>\n</ul>\n<h3 id=\"finalizers나-cleaner의-합법적인-용도\"><a href=\"#finalizers%EB%82%98-cleaner%EC%9D%98-%ED%95%A9%EB%B2%95%EC%A0%81%EC%9D%B8-%EC%9A%A9%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Finalizers나 Cleaner의 합법적인 용도</h3>\n<ul>\n<li>\n<p>리소스 소유자가 close method 호출을 무시할 경우, 안전막 역할을 하는 것입니다.</p>\n<ul>\n<li><code class=\"language-text\">FileInputStream</code>, <code class=\"language-text\">FileOutputStream</code>, <code class=\"language-text\">ThreadPoolExecutor</code> 등이 finalizers를 통해서 안전망 역할을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">native peer</code>가 있는 객체와 관련된 경우에 사용합니다.</p>\n<ul>\n<li>이러한 객체는 일반 객체가 아니므로 가비지 컬렉터가 이에 대해 모르기 때문에, 회수할 수 엇습니다.</li>\n<li>다만, 이렇게 사용을 하더라도 <code class=\"language-text\">close method</code>를 사용해야합니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클리너를 안전망을 사용하는 경우.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Room</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutoCloseable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cleaner</span> cleaner <span class=\"token operator\">=</span> <span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// cleaning이 필요합니다. Room을 참조하면 안됩니다.</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 방의 쓰레기 더미 수</span>\n    <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numJunkPiles <span class=\"token operator\">=</span> numJunkPiles<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// close 메소드 또는 클리너에 의해 호출</span>\n\t\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cleaning room\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      numJunkPiles <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// room의 상태, cleanable과 공유됨</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">State</span> state<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// cleanable, gc에 의해 가능할때 room이 청소됩니다.</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Cleanable</span> cleanable<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Room</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numJunkPiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">(</span>numJunkPiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcleanable <span class=\"token operator\">=</span> cleaner<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcleanable<span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=kbh3983&#x26;logNo=220908731253&#x26;proxyReferer=https:%2F%2Fwww.google.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">추가적인 참고자료</a></p>\n<p>다음과 같이 State 인스턴스가 Room을 참조하지 않도록 사용합니다.</p>\n<br/>\n<h2 id=\"item-9-try-with-resource-를-try-finally-보다-선호합니다\"><a href=\"#item-9-try-with-resource-%EB%A5%BC-try-finally-%EB%B3%B4%EB%8B%A4-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 9. TRY-WITH-RESOURCE 를 TRY-FINALLY 보다 선호합니다.</h2>\n<p>Java 라이브러리에서는 close 메소드를 호출하는 경우, 많은 자원이 소모되기 때문에 다른 방법을 사용해야합니다.</p>\n<p><code class=\"language-text\">Try-finally</code> 는 2개 이상의 경우에서는 사용하기 어렵기 때문에, <code class=\"language-text\">try-with-resource</code> 를 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> firstLineOfFile <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> firstLineOfFile <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> defaultVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> br<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> defaultVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n"}}]}}},"context":{}}