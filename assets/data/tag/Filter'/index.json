{"hash":"0701dade6d489be1beb11ef41af9376f9a0f1a6d","data":{"tag":{"title":"Filter'","belongsTo":{"edges":[{"node":{"title":"[Springboot] 스프링부트 MVC - Filter","path":"/01-springboot-mvc/","date":"3. November 2020","timeToRead":4,"description":" Springboot MVC 중 Filter에 대한 설명입니다. ","content":"<h1 id=\"spring-boot-mvc---filter\"><a href=\"#spring-boot-mvc---filter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Boot MVC - Filter</h1>\n<p>HTTP Method 취약점을 제거하는 업무를 하는 중에 기존 코드에서 일부분 수정을 해야하는 법을 알았다. 그중 필터에 대해 알게되었고 HTTP 헤더 정보를 설정, Encoding, XSS, CORS 이슈등을 해결할 수 있다는 점을 알았다.</p>\n<p>이에 대해서 Filter에 대해 공부해야겠다는 생각이 들었다.</p>\n<br/>\n<h2 id=\"filter란\"><a href=\"#filter%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Filter란.</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97983638-ee3dad80-1e18-11eb-95ca-2b249554509b.png\" alt=\"image\"></p>\n<p>다음의 사진과 같습니다.</p>\n<p>서블릿의 ServletContext 기능으로 사용자에 의해 서블릿이 호출 되기 전/후로 사용자 요청/응답의 헤더 정보 등을 검사 및 설정할 수 있습니다.</p>\n<br/>\n<h2 id=\"filter와-interceptor의-차이\"><a href=\"#filter%EC%99%80-interceptor%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Filter와 Interceptor의 차이</h2>\n<ul>\n<li>Filter는 DispatcherServlet 앞에서 먼저 동작하고, Intercepter는 DispatcherServlet에서 Controller(Handler) 사이에서 동작합니다.</li>\n<li>\n<p>Filter</p>\n<ul>\n<li><code class=\"language-text\">웹 어플리케이션의 Context</code>의 기능을 가지고 있다.</li>\n<li>스프링 기능을 활용하기에 어렵다.</li>\n<li>일반적으로 인코딩, CORS, XSS, LOG, 인증, 권한 등을 구현한다..</li>\n</ul>\n</li>\n<li>\n<p>Interceptor</p>\n<ul>\n<li><code class=\"language-text\">스프링의 Spring Context</code>의 기능이며 일종의 빈이다.</li>\n<li>스프링 컨테이너이므로 다른 Bean을 주입해서, 활용성을 높일 수 있다.</li>\n<li>다른 Bean을 활용 가능하기에 인증 및 권한 등을 구현할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"springboot에서-filter를-설정\"><a href=\"#springboot%EC%97%90%EC%84%9C-filter%EB%A5%BC-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot에서 Filter를 설정.</h2>\n<blockquote>\n<p>스프링에서는 웹 어플리케이셔 컨텍스트를 설정할 수 있는 web.xml 파일을 통한 필터를 설정할 수 있다. 그러나 스프링부트는 다르다.</p>\n</blockquote>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>SomeFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>com.somecompany.SomeFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>SomeFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/url/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>paramName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>paramValue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span></code></pre>\n<blockquote>\n<p>스프링 부트는 다음과 같이 설정할 수 있습니다.</p>\n</blockquote>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span> <span class=\"token function\">testFilterRegistration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">FilterRegistrationBean</span> registration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token function\">testFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/url/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">addInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"paramName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"paramValue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testFilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> registration<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Filter</span> <span class=\"token function\">testFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">testFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이처럼 스프링과 스프링 부트의 필터 설정은 다르게 설정됩니다.</p>\n<p>좀 더 스프링 부트의 필터에 대해 알아보자면, 다음과 같습니다. 스프링 부트에서 필터를 사용하는 방법은 크게 두가지로 나눠집니다.</p>\n<h3 id=\"1-filterregistrationbean으로-필터-등록\"><a href=\"#1-filterregistrationbean%EC%9C%BC%EB%A1%9C-%ED%95%84%ED%84%B0-%EB%93%B1%EB%A1%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. FilterRegistrationBean으로 필터 등록</h3>\n<p><code class=\"language-text\">org.springframework.boot.web.servlet</code>의 <code class=\"language-text\">FilterRegistrationBeen</code>을 사용하여, CORSFilter 클래스를 설정파일에서 빈으로 등록하는 방식입니다.</p>\n<ul>\n<li>예시코드는 다음과 같습니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestApplication1</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestApplication1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span> <span class=\"token function\">setFilterRegistration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">FilterRegistrationBean</span> filterRegistrationBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// string 여러개를 가변인자로 받는 메소드</span>\n\t\tfilterRegistrationBean<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/filtered/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">return</span> filterRegistrationBean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2-webfilter--servletcomponentscan\"><a href=\"#2-webfilter--servletcomponentscan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. @WebFilter + @ServletComponentScan</h3>\n<p>스프링부트에서 지원하는 <code class=\"language-text\">@WebFilter</code> 애너테이션으로 자동 등록 후에 <code class=\"language-text\">@ServletComponentScan</code>을 사용하는 방식이다.</p>\n<p>예시코드는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">@ServletComonentScan 설정</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ServletComponentScan</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestApplication2</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestApplication2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code class=\"language-text\">@WebFilter 설정</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span>urlPatterns <span class=\"token operator\">=</span> <span class=\"token string\">\"/filtered/*\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 1번과 내용이 같습니다.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 구성할 수 있습니다. 해당 코드와 같이 Springboot에 필터를 설정할 수 있습니다. </p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>업무 개발 코드를 추가할 수 없어서 간단하게 정리했습니다. 다음에 업무 상에 시간이 조금 있으면, HTTP Method를 제한하는 코드를 추가적으로 구성해서 올리겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://linked2ev.github.io/gitlog/2019/09/15/springboot-mvc-13-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-MVC-Filter-%EC%84%A4%EC%A0%95/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linked2ev.github.io/gitlog/2019/09/15/springboot-mvc-13-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-MVC-Filter-%EC%84%A4%EC%A0%95/</a></li>\n<li><a href=\"https://qastack.kr/programming/19825946/how-to-add-a-filter-class-in-spring-boot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qastack.kr/programming/19825946/how-to-add-a-filter-class-in-spring-boot</a></li>\n<li><a href=\"https://luvstudy.tistory.com/79\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://luvstudy.tistory.com/79</a></li>\n</ul>\n"}}]}}},"context":{}}