{"hash":"4d08d5d9909bc52ba8ae53ab8b5e8ea790bc2d53","data":{"tag":{"title":"Devops","belongsTo":{"edges":[{"node":{"title":"[Network] GSLB란?","path":"/00-network-gslb/","date":"11. January 2021","timeToRead":4,"description":"GSLB에 대해 작성합니다.","content":"<h1 id=\"gslb란\"><a href=\"#gslb%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GSLB란?</h1>\n<p>로드밸런서 관련 이야기를 하면서 어쩌면 한번 쯤 GSLB에 대해 들어봤을 수 있다. 회사에서는 F5나, Citrix와 같이 여러 GSLB를 사용하고 있는데 오늘은 이에 대해 한번 정리해봅니다.</p>\n<h2 id=\"gslb의-정의\"><a href=\"#gslb%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GSLB의 정의</h2>\n<p>GLSB는 Global Service Load Balancing의 약자로, <strong>비지니스 연속성 및 재해 복구에 사용되는 기술들의 집합</strong>입니다,</p>\n<p>이러한 GLSB는 다음과 같은 기능을 제공하여, 지능적 DNS 서비스라고도 불리기도 합니다.</p>\n<ul>\n<li>\n<p>재난 복구 (disaster recovery)</p>\n<ul>\n<li>실패에 대해 대체할 수 있는 서버를 제공합니다.</li>\n</ul>\n</li>\n<li>\n<p>부하 분산 (load sharing)</p>\n<ul>\n<li>많은 트래픽을 여러 서버로 분산합니다.</li>\n</ul>\n</li>\n<li>\n<p>성능 (performance)</p>\n<ul>\n<li>client의 위치나 네트워크를 기반으로 최적의 성능을 낼 서버를 선택합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"glsb의-동작\"><a href=\"#glsb%EC%9D%98-%EB%8F%99%EC%9E%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GLSB의 동작</h2>\n<p>다음과 같은 순서로 진행됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104177144-adcb6300-544b-11eb-8ce7-4cbeef9c7480.png\" alt=\"GLSB-logic\"></p>\n<p>각 서버마다 Health Check를 하고 운영가능한 서버의 IP를 반환합니다.</p>\n<br/>\n<h2 id=\"glsb-vs-dns\"><a href=\"#glsb-vs-dns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GLSB vs DNS</h2>\n<p>GLSB와 DNS를 비교하면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104177295-e53a0f80-544b-11eb-8cb4-71d51475305d.png\" alt=\"GLSB-vs-DNS\"></p>\n<p>이를 표로 표현하면 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>GLSB</th>\n<th>DNS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>재해복구</td>\n<td>- 모니터링(Health Check) 실패한 IP는 응답에서 제외합니다.</td>\n<td>- 서버의 상황을 알 수 없습니다.</td>\n</tr>\n<tr>\n<td>로드밸런싱</td>\n<td>- 서버를 모니터링 해서 로드가 적은 서버의 IP를 반환합니다.</td>\n<td>- Round Robin 방식을 사용합니다. 정교한 로드밸런싱이 되지않습니다.</td>\n</tr>\n<tr>\n<td>레이턴시 기반</td>\n<td>- 유저에게 더 적은 latency를 가지는 서버로 연결합니다.</td>\n<td>- 네트워크상 멀리 떨어진 위치의 서버에 연결가능합니다.</td>\n</tr>\n<tr>\n<td>위치기반 서비스</td>\n<td>- 유저의 지역 정보에 기반하여, 해당 지역을 서버스하는 서버로 연결합니다.</td>\n<td>- Round Robin</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"gslb-주요-기술\"><a href=\"#gslb-%EC%A3%BC%EC%9A%94-%EA%B8%B0%EC%88%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GSLB 주요 기술</h2>\n<h3 id=\"health-check\"><a href=\"#health-check\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Health Check</h3>\n<ul>\n<li>등록된 호스트들에 대해 주기적으로 health check를 수행합니다.</li>\n<li>호스트가 실패하는 경우, DNS 응답에서 해당 호스트를 제거합니다.</li>\n<li>실패한 호스트로의 접근을 막아서 서버의 가용성을 높입니다.</li>\n</ul>\n<h3 id=\"ttltime-to-live\"><a href=\"#ttltime-to-live\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TTL(Time to Live)</h3>\n<ul>\n<li>DNS에서 권한을 가진 네임 서버는 특정 레코드에 대해 TTL를 설정할 수 있습니다.</li>\n<li>캐시 네임서버는 TTL 동안 캐시에 저장하고, Client로부터 요청이 오면 캐시에 저장된 값을 반환합니다.</li>\n<li>TTL값이 너무 크면, GLSB의 상태 정보가 제때 동기화되지 못합니다.</li>\n<li>TTL값이 너무 짧으면, 네임서버에 오는 부담감이 커집니다.</li>\n</ul>\n<h3 id=\"네트워크-거리와-지역\"><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B1%B0%EB%A6%AC%EC%99%80-%EC%A7%80%EC%97%AD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>네트워크 거리와 지역</h3>\n<ul>\n<li>주기적으로 성능을 측정하고 결과를 저장합니다.</li>\n<li>DNS 질의에 대해 지리적으로 가까운 서버를 반환하거나 네트워크 거리가 가까운 서버를 반환합니다.</li>\n<li>지리적으로 가까운 서버는 RTT(Round Trip Time)도 짧기 때문에 동일한 결과를 반환하는 경우가 많습니다.</li>\n</ul>\n<br/>\n<h2 id=\"대표적인-서비스\"><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대표적인 서비스</h2>\n<ul>\n<li>AWS : Route53</li>\n<li>Google Cloud : Cloud Load Balancing</li>\n<li>Azure : Traffic Manager</li>\n<li>Naver : Global Route Manager</li>\n<li>F5</li>\n<li>Citrix</li>\n</ul>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>간단하게 GSLB에 대해 정리했습니다. 잘못된 부분 있으면 편하게 알려주세요.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://ckddn9496.tistory.com/33\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ckddn9496.tistory.com/33</a></li>\n<li><a href=\"https://nesoy.github.io/articles/2020-01/GSLB\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nesoy.github.io/articles/2020-01/GSLB</a></li>\n<li><a href=\"https://blog.naver.com/n_cloudplatform/221206343859\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.naver.com/n_cloudplatform/221206343859</a></li>\n<li><a href=\"https://www.joinc.co.kr/w/man/12/GSLB\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.joinc.co.kr/w/man/12/GSLB</a></li>\n<li><a href=\"https://cloud.kt.com/portal/ktcloudportal.epc.productintro.gslb.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cloud.kt.com/portal/ktcloudportal.epc.productintro.gslb.html</a></li>\n<li><a href=\"https://cwiki.apache.org/confluence/display/CLOUDSTACK/GSLB+%28Global+Server+Load+Balancing%29+Functional+specification+and+Design+Document\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cwiki.apache.org/confluence/display/CLOUDSTACK/GSLB+%28Global+Server+Load+Balancing%29+Functional+specification+and+Design+Document</a></li>\n<li><a href=\"https://www.netmanias.com/ko/post/blog/5620/dns-data-center-gslb-network-protocol/global-server-load-balancing-for-enterprise-part-1-concept-workflow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.netmanias.com/ko/post/blog/5620/dns-data-center-gslb-network-protocol/global-server-load-balancing-for-enterprise-part-1-concept-workflow</a></li>\n<li><a href=\"https://cloud.kt.com/portal/ktcloudportal.epc.productintro.gslb.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cloud.kt.com/portal/ktcloudportal.epc.productintro.gslb.html</a></li>\n</ul>\n"}},{"node":{"title":"[DevOps] DevOps의 개념이란","path":"/00-devops-definition/","date":"9. January 2021","timeToRead":8,"description":"DevOps의 정의와 개념에 대해 정리합니다.","content":"<h1 id=\"devops\"><a href=\"#devops\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DevOps</h1>\n<p>말 그대로 DevOpsd에 대한 정리입니다. DevOps에 대한 이야기는 많이 들어보고, 어떠한 개발자들은 DevOps에 대해 꿈을 꾸고 업으로 하겠다는 이야기를 들은적이 있는데 정확하게 DevOps가 어떤 의미를 가지는 지에 대해 알아보기로 했습니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-devops-cicd/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CI/CD 개념 정리</a>)</li>\n</ul>\n<h2 id=\"devops의-정의\"><a href=\"#devops%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DevOps의 정의</h2>\n<p>DevOps는 개발(Dev)와 운영(Ops)의 합성어이며, 고객에게 지속적으로 가치를 제공하도록 지원하는 사람, 프로세스 및 기술의 합집합입니다. 이러한 DevOps는 어플리케이션과 서비스를 빠른 속도로 제공할 수 있습니다.</p>\n<p>DevOps는 개발, IT 운영, 품질 엔지니어링, 보안 등이 서로 조율하고 협업하여 더욱 안정적이고 뛰어난 제품을 생산할 수 있도록 지원합니다. 이러한 DevOps 방식과 문화를 통해 고객 요구 사항에 보다 효과적으로 대응하고 애플리케이션을 빌드하고, 비지니스 목표를 달성할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104084804-d574cc80-528d-11eb-8eb9-5f43614371d4.png\" alt=\"image\"></p>\n<p><code class=\"language-text\">개발자</code>는 새로운 것을 도입하여 기능을 향상 시키는 것을 목표로 하지만, <code class=\"language-text\">운영</code> 측면에서는 안전성을 최우선으로 여깁니다. 이를 잘 융합시키고 의사소통으로 원할하게하는 것이 <code class=\"language-text\">DevOps</code>이며, 이는 소프트웨어 개발 방법론 중 하나입니다.</p>\n<br/>\n<h2 id=\"devops의-이점\"><a href=\"#devops%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DevOps의 이점</h2>\n<p>DevOps는 다음과 같은 장점을 가집니다.</p>\n<h3 id=\"속도\"><a href=\"#%EC%86%8D%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>속도</h3>\n<ul>\n<li>작업 속도가 빨라지며 고객을 위해 더 빠르게 혁신합니다.</li>\n<li>시장 변화에 더 잘 적응하고 좀 더 효율적인 비지니스 성과를 창출합니다.</li>\n<li><strong>MSA와 CI/CD를 통해서 서비스를 주도적으로 운영하고 업데이트를 좀 더 빠르게 릴리스할 수 있습니다.</strong></li>\n</ul>\n<h3 id=\"신속한-제공\"><a href=\"#%EC%8B%A0%EC%86%8D%ED%95%9C-%EC%A0%9C%EA%B3%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>신속한 제공</h3>\n<ul>\n<li>릴리스의 빈도와 속도를 개선하여 제품을 더 빠르게 혁신하고 개선할 수 있습니다.</li>\n<li>CI/CD는 빌드에서 배포까지 release 프로세스를 자동화할 수 있습니다.</li>\n</ul>\n<h3 id=\"안정성\"><a href=\"#%EC%95%88%EC%A0%95%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>안정성</h3>\n<ul>\n<li>애플리케이션 업데이트와 인프라 변경의 품질을 통해 최종 사용자에게 좋은 경험을 지속적이고 안정적이게 제공합니다.</li>\n<li>CI/CD와 같은 방식을 통해 안전한지에 대해 테스트합니다.</li>\n<li>모니터링과 로깅 방식을 통해 실시간으로 성능에 대한 정보를 얻을 수 있습니다.</li>\n</ul>\n<h3 id=\"확장\"><a href=\"#%ED%99%95%EC%9E%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장</h3>\n<ul>\n<li>규모에 따라 인프라와 개발 프로세스를 운영 및 관릭합니다.</li>\n<li>자동화와 일관성이 지원되므로 위험을 줄이면서 복잡하고 변동성 있는 시스템을 효율적으로 관리할 수 있습니다.</li>\n<li>코드형 인프라를 사용하면 프로덕션 환경을 반복 가능하고 좀 더 효율적인 방식으로 관리할 수 있습니다.</li>\n</ul>\n<h3 id=\"협업-강화\"><a href=\"#%ED%98%91%EC%97%85-%EA%B0%95%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>협업 강화</h3>\n<ul>\n<li>주인의식 및 책임 가치를 강조하므로 DevOps 문화에서는 좀 더 효과적인 팀을 구축합니다.</li>\n<li>개발자와 운영팀은 긴밀하게 협력하고 많은 책임을 공유하며, 워크플로를 결합하여 비효율성을 줄이고 시간을 절약합니다,</li>\n</ul>\n<h3 id=\"보안\"><a href=\"#%EB%B3%B4%EC%95%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>보안</h3>\n<ul>\n<li>제어를 유지하고 규정을 준수하며 신속하게 진행할 수 있습니다.</li>\n<li>자동화된 규정 준수 정책, 세분화된 제어 및 구성 관리 기술을 사용함으로\\$써 보안을 유지하며 DevOps 모델을 도입할 수 있습니다.</li>\n<li>코드형 인프라와 코드형 정책을 사용하면 규모에 따라 규정 중수를 정의하고 추적할 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"devops의-특징\"><a href=\"#devops%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DevOps의 특징</h2>\n<h3 id=\"cross-functional-team\"><a href=\"#cross-functional-team\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cross Functional Team</h3>\n<p>서비스 기획부터 개발, 운영, 테스트, 배포 등 모든 제품 개발 프로세스를 하나의 팀에서 할 수 있도록 합니다.</p>\n<h3 id=\"widely-shared-metrics\"><a href=\"#widely-shared-metrics\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Widely Shared Metrics</h3>\n<p>서비스를 개발만 하는게 아니라 서비스가 운영에서 잘돌아가고 있는지, 사용자의 반응은 어떤지를 측정할 수 있는 기준을 제공합니다.</p>\n<h3 id=\"automating-repetitive-tasks\"><a href=\"#automating-repetitive-tasks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Automating repetitive tasks</h3>\n<p>반복적인 일들은 자동화합니다. CI/CD를 통해 빌드, 배포, 테스트의 프로세스를 자동화하여 생산적인 결과를 얻을 수 있습니다. 더 나아가서 자동화 툴을 통해 시스템 전체에 대한 이해가 높아집니다.</p>\n<h3 id=\"post-mortems\"><a href=\"#post-mortems\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Post mortems</h3>\n<p><strong>후처리</strong>의 의미를 가지고 있습니다. 장애나 이슈가 있을때, 그 결과를 팀원들과 공유해야합니다.</p>\n<h3 id=\"regular-release\"><a href=\"#regular-release\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Regular Release</h3>\n<p>짧은 주기의 정기 배포를 통해서 빠르게 서비스의 기능을 개선하고 고객들의 소리를 반영해서 나아가야합니다.</p>\n<br/>\n<h2 id=\"devops와-애플리케이션-수명-주기\"><a href=\"#devops%EC%99%80-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%88%98%EB%AA%85-%EC%A3%BC%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DevOps와 애플리케이션 수명 주기</h2>\n<p>DevOps는 계획, 개발, 제공, 운뎡 단계 전반에 걸쳐 애플리케이션 수명 주기에 영향을 줍니다. 각 단게는 서로 영향을 주며 단계가 특정 역할에 한정되지 않습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104085406-87ae9300-5292-11eb-87aa-f146c29a76c2.png\" alt=\"DevOps-Lifecycle\"></p>\n<ul>\n<li>\n<p>계획</p>\n<ul>\n<li>애플리케이션과 시스템의 특징 및 기능에 대해 아이디어를 도출합니다.</li>\n</ul>\n</li>\n<li>\n<p>개발</p>\n<ul>\n<li>팀원들이 코드를 작성하고 검토하고 통합하는 코딩의 모든 측면과 이 코드를 다양한 환경에 배포할 수 있는 빌드 아티팩트로 빌드하는 작업이 포함됩니다.</li>\n</ul>\n</li>\n<li>\n<p>제공</p>\n<ul>\n<li>일관성 있고 안정적인 방식으로 프로덕션 환경에 애플리케이션을 배포하는 과정을 의미합니다.</li>\n</ul>\n</li>\n<li>\n<p>운영</p>\n<ul>\n<li>프로덕션 환경에서 애플리케이션을 관리, 모니터링 및 문제 해결하는 작업이 이루어집니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"devops의-문화\"><a href=\"#devops%EC%9D%98-%EB%AC%B8%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DevOps의 문화</h2>\n<p>DevOps 방식을 도입하면 기술을 통해 프로세스를 자동화 및 최적화할 수 있습니다. 모든 것을 조직 내부의 문화에서 나아가 문화의 핵심적인 부분은 사람에게서 시작을 하고, 이러한 문화가 정착되어야합니다.</p>\n<ul>\n<li>\n<p>협업, 가시성 및 조율</p>\n<ul>\n<li>개발 팀, IT 운영 팀 등은 DevOps 프로세스의 우선 순위, 우려 사항을 다른 팀과 공유해야하며 효과적인 협업을 계획해야합니다.</li>\n</ul>\n</li>\n<li>\n<p>팀 역할 범위와 책임의 변환</p>\n<ul>\n<li>주인의식을 가지고 관여해야합니다.</li>\n</ul>\n</li>\n<li>\n<p>짧은 릴리스 주기</p>\n<ul>\n<li>짧은 릴리스를 통해 민첩성을 유지합니다.</li>\n<li>고객 요구 사항과 경쟁사의 압박에 유연하게 대응가능합니다.</li>\n</ul>\n</li>\n<li>지속적인 학습</li>\n</ul>\n<br/>\n<h2 id=\"devops에-대해-공부하겠다면\"><a href=\"#devops%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B2%A0%EB%8B%A4%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DevOps에 대해 공부하겠다면?</h2>\n<p>배포와 서버, DevOps에 대해 다음과 같은 내용을 공부하면 좋습니다. (약간 주제에 어긋날 수도 있지만.)</p>\n<ul>\n<li>\n<p>Hosting Platforms</p>\n<ul>\n<li><strong>Heroku, AWS, Azure</strong>, Digital Ocean</li>\n</ul>\n</li>\n<li>\n<p>Web Servers</p>\n<ul>\n<li><strong>Nginx, Apache</strong></li>\n</ul>\n</li>\n<li>\n<p>Container</p>\n<ul>\n<li><strong>Docker, Kubernetes</strong>, Vagrant</li>\n</ul>\n</li>\n<li>\n<p>Image/Video</p>\n<ul>\n<li>Cloudinary, S3</li>\n</ul>\n</li>\n<li>\n<p>CI / CD</p>\n<ul>\n<li><strong>Jenkins</strong>, Travis CI, Circle CI</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>간단하게 DevOps에 대해 정리해보았습니다. DevOps에 대한 개념은 이후에 공부하는 다양한 기술 들에 밑바탕이 되는 지식이라고 생각합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://aws.amazon.com/ko/devops/what-is-devops/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aws.amazon.com/ko/devops/what-is-devops/</a></li>\n<li><a href=\"https://azure.microsoft.com/ko-kr/overview/what-is-devops/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://azure.microsoft.com/ko-kr/overview/what-is-devops/</a></li>\n<li><a href=\"https://simsimjae.medium.com/devops%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-c50f4d86666b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://simsimjae.medium.com/devops%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-c50f4d86666b</a></li>\n</ul>\n"}},{"node":{"title":"[DevOps] CI와 CD란?","path":"/00-devops-ci-cd/","date":"9. January 2021","timeToRead":6,"description":"CI와 CD의 개념을 이해햡니다.","content":"<h1 id=\"cicd\"><a href=\"#cicd\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI/CD</h1>\n<p>DevOps에 대해 개념에 듣다 보면, CI와 CD에 대해 듣게 됩니다. 이때 CI와 CD의 개념에 대해 한번 정리해볼려고합니다.</p>\n<h2 id=\"cicd의-개념\"><a href=\"#cicd%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI/CD의 개념</h2>\n<p>CD/CD는 <strong>Continuous Integration (지속적인 통합) / Continuous Delivery or Continuous Deployment (지속적인 전달/지속적인 배포)</strong> 의 약자입니다. 이러한 CI/CD는 <strong>애플리케이션 개발 단게를 자동화하여 애플리케이션보다 짧은 주기로 고객에게 제공하는 방법</strong>입니다. CD/CD의 기본 개념은 <strong>지속적인 통합, 지속적인 서비스 제공, 지속적인 배포</strong>입니다. CI/CD는 새로운 코드 통합을 통해 개발 및 운영에서 발생하는 인테그레이션 헬(Integration hell)을 해결하기 위한 솔루션입니다.</p>\n<p>CI/CD는 애플리케이션의 통합 및 테스트 단게에서부터 제공 및 배포에 이르는 애플리케이션의 라이프사이클 전체에 걸쳐 지속적인 자동화와 지속적인 모니터링을 제공합니다. 이러한 구축 사례를 <strong>CI/CD 파이프라인</strong>이라 부르며, 개발과 운영팀의 애자빌 방싱 협력을 통해서 지원됩니다.</p>\n<p>Tip) CD는 Continuous Delivery 와 Continuous Deployment 로 두 의미를 가집니다.</p>\n<br/>\n<h2 id=\"ci와-cd의-차이\"><a href=\"#ci%EC%99%80-cd%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI와 CD의 차이?</h2>\n<p>CI와 CD는 커버하는 프로세스의 범위에서 차이가 있습니다. <code class=\"language-text\">CI</code>는 <strong>코드 레벨의 테스트까지 자동화</strong>하며, <code class=\"language-text\">CD</code>는 <strong>시스템 테스트 및 배포 등 실행 환경과 릴리즈까지 자동화</strong>합니다.</p>\n<p>CI/CD을 적용해서 품질 향상과 개발 효율성을 올려주고 릴리즈 하는 기간을 단축합니다. 최근 비지니스의 변화가 빨라지기 때문에, 시스템과 서비스를 신속하게 변화해야하는 필요성이 있기 때문에 CI/CD를 적용해야할 필요가 있습니다.</p>\n<br/>\n<h2 id=\"cicd의-단계\"><a href=\"#cicd%EC%9D%98-%EB%8B%A8%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI/CD의 단계.</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/104083040-7eb3c680-527e-11eb-8865-a395f4e58df7.png\" alt=\"CI-CD-Diff\"></p>\n<h3 id=\"1-continuous-integration-지속적-통합\"><a href=\"#1-continuous-integration-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Continuous Integration (지속적 통합)</h3>\n<p>개발자가 애플리케이션에 적용한 변경 사항이 병합되면 이러한 변경 사항이 애플리케이션을 손상시키지 않도록 자동으로 애플리케이션을 구축하고 각기 다른 레벨의 자동화 테스트(일반적으로 단위 테스트 및 통합 테스트) 실행을 통해 변경 사항이 애플리케이션에 제대로 적용되었는지를 확인합니다.</p>\n<h3 id=\"2-continuous-delivery-지속적-제공\"><a href=\"#2-continuous-delivery-%EC%A7%80%EC%86%8D%EC%A0%81-%EC%A0%9C%EA%B3%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Continuous Delivery (지속적 제공)</h3>\n<p>CI의 빌드 자동화, 유닛 및 통합 테스트 수행 후, 이어지는 지속적 제공 프로세스에서는 유효한 코드를 리포지토리에 자동으로 릴리스합니다.</p>\n<h3 id=\"3-continuous-deployment-지속적-배포\"><a href=\"#3-continuous-deployment-%EC%A7%80%EC%86%8D%EC%A0%81-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Continuous Deployment (지속적 배포)</h3>\n<p>프로덕션 준비가 완료된 빌드를 코드 리포지토리에 자동으로 릴리스하는 지속적 제공의 확장된 형태인 지속적 배포는 애플리케이션을 프로덕션으로 릴리스하는 작업을 자동화합니다.</p>\n<br/>\n<h2 id=\"ci와-cd의-단계\"><a href=\"#ci%EC%99%80-cd%EC%9D%98-%EB%8B%A8%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI와 CD의 단계</h2>\n<h3 id=\"ci지속적인-통합의-장점\"><a href=\"#ci%EC%A7%80%EC%86%8D%EC%A0%81%EC%9D%B8-%ED%86%B5%ED%95%A9%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI(지속적인 통합)의 장점</h3>\n<p>CI에서는 개발자가 자신이 변경한 코드를 저장소에 커밋하고 그때마다 자동화 된 빌드와 테스트가 실행합니다. 이 짧은 사이클로 통합을 반복하면서 통합시 발생된 오류를 신속하게 수정하여 개발팀은 통합된 소프트웨어를 신속하게 개발할 수 있습니다.</p>\n<p>다음과 같은 특징을 가집니다.</p>\n<ul>\n<li>\n<p>버그를 신속하게 발견하고 대응 가능합니다.</p>\n<ul>\n<li>테스트를 자주 발생하기 때문에, 버그를 빠르게 발견하고 해결할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>신속한 업데이트와 배포가 가능합니다.</p>\n<ul>\n<li>항상 최신 버전을 유지하여 이를 바탕으로 업데이트를 배포할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>개발의 생산성이 향상됩니다.</p>\n<ul>\n<li>일찍 적은 비용으로 오류를 해결할 수 있기 때문에 생산성을 향상시키고 품질이 좋은 소프트웨어에 개발할 수 있게됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cd지속적인-전달의-장점\"><a href=\"#cd%EC%A7%80%EC%86%8D%EC%A0%81%EC%9D%B8-%EC%A0%84%EB%8B%AC%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CD(지속적인 전달)의 장점</h3>\n<p>CD는 클라우드와 컨테이너 기술의 확산과 인프라를 코드로 관리할 수 있게 되면서 등장하였습니다. 이를 통해 소스 커밋부터 릴리즈까지 모든 작업을 자동으로 수행할 수 있습니다.</p>\n<p>다음과 같은 특징을 가집니다.</p>\n<ul>\n<li>\n<p>소프트웨어 릴리스 프로세스 자동화할 수 있습니다.</p>\n<ul>\n<li>CD에서는 개발 코드를 변경, 빌드, 테스트, 운영 환경 릴리스에 대한 준비가 자동화됩니다.</li>\n</ul>\n</li>\n<li>\n<p>개발자 생산성 향상할 수 있습니다.</p>\n<ul>\n<li>수작업을 줄여서 생산성이 향상됩니다.</li>\n</ul>\n</li>\n<li>\n<p>버그를 신속하게 발견하고 대응할 수 있습니다.</p>\n<ul>\n<li>테스트의 빈도를 높이고 내용을 충실하게 하여 버그를 조기에 발견하고 해결할 수 잇습니다.</li>\n</ul>\n</li>\n<li>신속한 업데이트와 배포가 가능합니다.</li>\n</ul>\n<br/>\n<h2 id=\"cicd-지원-툴\"><a href=\"#cicd-%EC%A7%80%EC%9B%90-%ED%88%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CI/CD 지원 툴</h2>\n<ul>\n<li>Jenkins</li>\n<li>Travis</li>\n<li>CicleCI</li>\n<li>Bamboo</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>다음글에는 대표적인 CI/CD 지원 툴인 Jenkins에 대해 한번 정리해보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"http://www.opennaru.com/cloud/ci-cd/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.opennaru.com/cloud/ci-cd/</a></li>\n<li><a href=\"https://www.redhat.com/ko/topics/devops/what-is-ci-cd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.redhat.com/ko/topics/devops/what-is-ci-cd</a></li>\n</ul>\n"}}]}}},"context":{}}