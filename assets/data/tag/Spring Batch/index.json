{"hash":"40cbc053d2b1d239e475a5f7164f96d1d94c070f","data":{"tag":{"title":"Spring Batch","belongsTo":{"edges":[{"node":{"title":"[Spring] Spring Batch 개념 잡기","path":"/01-spring-batch/","date":"23. February 2022","timeToRead":9,"description":"Spring Batch에 대한 기본 개념에 대해 정리합니다.","content":"<h1 id=\"spring-batch-개념-잡기\"><a href=\"#spring-batch-%EA%B0%9C%EB%85%90-%EC%9E%A1%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 개념 잡기</h1>\n<p>스프링 배치에 대한 기본 개념을 잘 이해하지 못하고 있음을 느껴 이에 따라 정리합니다. 정확히는 Spring Rest API와의 정확한 차이를 모른다는 생각이 들었습니다.</p>\n<br/>\n<h2 id=\"spring-batch란\"><a href=\"#spring-batch%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch란.</h2>\n<ul>\n<li>배치 프로세싱은 <strong>일괄처리</strong>라는 뜻을 가지고 있으며, 일괄처리의 의미는 일련의 작업을 정해진 로직으로 수행하는 것입니다.</li>\n<li>스프링 배치는 <strong>로깅/추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작, 건너뛰기, 리소스 관리 등 대용량 레코드 처리에 필수적인 기능을 제공</strong>합니다.</li>\n<li>최적화 및 파티셔닝 기술을 통해 대용량 및 고성능 배치 작업을 가능하게 하는 고급 기술 서비스 및 기능을 제공합니다.</li>\n<li>Spring Batch에서 배치가 실패하여 작업 재시작을 하게 된다면 처음부터가 아닌 실패한 지점부터 실행을 합니다.</li>\n<li>중복 실행을 막기 위해 성공한 이력이 있는 Batch는 동일한 Parameters로 실행 시 Exception이 발생합니다.</li>\n</ul>\n<h3 id=\"일괄처리가-필요한-경우\"><a href=\"#%EC%9D%BC%EA%B4%84%EC%B2%98%EB%A6%AC%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>일괄처리가 필요한 경우</h3>\n<ul>\n<li>대용량의 비지니스 데이터를 복잡한 작업으로 처리해야하는 경우</li>\n<li>특정한 시점에 스케줄러를 통해 자동화된 작업이 필요한 경우</li>\n<li>대용량 데이터의 포맷을 변경, 유효성 검사 등의 작업을 트랜잭션 안에서 처리 후 기록해야하는 경우</li>\n</ul>\n<h3 id=\"batch-vs-quartz\"><a href=\"#batch-vs-quartz\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Batch VS Quartz</h3>\n<ul>\n<li>Spring Batch는 Scheduler가 아니기에 비교 대상이 아닙니다.</li>\n<li>Spring Batch는 Batch Job을 관리하지만 Job을 구동하거나 실행시키는 기능은 지원하고 있지 않습니다.</li>\n<li>Spring에서 Batch Job을 실행시키기 위해서는 Quartz, Scheduler, Jenkins 등 전용 Scheduler를 사용하여야 합니다.</li>\n</ul>\n<p><a href=\"https://homoefficio.github.io/2019/09/28/Quartz-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC-%EC%A0%81%EC%9A%A9-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B0%9C%EC%84%A0-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quartz Scheduler</a></p>\n<br/>\n<h2 id=\"spring-batch-원칙-및-가이드\"><a href=\"#spring-batch-%EC%9B%90%EC%B9%99-%EB%B0%8F-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 원칙 및 가이드</h2>\n<ul>\n<li><strong>배치와 서비스에 영향</strong>을 최소화할 수 있도록 구조와 환경에 맞게 디자인합니다.</li>\n<li>배치 어플리케이션 내에서 가능한한 복잡한 로직은 피하고 <strong>단순</strong>하게 설계합니다.</li>\n<li>데이터 처리하는 곳과 데이터의 저장소는 물리적으로 가능한한 가까운 곳에 위치하게 합니다.</li>\n<li>I/O 등의 <strong>시스템 리소스의 사용을 최소화</strong>하고 최대한 많은 데이터를 메모리 위에서 처리합니다.</li>\n<li>처리 시간이 많이 걸리는 작업을 시작하기 전에 메모리 재할당에 소모되는 시간을 피하기 위해 충분한 메모리를 할당합니다.</li>\n<li>데이터 무결성을 위해서 적절한 <strong>검사 및 기록</strong>하는 코드를 추가합니다.</li>\n</ul>\n<br/>\n<h2 id=\"spring-batch의-3가지-레이어\"><a href=\"#spring-batch%EC%9D%98-3%EA%B0%80%EC%A7%80-%EB%A0%88%EC%9D%B4%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch의 3가지 레이어</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/155138569-34e5e8e7-d474-47a3-b572-e3cffa7be069.png\" alt=\"Spring-Batch-3가지-레이어\"></p>\n<ul>\n<li>Application : 개발자가 작성한 모든 배치 작업과 사용자 정의 코드 포함</li>\n<li>\n<p>Batch Core : 배치 작업을 시작하고 제어하는데 필요한 핵심 런타임 클래스 포함</p>\n<ul>\n<li>JobLauncher, Job, Step</li>\n</ul>\n</li>\n<li>Batch Infrastructure : 개발자와 어플리케이션에서 사용하는 일반적인 Reader와 Writer 그리고</li>\n</ul>\n<blockquote>\n<p>스프링 배치는 계층 구조가 이와 같이 설계되어 있어 Application 계층에서 비지니스 로직을 집중하고 Batch Core에 있는 클래스들을 이용해 제어할 수 있습니다.</p>\n</blockquote>\n<br/>\n<h2 id=\"spring-batch-job-구성-및-개념\"><a href=\"#spring-batch-job-%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch Job 구성 및 개념</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/155139624-20d39950-44c3-4073-acf2-9b0116ee7220.png\" alt=\"spring-job-step\"></p>\n<h3 id=\"job\"><a href=\"#job\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Job</h3>\n<ul>\n<li>배치처리 과정을 하나의 단위로 만들어놓은</li>\n<li>배치처리 과정에 있어 전체 계층 최상단에 위치합니다.</li>\n</ul>\n<h3 id=\"jobinstance\"><a href=\"#jobinstance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobInstance</h3>\n<ul>\n<li>Job의 실행 단위</li>\n<li>2/23일, 2/24일 실행 시 각각의 JobInstance가 생성됩니다.</li>\n<li>앞서 이야기한것 처럼 2/23 실행 실패시 2/23에 대한 데이터만 처리하게 됩니다.</li>\n</ul>\n<h3 id=\"jobparameters\"><a href=\"#jobparameters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobParameters</h3>\n<ul>\n<li>JobInstance를 구별할 때 사용합니다.</li>\n<li>String, Double, Long, Date 4가지 형식을 지원합니다,</li>\n</ul>\n<h3 id=\"jobexecution\"><a href=\"#jobexecution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobExecution</h3>\n<ul>\n<li>JobInstance에 대한 실행 시도에 대한 객체입니다.</li>\n<li>실패하여 재실행 시킨 경우 동일한 JobInstance이나 2번 실행에 대한 JobExecution은 개별로 생기게 됩니다.</li>\n<li>JobInstanced 실행에 대한 상태, 시작시간, 종료시간, 생성시간 등의 정보를 담습니다.</li>\n</ul>\n<h3 id=\"step\"><a href=\"#step\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step</h3>\n<ul>\n<li>Job의 배치 처리를 정의하고 순차적인 단계를 캡슐화합니다.</li>\n<li>Job은 최소한 1개 이상의 Step을 가져야 하며 Job의 실제 일괄처리를 제어하는 모든 정보가 들어있습니다.</li>\n</ul>\n<h3 id=\"stepexecution\"><a href=\"#stepexecution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>StepExecution</h3>\n<ul>\n<li>Step 실행 시도에 대한 객체입니다.</li>\n<li>이전 단계의 Step이 실패하면 StepExecution은 생성되지 않습니다.</li>\n<li>실제 시작이 될 때만 생성됩니다.</li>\n<li>StepExecution은 JobExecution에 저장되는 정보 외에 read 수, write 수, commit 수, skip 수 등의 정보들이 저장됩니다.</li>\n</ul>\n<h3 id=\"executioncontext\"><a href=\"#executioncontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ExecutionContext</h3>\n<ul>\n<li>Job에서 데이터를 공유 할 수 있는 데이터 저장소</li>\n<li>Spring Batch에서 제공하는 ExecutionContext는 JobExecutionContext, StepExecutionContext 2가지 종류가 있으나 이 두가지는 지정되는 범위가 다릅니다.</li>\n<li>JobExecutionContext의 경우 Commit 시점에 저장되는 반면 StepExecutionContext는 실행 사이에 저장이 되게 됩니다.</li>\n<li>ExecutionContext를 통해 Step간 Data 공유가 가능하며 Job 실패시 ExecutionContext를 통한 마지막 실행 값을 재구성할 수 있습니다.</li>\n</ul>\n<h3 id=\"jobrepository\"><a href=\"#jobrepository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobRepository</h3>\n<ul>\n<li>위의 모든 배치 처리 정보를 담고있는 매커니즘</li>\n<li>Job이 실행되게 되면 JobRepository에 JobExecution과 StepExecution을 생성하게 되며 JobRepository에서 Execution 정보들을 저장하고 조죄하며 사용하게 됩니다.</li>\n</ul>\n<h3 id=\"joblauncher\"><a href=\"#joblauncher\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JobLauncher</h3>\n<ul>\n<li>JobLauncher는 Job과 JobParameters를 사용하여 Job을 실행하는 객체입니다.</li>\n</ul>\n<h3 id=\"itemreader\"><a href=\"#itemreader\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ItemReader</h3>\n<ul>\n<li>Step에서 Item을 읽어오는 인터페이스</li>\n<li>ItemReader에 대한 다양한 인터페이스가 존재하며 다양한 방법으로 Item을 읽어올 수 있습니다.</li>\n</ul>\n<h3 id=\"itemwriter\"><a href=\"#itemwriter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ItemWriter</h3>\n<ul>\n<li>처리된 Data를 Writer할 때 사용합니다.</li>\n<li>처리 결과물에 따라 Insert, Update, Queue의 Send 등이 될 수 있습니다.</li>\n<li>기본적으로 Item을 Chunk로 묶어 처리하고 있습니다.</li>\n</ul>\n<h3 id=\"itemprocessor\"><a href=\"#itemprocessor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ItemProcessor</h3>\n<ul>\n<li>Reader에서 읽어온 Item을 데이터 처리하는 역할을 합니다.</li>\n<li>Processor는 배치를 처리하는데 필수 요소는 아니며 Reader, Writer, Processor 처리를 분리하여 각각의 역할을 명확하게 구분합니다.</li>\n</ul>\n<br/>\n<h2 id=\"spring-batch-장점\"><a href=\"#spring-batch-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 장점</h2>\n<ul>\n<li>\n<p>유지보수성</p>\n<ul>\n<li>배치는 다른 어플리케이션의 코드들보다 수명이 깁니다.</li>\n<li>테스트 용이성, 풍부한 API</li>\n</ul>\n</li>\n<li>\n<p>유연성</p>\n<ul>\n<li>JVM을 이용한 이식성 (기존의 코볼, C++ 등과 비교했을 때)</li>\n<li>코드 공유능력 (POJO 재활용 등)</li>\n</ul>\n</li>\n<li>\n<p>확장성</p>\n<ul>\n<li>과거의 메인프레임 방식이나, 커스텀하게 처리하던 방식은 병렬 처리르 하려면 고려할게 많아 확장성과 안정성이 떨어집니다.</li>\n<li>자바(or 스프링) 배치는 단일 처리, 병력 처리 등이 모두 가능합니다.</li>\n</ul>\n</li>\n<li>\n<p>개발인력</p>\n<ul>\n<li>자바, 스프링 프레임워크를 기반</li>\n<li>커뮤니티의 강력한 지원</li>\n</ul>\n</li>\n<li>\n<p>비용</p>\n<ul>\n<li>오픈소스</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"배치-프레임워크-중-스프링-배치를-쓰면-얻는-장점은\"><a href=\"#%EB%B0%B0%EC%B9%98-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EC%A4%91-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B0%B0%EC%B9%98%EB%A5%BC-%EC%93%B0%EB%A9%B4-%EC%96%BB%EB%8A%94-%EC%9E%A5%EC%A0%90%EC%9D%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배치 프레임워크 중 스프링 배치를 쓰면 얻는 장점은?</h3>\n<ul>\n<li>\n<p>ETL(추출=extract - 변환=transform - 적재=load) 패턴에 적합합니다.</p>\n<ul>\n<li>청크 기반 처리</li>\n<li>다양한 확장 기능</li>\n</ul>\n</li>\n<li>\n<p>데이터 마이그레이션</p>\n<ul>\n<li>보통 1회성으로 대충 만들 가능성이 높으나, 스프링 배치를 사용한다면, 풍부한 지원(커밋수, 롤백 등)</li>\n</ul>\n</li>\n<li>병렬 처리</li>\n<li>\n<p>워크로드 조정</p>\n<ul>\n<li>Spring Cloud Data Flow 등을 통해 GUI로 테스크 조정 등</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>Spring Batch에 대한 예제는 다음 글에서 정리합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-batch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Batch Github Repository</a></li>\n<li><a href=\"https://www.fwantastic.com/2019/12/spring-batch-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intro - 스프링 배치 기본 개념 익히기</a></li>\n<li><a href=\"https://www.fwantastic.com/2019/12/spring-batch-1-hello-world.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">스프링 배치 강좌 1. 프로그래밍의 꽃. 스프링 배치 Hello World!</a></li>\n<li><a href=\"https://khj93.tistory.com/entry/Spring-Batch%EB%9E%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Batch란? 이해하고 사용하기(예제소스 포함)</a></li>\n<li><a href=\"https://deeplify.dev/back-end/spring/batch-tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Batch 소개와 간단한 예제</a></li>\n<li><a href=\"https://jojoldu.tistory.com/324\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">배치 어플리케이션이란?</a></li>\n<li><a href=\"https://sjh836.tistory.com/187\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1장 배치와 스프링</a></li>\n<li><a href=\"https://sjh836.tistory.com/188?category=680970\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2장 스프링 배치</a></li>\n</ul>\n"}}]}}},"context":{}}