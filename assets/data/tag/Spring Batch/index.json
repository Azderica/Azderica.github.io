{"hash":"c252e7650a6691103be74bcadb51dd243a8d98c2","data":{"tag":{"title":"Spring Batch","belongsTo":{"edges":[{"node":{"title":"[Spring] Spring Batch 개념 잡기","path":"/01-spring-batch/","date":"22. February 2022","timeToRead":4,"description":"Spring Batch에 대한 기본 개념에 대해 정리합니다.","content":"<h1 id=\"spring-batch-개념-잡기\"><a href=\"#spring-batch-%EA%B0%9C%EB%85%90-%EC%9E%A1%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 개념 잡기</h1>\n<p>스프링 배치에 대한 기본 개념을 잘 이해하지 못하고 있음을 느껴 이에 따라 정리합니다. 정확히는 Spring Rest API와의 정확한 차이를 모른다는 생각이 들었습니다.</p>\n<br/>\n<h2 id=\"spring-batch란\"><a href=\"#spring-batch%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch란.</h2>\n<ul>\n<li>스프링 배치는 <strong>로깅/추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작, 건너뛰기, 리소스 관리 등 대용량 레코드 처리에 필수적인 기능을 제공</strong>합니다.</li>\n<li>최적화 및 파티셔닝 기술을 통해 대용량 및 고성능 배치 작업을 가능하게 하는 고급 기술 서비스 및 기능을 제공합니다.</li>\n<li>Spring Batch에서 배치가 실패하여 작업 재시작을 하게 된다면 처음부터가 아닌 실패한 지점부터 실행을 합니다.</li>\n<li>중복 실행을 막기 위해 성공한 이력이 있는 Batch는 동일한 Parameters로 실행 시 Exception이 발생합니다/</li>\n</ul>\n<h3 id=\"batch-vs-quartz\"><a href=\"#batch-vs-quartz\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Batch VS Quartz</h3>\n<ul>\n<li>Spring Batch는 Scheduler가 아니기에 비교 대상이 아닙니다.</li>\n<li>Spring Batch는 Batch Job을 관리하지만 Job을 구동하거나 실행시키는 기능은 지원하고 있지 않습니다.</li>\n<li>Spring에서 Batch Job을 실행시키기 위해서는 Quartz, Scheduler, Jenkins 등 전용 Scheduler를 사용하여야 합니다.</li>\n</ul>\n<br/>\n<h2 id=\"spring-batch의-3가지-레이어\"><a href=\"#spring-batch%EC%9D%98-3%EA%B0%80%EC%A7%80-%EB%A0%88%EC%9D%B4%EC%96%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch의 3가지 레이어</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/155138569-34e5e8e7-d474-47a3-b572-e3cffa7be069.png\" alt=\"Spring-Batch-3가지-레이어\"></p>\n<ul>\n<li>애플리케이션 : 개발자가 작성한 비즈니스 로직</li>\n<li>\n<p>코어 : 배치 도메인을 정의하는 모든 부분</p>\n<ul>\n<li>Job, Step 등</li>\n</ul>\n</li>\n<li>\n<p>인프라스트럭처 : 각종 reader, writer, 템플릿, 헬퍼</p>\n<ul>\n<li>IO 다루기</li>\n<li>Job 실패 시 정책</li>\n</ul>\n</li>\n<li>배치 프레임워크 내에는 스케줄링 기능이 없습니다.</li>\n</ul>\n<br/>\n<h2 id=\"spring-batch-job-구성-및-개념\"><a href=\"#spring-batch-job-%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch Job 구성 및 개념</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/155139624-20d39950-44c3-4073-acf2-9b0116ee7220.png\" alt=\"spring-job-step\"></p>\n<br/>\n<h2 id=\"spring-batch-장점\"><a href=\"#spring-batch-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 장점</h2>\n<ul>\n<li>\n<p>유지보수성</p>\n<ul>\n<li>배치는 다른 어플리케이션의 코드들보다 수명이 길다.</li>\n<li>테스트 용이성, 풍부한 API</li>\n</ul>\n</li>\n<li>\n<p>유연성</p>\n<ul>\n<li>JVM을 이용한 이식성 (기존의 코볼, C++ 등과 비교했을 때)</li>\n<li>코드 공유능력 (POJO 재활용 등)</li>\n</ul>\n</li>\n<li>\n<p>확장성</p>\n<ul>\n<li>과거의 메인프레임 방식이나, 커스텀하게 처리하던 방식은 병렬 처리르 하려면 고려할게 많음, 확장성과 안정성이 떨어짐</li>\n<li>자바(or 스프링) 배치는 단일 처리, 병력 처리 등이 모두 가능함.</li>\n</ul>\n</li>\n<li>\n<p>개발인력</p>\n<ul>\n<li>자바, 스프링 프레임워크를 기반</li>\n<li>커뮤니티의 강력한 지원</li>\n</ul>\n</li>\n<li>\n<p>비용</p>\n<ul>\n<li>오픈소스</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"배치-프레임워크-중-스프링-배치를-쓰면-얻는-장점은\"><a href=\"#%EB%B0%B0%EC%B9%98-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EC%A4%91-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B0%B0%EC%B9%98%EB%A5%BC-%EC%93%B0%EB%A9%B4-%EC%96%BB%EB%8A%94-%EC%9E%A5%EC%A0%90%EC%9D%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배치 프레임워크 중 스프링 배치를 쓰면 얻는 장점은?</h3>\n<ul>\n<li>\n<p>ETL(추출=extract - 변환=transform - 적재=load) 패턴에 적합</p>\n<ul>\n<li>청크 기반 처리</li>\n<li>다양한 확장 기능</li>\n</ul>\n</li>\n<li>\n<p>데이터 마이그레이션</p>\n<ul>\n<li>보통 1회성으로 대충 만들 가능성이 높으나, 스프링 배치를 사용한다면, 풍부한 지원(커밋수, 롤백 등)</li>\n</ul>\n</li>\n<li>병렬 처리</li>\n<li>\n<p>워크로드 조정</p>\n<ul>\n<li>Spring Cloud Data Flow 등을 통해 GUI로 테스크 조정 등</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"spring-batch-예제\"><a href=\"#spring-batch-%EC%98%88%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring Batch 예제</h2>\n<ul>\n<li>일매출 집계</li>\n<li>ERP 연동</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-batch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Batch Github Repository</a></li>\n<li><a href=\"https://www.fwantastic.com/2019/12/spring-batch-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intro - 스프링 배치 기본 개념 익히기</a></li>\n<li><a href=\"https://www.fwantastic.com/2019/12/spring-batch-1-hello-world.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">스프링 배치 강좌 1. 프로그래밍의 꽃. 스프링 배치 Hello World!</a></li>\n<li><a href=\"https://khj93.tistory.com/entry/Spring-Batch%EB%9E%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Batch란? 이해하고 사용하기(예제소스 포함)</a></li>\n<li><a href=\"https://deeplify.dev/back-end/spring/batch-tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Batch 소개와 간단한 예제</a></li>\n<li><a href=\"https://jojoldu.tistory.com/324\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">배치 어플리케이션이란?</a></li>\n<li><a href=\"https://sjh836.tistory.com/187\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1장 배치와 스프링</a></li>\n<li><a href=\"https://sjh836.tistory.com/188?category=680970\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2장 스프링 배치</a></li>\n</ul>\n"}}]}}},"context":{}}