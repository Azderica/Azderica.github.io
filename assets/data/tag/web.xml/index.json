{"hash":"4d08d5d9909bc52ba8ae53ab8b5e8ea790bc2d53","data":{"tag":{"title":"web.xml","belongsTo":{"edges":[{"node":{"title":"[Java] url-pattern이란","path":"/00-java-urlpattern/","date":"3. November 2020","timeToRead":3,"description":"url-pattern에 대해 정리합니다.","content":"<h1 id=\"java-servlet--url-pattern-이란\"><a href=\"#java-servlet--url-pattern-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Servlet : url-pattern 이란</h1>\n<p>url-pattern은 자바 서블릿 개발을 진행하다보면, 한번은 꼭 보게 되는 것 같다. 그러나, 한번도 제대로 정리해본적이 없어서, 이를 제대로 한 번 알아보고 싶어졌다.</p>\n<br/>\n<h2 id=\"url-pattern의-정의\"><a href=\"#url-pattern%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>url-pattern의 정의</h2>\n<p>서블릿을 생성하고 서블릿을 매핑을 시킨다. 서블릿을 사용하면 주소에 경로가 뜨기 때문에 이는 보안에 굉장히 취약하다. 그래서 특정한 단어로 매핑을 시킨다.</p>\n<p><strong>url-patten은 실제 서블릿 매핑 이름을 의미한다. 서블릿 매핑 시 사용되는 가상의 이름이며 클라이언트가 브라우저에게 요청할 때, 사용할 때는 반드시 '/'(슬래시)로 시작한다.</strong></p>\n<p>서블릿 매핑 이름으로 사용되는 URL 패턴의 종류는 정확히 이름까지 일치하는지, 디렉토리까지 일치하는지, 확장자만 일치하는지로 세가지로 구별된다.</p>\n<br/>\n<h2 id=\"url-pattern의-종류\"><a href=\"#url-pattern%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>url-pattern의 종류</h2>\n<p>url-pattern의 패턴은 3가지로 구성되지만, 이 자리에서는 디렉토리 패턴과 확장자 패턴에 대해 이야기 해보겠습니다. 정확히 일치하는 패턴의 경우는 말 그대로 <code class=\"language-text\">WebServlet(&#39;정확한/주소/URL/패턴&#39;)</code>으로 요청할 때만 실행된다.</p>\n<h3 id=\"디렉토리-패턴\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>디렉토리 패턴</h3>\n<p>디렉토리 패턴은 디렉토리 형태로 서버의 해당 컴포넌트를 찾아서 실행하는 구조입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/98429019-98eaf000-20e7-11eb-9f3f-3de334e29015.png\" alt=\"image\"></p>\n<p>서블릿 코드는 다음과 같이 작성할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/*\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestServlet1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Code...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다음 예시 코드는 /test/ 디렉토리로 시작되는 요청에 대해 실행됩니다.</li>\n</ul>\n<h3 id=\"확장자-패턴\"><a href=\"#%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장자 패턴</h3>\n<p>확장자 패턴은 확장자 형태로 서버의 해당 컴포넌트를 찾아서 실행하는 구조입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/98429024-9dafa400-20e7-11eb-840a-0166bf5c0236.png\" alt=\"image\"></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestServlet2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Code...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>다음 예시 코드는 매핑 이름에 상관없이 확장자가 .me 이면 실행됩니다.</li>\n</ul>\n<blockquote>\n<p>추가적으로 일반적으로 <code class=\"language-text\">/test/example.me</code>와 같이 요청이 들어온 경우, 앞의 디렉토리 이름을 우선시 하여 <strong>TestServlet1</strong>이 실행되며, <code class=\"language-text\">/없는디렉토리/example.me</code>의 요청의 경우에는 없는 디렉토리이므로 <strong>.me</strong>을 우선시하여 TestServlet2가 실행된다.</p>\n</blockquote>\n<br/>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h2>\n<p>이후에 서블릿이나, 좀 더 상세하게 정리할 수 있는 기회가 되면 정리하겠다.</p>\n<p>최근 업무가 많아져서... 블로그 작성할 시간이 부족해지는 것을 느낀다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://windorsky.tistory.com/entry/%EC%84%9C%EB%B8%94%EB%A6%BF-URL-pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://windorsky.tistory.com/entry/%EC%84%9C%EB%B8%94%EB%A6%BF-URL-pattern</a></li>\n<li><a href=\"https://dololak.tistory.com/740\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dololak.tistory.com/740</a></li>\n<li><a href=\"https://rwd337.tistory.com/34\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://rwd337.tistory.com/34</a></li>\n<li><a href=\"https://chrismare.tistory.com/entry/url-pattern-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://chrismare.tistory.com/entry/url-pattern-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%ED%99%95%EC%9E%A5%EC%9E%90-%ED%8C%A8%ED%84%B4</a></li>\n</ul>\n"}}]}}},"context":{}}