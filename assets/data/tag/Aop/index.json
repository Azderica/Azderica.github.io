{"hash":"62db5db29df89ca374fafd271e74d0cbf6feeaea","data":{"tag":{"title":"Aop","belongsTo":{"edges":[{"node":{"title":"[Spring] 스프링 AOP 개념 이해햐기","path":"/00-spring-api/","date":"13. February 2021","timeToRead":8,"description":" Spring AOP에 대한 정리입니다.","content":"<h1 id=\"aop\"><a href=\"#aop\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AOP</h1>\n<p>스프링에 대해서 공부를 하면, 꼭 알게되는 프로그래밍 기법으로 AOP 개념이\n있습니다. 오늘은 이 AOP에 대해 정리합니다.</p>\n<p>AOP는 Spring의 핵심 개념 중 하나로서, DI가 애플리케이션 모듈간의 결합도를 낮춰준다면, AOP는 애플리케이션 전체에 걸쳐 사용되는 기능을 재사용하도록 지원합니다.</p>\n<br/>\n<h2 id=\"aop란\"><a href=\"#aop%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AOP란.</h2>\n<p>AOP는 Aspect-Oriented Programming의 약자로서, 번역하면 <strong>관점 지향 프로그래밍</strong>입니다.</p>\n<p>관점 지향은 <strong>어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하는 것</strong>입니다. 모듈화란 어떤 공통된 로직이나 기능을 하나의 단위로 묶는 것을 설명합니다.</p>\n<p>이를 좀 더 정리하자면 다음과 같이 표현할 수 있습니다. <strong>핵심적인 관점은 적용하려고 하는 핵심 비지니스 로직</strong>이 되며 부가적인 관점은 핵심 로직을 실행하기 위해 행해지는 데이터베이스 연결, 로깅, 파일 입출력 등이 있습니다.</p>\n<p>AOP에서는 <strong>각 관점을 기준으로 로직을 모듈화</strong>합니다. 이는 코드를 부분적으로 나누어서 모듈화하겠다는 의미를 가집니다. 이때 소스 코드에서 다른 부분에 계속 반복되는 코드를 발견할 수 있는데 이를 Crosscutting Concerns(흩어진 관심사)라고 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107846114-999ccc00-6e24-11eb-8ed9-f0690267b6a9.png\" alt=\"what-is-aop\"></p>\n<p>다음 그림처럼 <strong>흩어진 관심사를 Aspect로 모듈화하고 핵심적인 비지니스 로직에서 분리해서 재사용 하는 것이 AOP의 목적</strong>입니다.</p>\n<br/>\n<h2 id=\"aop의-주요-개념\"><a href=\"#aop%EC%9D%98-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AOP의 주요 개념</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/107846262-a1a93b80-6e25-11eb-824a-b91953e9ffda.png\" alt=\"aop-component\"></p>\n<ul>\n<li>\n<p><strong>Aspect</strong></p>\n<ul>\n<li>흩어진 관심사(Crosscutting Concerns)를 모듈화 한 것</li>\n<li>주로 부가기능을 모듈화합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Target</strong></p>\n<ul>\n<li>Aspect를 적용하는 곳</li>\n<li>Ex) 클래스, 메소드 등</li>\n</ul>\n</li>\n<li>\n<p><strong>Advice</strong></p>\n<ul>\n<li>실질적으로 어떤 일을 해야할지에 대한 것</li>\n<li>실질적인 부가기능을 담은 구현체입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>JointPoint</strong></p>\n<ul>\n<li>Advice가 적용될 위치나 끼어들 수 있는 지점입니다.</li>\n<li>메서드 진입 시점이나, 생성사 호출 시점, 필드에서 값을 꺼내올 때 등의 다양한 시점에서 적용가능합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>PointCut</strong></p>\n<ul>\n<li>JointPoint의 상세한 스펙을 정의했습니다.</li>\n<li>구체적으로 Advice가 실행될 지점을 정할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Proxy</strong></p>\n<ul>\n<li>타켓을 감싸서 타켓의 요청을 대신 받아주는 랩핑(Wrapping) 오프젝트입니다.</li>\n<li>호출자에서 타켓 호출시 타켓이 아닌 타켓을 감싸는 프록시가 호출되며 타켓 메소드 실행전에 선처리, 실행후, 후처리를 실행시키도록 구성되어 있습니다.</li>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/107846340-5c393e00-6e26-11eb-8778-9ca7eeae3abc.png\" alt=\"proxy\"></li>\n</ul>\n</li>\n<li>\n<p><strong>Introduction</strong></p>\n<ul>\n<li>타켓 클래스에 코드 변경없이 신규 메소드나 멤버 변수를 추가하는 기능입니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Weaving</strong></p>\n<ul>\n<li>지정된 객체에 애스팩트를 적용해서 새로운 프록시 객체를 생성하는 과정을 의미합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"aop의-특징\"><a href=\"#aop%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AOP의 특징</h2>\n<ul>\n<li>접근 제어 및 부가기능을 추가하기 위해서 프록시 패턴 기반의 AOP 구현체, 프록시 객체를 사용합니다.</li>\n<li>\n<p>모든 AOP 기능을 제공하는 것이 아닌 스프링 IoC와 연동하여 엔터프라이즈 애플리케이션에서 가장 흔한 문제에 대한 해결책을 지원하는 것이 목적입니다.</p>\n<ul>\n<li>Ex) 중복코드, 프록시 클래스 작성의 번거로움, 객체들 간 관계 복잡도의 증가 등의 문제등이 있습니다.</li>\n</ul>\n</li>\n<li>스프링 빈에만 AOP를 적용 가능합니다.</li>\n</ul>\n<h2 id=\"코드에서-aop-적용\"><a href=\"#%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-aop-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드에서 AOP 적용</h2>\n<p>코드에서 <code class=\"language-text\">@AOP</code>를 사용하기 위해서는 다음과 같은 의존성을 추가해야합니다.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>해당 의존성을 추가하고 코드에 다음과 같이 사용할 수 있습니다.</p>\n<h3 id=\"경로-사용\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>경로 사용</h3>\n<p>다음과 같이 <code class=\"language-text\">@Aspect</code> 어노테이션을 붙여 클래스가 Aspect를 나타내는 클래스임을 명시하고 <code class=\"language-text\">@Component</code>를 붙여 스프링의 빈으로 등록합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerfAspect</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.myepark..*.EventService.*(..))\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">logPerf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> begin <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> retVal <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 메서드 호출 자체를 감쌈</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> retVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">@Around</code> 어노테이션은 타멧 메서드를 감싸서 특정 Advice를 실행한다는 의미를 가집니다. <code class=\"language-text\">execution(* com.myepark..*.EventService.*(..))</code>는 아래의 패키지 경로의 <code class=\"language-text\">EventService</code> 객체의 모든 메서드에 Aspect를 적용한다는 의미를 가집니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EventService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">deleteEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 인터페이스를 구현한 코드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleEventService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EventService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Published an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Delete an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationRunner</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">EventService</span> eventService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationArguments</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        eventService<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eventService<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eventService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>출력 결과는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Created</span> an event\n<span class=\"token number\">1003</span>\n<span class=\"token class-name\">Published</span> an event\n<span class=\"token number\">1000</span>\n<span class=\"token class-name\">Delete</span> an event\n<span class=\"token number\">0</span></code></pre>\n<h3 id=\"특정-어노테이션-사용\"><a href=\"#%ED%8A%B9%EC%A0%95-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>특정 어노테이션 사용</h3>\n<p>특정 어노테이션을 통해서 다음과 같이 표현할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerfAspect</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(PerLogging)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">logPerf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> begin <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> retVal <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 메서드 호출 자체를 감쌈</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> retVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">PerLogging</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용해서 앞의 서비스를 구현한다면.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleEventService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EventService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@PerLogging</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PerLogging</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Published an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PerLogging</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Delete an event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code class=\"language-text\">@PerLogging</code> 어노테이션이 붙은 메서드가 똑같이 Aspect가 적용된 것을 확인할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Created</span> an event\n<span class=\"token number\">1003</span>\n<span class=\"token class-name\">Published</span> an event\n<span class=\"token number\">1000</span>\n<span class=\"token class-name\">Delete</span> an event\n<span class=\"token number\">0</span></code></pre>\n<h3 id=\"스프링-빈의-모든-메소드에-적용\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%98-%EB%AA%A8%EB%93%A0-%EB%A9%94%EC%86%8C%EB%93%9C%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>스프링 빈의 모든 메소드에 적용</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerfAspect</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean(simpleEventService)\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">logPerf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> begin <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> retVal <span class=\"token operator\">=</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 메서드 호출 자체를 감쌈</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> retVal<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음과 같이 선언하면 SimpleEventService의 모든 메소드에 적용이 가능합니다.</p>\n<h3 id=\"around-이외의-aspect-실행-시점\"><a href=\"#around-%EC%9D%B4%EC%99%B8%EC%9D%98-aspect-%EC%8B%A4%ED%96%89-%EC%8B%9C%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">@Around</code> 이외의 Aspect 실행 시점</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">@Before</code> : 이전</p>\n<ul>\n<li>Advice 타켓 메소드가 호출되기 전에 어드바이스 기능을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@After</code> : 이후</p>\n<ul>\n<li>타켓 메스드의 결과에 관계없이 타켓 메소드가 완료되면 Advice 기능을 수행합니다.</li>\n<li>성공이나 예외 등 관계없이 동작합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@AfterReturning</code> : 정상적인 반환 이후</p>\n<ul>\n<li>타켓 메소드가 성공적으로 결과값을 반환 후에 Advice 기능을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@AfterThrowing</code> : 예외 발생 이후</p>\n<ul>\n<li>타켓 메소드가 수행 중 예외를 던지게 되면 Advice 기능을 수행합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">@Around</code> : 메소드 실행 전후</p>\n<ul>\n<li>Advice가 타켓 메소드를 감싸서 타켓 메소드 호출전과 후에 어드바이스 기능을 수행합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>AOP에 대한 정리입니다. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><strong><a href=\"https://engkimbs.tistory.com/746\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engkimbs.tistory.com/746</a></strong></li>\n<li><a href=\"https://velog.io/@max9106/Spring-AOP%EB%9E%80-93k5zjsm95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@max9106/Spring-AOP%EB%9E%80-93k5zjsm95</a></li>\n<li><a href=\"https://hongku.tistory.com/114\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hongku.tistory.com/114</a></li>\n<li><a href=\"https://jojoldu.tistory.com/71\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jojoldu.tistory.com/71</a></li>\n</ul>\n"}}]}}},"context":{}}