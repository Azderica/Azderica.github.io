{"hash":"cc9098dd8346e1418adf53ab8b5e8ea790bc2d53","data":{"tag":{"title":"Enum","belongsTo":{"edges":[{"node":{"title":"[Java] Effective Java, Enums와 Annotation","path":"/05-java-effective-java/","date":"3. May 2021","timeToRead":18,"description":"Effective Java 책 중, ch6. 열거형과 어노테이션에 대해 정리합니다.","content":"<h1 id=\"enums-와-annotation\"><a href=\"#enums-%EC%99%80-annotation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enums 와 Annotation</h1>\n<p>Java는 두 가지 특수 목적의 참조 유형 패밀리를 지원합니다.</p>\n<ul>\n<li>enum</li>\n<li>annotation</li>\n</ul>\n<p>아래에서는 이를 이용하는 좋은 사례입니다.</p>\n<h2 id=\"item-34-상수형-대신-열겨형을-사용합니다\"><a href=\"#item-34-%EC%83%81%EC%88%98%ED%98%95-%EB%8C%80%EC%8B%A0-%EC%97%B4%EA%B2%A8%ED%98%95%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 34. 상수형 대신 열겨형을 사용합니다.</h2>\n<p>Enum 형은 고정 세트로 구성된 유형이며, 이는 형식에 대한 안전성을 제공합니다. Java의 Enum 형의 기본 개념은 <code class=\"language-text\">public static final field</code>를 통해서 각각의 Enum 상수를 하나의 인스턴스로 내보내는 클래스입니다. 특히 이에 대한 액세스가 불가능하기 때문에 수정할 수 없습니다.</p>\n<p>아래는 간단한 Enum 형 타입입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Apple</span> <span class=\"token punctuation\">{</span>FUJI<span class=\"token punctuation\">,</span> PIPPIN<span class=\"token punctuation\">,</span> GRANNY_SMITH<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Orange</span> <span class=\"token punctuation\">{</span>NAVEL<span class=\"token punctuation\">,</span> TEMPLE<span class=\"token punctuation\">,</span> BLOOD<span class=\"token punctuation\">}</span></code></pre>\n<p>아래는 data와 behavior이 있는 열거형 타입입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Enum type with data and behavior</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Planet</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MERCURY</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.302e+23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.439e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  VENUS  <span class=\"token punctuation\">(</span><span class=\"token number\">4.869e+24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.052e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  EARTH  <span class=\"token punctuation\">(</span><span class=\"token number\">5.975e+24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.378e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  MARS   <span class=\"token punctuation\">(</span><span class=\"token number\">6.419e+23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.393e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">JUPITER</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.899e+27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7.149e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  SATURN <span class=\"token punctuation\">(</span><span class=\"token number\">5.685e+26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.027e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  URANUS <span class=\"token punctuation\">(</span><span class=\"token number\">8.683e+25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.556e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">NEPTUNE</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.024e+26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.477e7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> mass<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// In kilograms</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// In meters</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> surfaceGravity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// In m / s^2</span>\n\n  <span class=\"token comment\">// 범용 중력 상수 (m ^ 3 / kg s ^ 2</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">G</span> <span class=\"token operator\">=</span> <span class=\"token number\">6.67300E-11</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Constructor</span>\n  <span class=\"token class-name\">Planet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> mass<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mass <span class=\"token operator\">=</span> mass<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n    surfaceGravity <span class=\"token operator\">=</span> <span class=\"token class-name\">G</span> <span class=\"token operator\">*</span> mass <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>radius <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">mass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>           <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> mass<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">radius</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> radius<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">surfaceGravity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> surfaceGravity<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">surfaceWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> mass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mass <span class=\"token operator\">*</span> surfaceGravity<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// F = ma</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드에서 데이터를 Enum 상수와 연결하려면 인스턴스 필드를 선언하고 데이터를 가져와 필드에 저장하는 생성자를 작성해줘야 합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeightTable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> earthWeight <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> mass <span class=\"token operator\">=</span> earthWeight <span class=\"token operator\">/</span> <span class=\"token class-name\">Planet</span><span class=\"token punctuation\">.</span>EARTH<span class=\"token punctuation\">.</span>surfaceGravity <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Planet</span> p <span class=\"token operator\">:</span> <span class=\"token class-name\">Planet</span><span class=\"token punctuation\">.</span>values ​​<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Weight on %s is %f %n\"</span><span class=\"token punctuation\">,</span>\n        p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>surfaceWeight <span class=\"token punctuation\">(</span>mass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Enum 상수와 메소드를 결합한 코드를 작성할 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 상수 특정 클래스 본문과 데이터가있는 열거 형 유형</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">PLUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">MINUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">TIMES</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">DIVIDE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Operation</span> op <span class=\"token operator\">:</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">.</span>values ​​<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>printf <span class=\"token punctuation\">(</span> <span class=\"token string\">\"%f %s %f = %f %n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Output</span>\n  <span class=\"token comment\">// 2.000000 + 4.000000 = 6.000000</span>\n  <span class=\"token comment\">// 2.000000 - 4.000000 = -2.000000</span>\n  <span class=\"token comment\">// 2.000000 * 4.000000 = 8.000000</span>\n  <span class=\"token comment\">// 2.000000 / 4.000000 = 0.500000</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>전략적으로 사용하는 enum 패턴 코드는 다음과 같습니다. (근로자 근무 급여 계산 메서드)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 전략 enum 패턴</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">PayrollDay</span> <span class=\"token punctuation\">{</span>\n  MONDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TUESDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> WEDNESDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  THURSDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FRIDAY <span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  SATURDAY <span class=\"token punctuation\">(</span>WEEKEND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SUNDAY <span class=\"token punctuation\">(</span>WEEKEND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PayType</span> payType<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">PayrollDay</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PayType</span> payType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>payType <span class=\"token operator\">=</span> payType<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">int</span> pay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minutesWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> payType<span class=\"token punctuation\">.</span>pay <span class=\"token punctuation\">(</span>minutesWorked<span class=\"token punctuation\">,</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 전략 enum 유형</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">PayType</span> <span class=\"token punctuation\">{</span>\n    WEEKDAY <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> overtimePay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> minsWorked <span class=\"token operator\">&lt;=</span> MINS_PER_SHIFT<span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span>\n          <span class=\"token punctuation\">(</span>minsWorked<span class=\"token operator\">-</span>MINS_PER_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> payRate <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    WEEKEND <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> overtimePay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> minsWorked <span class=\"token operator\">*</span> payRate <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> overtimePay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mins<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MINS_PER_SHIFT <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> pay <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> basePay <span class=\"token operator\">=</span> minsWorked <span class=\"token operator\">*</span> payRate<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> basePay <span class=\"token operator\">+</span> overtimePay <span class=\"token punctuation\">(</span>minsWorked<span class=\"token punctuation\">,</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>열거형의 Switch는 상수 특정 behavior을 enum types을 늘리는데 유용합니다.</p>\n<p>컴파일 타임에 멤버가 알려진 상수 집합이 필요할 때마다, Enum 형을 사용하는 것이 좋습니다. 다만, 열거형 유형의 상수 집합이 항상 고정되어 있을 필요는 없습니다.</p>\n<p>이를 정리하면 다음과 같습니다. int 상수에 비해 Enum 형은 더 <strong>읽기 쉽고 안전하며, 강력</strong>합니다.</p>\n<br/>\n<h2 id=\"item-35-ordinals-대신에-인스턴스-필드를-사용합니다\"><a href=\"#item-35-ordinals-%EB%8C%80%EC%8B%A0%EC%97%90-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%95%84%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 35. Ordinals 대신에 인스턴스 필드를 사용합니다.</h2>\n<p>많은 Enum 형은 Int와 관련되어 있으며, ordinal 등을 통해서 위치를 반환할 수 있습니다. 그러나 이를 남용하면 유지보수 및 관리에서 문제가 생길 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 문제가 되는 코드, 순서를 바꾸면 망함.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Ensemble</span> <span class=\"token punctuation\">{</span>\n  SOLO<span class=\"token punctuation\">,</span>   DUET<span class=\"token punctuation\">,</span>   TRIO<span class=\"token punctuation\">,</span> QUARTET<span class=\"token punctuation\">,</span> QUINTET<span class=\"token punctuation\">,</span>\n  SEXTET<span class=\"token punctuation\">,</span> SEPTET<span class=\"token punctuation\">,</span> OCTET<span class=\"token punctuation\">,</span> NONET<span class=\"token punctuation\">,</span>  DECTET<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numberOfMusicians</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드를 해결하는 방법은, 파생하지 않고 <strong>인스턴스 필드에 저장</strong>하는 것입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Ensemble</span> <span class=\"token punctuation\">{</span>\n  SOLO <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DUET <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TRIO <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> QUARTET <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> QUINTET <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  SEXTET <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SEPTET <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> OCTET <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DOUBLE_QUARTET <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  NONET <span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> DECTET <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TRIPLE_QUARTET <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> numberOfMusicians<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Ensemble</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfMusicians <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> numberOfMusicians <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> numberOfMusicians<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"item-36-비트-필드-대신에-enumset을-사용합니다\"><a href=\"#item-36-%EB%B9%84%ED%8A%B8-%ED%95%84%EB%93%9C-%EB%8C%80%EC%8B%A0%EC%97%90-enumset%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 36. 비트 필드 대신에 <code class=\"language-text\">EnumSet</code>을 사용합니다.</h2>\n<p>비트 필드 표현을 통하면 비트 연산을 통해서 합집합이나 교차 집합 연산을 효율적으로 계산할 수 있습니다. 그러나 이러한 방법들은 int형 상수이 가지고 있는 단점이 있기 때문에, <code class=\"language-text\">java.util</code> 패키지의 <code class=\"language-text\">EnumSet</code>을 사용하는 것이 중요합니다.</p>\n<p>이를 사용한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Style</span> <span class=\"token punctuation\">{</span>BOLD<span class=\"token punctuation\">,</span> ITALIC<span class=\"token punctuation\">,</span> UNDERLINE<span class=\"token punctuation\">,</span> STRIKETHROUGH<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 모든 세트를 전달할 수 있지만 EnumSet은 분명히 가장 좋습니다</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> applyStyles <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">></span></span> styles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\">text<span class=\"token punctuation\">.</span>applyStyles <span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span>of <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>BOLD<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>ITALIC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>즉, 이를 요약하면, Enum 형이 집합에서 사용되기 때문에 비트 필드로 표현할 이유가 없습니다.</p>\n<br/>\n<h2 id=\"item-37-ordinals-indexing-대신-enummap을-사용합니다\"><a href=\"#item-37-ordinals-indexing-%EB%8C%80%EC%8B%A0-enummap%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 37. <code class=\"language-text\">Ordinals Indexing</code> 대신 <code class=\"language-text\">EnumMap</code>을 사용합니다.</h2>\n<p>때때로 ordinal 메서드를 사용해서 배열로 인덱싱 하는 코드를 볼 수 있습니다.</p>\n<p>이는 그러한 경우의 예시입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Plant</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">LifeCycle</span> <span class=\"token punctuation\">{</span> ANNUAL<span class=\"token punctuation\">,</span> PERENNIAL<span class=\"token punctuation\">,</span> BIENNIAL <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">LifeCycle</span> lifeCycle<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Plant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LifeCycle</span> lifeCycle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lifeCycle <span class=\"token operator\">=</span> lifeCycle<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드를 배열로 인덱싱한 코드입니다. (잘못된 코드)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Plant</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> plantsByLifeCycle <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Plant</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> plantsByLifeCycle<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  plantsByLifeCycle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Plant</span> p <span class=\"token operator\">:</span> garden<span class=\"token punctuation\">)</span>\n  plantsByLifeCycle<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>lifeCycle<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> plantsByLifeCycle<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: %s%n\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> plantsByLifeCycle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 코드는 문제가 있습니다. 배열은 제네릭과 호환되지 않기 때문에 깔끔하게 컴파일되지 않습니다.그리고, 사용자가 인덱싱 배열을 사용할 때 신경을 써야하는 부분이 많습니다.</p>\n<p>짧은 코드를 통해서 이보다 좀 더 좋은 코드를 구성하는 것은 <code class=\"language-text\">EnumMap</code>을 사용하는 것입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// EnumMap을 사용하여 데이터를 열거 형과 연결</span>\n<span class=\"token class-name\">Map</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Plant</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> plantsByLifeCycle\n  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span> lc <span class=\"token operator\">:</span> <span class=\"token class-name\">Plant<span class=\"token punctuation\">.</span>LifeCycle</span><span class=\"token punctuation\">.</span>values ​​<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  plantsByLifeCycle<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span>lc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Plant</span> p <span class=\"token operator\">:</span> garden<span class=\"token punctuation\">)</span>\n  plantsByLifeCycle<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>lifeCycle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>plantsByLifeCycle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Stream과 EnumMap을 사용하여 데이터를 열거 형과 연결</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>stream <span class=\"token punctuation\">(</span>garden<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>collect <span class=\"token punctuation\">(</span>groupingBy <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>lifeCycle<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LifeCycle</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> toSet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>두 개의 Enum 형을 사용하는 경우에도 EnumMap을 사용하는 것이 좀 더 안전성이 높습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 중첩 된 EnumMap을 사용하여 데이터를 열거 형 쌍과 연결</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Phase</span> <span class=\"token punctuation\">{</span>\n  SOLID<span class=\"token punctuation\">,</span> LIQUID<span class=\"token punctuation\">,</span> GAS<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Transition</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">MELT</span><span class=\"token punctuation\">(</span>SOLID<span class=\"token punctuation\">,</span> LIQUID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FREEZE</span><span class=\"token punctuation\">(</span>LIQUID<span class=\"token punctuation\">,</span> SOLID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">BOIL</span><span class=\"token punctuation\">(</span>LIQUID<span class=\"token punctuation\">,</span> GAS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token function\">CONDENSE</span><span class=\"token punctuation\">(</span>GAS<span class=\"token punctuation\">,</span> LIQUID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">SUBLIME</span><span class=\"token punctuation\">(</span>SOLID<span class=\"token punctuation\">,</span> GAS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">DEPOSIT</span><span class=\"token punctuation\">(</span>GAS<span class=\"token punctuation\">,</span> SOLID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Phase</span> from<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Phase</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Transition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Phase</span> from<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Phase</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>from <span class=\"token operator\">=</span> from<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// the phase transition map 초기화</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Phase</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Phase</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transition</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>\n      m <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Phase</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Phase</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Transition</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Phase</span> from<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Phase</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위으 코드의 경우에는 오류가 발생할 가능성이 거의 없으며, 명확성과 안전성 및 유지 관리성을 높이며 공간/시간 비용이 지불되지 않습니다.</p>\n<p>따라서, <strong>ordinal을 사용해서 배열로 인덱싱하는 것은 적절하지 않으며 대신에 EnumMap을 사용하는 것이 중요합니다.</strong></p>\n<br/>\n<h2 id=\"item-38-인터페이스로-확장-가능한-enum을-모방합니다\"><a href=\"#item-38-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A1%9C-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-enum%EC%9D%84-%EB%AA%A8%EB%B0%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 38. 인터페이스로 확장 가능한 Enum을 모방합니다.</h2>\n<p>표준 enum을 정의해서 임의의 인터페이스를 구현할 수 있습니다. 이를 표현한 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 인터페이스를 사용하여 확장 가능한 열거 형 에뮬레이션</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">BasicOperation</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">PLUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">MINUS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">TIMES</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">DIVIDE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">BasicOperation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 확장한 enum입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Emulated extension enum</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ExtendedOperation</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">EXP</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">REMAINDER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> x <span class=\"token operator\">%</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">ExtendedOperation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> symbol<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 테스트하는 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  test <span class=\"token punctuation\">(</span> <span class=\"token class-name\">ExtendedOperation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span> <span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> test <span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">Class</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> opEnumType <span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Operation</span> op <span class=\"token operator\">:</span> opEnumType<span class=\"token punctuation\">.</span>getEnumConstants <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>printf <span class=\"token punctuation\">(</span> <span class=\"token string\">\"%f %s %f = %f %n \"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 방법이 아니더라도, 아래처럼 <code class=\"language-text\">Collection&lt;? extends Operation&gt; Class T</code>를 사용할 수 있습니다. 이는 덜 복잡하고 유연합니다. (다만, EnumSet이나 EnumMap을 사용할 수 없는 코드입니다.)</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>parseDouble <span class=\"token punctuation\">(</span>args <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  test <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>asList <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExtendedOperation</span><span class=\"token punctuation\">.</span>values ​​<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> test <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Collection</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">></span></span> opSet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Operation</span> op <span class=\"token operator\">:</span> opSet<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>printf <span class=\"token punctuation\">(</span> <span class=\"token string\">\"%f %s %f = %f %n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>두 코드 모두 결과값은 이와 같습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">4.000000 ^ 2.000000 = 16.000000\n4.000000 % 2.000000 = 0.000000</code></pre>\n<p>결론적으로 확장 가능한 Enum 유형을 작성할 수는 없지만, 인터페이스를 구현하는 Enum 타입과 함께 제공되는 인터페이스를 작성해서 동작시킬 수 있습니다.</p>\n<br/>\n<h2 id=\"item-39-naming-patterns-보다-annotation을-선호합니다\"><a href=\"#item-39-naming-patterns-%EB%B3%B4%EB%8B%A4-annotation%EC%9D%84-%EC%84%A0%ED%98%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 39. <code class=\"language-text\">Naming Patterns</code> 보다 <code class=\"language-text\">Annotation</code>을 선호합니다.</h2>\n<p>기존의 Naming Patterns의 문제는 다음과 같습니다.</p>\n<ul>\n<li>기존의 JUnit3의 경우, 메서드 명이 test로 시작하지 않으면 실패합니다.</li>\n<li>적절한 프로그램 요소에서만 사용되도록 할 수 없습니다.</li>\n<li>매개 변수 값을 프로그램 요소와 연관시키는 좋은 방법을 제공하지 않습니다.</li>\n</ul>\n<p>JUnit4부터는 annotation을 통해서 테스트 프레임 워크를 구성할 수 있게 되었습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Marker annotation type declaration</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n *  - 주석이 달린 메서드가 테스트 메서드임을 나타냅니다.\n *  - 매개 변수가없는 정적 메서드에만 사용합니다.\n */</span>\n\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용하는 코드가 아래와 같이 있을 때, 되는 코드와 안되는 코드를 보면 그 차이를 확인할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// marker 어노테이션이 포함된 프로그램</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// Test should pass</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// Test should fail</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Boom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// INVALID USE: nonstatic method</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// Test should fail</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Crash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 위의 Sample 클래스에서 Test 어노테이션이 포함된 테스트 메서드는 4가지이나, m5은 static을 붙이지 않았기 때문에 유효하지 않습니다. m1만 성공을 하고, m3과 m7은 실패하게 됩니다.</p>\n<p>이를 아래의 코드로 실행할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Program to process marker annotations</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunTests</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> tests <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> passed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> testClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> testClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        tests<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          passed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> wrappedExc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token class-name\">Throwable</span> exc <span class=\"token operator\">=</span> wrappedExc<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token string\">\" failed: \"</span> <span class=\"token operator\">+</span> exc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid @Test: \"</span> <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Passed: %d, Failed: %d%n\"</span><span class=\"token punctuation\">,</span>\n        passed<span class=\"token punctuation\">,</span> tests <span class=\"token operator\">-</span> passed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// output</span>\n<span class=\"token comment\">// public static void Sample.m3() failed: RuntimeException: Boom</span>\n<span class=\"token comment\">// Invalid @Test: public void Sample.m5()</span>\n<span class=\"token comment\">// public static void Sample.m7() failed: RuntimeException: Crash</span>\n<span class=\"token comment\">// Passed: 1, Failed: 3</span></code></pre>\n<p>이외에도 여러 테스트 코드 및 어노테이션을 사용하는 방법이 있습니다. 다중 어노테이션이나, 특정 에러만 동작하게 하는 어노테이션을 구성할 수도 있습니다. 이를 다 작성하기에는 내용이 많아서 작성하지는 않겠습니다.</p>\n<p>이러한 어노테이션에서의 핵심은 다음과 같습니다.</p>\n<ul>\n<li>어노테이션을 사용할 수 있는 경우에는, Naming Patterns 을 사용할 필요가 없습니다.</li>\n<li>모든 프로그래머는 Java가 제공하는 사전 정의된 어노테이션을 사용하는 것이 중요합니다.</li>\n<li>또한 IDE나 분석 툴에서 제공하는 어노테이션을 사용하는 것이 중요합니다.</li>\n</ul>\n<br/>\n<h2 id=\"item-40-override-어노테이션을-일관되게-사용해야합니다\"><a href=\"#item-40-override-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EC%9D%BC%EA%B4%80%EB%90%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 40. <code class=\"language-text\">Override</code> 어노테이션을 일관되게 사용해야합니다.</h2>\n<p>Java 라이브러리에서는 여러 어노테이션이 포함되어 있는데, 그중에서 중요한 어노테이션으로 <code class=\"language-text\">@Override</code>를 고를 수 있습니다. <code class=\"language-text\">@Override</code>는 메서드 선언에서만 사용할 수 있으며, 어노테이션이 달린 메서드 선언이 상위 유형을 재정의 함을 나타냅니다. 이를 지속적으로 사용하면 많은 종류의 버그를 예방할 수 있습니다.</p>\n<p>이를 보여주는 코드는 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bigram</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> first<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> second<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> first<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first  <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bigram</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> first <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">.</span>second <span class=\"token operator\">==</span> second<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">31</span> <span class=\"token operator\">*</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">;</span> ch<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드는 그냥 보면, 문제를 인지할 수 없습니다. 위 코드는 2개의 동일한 소문자로 이루어진 26개의 Bigram을 Set에 반복적으로 추가합니다. (Set은 집합이므로) 26세트가 나와야한다고 생각하지만, 위의 코드는 260세트가 나오게 됩니다.</p>\n<p>위의 코드에서의 문제는 equals를 오버로딩하지 않아 그렇습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Bigram</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bigram</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> first <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">.</span>second <span class=\"token operator\">==</span> second<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이와 같이 구성할 때, 생각했던 26세트가 나오게 됩니다.</p>\n<p>즉, <strong>super class를 재정의하는 경우 생각하는 모든 메서드 선언에 <code class=\"language-text\">Override</code> 어노테이션을 사용해야합니다.</strong> <code class=\"language-text\">Override</code>어노테이션을 통해서 많은 오류로 부터 사용자를 보호할 수 있습니다.</p>\n<br/>\n<h2 id=\"item-41-타입을-정의하기-위해-marker-interface를-사용합니다\"><a href=\"#item-41-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-marker-interface%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item 41. 타입을 정의하기 위해 <code class=\"language-text\">Marker Interface</code>를 사용합니다.</h2>\n<p><code class=\"language-text\">Marker Interface</code>는 메서드를 포함하지 않고 일부 구현 속성을 가지는 인터페이스입니다. (Ex. <code class=\"language-text\">Serializable</code> 인터페이스)</p>\n<p><code class=\"language-text\">Marker Interface</code>는 <code class=\"language-text\">Marker Annotation</code>보다 2가지의 장점이 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">marker interface</code>는 표시된 클래스의 인스턴스에 의해 구현되는 유형을 정의합니다.</p>\n<ul>\n<li>이를 통해서 런타임까지 잡을 수 없는 에러를 컴파일 타임에 잡을 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">marker interface</code>는 <code class=\"language-text\">marker interface</code> 보다 더 정확하게 타겟팅할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">market annotation</code>은 타겟으로 적용해야하는 반면에, <code class=\"language-text\">marker interface</code>는 인터페이스를 확장하여, 적용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>이에 반해 <code class=\"language-text\">Marker Annotation</code>의 장점은 어노테이션의 일부라는 것입니다. 그렇기 때문에 <code class=\"language-text\">Marker Annotation</code>은 어노테이션 기반 프레임 워크의 일관성을 위해 사용할 때 좋습니다.</p>\n<h3 id=\"marker-interface와-marker-annotation의-사용-경우\"><a href=\"#marker-interface%EC%99%80-marker-annotation%EC%9D%98-%EC%82%AC%EC%9A%A9-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Marker Interface와 Marker Annotation의 사용 경우.</h3>\n<p><code class=\"language-text\">Marker Interface</code></p>\n<ul>\n<li>새로운 메서드가 연결되지 않은 유형과 정의하는 경우</li>\n<li>클래스와 인터페이스에서 적용되는 경우, 하나 이상의 메서드에서 필요하다고 판단되는 경우</li>\n</ul>\n<p><code class=\"language-text\">Marker Annotation</code></p>\n<ul>\n<li>클래스 및 인터페이스 이외의 프로그램 요소를 표시하는 경우</li>\n<li>어노테이션을 많이 사용하는 프레임 워커에 마커를 맞추려는 경우</li>\n</ul>\n<blockquote>\n<p>Marker Interface (마커 인터페이스, 태그 인터페이스)</p>\n</blockquote>\n<p>내부에 메서드나 상수가 없는 인터페이스</p>\n<p>Ex) <code class=\"language-text\">Serializable</code> 인터페이스, <code class=\"language-text\">Clonable</code> 인터페이스</p>\n<blockquote>\n<p>Marker Annotation (마커 어노테이션)</p>\n</blockquote>\n<p>멤버를 포함하지 않으며 데이터로 구성되지 않으며, 그저 어노테이션 선언을 표시하기 위해 존재합니다.</p>\n<p>Ex) <code class=\"language-text\">@Override</code></p>\n"}},{"node":{"title":"[Java] Java Enum","path":"/11-java-study/","date":"1. February 2021","timeToRead":3,"description":"Java Enum에 대해 정리합니다.","content":"<h1 id=\"java-enum\"><a href=\"#java-enum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Enum</h1>\n<p>11주차 내용은 자바의 Enum에 관련된 내용입니다.</p>\n<p>공부할 내용</p>\n<ul>\n<li>enum 정의하는 방법</li>\n<li>enum이 제공하는 메소드 (values()와 valueOf())</li>\n<li>java.lang.Enum</li>\n<li>EnumSet</li>\n</ul>\n<h2 id=\"enum-정의\"><a href=\"#enum-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 정의</h2>\n<p><strong>enum</strong>은 열겨형이라 불리며, 관련된 상수를 편리하게 선언하기 위해 상수를 여러개 정의할 때 사용됩니다.</p>\n<p>간단하게 다음과 같이 선언할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Language</span> <span class=\"token punctuation\">{</span>\n    JAVASCRIPT<span class=\"token punctuation\">,</span> JAVA<span class=\"token punctuation\">,</span> PYTHON<span class=\"token punctuation\">,</span> TYPESCRIPT\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이를 사용할려면 다음과 같이 사용할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printEnumOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>JAVASCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>JAVA<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>PYTHON<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Language</span><span class=\"token punctuation\">.</span>TYPESCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>output</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106461852-ae9a6680-64d8-11eb-9431-d97516e46b24.png\" alt=\"output-1\"></p>\n<p>다음과 같기 때문에 순서를 조심히 해야합니다.</p>\n<h3 id=\"상수-데이터-추가\"><a href=\"#%EC%83%81%EC%88%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상수 데이터 추가</h3>\n<p>다음처럼 상수 데이터를 넣어줄 수도 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ItCompany</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">GOOGLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">APPLE</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">NAVER</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">KAKAO</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ItCompany</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<br/>\n<h2 id=\"enum-값-사용\"><a href=\"#enum-%EA%B0%92-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 값 사용</h2>\n<p>Enum에서 값을 꺼내는 방법은 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">Language.JAVASCRIPT</code></li>\n<li><code class=\"language-text\">Language.valueOf(&quot;JAVA&quot;)</code></li>\n<li><code class=\"language-text\">Enum.valueOf(Language.class, &quot;PYTHON&quot;)</code></li>\n<li><code class=\"language-text\">Language.TYPESCRIPT.name()</code></li>\n</ul>\n<p>해당 코드의 결과는 다음과 같이 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/106462114-fde09700-64d8-11eb-80bf-fdd498b1c92f.png\" alt=\"output-2\"></p>\n<br/>\n<h2 id=\"enum-메소드\"><a href=\"#enum-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 메소드</h2>\n<p>enum에서 제공되는 메소드는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">ordinal()</code> : enum의 순서</li>\n<li><code class=\"language-text\">name()</code> : 각 요소들의 이름</li>\n<li><code class=\"language-text\">valeOf()</code> : 문자열로 enum 요소의 이름을 찾아서 이름을 리턴</li>\n<li>\n<p><code class=\"language-text\">values()</code> : 모든 enum의 요소들을 배열로 만들어줍니다.</p>\n<ul>\n<li><code class=\"language-text\">Language[] values = Language.values();</code></li>\n<li>output : JAVASCRIPT, JAVA, PYTHON, TYPESCRIPT</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">compareTo()</code> : 비교를 할 수 있습니다.</p>\n<ul>\n<li>A.compareTo(B) : 같으면 0, A > B인 경우 1, A &#x3C; B 인 경우는 -1 입니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"javalangenum\"><a href=\"#javalangenum\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>java.lang.Enum</h2>\n<p>Enum클래스를 보면 다음과 같습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// method</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이 해당 <code class=\"language-text\">java.lang.enum</code>은 모든 열겨형의 조상으로서, 여러 메소드 등을 사용할 수 있습니다.</p>\n<p>그 중에서 여러 눈에 뛰는 메소드로는 아래와 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Class&lt;E&gt; getDeclaringClass()</code></td>\n<td>열거형의 Class 객체 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">String name()</code></td>\n<td>열거형 상수의 이름을 문자열로 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">int ordinal()</code></td>\n<td>열거형 상수가 정의된 순서 반환</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">T valueOf(Class&lt;T&gt; enumType, String name)</code></td>\n<td>지정된 열거형에서 name과 일치하는 열거형 상수 반환</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"enum-멤버-추가\"><a href=\"#enum-%EB%A9%A4%EB%B2%84-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enum 멤버 추가</h2>\n<p>열거형을 구분할 때나 확인하는 경우에는 ordinal() 보다는 멤버를 추가하는 방식이 일반적으로는 좋습니다. 특히 불연속적인 경우가 필요할 경우에는 다음과 같이 사용하는 방식이 중요합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"></code></pre>\n<br/>\n<h2 id=\"enumset\"><a href=\"#enumset\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EnumSet</h2>\n<p>Enum을 사용하여서 Set 자료구조를 만들 수 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">allOf</code> : enum에서 정의된 정보를 모두 추가할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">EnumSet.allOf(Language.class)</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">noneOf</code> : 아무것도 추가하지 않습니다.</li>\n<li>\n<p><code class=\"language-text\">of</code> : 요소를 넣을 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">EnumSet&lt;Language&gt; languageSet = EnumSet.of(Language.JAVA);</code></li>\n</ul>\n</li>\n</ul>\n<p>그 외에도 다양한 메소드가 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://b-programmer.tistory.com/262\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://b-programmer.tistory.com/262</a></li>\n<li><a href=\"https://wisdom-and-record.tistory.com/52\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wisdom-and-record.tistory.com/52</a></li>\n<li><a href=\"https://www.notion.so/Enum-6ffa87530c424d8ab7a1b585bfb26fa2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/Enum-6ffa87530c424d8ab7a1b585bfb26fa2</a></li>\n<li><a href=\"https://parkadd.tistory.com/50\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://parkadd.tistory.com/50</a></li>\n</ul>\n"}}]}}},"context":{}}