{"hash":"2858839cb272bd8e3f388ae3dd5d59774a4a3863","data":{"tag":{"title":"Platform","belongsTo":{"edges":[{"node":{"title":"[RabbitMQ] What is RabbitMQ","path":"/00-rabbitmq/","date":"9. March 2022","timeToRead":11,"description":" RabbitMQ에 대한 기본적인 내용을 정리하고, Kafka와의 차이에 대해 서술합니다.","content":"<h1 id=\"what-is-rabbitmq\"><a href=\"#what-is-rabbitmq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is RabbitMQ.</h1>\n<p>과거 오래전에 Kafka에 대한 개념을 정리했습니다. (그 후로 따로 업무에서 사용해본적은 없지만...) 그럼에도 불구하고 백엔드 개발자라면 이후 필요시 사용할 수 있다고 생각하기 때문에 오늘은 rabbitmq에 대해 정리합니다. 마찬가지로 쓴 적은 없지만, NAS 서버의 앞단에 rabbitmq가 설치된 것은 봤습니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-kafka/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">카프카 공부</a></li>\n</ul>\n<br/>\n<h2 id=\"메시지-큐\"><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메시지 큐</h2>\n<p>들어가기 앞서, 메시지 큐에 대한 내용부터 잡습니다. 메시지 큐(message queue)는 <strong>서버리스 및 마이크로서비스 아키텍처에서 사용되는 비동기 서비스 간 통신의 한 형태</strong>입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/157424872-337442d7-0166-4f18-b6bb-82ff29a6db6a.png\" alt=\"message queue\"></p>\n<p>메시지 큐를 통해 시스템의 서로 다른 부분이 통신하고 비동기식으로 작업을 처리할 수 있습니다.</p>\n<ul>\n<li>메시지 큐는 메시지를 임시로 저장하는 간단한 버퍼를 제공합니다.</li>\n<li>메시지 전송 및 수신을 위해 허용하는 엔드포인트를 제공합니다.</li>\n<li>생산자라 부르는 구성 요소가 메시지를 대기열에 추가하고, 소비자라 부르는 구성요소가 메시지를 검색하고 이를 사용해 어떤 작업을 수행할 때까지 대기열 에 저장됩니다.</li>\n</ul>\n<h3 id=\"메시지-큐의-장점\"><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메시지 큐의 장점</h3>\n<p>메시지 큐는 다음의 장점을 가집니다.</p>\n<ul>\n<li>Asynchronous(비동기) : Queue에 넣음을 통해서 나중에 처리 가능합니다.</li>\n<li>Decoupling(비동조) : Application과 분리할 수 있습니다.</li>\n<li>Resilience(탄력성) : 일부가 실패해도 전체에 영향을 받지 않습니다.</li>\n<li>Redundancy(과잉) : 실패시 재실행이 가능합니다.</li>\n<li>Guarantees(보증) : 작업 처리에 대해 확인이 가능합니다.</li>\n<li>Scalable(확장성) : 다수의 프로세스뜰이 큐에 메시지를 보낼 수 있습니다.</li>\n</ul>\n<p>위의 장점들을 살리기 위해 일반적으로 <strong>메시지 큐</strong>를 사용합니다.</p>\n<h3 id=\"이때-메시지-큐가-적합합니다\"><a href=\"#%EC%9D%B4%EB%95%8C-%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90%EA%B0%80-%EC%A0%81%ED%95%A9%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이때 메시지 큐가 적합합니다.</h3>\n<ul>\n<li>다른 곳의 API로부터 데이터 송수신이 가능합니다.</li>\n<li>다양한 애플리케이션에서 비동기 통신을 할 수 있습니다.</li>\n<li>이메일 발송 및 문서 업로드가 가능합니다.</li>\n<li>많은 양의 프로세스들을 처리할 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"rabbitmq는-그래서-뭐야\"><a href=\"#rabbitmq%EB%8A%94-%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%90%EC%95%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RabbitMQ는 그래서 뭐야?</h2>\n<blockquote>\n<p>RabbitMQ is the most widely deployed open source message broker (공식 홈페이지)</p>\n<p>RabbitMQ는 가장 널리 퍼져있는 오픈소스 메세지브로커입니다.</p>\n</blockquote>\n<p>RabbitMQ는 다음을 지원합니다.</p>\n<ul>\n<li>\n<p>AMQP 프로토콜을 구현해 놓은 프로그램입니다.</p>\n<ul>\n<li>*AMQP : Advanced Message Queuing Protocol의 약자이며 IP 네트워크를 통한 프로세스 간 통신에 중점을 둔 애플리케이션 계층 프로토콜입니다.</li>\n<li><a href=\"https://www.cloudamqp.com/blog/what-is-amqp-and-why-is-it-used-in-rabbitmq.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AMQP에 대한 상세 설명</a></li>\n</ul>\n</li>\n<li>신뢰성, 안전성, 성능을 충족할 수 있도록 다양한 기능을 제공합니다.</li>\n<li>유연한 라우팅: Message Queue가 도착하기 전에 라우팅되며 플러그인을 통해 더 복잡한 라우팅도 가능합니다.</li>\n<li>\n<p>클러스터링을 제공합니다.</p>\n<ul>\n<li>*클러스터링 : 로컬네트워크에 있는 여러 RabbitMQ 서버를 논리적으로 클러스트링할 수 있고 논리적인 브로커도 가능합니다.</li>\n</ul>\n</li>\n<li>관리 UI가 있어 편하게 관리 가능합니다.</li>\n<li>거의 모든 언어와 운영체제를 지원합니다.</li>\n<li>오픈소스로 상업적 지원이 가능합니다.</li>\n</ul>\n<br/>\n<h2 id=\"rabbitmq-외의-서비스\"><a href=\"#rabbitmq-%EC%99%B8%EC%9D%98-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RabbitMQ 외의 서비스</h2>\n<h3 id=\"activemq\"><a href=\"#activemq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ActiveMQ</h3>\n<ul>\n<li>풀자바 메시지 서비스(JMS) 클라이언트와 함께 자바로 만든 오픈소스 메시지 브로커</li>\n<li>시스템은 엔터프라이즈 기능을 제공합니다.</li>\n</ul>\n<p>다음의 특징이 있습니다.</p>\n<ul>\n<li>다양한 언어 환경의 클라이언트들과 프로토콜을 지원합니다.</li>\n<li>Spring 지원으로 쉽게 설정이 가능합니다.</li>\n<li>고성능의 저널을 사용할 때에 JDBC를 사용하여 매우 빠른 Persistnece을 지원합니다.</li>\n<li>고성능의 클러스터링, 클라이언트-서버, Peer 기반 통신을 지원을 위한 설계가 되어 있습니다.</li>\n<li>REST API를 통해 웹기반 메시징 API를 지원합니다.</li>\n<li>웹브라우저가 메시징 도구가 될 수 있도록, Ajax를 통해 순수한 DHTML을 사용한 웹스트리밍을 지원합니다.</li>\n</ul>\n<h3 id=\"zeromq\"><a href=\"#zeromq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ZeroMQ</h3>\n<ul>\n<li>메시징 라이브러리</li>\n<li>복잡한 커뮤니케이션 시스템을 설계할 수 있도록 해줍니다.</li>\n<li>ZeroMQ는 in-process, inter-process, TCP, and multicast 처럼 다양한 방식으로 메시지를 전송하는 소켓을 제공합니다.</li>\n</ul>\n<p>다음의 특징을 가집니다.</p>\n<ul>\n<li>\n<p>퍼포먼스</p>\n<ul>\n<li>AMQP보다 빠르며, AMQP처럼 과도하게 복잡한 프로토콜이 없습니다.</li>\n<li>신뢰성 있는 멀티캐스트같은 효율적인 전송을 활용합니다.</li>\n<li>지능적인 메시지 묶음을 확용합니다.</li>\n</ul>\n</li>\n<li>\n<p>단순성</p>\n<ul>\n<li>비동기 send 호출을 부르기만 하면, 메시지를 별도의 큐에 넣고 필요한 모든 일을 해줍니다.</li>\n<li>이벤트 중심의 프레임워크에도 최적입니다.</li>\n</ul>\n</li>\n<li>\n<p>확장성</p>\n<ul>\n<li>복수의 접점을 가질 수 있으며, 자동으로 메시지 부하 분산을 수행합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"kafka\"><a href=\"#kafka\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka</h3>\n<ul>\n<li>대용량의 실시간 로그 처리에 특화되어 설계된 메시징 시스템으로서 기존 범용 메시징 시스템대비 TPS가 매우 우수합니다.</li>\n<li>분산 시스템을 기본으로 설계되었기 때문에, 기존 메시징 시스템에 비해 분산 및 복제 구성을 손쉽게 할 수 있습니다.</li>\n<li>AMQP 프로토콜이나 JMS API를 사용하지 않고 단순한 메시지 헤더를 지닌 TCP 기반의 프로토콜을 사용하여 프로토콜에 의한 오버헤드를 감소시킵니다.</li>\n</ul>\n<p>상세 내용은 <a href=\"https://azderica.github.io/00-kafka/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">카프카 공부</a> 을 참조하면 좋습니다.</p>\n<br/>\n<h2 id=\"kafka-와-rabbitmq-중에서-어떤-것을-선택할-것인가\"><a href=\"#kafka-%EC%99%80-rabbitmq-%EC%A4%91%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 와 RabbitMQ 중에서 어떤 것을 선택할 것인가.</h2>\n<blockquote>\n<p>일반적으로 많이 사용하는 두 메시지큐인 Kafka와 RabbitMQ를 비교합니다.</p>\n</blockquote>\n<ul>\n<li>RabbitMQ는 메시지 브로커 방식이고, Kafka는 pub/sub 방식입니다.</li>\n<li>\n<p>메시지브로커</p>\n<ul>\n<li>메시지브로커는 응용프로그램, 서비스 및 시스템이 정보를 통신하고 교환할 수 있도록 하는 소프트웨어 모듈입니다</li>\n<li>메시지 브로커는 지정된 수신인에게 메시지를 확인, 라우팅, 저장 및 배달합니다.</li>\n</ul>\n</li>\n<li>\n<p>pub/sub</p>\n<ul>\n<li>생산자가 원하는 각 메시지를 게시할 수 있도록 하는 메시지 배포 패턴입니다.</li>\n</ul>\n</li>\n</ul>\n<p>일반적으로 Kafka는 고성능을 추구하기 때문에 비교적 무거우나, 대용량 데이터를 다루지 않는다면 가벼운 RabbitMQ가 더 낫습니다.</p>\n<h3 id=\"kafka가-적절한-경우\"><a href=\"#kafka%EA%B0%80-%EC%A0%81%EC%A0%88%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka가 적절한 경우</h3>\n<ul>\n<li>Kafka는 복잡한 라우팅에 의존하지 않고 최대 처리량으로 스트리밍하는데 가장 적합합니다.</li>\n<li>이벤트 소싱, 스트림 처리 및 일련의 이벤트로 시스템에 대한 모델링 변경을 수행하는 데 이상적입니다.</li>\n<li>Kafka는 다단계 파이프라인에서 데이터를 처리하는데도 적합합니다.</li>\n<li>스트리밍 데이터를 저장, 읽기, 다시 읽기 및 분석하는 프레임워크가 필요한 경우에 더 좋습니다.</li>\n<li>특히, <strong>정기적으로 감사하는 시스템이나 메시지를 영구적으로 저장하는 데 이상적입니다.</strong></li>\n</ul>\n<h3 id=\"rabbitmq가-적절한-경우\"><a href=\"#rabbitmq%EA%B0%80-%EC%A0%81%EC%A0%88%ED%95%9C-%EA%B2%BD%EC%9A%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RabbitMQ가 적절한 경우</h3>\n<ul>\n<li>복잡한 라우팅의 경우 RabbitMQ를 사용합니다.</li>\n<li>RabbitMQ는 신속한 요청-응답이 필요한 웹 서버에 적합합니다.</li>\n<li>부하가 높은 작업자 간에 부하를 공유합니다.</li>\n<li>RabbitMQ는 백그라운드 작업이나 PDF 변환, 파일 검색 또는 이미지 확장과 같은 장기 실행 작업도 처리할 수 있습니다.</li>\n<li>즉, <strong>장시간 실행되는 태스크, 안정적인 백그라운드 작업 실행, 애플리케이션 간/내부 통신/통합이 필요할 때 RabbitMQ를 사용합니다.</strong></li>\n</ul>\n<br/>\n<h2 id=\"그외-용어에-대한-설명\"><a href=\"#%EA%B7%B8%EC%99%B8-%EC%9A%A9%EC%96%B4%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그외 용어에 대한 설명</h2>\n<h3 id=\"jms란\"><a href=\"#jms%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JMS란.</h3>\n<ul>\n<li>JMS는 MOM(Message-Oriented Middleware, 메시지 지향 미들웨어)을 자바에서 지원하는 표준 API</li>\n<li>Java EE에 기반한 애플리케이션 구성요소에서 메시지를 작성, 전송, 수신하고 읽을 수 있도록 하는 API</li>\n<li>JMS는 서버 구성을 통해 큐와 같은 기타 자원을 관리할 수 있습니다.</li>\n<li>JMS는 다른 자바 애플리케이션들끼리 통신이 가능하지만 다른 MOM의 통신이 어렵습니다. (ex. AMQL, SMTP)</li>\n<li>JMS 라이브러리는 AMQP를 지원하지 않습니다.</li>\n</ul>\n<p>다음의 필수요소를 지원합니다.</p>\n<ul>\n<li>메시지 경로를 지정하고 전달하는 메시징 공급자 개념</li>\n<li>별개의 메시징 패턴 또는 도메인</li>\n<li>동기식 및 비동기식 메시지 수신 기능</li>\n<li>안정적인 메시지 전달 지원</li>\n<li>공통 메시지 형식</li>\n</ul>\n<p>조금 더 상세한 정보를 보고 싶다면 아래를 공유합니다.</p>\n<ul>\n<li><a href=\"https://www.ibm.com/docs/ko/cics-ts/5.6?topic=server-java-message-service-jms\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JMS 상세 내용</a>]</li>\n<li><a href=\"https://docs.oracle.com/cd/E19148-01/820-0532/gbpdg/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MOM 표준으로서의 JMS</a></li>\n</ul>\n<h3 id=\"amqp에-대해-상세하게-보기\"><a href=\"#amqp%EC%97%90-%EB%8C%80%ED%95%B4-%EC%83%81%EC%84%B8%ED%95%98%EA%B2%8C-%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AMQP에 대해 상세하게 보기</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/157615147-53398e01-737a-40b7-8550-8ed9034947e6.png\" alt=\"AMQP 명세\"></p>\n<ul>\n<li>AMQP는 ISO 응용 계층의 MOM 표준입니다.</li>\n<li>AMQP는 IP 네트워크 간의 프로세스 간 통신에 초점을 맞춘 응용 프로그램 계층 프로토콜</li>\n<li>AMQP의 목표는 TCP/IP 연결을 통해 메시지를 브로커 서비스를 통해 전달할 수 있도록 하는 것입니다.</li>\n<li>AMQP는 프로토콜만 맞다면 다른 AMQP를 사용한 애플리케이션끼리 통신이 가능합니다.</li>\n<li>AMQP는 이진 프로토콜입니다.</li>\n</ul>\n<p>상세한 내용은 아래와 같습니다.</p>\n<ul>\n<li><a href=\"https://www.cloudamqp.com/blog/what-is-amqp-and-why-is-it-used-in-rabbitmq.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What is AMQP ...</a></li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://aws.amazon.com/ko/message-queue/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS - Message Queue</a></li>\n<li><a href=\"https://coding-nyan.tistory.com/129\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kafka vs RabbitMQ</a></li>\n<li><a href=\"https://12bme.tistory.com/176\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">메시지큐(Message Queue) 알아보기</a></li>\n<li><a href=\"https://www.cloudamqp.com/blog/what-is-amqp-and-why-is-it-used-in-rabbitmq.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What is AMQP and why is it used in RabbitMQ?</a></li>\n<li><a href=\"https://velog.io/@cckn/%EB%B2%88%EC%97%AD%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-RabbitMQ%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">(번역)마이크로서비스 - RabbitMQ를 사용하는 이유</a></li>\n<li><a href=\"https://kamang-it.tistory.com/entry/AMQPRabbitMQRabbitMQ%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EC%99%80-%EC%84%A4%EC%B9%98%EB%B0%A9%EB%B2%95-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[AMQP][RabbitMQ]RabbitMQ를 사용하는 이유와 설치방법</a></li>\n</ul>\n"}},{"node":{"title":"[Kafka] Kafka란","path":"/00-kafka/","date":"29. October 2020","timeToRead":9,"description":" 카프카에 대한 기본적인 내용을 정리합니다. ","content":"<h1 id=\"kafka에-대해-알아보자\"><a href=\"#kafka%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka에 대해 알아보자</h1>\n<p>업무를 하는데 이게 왠걸, 카프카를 써야한다니... 이야기만 몇번 들어보면서 한번도 공부해본적이 없었는데 이번 기회에 한 번 공부해보기로 했다.</p>\n<br/>\n<h2 id=\"kafka란\"><a href=\"#kafka%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka란?</h2>\n<p>Apache Kafka는 실시간으로 기록 스트림을 게시, 구독, 저장 및 처리할 수 있는 분산 데이터 스트리밍 플랫폼이다.</p>\n<blockquote>\n<p>뭔가 거창하다. 좀 더 쉬운 설명을 보자.</p>\n</blockquote>\n<p>Apacke Kafka는 LinkedIn에서 개발된 분산 메시징 시스템이다. <strong>대용량의 실시간 로그처리에 특화된 아키텍처 설계를 통해서 기존 메시징 시스템보다 우수한 TPS</strong>을 보여준다.</p>\n<ul>\n<li>TPS(Transaction per Second) : 초당 트랜잭션 수</li>\n</ul>\n<p>이러한 Kafka는 다음과 같은 특징을 가진다.</p>\n<ul>\n<li>분산 스트리밍 플랫폼</li>\n<li>데이터 파이프 라인 구성시, 주로 사용되는 오픈소스</li>\n<li>대용량의 실시간 로그처리에 특화되어 있는 솔루션</li>\n<li>데이터를 유실없이 안전하게 전달하는 것이 주목적인 메시지 시스템</li>\n<li>클러스터링이 가능하여, Falut-Tolerant한 안정적인 아키텍처와 빠른 퍼포먼스와 데이터 처리를 가진다.</li>\n<li>수평적으로 서버의 Scale-Out이 가능하다</li>\n<li><strong>pub-sub모델</strong>의 메세지 큐</li>\n</ul>\n<blockquote>\n<p>Tip)</p>\n<ul>\n<li>\n<p>클리스트링 : 여러대의 컴퓨터를 한대로 묶어서 한개의 컴퓨터처럼 구현하는 것을 의미</p>\n<ul>\n<li>로드밸런싱, 빠른처리능력, 장애 허용성 등의 장점을 가진다.</li>\n</ul>\n</li>\n<li>Fault-Tolerant : 시스템내 장애가 발생하더라도 시스템에 지장을 주지 않도록 설계된 컴퓨터 시스템</li>\n<li>Scale-Out : 서버의 대수를 늘려서 성능을 향상시키는 방법</li>\n</ul>\n</blockquote>\n<br/>\n<h2 id=\"pub-sub-모델\"><a href=\"#pub-sub-%EB%AA%A8%EB%8D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub-Sub 모델</h2>\n<p>이야기를 본격적으로 들어가기 전에 먼저 Pub-Sub 모델에 대해 알아야한다.</p>\n<p>카프카는 pub-sub(발행/구독) 모델을 사용하는데 이는 메세지를 특정 수신자에게 직접 보내주는 시스템이 아니다. publisher는 메세지를 topic을 통해서 카테고리화 한다. 분류된 메세지를 받기 원하는 receiver는 그 해당 topic 을 구독함으로서 메세지를 읽어올 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97575143-a50fe700-1a2f-11eb-8f9d-48158bd5cbb5.png\" alt=\"image\"></p>\n<p>이를 정리자면 publisher topic에 대한 정보만 알고 있고, 마찬가지로 subscriber도 topic만 바라본다. 즉, publisher와 subscriber는 서로를 모르는 상태이다. 간단한 예시로는 신문사(publisher)에서는 신문의 종류(topic)에 메세지를 쓰고 우리(subscriber)는 그 해당 신문을 구독한다.</p>\n<br/>\n<h2 id=\"kafka의-구성요소\"><a href=\"#kafka%EC%9D%98-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka의 구성요소</h2>\n<p>Kafka는 다음과 같은 구성요소를 가진다.</p>\n<ul>\n<li>topic, partition</li>\n<li>Producer, Consumer, Consumer Group</li>\n<li>broker, zookeepr</li>\n<li>replication</li>\n</ul>\n<p>하나하나씩 살펴보자.</p>\n<h3 id=\"topic-partition\"><a href=\"#topic-partition\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Topic, Partition</h3>\n<p>메세지는 topic으로 분류되고 topic은 여러개의 파티션으로 나눠진다. 파티션 내의 한 칸은 로그라고 불리고, 데이터는 한 칸의 로그에 순차적으로 append가 되며, 메세지의 상대적인 위치를 나타내는 것이 offset이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97575878-befdf980-1a30-11eb-9027-175a07ac474f.png\" alt=\"image\"></p>\n<p>다음과 같이 하나의 토픽에 여러개의 파티션을 사용해서 메세지를 쓰는 이유는 다음과 같다.</p>\n<ul>\n<li>많은 메세지가 하나의 파티션에 쓴다면 쓰는 과정도 시간이 있기 때문에, 처리하는게 버거워진다.</li>\n<li>이를 방지하기 위해서 여러개의 파티션을 두어 분산저장한다. 결과적으로 병렬처리를 하게되면서 시간이 절약된다.</li>\n<li>단, 파티션을 늘리게 되면 줄일 수 없기 때문에 파티션을 늘려야하는지에 대해서는 충분히 고려해보아야하는 문제이다.</li>\n<li>병렬적으로 처리할 때는 Round Robin형식으로 처리되기 때문에, 순차적으로 메세지가 쓰여지지 않기 때문에 순서가 매우 중요한 메세지를 사용한다면 위험해질 수 있다.</li>\n</ul>\n<h3 id=\"producer-consumer-consumer-group\"><a href=\"#producer-consumer-consumer-group\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Producer, Consumer, Consumer Group</h3>\n<p><strong>Producer</strong></p>\n<ul>\n<li>메세지를 생산하는 주체이다.</li>\n<li>메세지를 만들고 Topic에 메세지를 쓴다.</li>\n<li>Consumer의 존재를 모른다.</li>\n<li>여러개의 토픽에 여러개의 파티션을 나누려면, 특정 메세지들을 분류해서 특정 파티션에 저장할려면 key값을 통해서 분류할 수 있다.</li>\n</ul>\n<p><strong>Consumer</strong></p>\n<ul>\n<li>소비자, 메세지를 소비하는 주체이다.</li>\n<li>Producer의 존재를 모른다.</li>\n<li>해당 topic을 구독함으로서 스스로 조절해가며 소비를 할 수 있다.</li>\n<li>topic내 존재하는 offset의 위치를 통해서, 혹시 Consumer가 죽더라도 다시 살아나서 마지막 위치부터 읽을 수 있으므로 <strong>fail-over</strong>에 대한 신뢰가 존재한다.</li>\n</ul>\n<p><strong>Consumer Group</strong></p>\n<ul>\n<li>Consumer들의 묶음</li>\n<li><strong>반드시 해당 topic의 파티션은 consumer group과 1:n 매칭을 해야한다.</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>partition 수</th>\n<th>consumer 수</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>consumer 중 하나는 2개의 파티션 소비</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>consumer 1개와 파티션 1개가 1:1매칭</td>\n</tr>\n<tr>\n<td>3</td>\n<td>4</td>\n<td>consumer 1개가 아무것도 하지 않는다</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>파티션 수를 늘릴 때는, consumer의 개수도 고려해야한다.</li>\n<li>\n<p>그룹이 존재하는 이유 : <strong>컨슈머 그룹은 하나의 topic에 대한 책임이 있다.</strong></p>\n<ul>\n<li>즉, 특정 컨슈머에 문제가 생겼을 경우 다른 그룹내 컨슈머가 대신 읽을 수 있게 <strong>리벨런싱</strong>이 되어 장애 상황에서도 문제 없이 대처해야한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"broker-zookeeper\"><a href=\"#broker-zookeeper\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Broker, Zookeeper</h3>\n<p>broker는 카프카의 서버를 의미한다. broker.id=1..n으로 함으로써 동일한 노드내에서 여러개의 broker서버를 띄울 수도 있다. zookeeper는 이러한 분산 메세지 큐의 정보를 관리해 주는 역할을 한다. kafka를 띄우기 위해서는 zookeeper가 반드시 실행되어야 한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97719085-060bed80-1b0a-11eb-9c0e-4c86ad8dbe34.png\" alt=\"image\"></p>\n<h3 id=\"replication\"><a href=\"#replication\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Replication</h3>\n<p>Replication은 복제라는 의미이며, 이는 특정 broker에 문제가 생겼을 경우에 해당 broker의 역할을 다른 broker에서 즉각적으로 대신 수행하는 기능을 가진다.</p>\n<p>카프카에서는 replication 수를 임의로 지정하여 topic를 만들 수 있다. replication-factor에 지정하는데 만약 3으로 하면 replication 수가 3이 된다.</p>\n<p>Ex) Kafka Cluster에 3개의 broker가 있고 3개의 Topic이 있다고 가정한 이후, Topic-1은 replication-factor 1, Topic-2은 replication-factor 2, Topic-3은 replication-factor 3인 경우이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97773365-68a8cc00-1b92-11eb-9f15-75d2c5b0c8fe.png\" alt=\"image\"></p>\n<p>좀 더 replication을 자세하게 보면, 복제요소 중 대표는 leader, 그 외의 요소는 follower로 나눠진다. topic으로 통하는 모든 데이터의 read/write는 leader에서만 이뤄지고 follower는 leader와 sync을 유지하며 leader에 문제가 생겻을 경우에 follower 중 하나가 leader 역할을 한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97773513-b245e680-1b93-11eb-9e35-6d10d7695d8d.png\" alt=\"image\"></p>\n<p>복제된 데이터가 follower들에게 있으니, 메시지의 유실이 없다는 장점이 있지만, 복제를 하기 위한 시간과 네트워크 비용이 들기 때문에 데이터의 중요도에 따라 ack옵션으로 성능과 데이터의 중요도에 따라 다음과 같이 세부설정이 가능하다.</p>\n<blockquote>\n<p>ack (default:1)</p>\n<ul>\n<li>0 : 프로듀서는 서버로부터 어떠한 ack도 기다리지 않음. 유실율 높으나 높은 처리량</li>\n<li>1 : 리더는 데이터를 기록, 모든 팔로워는 확인하지 않음</li>\n<li>-1(또는 all) : 모든 ISR 확인. 무손실</li>\n</ul>\n</blockquote>\n<p>ack값을 설정하여 데이터의 무손실에 더 중요성을 둘 것인지 또는 유실을 어느정도 감수 하더라고 속도에 중요성을 둘 것인지를 선택할 수 있다.</p>\n<p>모든 구성요소를 정리하면 다음과 같다.\n<img src=\"https://user-images.githubusercontent.com/42582516/97773623-c3dbbe00-1b94-11eb-8349-dbb6ea14019d.png\" alt=\"image\"></p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://www.redhat.com/ko/topics/integration/what-is-apache-kafka\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.redhat.com/ko/topics/integration/what-is-apache-kafka</a></li>\n<li><a href=\"https://kim-daeyong.github.io/2019-08-09-kafka/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kim-daeyong.github.io/2019-08-09-kafka/</a></li>\n<li><a href=\"https://medium.com/@umanking/%EC%B9%B4%ED%94%84%EC%B9%B4%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0-%ED%95%98%EA%B8%B0%EC%A0%84%EC%97%90-%EB%A8%BC%EC%A0%80-data%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0%ED%95%B4%EB%B3%B4%EC%9E%90-d2e3ca2f3c2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@umanking/%EC%B9%B4%ED%94%84%EC%B9%B4%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0-%ED%95%98%EA%B8%B0%EC%A0%84%EC%97%90-%EB%A8%BC%EC%A0%80-data%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0%ED%95%B4%EB%B3%B4%EC%9E%90-d2e3ca2f3c2</a></li>\n<li><a href=\"https://dbjh.tistory.com/54\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dbjh.tistory.com/54</a></li>\n<li><a href=\"https://team-platform.tistory.com/11\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://team-platform.tistory.com/11</a></li>\n<li><a href=\"http://kafka.apache.org/documentation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://kafka.apache.org/documentation/</a></li>\n</ul>\n"}}]}}},"context":{}}