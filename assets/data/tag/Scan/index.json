{"hash":"4d08d5d9909bc52ba8ae53ab8b5e8ea790bc2d53","data":{"tag":{"title":"Scan","belongsTo":{"edges":[{"node":{"title":"[DB] INDEX SEEK 정리","path":"/00-db-index-seek/","date":"14. July 2021","timeToRead":2,"description":"INDEX SEEK와 SCAN에 대해 정리합니다.","content":"<h1 id=\"db-mssql-index-seek\"><a href=\"#db-mssql-index-seek\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[DB] MSSQL Index Seek</h1>\n<h2 id=\"index-seek란\"><a href=\"#index-seek%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Index Seek란?</h2>\n<p>일종의 Non-Clustered Index를 인덱스 트리를 타고 원하는 데이터로 바로 접근한 경우입니다.</p>\n<p>일반적으로 Non-Clustered Index는 Dense Index이고, Secondary Index입니다.</p>\n<ul>\n<li>*Index : 검색의 효율성을 높이기 위한 물리적인 데이터 구조</li>\n<li>*Sparse Index : 해당 레코드 존재 페이지를 가리키는 포인터를 저장합니다.</li>\n<li>*Dense Index(Secondary Index) : 해당 레코드를 가리키는 포인터를 저장합니다.</li>\n</ul>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> TableA\n<span class=\"token keyword\">where</span> colA <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'B105'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C101'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- colA에 Non-Clustered Index가 생성됩니다.</span>\n<span class=\"token comment\">-- Clustered Index는 생성되지 않습니다.</span>\n<span class=\"token comment\">-- 이 쿼리는 실제 실행에서 Index Seek를 한다고 가정합니다.</span></code></pre>\n<p>이 쿼리문을 처리하는 과정은 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/125635036-f05263f7-f7f2-4dcc-9d11-a20b10247b6d.png\" alt=\"image\"></p>\n<p>SQL Server는 'B105'를 찾기위해서 동작하고 이 동작을 Index Seek라고 부릅니다.</p>\n<ul>\n<li>Root Page를 통해서 Index Page를 찾습니다.</li>\n<li>Index Path에서 Data Page를 찾아, 해당 Row를 읽습니다.</li>\n</ul>\n<p>다만 이 경우 Unique Index인지, Non-Unique Index인지에 따라 페이지를 읽은 수가 다릅니다.</p>\n<ul>\n<li>Unique Index 인 경우, 3Page를 읽습니다.(Index Page = 2, Data Page = 1)</li>\n<li>Non-Unique Index 인 경우, 한 페이지를 더 읽어야합니다. ('B105' 다음이 있는지 확인해야 마지막인 것을 확인할 수 있으므로)</li>\n</ul>\n<p>다만, <strong>핵심 중 하나는 적은 Row 수를 가지는 경우</strong>에서는 Index를 생성하지 않는 것이 좋습니다. 그 이유는 CPU 비용이 Index Seek 보다 Full Scan이 더 적기 때문입니다. (Index Seek 보다는 Data Page를 처음부터 끝까지 읽어서 필요한 부분을 읽는 것이 더 좋습니다.)</p>\n<h2 id=\"index-scan과-index-seek-의-차이\"><a href=\"#index-scan%EA%B3%BC-index-seek-%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Index Scan과 Index Seek 의 차이</h2>\n<ul>\n<li>Index Scan : 해당 테이블의 컬럼을 모두 찾습니다.</li>\n<li>Index Seek : 해당 인덱스를 바로 찾아갑니다.</li>\n</ul>\n<p>이와 같이 Seek가 일반적으로 Scan보다 비용(cost)이 적게 드는 것을 확인할 수 있습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"http://databaser.net/moniwiki/wiki.php/Index\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Index</a></li>\n<li><a href=\"http://databaser.net/moniwiki/wiki.php/IndexSeek\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IndexSeek</a></li>\n<li><a href=\"https://psawesome.tistory.com/14\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Index Seek, Index Scan</a></li>\n<li><a href=\"https://blog.naver.com/PostView.nhn?blogId=waws01&#x26;logNo=60181424769\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">인덱스 SCAN과 SEEK의 차이</a></li>\n</ul>\n"}}]}}},"context":{}}