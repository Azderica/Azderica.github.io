{"hash":"409256f0cf4ba53e53b5c32326d49aab3f1f64f3","data":{"tag":{"title":"HTTP","belongsTo":{"edges":[{"node":{"title":"[WEB] Socket 통신 vs Http 통신","path":"/00-web-socket/","date":"4. January 2021","timeToRead":3,"description":"Socket 통신과 HTTP 통신의 차이에 대해 서술합니다.","content":"<h1 id=\"socket-통신-vs-http-통신\"><a href=\"#socket-%ED%86%B5%EC%8B%A0-vs-http-%ED%86%B5%EC%8B%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Socket 통신 VS HTTP 통신</h1>\n<p>오늘은 웹에서 통신하는 대표적인 방식인 두 방식의 차이에 대해 서술하겠습니다.</p>\n<h2 id=\"socket-통신\"><a href=\"#socket-%ED%86%B5%EC%8B%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Socket 통신</h2>\n<p>Socket 통신을 한마지로 표현하자면, <strong>Server와 Client가 특정 Port를 통해 실시간으로 양방향 통신을 하는 방식</strong>입니다.</p>\n<h3 id=\"socket-통신의-구조\"><a href=\"#socket-%ED%86%B5%EC%8B%A0%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Socket 통신의 구조</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103532675-042a2600-4ecf-11eb-815c-b73529445021.png\" alt=\"Socket통신\">\n출처 : <a href=\"https://mangkyu.tistory.com/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mangkyu.tistory.com/48</a></p>\n<p>특정 포트를 통해 연결하여 실시간 양방향 통신을 합니다. 서버 또한 요청을 보낼 수 있고, 실시간으로 요청을 보낼 수 있기 때문에 양방향 정보 교환에서 유리한 점을 가집니다. 만약에 동영상 스트리밍이나 게임 서비스를 socket통신을 하지 않고 하는 경우에는 계속적인 연결요청이 가므로, 과부하가 걸리게 됩니다.</p>\n<h3 id=\"socket-통신의-특징\"><a href=\"#socket-%ED%86%B5%EC%8B%A0%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Socket 통신의 특징</h3>\n<ul>\n<li>Server와 Client가 계속 연결을 유지하는 <strong>양방향 통신</strong>입니다.</li>\n<li>Server와 Client가 실시간으로 데이터를 주고 받는 상황이 필요한 경우에 주로 사용됩니다.</li>\n<li>실시간 동영상 Streaming이나 온라인 게임 등과 같은 경우에 자주 사용됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"http-통신\"><a href=\"#http-%ED%86%B5%EC%8B%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 통신</h2>\n<h3 id=\"http-통신의-구조\"><a href=\"#http-%ED%86%B5%EC%8B%A0%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 통신의 구조.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103532658-feccdb80-4ece-11eb-8085-2cb7d7f83d8d.png\" alt=\"HTTP통신\">\n출처 : <a href=\"https://mangkyu.tistory.com/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mangkyu.tistory.com/48</a></p>\n<p>client의 요청(Request)이 있을 때만 서버가 응답(response)하여 해당 정보를 전송하고 곧바로 연결을 종료하는 방식입니다. 일반적으로 request를 보냈을 때, 내용을 기다리는시간과 연결하는 시간이 필요하기 때문에 해당 통신은 콘텐츠 위주의 데이터를 사용할 때 유용합니다.</p>\n<h3 id=\"http-통신의-특징\"><a href=\"#http-%ED%86%B5%EC%8B%A0%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 통신의 특징</h3>\n<ul>\n<li>Client가 요청을 보내는 경우에만 Server가 응답하는 <strong>단방향 통신</strong>입니다.</li>\n<li>Server로부터 응답을 받은 후에는 연결이 바로 종료가 됩니다.</li>\n<li>실시간 연결이 아니고, 필요한 경우에만 Server로 요청을 보내는 상황에 유용합니다.</li>\n<li>요청을 보내 Server의 응답을 기다리는 어플리케이션 개발에 주로 사용됩니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>HTTP 통신과 Socket 통신에 대해 알아보았습니다. 가장 큰 차이 중 하나는 단방향 통신과 양방향 통신의 차이입니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://velog.io/@ejchaid/http\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@ejchaid/http</a></li>\n<li><a href=\"https://mangkyu.tistory.com/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mangkyu.tistory.com/48</a></li>\n</ul>\n"}},{"node":{"title":"[Network] CDN이란?","path":"/00-network-cdn/","date":"28. December 2020","timeToRead":5,"description":" CDN에 대해 작성합니다.","content":"<h1 id=\"cdn이란\"><a href=\"#cdn%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDN이란?</h1>\n<p>롤을 좋아하시는 분 들 중, 저번 큰 이슈 중 하나로 CDN 서버가 나가서 대회가 중단되었던 사례가 있습니다.</p>\n<p>일반적으로 사용자가 많은 사이트나, 서버에서는 거의 대부분 CDN을 사용합니다. 저희 회사에서 배포하는 서비스 또한 CDN을 당연히 쓰고 있고 이에 대한 개념을 아는 것은 거의 필수라고 볼 수 있습니다. 그에 따라 한번 내용을 정리해볼려고합니다.</p>\n<br/>\n<h2 id=\"cdn의-정의\"><a href=\"#cdn%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDN의 정의</h2>\n<p>CDN(Contents Delivery Network)은 <strong>물리적으로 멀리 떨어져있는 사용자에게 컨텐츠 제공자의 컨텐츠를 더 빠르게 제공할 수 있는 기술</strong>을 의미합니다.</p>\n<p>일반적으로 우리가 많이 보는 넷플릭스와 같이 큰 영상 데이터를 스트리밍해서 사용자에게 보내줘야하는 경우에는 이러한 CDN은 반드시 필요한 기술입니다.</p>\n<p>좀 더 자세하게 설명하자면, 기본적으로 사용자는 원격에 있는 서버(Origin Server)로 부터 Content(Ex. Web Object, Video, Music, Image 등등)을 다운 받을때는 가까이에서 받는것보다 시간이 오래걸립니다. 따라서 사용자와 가까운 곳에 위치한 Cache Server에 Content를 저장(캐싱)하고 Content 요청시에 Cache Server에 응답을 주는 기술입니다.</p>\n<p>즉, CDN은 <strong>콘텐츠를 전송하도록 최적화된 전세계적으로 촘촘히 분산된 서버로 이루어진 플랫폼</strong>입니다. 이 <strong>CDN은 Origin이라고 불리는 콘텐츠 서버와 엔드유저(Client) 사이에서 컨텐츠를 저장</strong>하는 역할을 합니다.</p>\n<br/>\n<h2 id=\"cdn의-이용시-장점\"><a href=\"#cdn%EC%9D%98-%EC%9D%B4%EC%9A%A9%EC%8B%9C-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDN의 이용시 장점</h2>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103219584-7942ac00-4961-11eb-9011-4e76f394c548.png\" alt=\"CDN 장점\"></p>\n<p>일반적으로 CDN을 사용하지 않으면 Origin 서버의 경우에는 모든 클라이언트의 요청에 일일이 응답해야합니다. 이는 막대한 트래픽을 유발하고, 장애 발생확률을 높입니다.</p>\n<p>CDN을 이용하면 다음과 같은 장점을 가집니다.</p>\n<ul>\n<li>\n<p>성능</p>\n<ul>\n<li>온라인 콘텐츠가 빠르게 전송시킬 수 있습니다.</li>\n<li>해당 Origin 서버가 여러 위치에 CDN을 설치해놓으면 해당 위치에서 신규 콘텐츠를 요청하는 경우, 가까운 곳에서 직접 액세스가 가능하고 이를 통해서 수백, 수천 킬로미터의 왕복시간을 절약할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>가용성</p>\n<ul>\n<li>여러 트래픽 급증, 서버 중단 등의 이슈에서도 클라이언트에게 콘텐츠를 제공할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>보안</p>\n<ul>\n<li>보안적인 지원이 많이 들어가는 CDN을 사용하는 경우, CDN은 악성 유저들의 공격을 막음으로서 사용자들을 보호할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"cdn의-작동원리\"><a href=\"#cdn%EC%9D%98-%EC%9E%91%EB%8F%99%EC%9B%90%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDN의 작동원리.</h2>\n<p>CDN은 다음과 같이 작동합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103219998-7b593a80-4962-11eb-9b95-290c39678b9c.png\" alt=\"CDN 작동원리\"></p>\n<ol>\n<li>일반적으로 웹 브라우저가 실행되는 디바이스인 PC나 모바일에서 사용자가 접근해서 필요한 콘텐츠를 요청합니다.</li>\n<li>대부분의 CDN의 경우, 각 요청이 발생시 가장 가까운 위치에 최적으로 배치된 CDN 서버에 클라이언트가 매핑되고 해당 서버는 이 데이터를전송합니다.</li>\n<li>오래된 CDN의 경우, 요청 프록시를 통해서 Origin 서버에 콘텐츠를 요청하고 새로운 콘텐츠로 저장합니다.</li>\n</ol>\n<br/>\n<h2 id=\"cdn-캐싱-방식의-종류\"><a href=\"#cdn-%EC%BA%90%EC%8B%B1-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDN 캐싱 방식의 종류</h2>\n<p>Content 캐싱은 Static과 Dynamic으로 나눌 수 있습니다.</p>\n<h3 id=\"static-caching\"><a href=\"#static-caching\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Static Caching</h3>\n<ul>\n<li>사용자 요청이 없어도 Origin Server에 있는 Content를 운영자가 미리 Cache Server에 복사합니다,</li>\n<li>따라서 사용자가 Cache Server에서 Content를 요청시 반드시 해당 컨텐츠는 Cache Server에 있습니다.</li>\n<li>대부분의 국내 CDN은 이 방식을 선호합니다.</li>\n</ul>\n<h3 id=\"dynamic-caching\"><a href=\"#dynamic-caching\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dynamic Caching</h3>\n<ul>\n<li>최초 Cache Server에는 Content가 없습니다.</li>\n<li>사용자가 Content를 요청하면, 해당 Content가 있는지 확인하고 없으면 Origin Server로부터 다운로드 받습니다</li>\n<li>이후 동일 Content 요청을 받은 경우, 저정(캐싱)된 Content를 사용자에게 전달합니다. (Cache Hit)</li>\n<li>각 Content는 일정시간(TTL)이 지나면 Content Server에서 삭제될 수 있고 혹은 Origin Server를 통해서 Content 최신화 된 이후 계속 가지고 있을 수 있습니다.</li>\n<li>Global CDN 업체의 경우에는 일반적으로 이 방식을 선호합니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>오늘은 간단하게, CDN에 대해 정리해보았습니다. 많은 회사에서 CDN을 쓰고 있고 이에 따라 이정도의 개념은 알고 있는 것이 좋은 것 같습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://cdn.hosting.kr/cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cdn.hosting.kr/cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</a></li>\n<li><a href=\"https://goddaehee.tistory.com/173\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://goddaehee.tistory.com/173</a></li>\n<li><a href=\"https://brownbears.tistory.com/408\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://brownbears.tistory.com/408</a></li>\n</ul>\n"}},{"node":{"title":"[Springboot] CORS 이슈 해결하기","path":"/00-springboot-cors/","date":"27. December 2020","timeToRead":2,"description":" Springboot CORS에 대한 해결방법입니다.","content":"<h1 id=\"springboot-cors-이슈-해결하기\"><a href=\"#springboot-cors-%EC%9D%B4%EC%8A%88-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Springboot CORS 이슈 해결하기.</h1>\n<p>지난 게시글에서는 CORS 이슈에 대해 정리했습니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/00-web-cors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CORS란.</a></li>\n</ul>\n<p>회사 보안 정책에 따라서, 웹페이지에 허용되는 HTTP 메소드가 제한되는 경우가 있습니다. 저 또한 회사에서 이러한 업무를 해야하는 경우가 있기 때문에 이에 대해 한번 정리합니다.</p>\n<p>이러한 CORS 이슈를 스프링 부트에서 해결하는 방법에 대해서 코드를 작성해볼려고합니다.</p>\n<h2 id=\"custom-filter-사용\"><a href=\"#custom-filter-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Filter 사용.</h2>\n<p>인터넷에서 CORS 이슈에 대한 해결책을 찾아보면 Spring은 쉽게 확인할 수 있는데, Sprinboot에 대한 글이 별로 없어 이를 작성했습니다.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mvc</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dispatch-options-request</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre>\n<p>yaml 파일에서는 다음과 같이 추가했습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>   <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> servletRequest<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GET, OPTIONS, HEAD, POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">HttpServletResponse</span> resp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span> servletResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      resp<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">.</span>SC_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>기존의 Filter를 상속받아서 다음과 같이 수정합니다.</p>\n<p>이를 메소드 점검해보면 다음과 같습니다.</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">curl -v -X OPTIONS {url}</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103171817-7cbb3200-4892-11eb-9a4a-d1125fc46506.png\" alt=\"image\"></p>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>다만 의문점 중 하나는 <strong>TRACE를 막는 방법</strong>에 대해서는 아직 확인 중에 있습니다.</p>\n<p>특히 <code class=\"language-text\">curl -v -X TRACE {url}</code> 와 <code class=\"language-text\">curl -v -X trace {url}</code> 이 다른 결과 값을 나타내는 것을 확인할 수 있습니다.</p>\n<p>이에 대해서는 좀 더 명확한 답을 추가해서 글에 추가를 해놓겠습니다. 혹시라도 답을 아시거나 잘못된 부분이 있으면 이야기주세요. 감사합니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://webhack.dynu.net/?idx=20161110.001&#x26;print=friendly\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webhack.dynu.net/?idx=20161110.001&#x26;print=friendly</a></li>\n</ul>\n"}},{"node":{"title":"[WEB] CORS","path":"/00-web-cors/","date":"26. December 2020","timeToRead":6,"description":" CORS에 대한 개념을 잡습니다. ","content":"<h1 id=\"corscross-origin-resource-sharing\"><a href=\"#corscross-origin-resource-sharing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS(Cross-Origin Resource Sharing)</h1>\n<p>웹 개발을 하게 되면, 반드시 보게되는 이슈입니다. 그러나 이에 대한 개념에 대해 정확하게 모른다는 생각이 들어 정리합니다.</p>\n<br/>\n<h2 id=\"cors의-정의\"><a href=\"#cors%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS의 정의</h2>\n<p>CORS(Cross-Origin Resource Sharing)은 <strong>추가 HTTP 헤더를 사용</strong>하여, <strong>하나의 출처(origin)에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 권한을 부여하도록 브라우저에 알려주는 체제</strong>입니다.</p>\n<p><strong>하나의 출처</strong>란? URL의 프로토콜, 호스트, 포트가 동일한 경우를 의미합니다.</p>\n<p>일반적으로는 다른 출처(origin)에서 내 자원(resource)에 함부로 접근하지 못하게 하기 위해 사용됩니다.</p>\n<p>일반적으로 <strong>요청 헤더 목록</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p>Origin</p>\n<ul>\n<li>fetch가 시작되는 위치.</li>\n<li>경로 정보는 포함이 되지않고 서버 이름만 포함됨.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Request-Method</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 을 할 때, 실제 요청에서 어떤 메소드를 사용할지 서버에 알려줍니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Request-Headers</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 을 할 때, 실제 요청에서 어떤 header를 사용할 것인지 서버에서 알리기 위해 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>응답 헤더 목록</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p>Access-Control-Allow-Origin</p>\n<ul>\n<li>브라우저가 해당 origin이 자원에 접근할 수 있도록 허용합니다.</li>\n<li><code class=\"language-text\">*</code> 은 credentials이 없는 요청에 한해서 모든 origin에서 접근이 가능하도록 허용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Expose-Headers</p>\n<ul>\n<li>브라우저가 액세스할 수 있는 서버의 화이트리스트 헤더를 허용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Max-Age</p>\n<ul>\n<li>얼마나 오랫동안 <code class=\"language-text\">preflight request</code>가 캐싱될 수 있는지를 나타냅니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Credential</p>\n<ul>\n<li><code class=\"language-text\">Credentials</code>가 true일 때 요청에 대한 응답이 노출될 수 있는지를 나타냅니다.</li>\n<li><code class=\"language-text\">preflight request</code> 에 대한 응답의 일부로 사용되는 경우, 실제 자격 증명을 사용하여 실제 요청을 수행 할 수 있는지를 나타냅니다.</li>\n<li>간단한 GET 요청의 경우에는 <code class=\"language-text\">preflight</code> 되지 않으므로 자격 증명이 필요한 리소스를 요청하면 헤더가 리소스와 함께 반환되지 않으며 브라우저에서 응답을 무시하고 웹 콘텐츠로 반환하지 않습니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Methods</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 에 대한 응답으로 허용되는 메서드들을 나타냅니다.</li>\n<li>일반적으로 회사에서 보안 상의 이유로 http 메소드를 제한하는 경우, 이 헤더를 많이 사용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Headers</p>\n<ul>\n<li><code class=\"language-text\">preflight</code> 요청에 대한 응답으로 실제 요청 시 사용할 수 있는 HTTP 헤더를 나타냅니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>preflight request</strong>란? <strong>미리 전송(사전요청)</strong>을 의미합니다. 이는 본격적인 교차 HTTP 요청 전에 서버 측에서 그 요청의 메서드와 헤더에 대한 인식을 진행하는 지 확인합니다.</p>\n<p>이는 위에 있는 HTTPHeader의 \"Origin\", \"Access-Control-Request-Method\", \"Access-Control-Request-Headers\" 의 3가지 HTTP request headers를 사용하는 HTTPMethod(\"OPTIONS\") 요청입니다.</p>\n<br/>\n<h2 id=\"cors가-없으면\"><a href=\"#cors%EA%B0%80-%EC%97%86%EC%9C%BC%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS가 없으면?</h2>\n<p>만약 어떤 사이트에서 CORS 제한이 없으면 어떻게 될까요. 다른 출처의 어플리케이션이 서로 통신하는 것에 아무런 제한이 없게된다면 악의를 가진 사용자가 소스 코드를 볼 수도 있고, 세션정보를 가져갈 수도 있습니다.</p>\n<p>또한 <a href=\"https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%9A%94%EC%B2%AD_%EC%9C%84%EC%A1%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSRF(Cross-Site Request Forgery)</a>나 <a href=\"https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">XSS(Cross-Site Scripting)</a>와 같은 방법을 사용해서 어플리케이션에서 코드가 실행된 것처럼 꾸며서 사용자의 정보를 탈취하기 너무 쉬워집니다.</p>\n<p>이러한 경우에 개발자들이 투자해야하는 리소스들은 더 많아지기 때문에 이에 대한 제한은 꼭 필요합니다.</p>\n<br/>\n<h2 id=\"cors는-어떻게-동작하나요\"><a href=\"#cors%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%98%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS는 어떻게 동작하나요?</h2>\n<p>이러한 CORS의 정의와 왜 필요한지에 대해서 알게 되었기 때문에 좀 더 자세하게 이야기를 해볼려고 합니다.</p>\n<p>GET 요청은 다음과 같이 간단하게 작동합니다. 특히 GET은 서버의 자원을 바꾸지 않기 때문에 로직은 아래처럼 간단합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103171139-141d8680-488d-11eb-87bc-38088c87fbbf.png\" alt=\"CORS-GET\"></p>\n<p>그러나 POST와 같은 비멱등인 경우, 허용하지 않은 도메인이 서버 자원을 변경시킬 수 있기 때문에 이를 신경써줘야합니다. 따라서 POST와 같은 경우는 아래처럼 동작합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/103171048-67430980-488c-11eb-98a1-4e77c348d22d.png\" alt=\"CORS-POST\"></p>\n<p>먼저 OPTIONS을 요청해서 해당 도메인간의 요청이 정상적인지 확인합니다.</p>\n<p>이와 같이 CORS는 동작합니다.</p>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<p>CORS에 대한 이슈에 대해 정리했습니다. 이에 대한 개념을 잡았으며, 다음 글에서는 spring boot에서 CORS 이슈를 해결하는 방법에 대해 이야기해보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Preflight_request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Glossary/Preflight_request</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Origin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Origin</a></li>\n<li><a href=\"https://hannut91.github.io/blogs/infra/cors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hannut91.github.io/blogs/infra/cors</a></li>\n<li><a href=\"https://zzossig.io/posts/web/what_is_cors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://zzossig.io/posts/web/what_is_cors/</a></li>\n</ul>\n"}},{"node":{"title":"[VueJS] Vuejs 라우터, 통신, 리소스","path":"/03-vuejs-starter/","date":"15. December 2020","timeToRead":6,"description":" 'Vuejs 시작하기'의 세번째 게시글입니다. ","content":"<h1 id=\"vuejs-라우터-http-통신-뷰-리소스\"><a href=\"#vuejs-%EB%9D%BC%EC%9A%B0%ED%84%B0-http-%ED%86%B5%EC%8B%A0-%EB%B7%B0-%EB%A6%AC%EC%86%8C%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vue.js 라우터, HTTP 통신, 뷰 리소스</h1>\n<p>지난 컴포넌트 게시글에서 세번째 글입니다. 해당 컨텐츠는 \"Vue.js 시작하기 - Age of Vue.js\"의 강의 내용을 정리한 자료입니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/01-vuejs-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VueJs 시작하기 - 1</a></li>\n<li><a href=\"https://azderica.github.io/01-vuejs-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VueJs 시작하기 - 2</a></li>\n</ul>\n<br/>\n<h2 id=\"뷰-라우터\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터</h2>\n<h3 id=\"뷰-라우터란\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터란?</h3>\n<p>뷰 라우터는 뷰 라이브러리를 이용하여 싱글 페이지 애플리케이션을 구현할 때 사용하는 라이브러리입니다.</p>\n<p><a href=\"https://router.vuejs.org/kr/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js 라우터 공식 다큐먼트</a></p>\n<h3 id=\"뷰-라우터-설치-방법\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터 설치 방법</h3>\n<p>뷰 라우터를 설치하는 방법은 2가지 방식이 있습니다.</p>\n<h4 id=\"cdns-방법\"><a href=\"#cdns-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDNS 방법</h4>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue-router/dist/vue-router.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>해당 방법은 따로 선언할 필요없이, html에 넣으면도 되기 때문에 저는 이 방법을 선호합니다.</p>\n<h4 id=\"npm-방법\"><a href=\"#npm-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NPM 방법</h4>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue-router</code></pre>\n<h3 id=\"뷰-라우터-등록\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EB%93%B1%EB%A1%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터 등록</h3>\n<p>뷰 라우터를 설치하고 나면 다음과 같이 라우터 인스턴스를 생성하여 등록할 수 있습니다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 라우터 인스턴스 생성</span>\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 라우터 옵션</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 인스턴스에 라우터 인스턴스를 등록</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  router<span class=\"token operator\">:</span> router\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"뷰-라우터-옵션\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%98%B5%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터 옵션</h3>\n<p>위처럼 라우터를 등록하면, 라우터에 옵션을 저장할 수 있습니다. 대부분의 SPA(single-page application) 앱에서는 아래와 같이 2개의 욥션을 필수로 지정해야합니다.</p>\n<ul>\n<li><strong>routes</strong>: 라우팅 할 URL과 컴포넌트 값 지정</li>\n<li><strong>mode</strong> : URL의 해쉬 값 제거 속성</li>\n</ul>\n<p>이 두개를 통해서 다음과 정의할 수 있습니다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">,</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">LoginComponent</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">HomeComponent</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>해당 코드를 통해서 URL 값이 <code class=\"language-text\">/login</code>이거나 <code class=\"language-text\">/home</code> 일때 각각의 로그인 컴포넌트와 홈 컴포넌트의 데이터를 받아옵니다.</p>\n<h3 id=\"router-view\"><a href=\"#router-view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>router-view</h3>\n<p>위에서 브라우저의 주소 창에서 URL이 변경되면, 앞에서 정의한 routes 속성에 따라 해당 컴포넌트가 화면에 뿌려집니다. 이 때 뿌려지는 위치가 템플릿의 <code class=\"language-text\">&lt;router-view&gt;</code>입니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- LoginComponent 또는 HomeComponent --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code class=\"language-text\">/login</code>은 로그인 컴포넌트, <code class=\"language-text\">/home</code>은 홈 컴포넌트를 화면에 표시합니다.</p>\n<h3 id=\"router-link\"><a href=\"#router-link\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>router-link</h3>\n<p><code class=\"language-text\">&lt;router-link&gt;</code>는 화면에서 특정 링크를 클릭해서 페이지를 이동할 수 있게하는 기능입니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>이동할 URL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>이를 실제 코드로 구현하면 다음과 같습니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>해당 코드 실행시 <code class=\"language-text\">&lt;a&gt;</code> 태그로 변환됩니다.</p>\n<h3 id=\"원본-코드\"><a href=\"#%EC%9B%90%EB%B3%B8-%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>원본 코드</h3>\n<p>해당원본 코드는 다음의 링크를 참고하시면 좋습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-lean-vue-js/blob/master/playground-complete/router.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">router.html</a></li>\n</ul>\n<p>좀 더 자세하게 공부하려면.</p>\n<ul>\n<li><a href=\"https://joshua1988.github.io/web-development/vuejs/vue-router-navigation-guards/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Captain Pangyo님의 글</a></li>\n</ul>\n<br/>\n<h2 id=\"http-라이브러리와-ajax-vue-resource\"><a href=\"#http-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%99%80-ajax-vue-resource\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 라이브러리와 Ajax, Vue Resource</h2>\n<h3 id=\"ajax\"><a href=\"#ajax\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ajax</h3>\n<p>Ajax의 정의는 JavaScript의 라이브러리 중 하나이며 Asynchronous Javascript And Xml(비동기식 자바스크립트와 xml)의 약자입니다. 브라우저가 가지고있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고도 페이지의 일부만을 위한 데이터를 로드하는 기법입니다. </p>\n<p>이를 정리하면 <strong>JavaScript를 사용한 비동기 통신, 클라이언트와 서버간에 XML 데이터를 주고받는 기술</strong>로 정의할 수 있습니다.</p>\n<h4 id=\"비동기-처리란\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>비동기 처리란?</h4>\n<p>자바스크립트의 비동기 처리란 특정 코드의 연산이 끝날 때까지 코드의 실행을 멈추지 않고, 다음 코드를 먼저 실행하는 자바스크립트의 특성을 의미합니다. </p>\n<p>좀 더 자세하게 볼려면.</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/Ajax\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ajax 정의</a></li>\n<li><a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue Resource Git</a></li>\n</ul>\n<h3 id=\"axios\"><a href=\"#axios\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Axios</h3>\n<p>Axios(액시오스)는 <strong>뷰에서 권고하는 HTTP 통신 라이브러리</strong>입니다. <strong>Promise 기반의 HTTP 통신 라이브러리이며 상대적으로 다른 HTTP 통신 라이브러리들에 비해 문서화가 잘되어 있고 API가 다양</strong>합니다.</p>\n<ul>\n<li><a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Axios Git</a></li>\n</ul>\n<h3 id=\"자바스크립트-비동기-처리-패턴\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바스크립트 비동기 처리 패턴</h3>\n<ol>\n<li>callback</li>\n<li>promise</li>\n<li>promise + generator</li>\n<li>async &#x26; await</li>\n</ol>\n<p>좀 더 자세하게 보려면.</p>\n<ul>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 비동기 처리와 콜백 함수</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 Prmoise 이해하기</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/js-async-await/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 async와 await</a></li>\n</ul>\n<h3 id=\"axios-설치-방법\"><a href=\"#axios-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Axios 설치 방법</h3>\n<p>프로젝트에 액시오스를 설치하는 방법은 CDN 방식과 NPM 방식 2가지가 있습니다.</p>\n<h4 id=\"cdn-방식\"><a href=\"#cdn-%EB%B0%A9%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDN 방식</h4>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"npm-방식\"><a href=\"#npm-%EB%B0%A9%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NPM 방식</h4>\n<pre class=\"language-text\"><code class=\"language-text\">npm install axios</code></pre>\n<h3 id=\"axios-사용-방법\"><a href=\"#axios-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Axios 사용 방법</h3>\n<p>라이브러리를 설치하면 <code class=\"language-text\">axios</code> 변수에 접근할 수 있습니다. 이 <code class=\"language-text\">axios</code>를 통해서 아래와 같이 HTTP GET 요청을 날릴 수 있습니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fetchData<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>get data<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">fetchData</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://jsonplaceholder.typicode.com/users/'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>해당 코드를 실행해보면, get data 버튼 클릭시 사용자 정보를 받아옵니다.</p>\n<ul>\n<li>Tip) function안의 this와 .then 안에 있는 this는 바라보고 있는 것이 다릅니다.</li>\n</ul>\n<p>해당 요청에 대해 좀 더 자세하게 확인할려면.</p>\n<ul>\n<li><a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jsonplaceholder 사이트</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/translation/javascript/how-js-works-inside-engine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 동작 원리</a></li>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/102364902-52e44e80-3ffa-11eb-9f59-97c20d7b2a11.png\" alt=\"HTTP 통신 구조\"></li>\n</ul>\n<h3 id=\"원본-코드-1\"><a href=\"#%EC%9B%90%EB%B3%B8-%EC%BD%94%EB%93%9C-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>원본 코드</h3>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-lean-vue-js/blob/master/playground-complete/axios.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios.html</a></li>\n</ul>\n"}}]}}},"context":{}}