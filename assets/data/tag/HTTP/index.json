{"hash":"409256f0cf4ba53e53b5c32326d49aab3f1f64f3","data":{"tag":{"title":"HTTP","belongsTo":{"edges":[{"node":{"title":"[WEB] CORS","path":"/00-web-cors/","date":"26. December 2020","timeToRead":5,"description":" 'CORS에 대한 개념을 잡습니다. ","content":"<h1 id=\"corscross-origin-resource-sharing\"><a href=\"#corscross-origin-resource-sharing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS(Cross-Origin Resource Sharing)</h1>\n<p>웹 개발을 하게 되면, 반드시 보게되는 이슈입니다. 그러나 이에 대한 개념에 대해 정확하게 모른다는 생각이 들어 정리합니다.</p>\n<br/>\n<h2 id=\"cors의-정의\"><a href=\"#cors%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS의 정의</h2>\n<p>CORS(Cross-Origin Resource Sharing)은 <strong>추가 HTTP 헤더를 사용</strong>하여, <strong>하나의 출처(origin)에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 권한을 부여하도록 브라우저에 알려주는 체제</strong>입니다.</p>\n<p><strong>하나의 출처</strong>란? URL의 프로토콜, 호스트, 포트가 동일한 경우를 의미합니다.</p>\n<p>일반적으로는 다른 출처(origin)에서 내 자원(resource)에 함부로 접근하지 못하게 하기 위해 사용됩니다.</p>\n<p>일반적으로 <strong>요청 헤더 목록</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p>Origin</p>\n<ul>\n<li>fetch가 시작되는 위치.</li>\n<li>경로 정보는 포함이 되지않고 서버 이름만 포함됨.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Request-Method</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 을 할 때, 실제 요청에서 어떤 메소드를 사용할지 서버에 알려줍니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Request-Headers</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 을 할 때, 실제 요청에서 어떤 header를 사용할 것인지 서버에서 알리기 위해 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>응답 헤더 목록</strong>은 다음과 같습니다.</p>\n<ul>\n<li>\n<p>Access-Control-Allow-Origin</p>\n<ul>\n<li>브라우저가 해당 origin이 자원에 접근할 수 있도록 허용합니다.</li>\n<li><code class=\"language-text\">*</code> 은 credentials이 없는 요청에 한해서 모든 origin에서 접근이 가능하도록 허용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Expose-Headers</p>\n<ul>\n<li>브라우저가 액세스할 수 있는 서버의 화이트리스트 헤더를 허용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Max-Age</p>\n<ul>\n<li>얼마나 오랫동안 <code class=\"language-text\">preflight request</code>가 캐싱될 수 있는지를 나타냅니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Credential</p>\n<ul>\n<li><code class=\"language-text\">Credentials</code>가 true일 때 요청에 대한 응답이 노출될 수 있는지를 나타냅니다.</li>\n<li><code class=\"language-text\">preflight request</code> 에 대한 응답의 일부로 사용되는 경우, 실제 자격 증명을 사용하여 실제 요청을 수행 할 수 있는지를 나타냅니다.</li>\n<li>간단한 GET 요청의 경우에는 <code class=\"language-text\">preflight</code> 되지 않으므로 자격 증명이 필요한 리소스를 요청하면 헤더가 리소스와 함께 반환되지 않으며 브라우저에서 응답을 무시하고 웹 콘텐츠로 반환하지 않습니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Methods</p>\n<ul>\n<li><code class=\"language-text\">preflight request</code> 에 대한 응답으로 허용되는 메서드들을 나타냅니다.</li>\n<li>일반적으로 회사에서 보안 상의 이유로 http 메소드를 제한하는 경우, 이 헤더를 많이 사용합니다.</li>\n</ul>\n</li>\n<li>\n<p>Access-Control-Allow-Headers</p>\n<ul>\n<li><code class=\"language-text\">preflight</code> 요청에 대한 응답으로 실제 요청 시 사용할 수 있는 HTTP 헤더를 나타냅니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>preflight request</strong>란? <strong>미리 전송(사전요청)</strong>을 의미합니다. 이는 본격적인 교차 HTTP 요청 전에 서버 측에서 그 요청의 메서드와 헤더에 대한 인식을 진행하는 지 확인합니다.</p>\n<p>이는 위에 있는 HTTPHeader의 \"Origin\", \"Access-Control-Request-Method\", \"Access-Control-Request-Headers\" 의 3가지 HTTP request headers를 사용하는 HTTPMethod(\"OPTIONS\") 요청입니다.</p>\n<br/>\n<h2 id=\"cors가-없으면\"><a href=\"#cors%EA%B0%80-%EC%97%86%EC%9C%BC%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS가 없으면?</h2>\n<p>만약 어떤 사이트에서 CORS 제한이 없으면 어떻게 될까요. 다른 출처의 어플리케이션이 서로 통신하는 것에 아무런 제한이 없게된다면 악의를 가진 사용자가 소스 코드를 볼 수도 있고, 세션정보를 가져갈 수도 있습니다.</p>\n<p>또한 <a href=\"https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%9A%94%EC%B2%AD_%EC%9C%84%EC%A1%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSRF(Cross-Site Request Forgery)</a>나 <a href=\"https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">XSS(Cross-Site Scripting)</a>와 같은 방법을 사용해서 어플리케이션에서 코드가 실행된 것처럼 꾸며서 사용자의 정보를 탈취하기 너무 쉬워집니다.</p>\n<p>이러한 경우에 개발자들이 투자해야하는 리소스들은 더 많아지기 때문에 이에 대한 제한은 꼭 필요합니다.</p>\n<br/>\n<h2 id=\"cors는-어떻게-동작하나요\"><a href=\"#cors%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%98%EB%82%98%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS는 어떻게 동작하나요?</h2>\n<p>이러한 CORS의 정의와 왜 필요한지에 대해서 알게 되었기 때문에 좀 더 자세하게 이야기를 해볼려고 합니다.</p>\n<p>(추가 작성 중.)</p>\n<br/>\n<h2 id=\"cors-에러와-해결\"><a href=\"#cors-%EC%97%90%EB%9F%AC%EC%99%80-%ED%95%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS 에러와 해결</h2>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리.</h2>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Preflight_request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Glossary/Preflight_request</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Origin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Origin</a></li>\n<li><a href=\"https://hannut91.github.io/blogs/infra/cors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hannut91.github.io/blogs/infra/cors</a></li>\n</ul>\n"}},{"node":{"title":"[VueJS] Vuejs 라우터, 통신, 리소스","path":"/03-vuejs-starter/","date":"15. December 2020","timeToRead":6,"description":" 'Vuejs 시작하기'의 세번째 게시글입니다. ","content":"<h1 id=\"vuejs-라우터-http-통신-뷰-리소스\"><a href=\"#vuejs-%EB%9D%BC%EC%9A%B0%ED%84%B0-http-%ED%86%B5%EC%8B%A0-%EB%B7%B0-%EB%A6%AC%EC%86%8C%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vue.js 라우터, HTTP 통신, 뷰 리소스</h1>\n<p>지난 컴포넌트 게시글에서 세번째 글입니다. 해당 컨텐츠는 \"Vue.js 시작하기 - Age of Vue.js\"의 강의 내용을 정리한 자료입니다.</p>\n<ul>\n<li><a href=\"https://azderica.github.io/01-vuejs-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VueJs 시작하기 - 1</a></li>\n<li><a href=\"https://azderica.github.io/01-vuejs-starter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VueJs 시작하기 - 2</a></li>\n</ul>\n<br/>\n<h2 id=\"뷰-라우터\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터</h2>\n<h3 id=\"뷰-라우터란\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터란?</h3>\n<p>뷰 라우터는 뷰 라이브러리를 이용하여 싱글 페이지 애플리케이션을 구현할 때 사용하는 라이브러리입니다.</p>\n<p><a href=\"https://router.vuejs.org/kr/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js 라우터 공식 다큐먼트</a></p>\n<h3 id=\"뷰-라우터-설치-방법\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터 설치 방법</h3>\n<p>뷰 라우터를 설치하는 방법은 2가지 방식이 있습니다.</p>\n<h4 id=\"cdns-방법\"><a href=\"#cdns-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDNS 방법</h4>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue-router/dist/vue-router.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>해당 방법은 따로 선언할 필요없이, html에 넣으면도 되기 때문에 저는 이 방법을 선호합니다.</p>\n<h4 id=\"npm-방법\"><a href=\"#npm-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NPM 방법</h4>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue-router</code></pre>\n<h3 id=\"뷰-라우터-등록\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EB%93%B1%EB%A1%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터 등록</h3>\n<p>뷰 라우터를 설치하고 나면 다음과 같이 라우터 인스턴스를 생성하여 등록할 수 있습니다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 라우터 인스턴스 생성</span>\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 라우터 옵션</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 인스턴스에 라우터 인스턴스를 등록</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  router<span class=\"token operator\">:</span> router\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"뷰-라우터-옵션\"><a href=\"#%EB%B7%B0-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%98%B5%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>뷰 라우터 옵션</h3>\n<p>위처럼 라우터를 등록하면, 라우터에 옵션을 저장할 수 있습니다. 대부분의 SPA(single-page application) 앱에서는 아래와 같이 2개의 욥션을 필수로 지정해야합니다.</p>\n<ul>\n<li><strong>routes</strong>: 라우팅 할 URL과 컴포넌트 값 지정</li>\n<li><strong>mode</strong> : URL의 해쉬 값 제거 속성</li>\n</ul>\n<p>이 두개를 통해서 다음과 정의할 수 있습니다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">,</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">LoginComponent</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">HomeComponent</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>해당 코드를 통해서 URL 값이 <code class=\"language-text\">/login</code>이거나 <code class=\"language-text\">/home</code> 일때 각각의 로그인 컴포넌트와 홈 컴포넌트의 데이터를 받아옵니다.</p>\n<h3 id=\"router-view\"><a href=\"#router-view\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>router-view</h3>\n<p>위에서 브라우저의 주소 창에서 URL이 변경되면, 앞에서 정의한 routes 속성에 따라 해당 컴포넌트가 화면에 뿌려집니다. 이 때 뿌려지는 위치가 템플릿의 <code class=\"language-text\">&lt;router-view&gt;</code>입니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- LoginComponent 또는 HomeComponent --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code class=\"language-text\">/login</code>은 로그인 컴포넌트, <code class=\"language-text\">/home</code>은 홈 컴포넌트를 화면에 표시합니다.</p>\n<h3 id=\"router-link\"><a href=\"#router-link\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>router-link</h3>\n<p><code class=\"language-text\">&lt;router-link&gt;</code>는 화면에서 특정 링크를 클릭해서 페이지를 이동할 수 있게하는 기능입니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>이동할 URL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>이를 실제 코드로 구현하면 다음과 같습니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>해당 코드 실행시 <code class=\"language-text\">&lt;a&gt;</code> 태그로 변환됩니다.</p>\n<h3 id=\"원본-코드\"><a href=\"#%EC%9B%90%EB%B3%B8-%EC%BD%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>원본 코드</h3>\n<p>해당원본 코드는 다음의 링크를 참고하시면 좋습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-lean-vue-js/blob/master/playground-complete/router.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">router.html</a></li>\n</ul>\n<p>좀 더 자세하게 공부하려면.</p>\n<ul>\n<li><a href=\"https://joshua1988.github.io/web-development/vuejs/vue-router-navigation-guards/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Captain Pangyo님의 글</a></li>\n</ul>\n<br/>\n<h2 id=\"http-라이브러리와-ajax-vue-resource\"><a href=\"#http-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%99%80-ajax-vue-resource\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTP 라이브러리와 Ajax, Vue Resource</h2>\n<h3 id=\"ajax\"><a href=\"#ajax\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ajax</h3>\n<p>Ajax의 정의는 JavaScript의 라이브러리 중 하나이며 Asynchronous Javascript And Xml(비동기식 자바스크립트와 xml)의 약자입니다. 브라우저가 가지고있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고도 페이지의 일부만을 위한 데이터를 로드하는 기법입니다. </p>\n<p>이를 정리하면 <strong>JavaScript를 사용한 비동기 통신, 클라이언트와 서버간에 XML 데이터를 주고받는 기술</strong>로 정의할 수 있습니다.</p>\n<h4 id=\"비동기-처리란\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>비동기 처리란?</h4>\n<p>자바스크립트의 비동기 처리란 특정 코드의 연산이 끝날 때까지 코드의 실행을 멈추지 않고, 다음 코드를 먼저 실행하는 자바스크립트의 특성을 의미합니다. </p>\n<p>좀 더 자세하게 볼려면.</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/Ajax\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ajax 정의</a></li>\n<li><a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue Resource Git</a></li>\n</ul>\n<h3 id=\"axios\"><a href=\"#axios\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Axios</h3>\n<p>Axios(액시오스)는 <strong>뷰에서 권고하는 HTTP 통신 라이브러리</strong>입니다. <strong>Promise 기반의 HTTP 통신 라이브러리이며 상대적으로 다른 HTTP 통신 라이브러리들에 비해 문서화가 잘되어 있고 API가 다양</strong>합니다.</p>\n<ul>\n<li><a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Axios Git</a></li>\n</ul>\n<h3 id=\"자바스크립트-비동기-처리-패턴\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>자바스크립트 비동기 처리 패턴</h3>\n<ol>\n<li>callback</li>\n<li>promise</li>\n<li>promise + generator</li>\n<li>async &#x26; await</li>\n</ol>\n<p>좀 더 자세하게 보려면.</p>\n<ul>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 비동기 처리와 콜백 함수</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 Prmoise 이해하기</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/js-async-await/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 async와 await</a></li>\n</ul>\n<h3 id=\"axios-설치-방법\"><a href=\"#axios-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Axios 설치 방법</h3>\n<p>프로젝트에 액시오스를 설치하는 방법은 CDN 방식과 NPM 방식 2가지가 있습니다.</p>\n<h4 id=\"cdn-방식\"><a href=\"#cdn-%EB%B0%A9%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDN 방식</h4>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"npm-방식\"><a href=\"#npm-%EB%B0%A9%EC%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NPM 방식</h4>\n<pre class=\"language-text\"><code class=\"language-text\">npm install axios</code></pre>\n<h3 id=\"axios-사용-방법\"><a href=\"#axios-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Axios 사용 방법</h3>\n<p>라이브러리를 설치하면 <code class=\"language-text\">axios</code> 변수에 접근할 수 있습니다. 이 <code class=\"language-text\">axios</code>를 통해서 아래와 같이 HTTP GET 요청을 날릴 수 있습니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fetchData<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>get data<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">fetchData</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://jsonplaceholder.typicode.com/users/'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>해당 코드를 실행해보면, get data 버튼 클릭시 사용자 정보를 받아옵니다.</p>\n<ul>\n<li>Tip) function안의 this와 .then 안에 있는 this는 바라보고 있는 것이 다릅니다.</li>\n</ul>\n<p>해당 요청에 대해 좀 더 자세하게 확인할려면.</p>\n<ul>\n<li><a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jsonplaceholder 사이트</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/translation/javascript/how-js-works-inside-engine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 동작 원리</a></li>\n<li><img src=\"https://user-images.githubusercontent.com/42582516/102364902-52e44e80-3ffa-11eb-9f59-97c20d7b2a11.png\" alt=\"HTTP 통신 구조\"></li>\n</ul>\n<h3 id=\"원본-코드-1\"><a href=\"#%EC%9B%90%EB%B3%B8-%EC%BD%94%EB%93%9C-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>원본 코드</h3>\n<ul>\n<li><a href=\"https://github.com/Azderica/Study-lean-vue-js/blob/master/playground-complete/axios.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios.html</a></li>\n</ul>\n"}}]}}},"context":{}}