{"hash":"789c289f730ce10c0bf627a2164c6d2e51781270","data":{"tag":{"title":"Repository","belongsTo":{"edges":[{"node":{"title":"[Java] DAO, DTO, Repository을 이해하자","path":"/00-java-repositorys/","date":"1. November 2020","timeToRead":5,"description":" dao, dto, repository에 대한 기본적인 내용을 정리합니다. ","content":"<h1 id=\"dao-dto-repository-entity-class를-이해하기\"><a href=\"#dao-dto-repository-entity-class%EB%A5%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DAO, DTO, Repository, Entity Class를 이해하기</h1>\n<p>일반적으로 스프링 프로젝트 파일에 이름을 정할때, DTO, Repository, Entity 등의 이름이 들어가는 것을 알 수 있는데, 좀 더 자세하게 이 정의에 대해서 알고 싶어졌다.</p>\n<p>스프링을 사용한 웹앱의 경우 DAO, DTO, Repository, Entity를 사용하여 데이터를 다루며 스프링부트의 경우 내장 톰캣을 통해 서블릿을 관리하고 이를 컨트롤러에서 각 어노테이션을 통해 매핑한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97795536-b5e87480-1c4a-11eb-9439-89d9558150da.png\" alt=\"image\"></p>\n<br/>\n<h2 id=\"repository\"><a href=\"#repository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Repository</h2>\n<ul>\n<li>MVC 패턴에서 모델에 해당하는 부분으로 POJO로는 접근불가능하다.</li>\n<li>Persistence Layer와 1:1 매칭이 가능하다.</li>\n<li>Java Persistenc API 구현체를 통해서 자바 객체에 접근할 수 있다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberRepository</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">EntityManager</span> em<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    em<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>해당 코드는 JPA 구현체가 Entity Model 객체를 사용해서 DB에 접근한다.</p>\n<blockquote>\n<p>POJO란.</p>\n<ul>\n<li>간단하게 설명하자면, \"getter / setter를 가진 단순한 자바 오프젝트\"이며 의존성이 없고, 테스트도 용이하며 추후 수정이 편리한 오프젝트라고 설명할 수 있을 것 같다/</li>\n<li>좀 더 자세하게 설명하면 더 복잡해서 POJO에 대한 글은 다음에 따로 정리하겠다.</li>\n</ul>\n</blockquote>\n<br/>\n<h2 id=\"daodata-access-object\"><a href=\"#daodata-access-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DAO(Data Access Object)</h2>\n<ul>\n<li>원래 DB의 데이터(필드)와 프로그래밍 언어는 패러다임의 불일치로 인해 사용할 수 없다. 이를 원래 사용할려면 별도의 SQL을 작성해서 SQL을 객체의 필드에 하나씩 매핑하거나 순수한 SQL을 작성하여 사용해야 한다.</li>\n</ul>\n<h3 id=\"entity\"><a href=\"#entity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Entity</h3>\n<ul>\n<li>하지만 별도의 Entity Class를 사용해서 클래스를 테이블과 1:1 매칭할 수 있다. 이러한 Entity Class를 <strong>도메인</strong>이라고 하며 가장 DB와 가까운 클래스이다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// PK</span>\n\n    <span class=\"token annotation punctuation\">@NotEmpty</span>\n    <span class=\"token annotation punctuation\">@NotNull</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span> <span class=\"token comment\">// 내장 타입 임베딩</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@JsonIgnore</span>\n    <span class=\"token annotation punctuation\">@OneToMany</span> <span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"member\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span> orders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>다음은 예시 코드이다.</p>\n<ul>\n<li>Entity의 각 필드는 DB 테이블과 1:1매칭되며 PK를 가진다.</li>\n<li>Entity는 순수한 도메인 로직과 비지니스 로직만 가지고 있어야한다.</li>\n<li>Entity는 DB의 데이터를 전달해주고 Service에서 사용할 비즈니스 로직만을 가져야한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span> </code></pre>\n<p>다음 코드는 서비스 계층의 Repository를 사용한 코드이다.</p>\n<br/>\n<h2 id=\"dtodata-transfer-object\"><a href=\"#dtodata-transfer-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DTO(Data Transfer Object)</h2>\n<ul>\n<li>Entity를 통해 DB에서 데이터를 꺼내왔지만 데이터를 접근해야하는 경우 문제가 있다.</li>\n<li>Controller와 Presentation Layer는 클라이언트와 직접 만나며, Entity는 프레젠테이션 계층과 완전히 분리되어야 한다.</li>\n<li>이러한 경우에 DTO를 사용한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberDto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>이러한 경우 다음과 같이 DTO를 사용한다.</p>\n<p>특징은 다음과 같다.</p>\n<ul>\n<li>Getter/Setter가 없다.</li>\n<li>Wrapping 된 순수한 데이터 객체</li>\n<li>Entity에 직접 접근하지 않으므로, Entity 변경시, DTO만 변경하면 된다.</li>\n</ul>\n<br/>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>결론.</h2>\n<p>정리하자면 스프링 프로젝트는 다음과 같은 구조를 가진다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/97795536-b5e87480-1c4a-11eb-9439-89d9558150da.png\" alt=\"image\"></p>\n<p>구성은 다음 4개와 같다.</p>\n<h3 id=\"domainentity\"><a href=\"#domainentity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Domain(Entity)</h3>\n<ul>\n<li>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Getter</span> <span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>DB 테이블과 1:1 매칭된다.</li>\n</ul>\n<h3 id=\"repositorydao\"><a href=\"#repositorydao\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Repository(DAO)</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberRepository</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">EntityManager</span> em<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>Entity를 통해 데이터를 DB에 저장된다.</li>\n<li>엔티티는 DB의 데이터와 매칭되는 것 </li>\n<li>실제 DB에 데이터를 저장하는 건 Repository 클래스의 Entity Manager를 통해 이루어진다</li>\n</ul>\n<h3 id=\"service\"><a href=\"#service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>readOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>프레젠테이션(뷰)에서 엔티티에 직접 접근하지않고 비즈니스 로직을 처리할 수 있도록하는 계층이다.</li>\n<li>Repository에 정의된 비즈니스 로직을 처리하거나 엔티티에 접근한다.</li>\n</ul>\n<h3 id=\"controller\"><a href=\"#controller\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Controller</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span> <span class=\"token comment\">// Response + Request</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberApiController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberService</span> memberService<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api/v1/members\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemberDto</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">memberV2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre>\n<ul>\n<li>프레젠테이션 계층으로 클라이언트의 요청을 처리한다.</li>\n<li>엔티티는 서비스에 의해 추상화되어 직접 접근 불가능하다.</li>\n<li>서비스에 정의된 비즈니스 로직을 호출한다.</li>\n<li>ResponseBody에 데이터를 담아 반환해준다</li>\n</ul>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html</a></li>\n<li><a href=\"https://velog.io/@agugu95/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%8C%A8%ED%84%B4%EA%B3%BC-DAO-DTO-Repository\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@agugu95/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%8C%A8%ED%84%B4%EA%B3%BC-DAO-DTO-Repository</a></li>\n<li><a href=\"https://shinsunyoung.tistory.com/42\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shinsunyoung.tistory.com/42</a></li>\n</ul>\n"}}]}}},"context":{}}