{"hash":"c02c31c79a05373d3796f8d9d80ca9ef32b474be","data":{"tag":{"title":"ORM","belongsTo":{"edges":[{"node":{"title":"[Spring] ORM에 대해 정리하기","path":"/00-spring-orm/","date":"2. April 2021","timeToRead":1,"description":"JPA, ORM에 대해 정리합니다. ","content":"<h1 id=\"spring-orm에-대해\"><a href=\"#spring-orm%EC%97%90-%EB%8C%80%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spring ORM에 대해</h1>\n<p>ORM에 대해 정리합니다.</p>\n"}},{"node":{"title":"[Java] JPA에 대해 정리하기","path":"/00-java-jpa/","date":"22. March 2021","timeToRead":5,"description":"JPA에 대해 정리합니다. ","content":"<h1 id=\"jpa\"><a href=\"#jpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA</h1>\n<p>오늘은 앞으로 공부할 QueryDsl, Jooq 등의 개념을 공부하기 위해서 앞서 가장 기본적인 내용을 정리합니다.</p>\n<h2 id=\"jpa-개념\"><a href=\"#jpa-%EA%B0%9C%EB%85%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 개념</h2>\n<p>JPA는 <strong>Java Persistence API</strong> 의 약자로서, RDBMS와 OOP 객체 사이의 불일치에서 오는 패러다임을 해결하기 위해서 만들어졌습니다. 이러한 JPA는 ORM(Object-Relational Mapping) 기술입니다.</p>\n<h3 id=\"orm\"><a href=\"#orm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ORM?</h3>\n<p>ORM이란 Object Relational Mapping, 객체-관계 매핑의 줄임말입니다.</p>\n<p>좀 더 풀어 설명하자면 OOP의 객체 구현 클래스와 RDBMS에서 사용하는 테이블을 자동으로 매핑하는 것을 의미합니다. 이 때, 클래스와 테이블은 서로 기존부터 호환 가능성을 두고 만들어진 것이 아니므로 불일치가 발생하는데 이를 ORM을 통해서 객체 간의 관계를 바탕으로 SQL문을 자동으로 생성하여 불일치를 해결합니다. 이 방법을 통해서 SQL문을 짤 필요없이 객체를 통해 간접적으로 데이터베이스를 조작할 수 있습니다.</p>\n<p>이를 이미지로 나타내면 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/111995242-0ca00d80-8b5c-11eb-9662-7f60f1dfc0c7.png\" alt=\"image\"></p>\n<p>좀 더 자세한 ORM은 다른 글에서 따로 정리하겠습니다.</p>\n<h3 id=\"그래서-jpa를-좀-더-설명하자면\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-jpa%EB%A5%BC-%EC%A2%80-%EB%8D%94-%EC%84%A4%EB%AA%85%ED%95%98%EC%9E%90%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>그래서 JPA를 좀 더 설명하자면.</h3>\n<p>앞서 이야기 나온 ORM 기술을 구현하기 위해 나온 프레임워크가 Hibernate이고, 그 외에도 다른 프레임워크(CoCobase, TopLink) 등이 등장했습니다. 이러한 ORM 구현 프레임워크에 대한 <strong>표준화</strong>가 필요하게 되었는데 이가 바로 JPA입니다.</p>\n<p>JPA는 어플리케이션과 DBMS 사이의 인터페이스 역할을 해주기 때문에. 개발자는 JPA 인터페이스에 맞춰우 구현되어 있는 기능을 사용하면 됩니다.</p>\n<p>이를 잘 표현한 이미지는 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/111996259-2b52d400-8b5d-11eb-8fdb-1f6a91096d4c.png\" alt=\"image\"></p>\n<p>다음과 같이, 개발자는 SQL를 직접 사용할 필요없이 사용할 수 있습니다.</p>\n<br/>\n<h2 id=\"jpa-동작-과정\"><a href=\"#jpa-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 동작 과정</h2>\n<p>JPA는 다음과 같이 동작합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/42582516/112302631-a394d300-8cde-11eb-8c1e-3693ae32a978.png\" alt=\"image\"></p>\n<p>JPA는 애플리케이션과 JDBC 사이에서 동작합니다.</p>\n<ul>\n<li>개발자가 JPA 사용시, JPA 내부에서 JDBC API를 사용하여 SQL을 호출하고 DB와 통신합니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpa를-사용해야하는-이유\"><a href=\"#jpa%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA를 사용해야하는 이유?</h2>\n<h3 id=\"1-sql-중심-개발---객체-중심-개발\"><a href=\"#1-sql-%EC%A4%91%EC%8B%AC-%EA%B0%9C%EB%B0%9C---%EA%B0%9D%EC%B2%B4-%EC%A4%91%EC%8B%AC-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. SQL 중심 개발 -> 객체 중심 개발</h3>\n<p>SQL 중심의 개발 문제를 해결합니다.</p>\n<p>SQL 중심의 개발 문제는 다음과 같습니다.</p>\n<ul>\n<li>지루한 코드가 반복됩니다.</li>\n<li>객체 지향과 RDB 간의 패러다임이 불일치됩니다.</li>\n<li>객체 지향은 상속 관계를 지원합니다.</li>\n<li>모델링 과정에서의 문제를 해결합니다.</li>\n<li>\n<p>객체 그래프 탐색에서의 문제를 해결합니다.</p>\n<ul>\n<li>SQL 중심 개발은 객체 그래프를 탐색할 수 없습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-생산성\"><a href=\"#2-%EC%83%9D%EC%82%B0%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 생산성</h3>\n<ul>\n<li>JPA을 사용함으로서 <code class=\"language-text\">java.collection</code>처럼 편하게 사용가능합니다.</li>\n<li>\n<p>간단한 CRUD를 제공합니다.</p>\n<ul>\n<li><code class=\"language-text\">jpa.persist</code>, <code class=\"language-text\">find</code>, <code class=\"language-text\">set~</code>, <code class=\"language-text\">jpa.remove</code></li>\n</ul>\n</li>\n<li>수정이 간단합니다.</li>\n</ul>\n<h3 id=\"3-유지보수\"><a href=\"#3-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 유지보수</h3>\n<ul>\n<li>기존처럼 모든 SQL을 수정할 필요가 없습니다.</li>\n<li>JPA에서는 필드만 추가하고, SQL은 JPA가 처리합니다.</li>\n</ul>\n<h3 id=\"4-패러다임-불일치의-해결\"><a href=\"#4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-%EB%B6%88%EC%9D%BC%EC%B9%98%EC%9D%98-%ED%95%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. 패러다임 불일치의 해결</h3>\n<ul>\n<li>상속, 연관관계, 객체 그래프 탐색, 비교와 같은 패러다임의 불일치 문제를 해결해줍니다.</li>\n</ul>\n<h3 id=\"5-성능적-이슈\"><a href=\"#5-%EC%84%B1%EB%8A%A5%EC%A0%81-%EC%9D%B4%EC%8A%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 성능적 이슈</h3>\n<ul>\n<li>JPA는 애플리케이션과 데이터베이스 사이에서 다양한 성능 최적화 기능을 제공합니다.</li>\n<li>Ex. 동일 데이터 find로 2번 접근하는 경우, 재사용을 통해서 사용합니다.</li>\n</ul>\n<h3 id=\"6-데이터-접근-추상화와-벤더-독립성\"><a href=\"#6-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC-%EC%B6%94%EC%83%81%ED%99%94%EC%99%80-%EB%B2%A4%EB%8D%94-%EB%8F%85%EB%A6%BD%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 데이터 접근 추상화와 벤더 독립성</h3>\n<ul>\n<li>애플리케이션은 처음 선택한 데이터베이스 기술에 종속되고 다른 데이터베이스로 변경하기 어렵습니다.</li>\n</ul>\n<br/>\n<h2 id=\"jpa-사용-방법\"><a href=\"#jpa-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JPA 사용 방법</h2>\n<p>다음과 같은 메소드 들이 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">flush()</code></p>\n<ul>\n<li>Persistence Context의 변경 내용을 데이터베이스에 반영합니다.</li>\n<li>일반적으로는 직접 사용하지는 않고, 자바 애플리케이션에서 커밋 명령이 들어왔을 때 자동으로 실행됩니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">detach()</code></p>\n<ul>\n<li>특정 Entity를 준영속 상태(영속 컨텍스트의 관리를 받지않음)로 바꿉니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">clear()</code></p>\n<ul>\n<li>Persistence Context를 초기화합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">close()</code></p>\n<ul>\n<li>Persistence Context를 종료합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">merge()</code></p>\n<ul>\n<li>준영속 상태의 엔티티 특징</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">find()</code></p>\n<ul>\n<li>식별자 값을 통해 Entity를 찾습니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">persist()</code></p>\n<ul>\n<li>생성도니 Entity를 Persistence Context와 DB에 저장합니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">remove()</code></p>\n<ul>\n<li>식별자 값을 통해 Entity를 삭제합니다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://spring.io/projects/spring-data-jpa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Data JPA Doc</a></li>\n<li><a href=\"https://tinkerbellbass.tistory.com/24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 기본 개념</a></li>\n<li><a href=\"https://doublesprogramming.tistory.com/257\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 기본 개념 2</a></li>\n<li><a href=\"https://blog.woniper.net/255\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA란 무엇인가</a></li>\n<li><a href=\"http://okminseok.blogspot.com/2019/09/jpa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 코드 없이 적는 기본 개념</a></li>\n<li><a href=\"https://geonlee.tistory.com/207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM의 장단점</a></li>\n<li><a href=\"https://gmlwjd9405.github.io/2019/08/04/what-is-jpa.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA란</a></li>\n</ul>\n"}}]}}},"context":{}}