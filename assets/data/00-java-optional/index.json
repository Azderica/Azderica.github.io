{"hash":"a43281d937e690ee41ca21913c539571e0d27905","data":{"post":{"title":"[Java] Java Optional","path":"/00-java-optional/","date":"14. December 2020","timeToRead":6,"tags":[{"id":"Java","title":"Java","path":"/tag/Java/"},{"id":"Optional","title":"Optional","path":"/tag/Optional/"},{"id":"Backend","title":"Backend","path":"/tag/Backend/"}],"description":"Java Optional 대해 정리합니다.","content":"<h1 id=\"java-optional\"><a href=\"#java-optional\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional</h1>\n<p>Java8에서 Optional이 적용이 되었으나 실질적으로 개발에서 잘 사용하지 못한다는 생각을 자주하였습니다. 오늘은 Optional을 공부해보면서 왜 이를 써야할까에 대해서 작성하겠습니다.</p>\n<h2 id=\"java-optional이란\"><a href=\"#java-optional%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional이란?</h2>\n<p><code class=\"language-text\">Java Optional</code>이란 \"<strong>존재할 수도 있지만 안 할수도 있는 객체</strong>\"입니다. 이를 좀더 풀어 설명한다면 null이 될 수도 있는 객체를 감싸고 있는 일종의 <code class=\"language-text\">Wrapper</code> 클래스입니다. 따라서 Optional 인스턴스는 모든 타입의 참조 변수를 저장할 수 있습니다.</p>\n<blockquote>\n<p>Wrapper 클래스 : 8개의 기본타입(type, short, int, ...)의 데이터를 객체로 포장해주는 클래스, 각각의 타입에 해당하는 데이터를 인수로 전달받아, 해당 값을 가지는 객체 </p>\n</blockquote>\n<br/>\n<h2 id=\"java-optional의-장점\"><a href=\"#java-optional%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional의 장점</h2>\n<p>여러 가지 장점이 있으나 다음과 같이 서술할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">Null Pointer Exception</code>을 유발할 수 있는 null 을 직접 다루지 않아도 됩니다.</li>\n<li>null 체크를 따로 하지 않아도 됩니다.</li>\n<li>명시적으로 해당 변수가 null일 수도 있다는 가능성을 표현할 수 있습니다. 따라서, 방어로직을 해결하면서 코드 가독성과 유지 보수성을 높일 수 있습니다.</li>\n</ul>\n<br/>\n<h2 id=\"java-optional의-사용법\"><a href=\"#java-optional%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Java Optional의 사용법</h2>\n<h3 id=\"optional-변수-선언\"><a href=\"#optional-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 변수 선언</h3>\n<p>Optional 변수는 제네릭을 제공하므로, 변수를 선언할 때 타입 파라미터에 따라 감쌀 수 있는 객체 타입을 결정할 수 있습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Customer 타입의 객체를 감쌀 수 있는 Optional 타입의 변수</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">></span></span> storeCustomer<span class=\"token punctuation\">;</span>   \n\n<span class=\"token comment\">// Member 타입의 객체를 감쌀 수 있는 Optional 타입의 변수</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMebmer<span class=\"token punctuation\">;</span></code></pre>\n<p>다음과 같이 변수를 선언할 수 있습니다. 코드의 스타일에 따라 \"opt\"와 같이 접두어를 붙여 Optional 타입의 변수를 표현할 수 있습니다.</p>\n<h3 id=\"optional-객체-생성\"><a href=\"#optional-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 객체 생성</h3>\n<p>Optional 객체를 선언하는 방법은 크게 3가지 방법으로 나눠집니다.</p>\n<h4 id=\"1-optionalempty\"><a href=\"#1-optionalempty\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Optional.empty()</h4>\n<p>비어 있는(null) Optional 객체를 얻습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"2-optionalofvalue\"><a href=\"#2-optionalofvalue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Optional.of(value)</h4>\n<p>null이 아닌 value의 값을 가지고 있는 Optional 객체를 생성합니다. null이 넘어오는 경우에는, Null Pointer Exception이 발생하므로, 주의해야합니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>dataMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"3-optionalofnullablevalue\"><a href=\"#3-optionalofnullablevalue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Optional.ofNullable(value)</h4>\n<p>null인지 아닌지 확신할 수 없는 객체를 담고 있는 Optional 객체를 생성합니다. 일종의 앞에 두개의 객체 생성법을 합친 방법이라고 이해하면 좋습니다.</p>\n<ul>\n<li><code class=\"language-text\">Optional.ofNullable(value)</code> = <code class=\"language-text\">Optinal.empty()</code> + <code class=\"language-text\">Optional.of(value)</code></li>\n</ul>\n<p>null이 넘어오는 경우에는 Null Pointer Exception이 발생하지 않고, <code class=\"language-text\">Optional.empty()</code>와 마찬가지로 비어있는 Optional 객체를 가져옵니다. 일반적으로 해당 객체가 null이 아닌지 자신이 없는 상황에서 사용하는 것이 좋습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>dataMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> optNotMember <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"optional-중간-처리\"><a href=\"#optional-%EC%A4%91%EA%B0%84-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 중간 처리</h3>\n<p>Optional 객체를 생성하고 바로 사용 가능한 메서드입니다. 아래의 메서드들은 다시 Optional을 반환하므로, 메서드 체이닝을 통해서 원하는 로직을 구성할 수 있습니다.</p>\n<h4 id=\"1-filter\"><a href=\"#1-filter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. filter()</h4>\n<p>해당 값이 참이면 해당 <code class=\"language-text\">필터</code>를 통과시키고 거짓이면 통과시키지 않습니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return \"true\"</span>\n<span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return \"no data\"</span></code></pre>\n<h4 id=\"2-map\"><a href=\"#2-map\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. map()</h4>\n<p>mapper 함수를 통해 입력값을 다른 값으로 변환하는 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> test <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchElementException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return 1 (number)</span></code></pre>\n<h4 id=\"3-flatmap\"><a href=\"#3-flatmap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. flatMap()</h4>\n<p>mapper 함수를 통해 입력값을 다른 값으로 변환하는 메서드입니다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print 'good'</span></code></pre>\n<h3 id=\"optional-객체-접근\"><a href=\"#optional-%EA%B0%9D%EC%B2%B4-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Optional 객체 접근</h3>\n<p>일반적으로 Optional 클래스에 담고 있는 객체를 꺼내오는 여러가지 방법이 있습니다. 자바에서는 이러한 다양한 인스턴스 메소드를 가져오는데, 자주 사용하는 메소드를 주로 설명하겠습니다. (<strong>객체가 존재하는 경우에는 동일하게 값을 가져옵니다.</strong>)</p>\n<h4 id=\"1-get\"><a href=\"#1-get\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. get()</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, <code class=\"language-text\">NoSuchElementException</code>의 예외를 던집니다.</li>\n</ul>\n<h4 id=\"2-orelset-other\"><a href=\"#2-orelset-other\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. orElse(T other)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 인자(other)를 반환합니다.</li>\n</ul>\n<h4 id=\"3-orelsegetsupplier-extends-t-other\"><a href=\"#3-orelsegetsupplier-extends-t-other\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. orElseGet(Supplier&#x3C;? extends T> other)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 함수형 인자(other)을 통해 생성된 객체를 반환합니다.</li>\n<li>일종의 <code class=\"language-text\">orElse(T other)</code>의 lazy 버전입니다. 비어있는 경우에만 호출되므로 <code class=\"language-text\">orElse(T other)</code>보다 성능적으로 좋을 것으로 예상할 수 있습니다.</li>\n</ul>\n<h4 id=\"4-orelsethrowsupplier-extends-x-exceptionsupplier\"><a href=\"#4-orelsethrowsupplier-extends-x-exceptionsupplier\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. orElseThrow(Supplier&#x3C;? extends X> exceptionSupplier)</h4>\n<ul>\n<li>비어있는 Optional 객체의 경우, 넘어온 함수형 인자를 통해 생성된 예외를 던집니다.</li>\n</ul>\n<h4 id=\"5-ifpresentconsumer-super-t-consumer\"><a href=\"#5-ifpresentconsumer-super-t-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. ifPresent(Consumer&#x3C;? super T> consumer);</h4>\n<ul>\n<li>최종적으로 연산을 끝낸 후에 값이 비어있지 않으면 입력값으로 주어집니다.</li>\n<li>중간 연산 중 비어있는 결과가 있는 경우 ifPresent(consumer)는 수행하지 않습니다.</li>\n</ul>\n<h4 id=\"6-ifpresent\"><a href=\"#6-ifpresent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. ifPresent()</h4>\n<ul>\n<li>최종 연산 후 객체가 존재하는지 여부를 파악합니다.</li>\n</ul>\n<br/>\n<h2 id=\"마무리\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마무리</h2>\n<p>자바8에서 등장한 Optional 클래스에 대해서 정리해보았습니다. 다음 글에는 자바9와 자바 10에서 추가된 Optional 메서드에 대해 작성하고 이를 이용한 코드를 좀 더 본격적으로 다루어보겠습니다.</p>\n<hr>\n<p><strong>출처</strong></p>\n<ul>\n<li><a href=\"http://www.tcpschool.com/java/java_api_wrapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_api_wrapper</a></li>\n<li><a href=\"https://www.daleseo.com/java8-optional-after/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.daleseo.com/java8-optional-after/</a></li>\n<li><a href=\"https://jdm.kr/blog/234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jdm.kr/blog/234</a></li>\n<li><a href=\"https://daddyprogrammer.org/post/1988/java-optional/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://daddyprogrammer.org/post/1988/java-optional/</a></li>\n<li><a href=\"http://homoefficio.github.io/2019/10/03/Java-Optional-%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%93%B0%EA%B8%B0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://homoefficio.github.io/2019/10/03/Java-Optional-%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%93%B0%EA%B8%B0/</a></li>\n<li><a href=\"http://www.tcpschool.com/java/java_stream_optional\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tcpschool.com/java/java_stream_optional</a></li>\n</ul>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg","size":{"width":680,"height":440},"sizes":"(max-width: 680px) 100vw, 680px","srcset":["/assets/static/JavaLogo.b760ceb.ff2f810e541c19536d64674fe5520928.jpg 680w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 680 440' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9716c389a175768fda62e76437e55968'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9716c389a175768fda62e76437e55968)' width='680' height='440' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAApAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAwECBAUGAAj/xAAtEAACAAQFAgUDBQAAAAAAAAABAgADBBEFEiExQRMiBhRRYXEyQpEVM2Jygf/EABkBAQEBAQEBAAAAAAAAAAAAAAEAAgQDBf/EABsRAAMBAAMBAAAAAAAAAAAAAAABAhESITET/9oADAMBAAIRAxEAPwDz/l944JcQUS2Jh4ljmPonK6IwGsO2iW0pSgNokYPhL4pXrTJOlyVyPMebM2RFUsxtybA2A3OkRKtK3eFycCLfxTh6YZj9XQy1dPLN0WVxYhlFjf1N9bjTXS41NaBaBE3gLLYe8JvBspbYQ3psvEIaSkXK59CIay2a0WEuUqrYgEneE8ujMAbj4hOf6dkS2lo1XgvBfOIzVdGehNu0mrQtmRlNivYbgEHkcRR9FU%2b2/vGywqi8PfoNJUYrMCVYlzn6ciYVnTe/s1GnBFj63grwZvX0Vfi%2bjmSqiu69LNmiYZSy6yaG0yi3aW1NwAuvA/2Ml5fL/KNzj9D4flYZVDDcRmVNVLnIsnO7967OxU6AHcRl1kD7iTEvCqmmV1rcWhyS7/V%2bIsukliMoiOZRRrkacGEy66LHy6e/5gq0qKuYrrxrABuIPM2jOmlKDSqdDqUFoWbKCaoLLyBCDYQjfSfiDT04LBGRXHcLxHmU5GqG49IUbR0JjjoFVJbLbWJExQFAG20Bb94f1jpuw%2bYmSnEf/9k=' /%3e%3c/svg%3e"}}},"context":{}}